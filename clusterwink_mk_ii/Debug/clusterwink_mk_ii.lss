
clusterwink_mk_ii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000021b8  0000224c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ed  0080013e  0080013e  0000228a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000228a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  000022fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013d2  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b31  00000000  00000000  00003866  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001421  00000000  00000000  00004397  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000071c  00000000  00000000  000057b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000922  00000000  00000000  00005ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ef7  00000000  00000000  000067f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000076ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__ctors_end>
       4:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_1>
       8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      14:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__vector_5>
      18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      24:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__vector_9>
      28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      40:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      4c:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__vector_19>
      50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      68:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      6c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      70:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      74:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      78:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      7c:	6c 05       	cpc	r22, r12
      7e:	85 05       	cpc	r24, r5
      80:	9e 05       	cpc	r25, r14
      82:	58 06       	cpc	r5, r24
      84:	73 06       	cpc	r7, r19
      86:	73 06       	cpc	r7, r19
      88:	73 06       	cpc	r7, r19
      8a:	e8 06       	cpc	r14, r24
      8c:	f5 06       	cpc	r15, r21
      8e:	02 07       	cpc	r16, r18
      90:	1d 07       	cpc	r17, r29
      92:	06 08       	sbc	r0, r6
      94:	ae 08       	sbc	r10, r14
      96:	ae 08       	sbc	r10, r14
      98:	ae 08       	sbc	r10, r14
      9a:	ae 08       	sbc	r10, r14
      9c:	ae 08       	sbc	r10, r14
      9e:	ae 08       	sbc	r10, r14
      a0:	ae 08       	sbc	r10, r14
      a2:	ae 08       	sbc	r10, r14
      a4:	ae 08       	sbc	r10, r14
      a6:	ae 08       	sbc	r10, r14
      a8:	ae 08       	sbc	r10, r14
      aa:	09 08       	sbc	r0, r9
      ac:	16 08       	sbc	r1, r6
      ae:	23 08       	sbc	r2, r3
      b0:	ae 08       	sbc	r10, r14
      b2:	ae 08       	sbc	r10, r14
      b4:	ae 08       	sbc	r10, r14
      b6:	ae 08       	sbc	r10, r14
      b8:	ae 08       	sbc	r10, r14
      ba:	ae 08       	sbc	r10, r14
      bc:	ae 08       	sbc	r10, r14
      be:	ae 08       	sbc	r10, r14
      c0:	ae 08       	sbc	r10, r14
      c2:	ae 08       	sbc	r10, r14
      c4:	ae 08       	sbc	r10, r14
      c6:	ae 08       	sbc	r10, r14
      c8:	ae 08       	sbc	r10, r14
      ca:	2d 08       	sbc	r2, r13
      cc:	38 08       	sbc	r3, r8
      ce:	5b 08       	sbc	r5, r11

000000d0 <__ctors_end>:
      d0:	11 24       	eor	r1, r1
      d2:	1f be       	out	0x3f, r1	; 63
      d4:	cf ef       	ldi	r28, 0xFF	; 255
      d6:	d8 e0       	ldi	r29, 0x08	; 8
      d8:	de bf       	out	0x3e, r29	; 62
      da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
      dc:	11 e0       	ldi	r17, 0x01	; 1
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	e8 eb       	ldi	r30, 0xB8	; 184
      e4:	f1 e2       	ldi	r31, 0x21	; 33
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
      e8:	05 90       	lpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	ae 33       	cpi	r26, 0x3E	; 62
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
      f2:	22 e0       	ldi	r18, 0x02	; 2
      f4:	ae e3       	ldi	r26, 0x3E	; 62
      f6:	b1 e0       	ldi	r27, 0x01	; 1
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	ab 32       	cpi	r26, 0x2B	; 43
      fe:	b2 07       	cpc	r27, r18
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
     102:	0e 94 cb 08 	call	0x1196	; 0x1196 <main>
     106:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <_exit>

0000010a <__bad_interrupt>:
     10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
    cli();
     116:	f8 94       	cli
    return 1;
     118:	81 e0       	ldi	r24, 0x01	; 1
}
     11a:	df 91       	pop	r29
     11c:	cf 91       	pop	r28
     11e:	08 95       	ret

00000120 <__iRestore>:
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	00 d0       	rcall	.+0      	; 0x126 <__iRestore+0x6>
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
     12a:	9a 83       	std	Y+2, r25	; 0x02
     12c:	89 83       	std	Y+1, r24	; 0x01
    SREG = *__s;
     12e:	8f e5       	ldi	r24, 0x5F	; 95
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	29 81       	ldd	r18, Y+1	; 0x01
     134:	3a 81       	ldd	r19, Y+2	; 0x02
     136:	f9 01       	movw	r30, r18
     138:	20 81       	ld	r18, Z
     13a:	fc 01       	movw	r30, r24
     13c:	20 83       	st	Z, r18
    __asm__ volatile ("" ::: "memory");
}
     13e:	00 00       	nop
     140:	0f 90       	pop	r0
     142:	0f 90       	pop	r0
     144:	df 91       	pop	r29
     146:	cf 91       	pop	r28
     148:	08 95       	ret

0000014a <RingBuffer_InitBuffer>:
		 *  by re-initializing them using this function.
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
     14e:	00 d0       	rcall	.+0      	; 0x150 <RingBuffer_InitBuffer+0x6>
     150:	00 d0       	rcall	.+0      	; 0x152 <RingBuffer_InitBuffer+0x8>
     152:	cd b7       	in	r28, 0x3d	; 61
     154:	de b7       	in	r29, 0x3e	; 62
     156:	9c 83       	std	Y+4, r25	; 0x04
     158:	8b 83       	std	Y+3, r24	; 0x03
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     15a:	8f e5       	ldi	r24, 0x5F	; 95
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	fc 01       	movw	r30, r24
     160:	80 81       	ld	r24, Z
     162:	8a 83       	std	Y+2, r24	; 0x02
     164:	0e 94 87 00 	call	0x10e	; 0x10e <__iCliRetVal>
     168:	89 83       	std	Y+1, r24	; 0x01
     16a:	19 c0       	rjmp	.+50     	; 0x19e <RingBuffer_InitBuffer+0x54>
			{
				Buffer->In    = Buffer->Buffer;
     16c:	2b 81       	ldd	r18, Y+3	; 0x03
     16e:	3c 81       	ldd	r19, Y+4	; 0x04
     170:	8b 81       	ldd	r24, Y+3	; 0x03
     172:	9c 81       	ldd	r25, Y+4	; 0x04
     174:	80 58       	subi	r24, 0x80	; 128
     176:	9f 4f       	sbci	r25, 0xFF	; 255
     178:	fc 01       	movw	r30, r24
     17a:	31 83       	std	Z+1, r19	; 0x01
     17c:	20 83       	st	Z, r18
				Buffer->Out   = Buffer->Buffer;
     17e:	2b 81       	ldd	r18, Y+3	; 0x03
     180:	3c 81       	ldd	r19, Y+4	; 0x04
     182:	8b 81       	ldd	r24, Y+3	; 0x03
     184:	9c 81       	ldd	r25, Y+4	; 0x04
     186:	8e 57       	subi	r24, 0x7E	; 126
     188:	9f 4f       	sbci	r25, 0xFF	; 255
     18a:	fc 01       	movw	r30, r24
     18c:	31 83       	std	Z+1, r19	; 0x01
     18e:	20 83       	st	Z, r18
				Buffer->Count = 0;
     190:	8b 81       	ldd	r24, Y+3	; 0x03
     192:	9c 81       	ldd	r25, Y+4	; 0x04
     194:	8c 57       	subi	r24, 0x7C	; 124
     196:	9f 4f       	sbci	r25, 0xFF	; 255
     198:	fc 01       	movw	r30, r24
     19a:	10 82       	st	Z, r1
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     19c:	19 82       	std	Y+1, r1	; 0x01
     19e:	89 81       	ldd	r24, Y+1	; 0x01
     1a0:	88 23       	and	r24, r24
     1a2:	21 f7       	brne	.-56     	; 0x16c <RingBuffer_InitBuffer+0x22>
     1a4:	ce 01       	movw	r24, r28
     1a6:	02 96       	adiw	r24, 0x02	; 2
     1a8:	0e 94 90 00 	call	0x120	; 0x120 <__iRestore>
			{
				Buffer->In    = Buffer->Buffer;
				Buffer->Out   = Buffer->Buffer;
				Buffer->Count = 0;
			}
		}
     1ac:	00 00       	nop
     1ae:	0f 90       	pop	r0
     1b0:	0f 90       	pop	r0
     1b2:	0f 90       	pop	r0
     1b4:	0f 90       	pop	r0
     1b6:	df 91       	pop	r29
     1b8:	cf 91       	pop	r28
     1ba:	08 95       	ret

000001bc <RingBuffer_Insert>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	00 d0       	rcall	.+0      	; 0x1c2 <RingBuffer_Insert+0x6>
     1c2:	00 d0       	rcall	.+0      	; 0x1c4 <RingBuffer_Insert+0x8>
     1c4:	1f 92       	push	r1
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
     1ca:	9c 83       	std	Y+4, r25	; 0x04
     1cc:	8b 83       	std	Y+3, r24	; 0x03
     1ce:	6d 83       	std	Y+5, r22	; 0x05
			*Buffer->In = Data;
     1d0:	8b 81       	ldd	r24, Y+3	; 0x03
     1d2:	9c 81       	ldd	r25, Y+4	; 0x04
     1d4:	80 58       	subi	r24, 0x80	; 128
     1d6:	9f 4f       	sbci	r25, 0xFF	; 255
     1d8:	fc 01       	movw	r30, r24
     1da:	80 81       	ld	r24, Z
     1dc:	91 81       	ldd	r25, Z+1	; 0x01
     1de:	2d 81       	ldd	r18, Y+5	; 0x05
     1e0:	fc 01       	movw	r30, r24
     1e2:	20 83       	st	Z, r18
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
     1e4:	8b 81       	ldd	r24, Y+3	; 0x03
     1e6:	9c 81       	ldd	r25, Y+4	; 0x04
     1e8:	80 58       	subi	r24, 0x80	; 128
     1ea:	9f 4f       	sbci	r25, 0xFF	; 255
     1ec:	fc 01       	movw	r30, r24
     1ee:	80 81       	ld	r24, Z
     1f0:	91 81       	ldd	r25, Z+1	; 0x01
     1f2:	9c 01       	movw	r18, r24
     1f4:	2f 5f       	subi	r18, 0xFF	; 255
     1f6:	3f 4f       	sbci	r19, 0xFF	; 255
     1f8:	8b 81       	ldd	r24, Y+3	; 0x03
     1fa:	9c 81       	ldd	r25, Y+4	; 0x04
     1fc:	80 58       	subi	r24, 0x80	; 128
     1fe:	9f 4f       	sbci	r25, 0xFF	; 255
     200:	fc 01       	movw	r30, r24
     202:	31 83       	std	Z+1, r19	; 0x01
     204:	20 83       	st	Z, r18
     206:	8b 81       	ldd	r24, Y+3	; 0x03
     208:	9c 81       	ldd	r25, Y+4	; 0x04
     20a:	80 58       	subi	r24, 0x80	; 128
     20c:	9f 4f       	sbci	r25, 0xFF	; 255
     20e:	fc 01       	movw	r30, r24
     210:	20 81       	ld	r18, Z
     212:	31 81       	ldd	r19, Z+1	; 0x01
     214:	8b 81       	ldd	r24, Y+3	; 0x03
     216:	9c 81       	ldd	r25, Y+4	; 0x04
     218:	80 58       	subi	r24, 0x80	; 128
     21a:	9f 4f       	sbci	r25, 0xFF	; 255
     21c:	28 17       	cp	r18, r24
     21e:	39 07       	cpc	r19, r25
     220:	49 f4       	brne	.+18     	; 0x234 <RingBuffer_Insert+0x78>
			  Buffer->In = Buffer->Buffer;
     222:	2b 81       	ldd	r18, Y+3	; 0x03
     224:	3c 81       	ldd	r19, Y+4	; 0x04
     226:	8b 81       	ldd	r24, Y+3	; 0x03
     228:	9c 81       	ldd	r25, Y+4	; 0x04
     22a:	80 58       	subi	r24, 0x80	; 128
     22c:	9f 4f       	sbci	r25, 0xFF	; 255
     22e:	fc 01       	movw	r30, r24
     230:	31 83       	std	Z+1, r19	; 0x01
     232:	20 83       	st	Z, r18

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     234:	8f e5       	ldi	r24, 0x5F	; 95
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	fc 01       	movw	r30, r24
     23a:	80 81       	ld	r24, Z
     23c:	8a 83       	std	Y+2, r24	; 0x02
     23e:	0e 94 87 00 	call	0x10e	; 0x10e <__iCliRetVal>
     242:	89 83       	std	Y+1, r24	; 0x01
     244:	0f c0       	rjmp	.+30     	; 0x264 <RingBuffer_Insert+0xa8>
			{
				Buffer->Count++;
     246:	8b 81       	ldd	r24, Y+3	; 0x03
     248:	9c 81       	ldd	r25, Y+4	; 0x04
     24a:	8c 57       	subi	r24, 0x7C	; 124
     24c:	9f 4f       	sbci	r25, 0xFF	; 255
     24e:	fc 01       	movw	r30, r24
     250:	80 81       	ld	r24, Z
     252:	21 e0       	ldi	r18, 0x01	; 1
     254:	28 0f       	add	r18, r24
     256:	8b 81       	ldd	r24, Y+3	; 0x03
     258:	9c 81       	ldd	r25, Y+4	; 0x04
     25a:	8c 57       	subi	r24, 0x7C	; 124
     25c:	9f 4f       	sbci	r25, 0xFF	; 255
     25e:	fc 01       	movw	r30, r24
     260:	20 83       	st	Z, r18
			*Buffer->In = Data;
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->In = Buffer->Buffer;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     262:	19 82       	std	Y+1, r1	; 0x01
     264:	89 81       	ldd	r24, Y+1	; 0x01
     266:	88 23       	and	r24, r24
     268:	71 f7       	brne	.-36     	; 0x246 <RingBuffer_Insert+0x8a>
     26a:	ce 01       	movw	r24, r28
     26c:	02 96       	adiw	r24, 0x02	; 2
     26e:	0e 94 90 00 	call	0x120	; 0x120 <__iRestore>
			{
				Buffer->Count++;
			}
		}
     272:	00 00       	nop
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	0f 90       	pop	r0
     27c:	0f 90       	pop	r0
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	08 95       	ret

00000284 <RingBuffer_Remove>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to retrieve from
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	00 d0       	rcall	.+0      	; 0x28a <RingBuffer_Remove+0x6>
     28a:	00 d0       	rcall	.+0      	; 0x28c <RingBuffer_Remove+0x8>
     28c:	1f 92       	push	r1
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
     292:	9d 83       	std	Y+5, r25	; 0x05
     294:	8c 83       	std	Y+4, r24	; 0x04
			RingBuff_Data_t Data = *Buffer->Out;
     296:	8c 81       	ldd	r24, Y+4	; 0x04
     298:	9d 81       	ldd	r25, Y+5	; 0x05
     29a:	8e 57       	subi	r24, 0x7E	; 126
     29c:	9f 4f       	sbci	r25, 0xFF	; 255
     29e:	fc 01       	movw	r30, r24
     2a0:	80 81       	ld	r24, Z
     2a2:	91 81       	ldd	r25, Z+1	; 0x01
     2a4:	fc 01       	movw	r30, r24
     2a6:	80 81       	ld	r24, Z
     2a8:	8a 83       	std	Y+2, r24	; 0x02
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
     2aa:	8c 81       	ldd	r24, Y+4	; 0x04
     2ac:	9d 81       	ldd	r25, Y+5	; 0x05
     2ae:	8e 57       	subi	r24, 0x7E	; 126
     2b0:	9f 4f       	sbci	r25, 0xFF	; 255
     2b2:	fc 01       	movw	r30, r24
     2b4:	80 81       	ld	r24, Z
     2b6:	91 81       	ldd	r25, Z+1	; 0x01
     2b8:	9c 01       	movw	r18, r24
     2ba:	2f 5f       	subi	r18, 0xFF	; 255
     2bc:	3f 4f       	sbci	r19, 0xFF	; 255
     2be:	8c 81       	ldd	r24, Y+4	; 0x04
     2c0:	9d 81       	ldd	r25, Y+5	; 0x05
     2c2:	8e 57       	subi	r24, 0x7E	; 126
     2c4:	9f 4f       	sbci	r25, 0xFF	; 255
     2c6:	fc 01       	movw	r30, r24
     2c8:	31 83       	std	Z+1, r19	; 0x01
     2ca:	20 83       	st	Z, r18
     2cc:	8c 81       	ldd	r24, Y+4	; 0x04
     2ce:	9d 81       	ldd	r25, Y+5	; 0x05
     2d0:	8e 57       	subi	r24, 0x7E	; 126
     2d2:	9f 4f       	sbci	r25, 0xFF	; 255
     2d4:	fc 01       	movw	r30, r24
     2d6:	20 81       	ld	r18, Z
     2d8:	31 81       	ldd	r19, Z+1	; 0x01
     2da:	8c 81       	ldd	r24, Y+4	; 0x04
     2dc:	9d 81       	ldd	r25, Y+5	; 0x05
     2de:	80 58       	subi	r24, 0x80	; 128
     2e0:	9f 4f       	sbci	r25, 0xFF	; 255
     2e2:	28 17       	cp	r18, r24
     2e4:	39 07       	cpc	r19, r25
     2e6:	49 f4       	brne	.+18     	; 0x2fa <RingBuffer_Remove+0x76>
			  Buffer->Out = Buffer->Buffer;
     2e8:	2c 81       	ldd	r18, Y+4	; 0x04
     2ea:	3d 81       	ldd	r19, Y+5	; 0x05
     2ec:	8c 81       	ldd	r24, Y+4	; 0x04
     2ee:	9d 81       	ldd	r25, Y+5	; 0x05
     2f0:	8e 57       	subi	r24, 0x7E	; 126
     2f2:	9f 4f       	sbci	r25, 0xFF	; 255
     2f4:	fc 01       	movw	r30, r24
     2f6:	31 83       	std	Z+1, r19	; 0x01
     2f8:	20 83       	st	Z, r18

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     2fa:	8f e5       	ldi	r24, 0x5F	; 95
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	fc 01       	movw	r30, r24
     300:	80 81       	ld	r24, Z
     302:	8b 83       	std	Y+3, r24	; 0x03
     304:	0e 94 87 00 	call	0x10e	; 0x10e <__iCliRetVal>
     308:	89 83       	std	Y+1, r24	; 0x01
     30a:	0f c0       	rjmp	.+30     	; 0x32a <RingBuffer_Remove+0xa6>
			{
				Buffer->Count--;
     30c:	8c 81       	ldd	r24, Y+4	; 0x04
     30e:	9d 81       	ldd	r25, Y+5	; 0x05
     310:	8c 57       	subi	r24, 0x7C	; 124
     312:	9f 4f       	sbci	r25, 0xFF	; 255
     314:	fc 01       	movw	r30, r24
     316:	80 81       	ld	r24, Z
     318:	2f ef       	ldi	r18, 0xFF	; 255
     31a:	28 0f       	add	r18, r24
     31c:	8c 81       	ldd	r24, Y+4	; 0x04
     31e:	9d 81       	ldd	r25, Y+5	; 0x05
     320:	8c 57       	subi	r24, 0x7C	; 124
     322:	9f 4f       	sbci	r25, 0xFF	; 255
     324:	fc 01       	movw	r30, r24
     326:	20 83       	st	Z, r18
			RingBuff_Data_t Data = *Buffer->Out;
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->Out = Buffer->Buffer;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     328:	19 82       	std	Y+1, r1	; 0x01
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	88 23       	and	r24, r24
     32e:	71 f7       	brne	.-36     	; 0x30c <RingBuffer_Remove+0x88>
     330:	ce 01       	movw	r24, r28
     332:	03 96       	adiw	r24, 0x03	; 3
     334:	0e 94 90 00 	call	0x120	; 0x120 <__iRestore>
			{
				Buffer->Count--;
			}
			
			return Data;
     338:	8a 81       	ldd	r24, Y+2	; 0x02
		}
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	08 95       	ret

0000034a <RingBuffer_CountChar>:
			}
			*(Destination+PeakLength) = 0;
		}

		static inline RingBuff_Count_t RingBuffer_CountChar(RingBuff_t* const Buffer, char charToCheck)
		{
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	00 d0       	rcall	.+0      	; 0x350 <RingBuffer_CountChar+0x6>
     350:	00 d0       	rcall	.+0      	; 0x352 <RingBuffer_CountChar+0x8>
     352:	00 d0       	rcall	.+0      	; 0x354 <RingBuffer_CountChar+0xa>
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	9d 83       	std	Y+5, r25	; 0x05
     35a:	8c 83       	std	Y+4, r24	; 0x04
     35c:	6e 83       	std	Y+6, r22	; 0x06
			RingBuff_Count_t count = 0;
     35e:	19 82       	std	Y+1, r1	; 0x01

			RingBuff_Data_t* currentRead = Buffer->Out;
     360:	8c 81       	ldd	r24, Y+4	; 0x04
     362:	9d 81       	ldd	r25, Y+5	; 0x05
     364:	8e 57       	subi	r24, 0x7E	; 126
     366:	9f 4f       	sbci	r25, 0xFF	; 255
     368:	fc 01       	movw	r30, r24
     36a:	80 81       	ld	r24, Z
     36c:	91 81       	ldd	r25, Z+1	; 0x01
     36e:	9b 83       	std	Y+3, r25	; 0x03
     370:	8a 83       	std	Y+2, r24	; 0x02

			while(currentRead != Buffer->In)
     372:	1c c0       	rjmp	.+56     	; 0x3ac <RingBuffer_CountChar+0x62>
			{
				if(*currentRead==charToCheck)
     374:	8a 81       	ldd	r24, Y+2	; 0x02
     376:	9b 81       	ldd	r25, Y+3	; 0x03
     378:	fc 01       	movw	r30, r24
     37a:	90 81       	ld	r25, Z
     37c:	8e 81       	ldd	r24, Y+6	; 0x06
     37e:	98 17       	cp	r25, r24
     380:	19 f4       	brne	.+6      	; 0x388 <RingBuffer_CountChar+0x3e>
				{
					count++;
     382:	89 81       	ldd	r24, Y+1	; 0x01
     384:	8f 5f       	subi	r24, 0xFF	; 255
     386:	89 83       	std	Y+1, r24	; 0x01
				}
				if (++currentRead == &Buffer->Buffer[BUFFER_SIZE]) currentRead = Buffer->Buffer;
     388:	8a 81       	ldd	r24, Y+2	; 0x02
     38a:	9b 81       	ldd	r25, Y+3	; 0x03
     38c:	01 96       	adiw	r24, 0x01	; 1
     38e:	9b 83       	std	Y+3, r25	; 0x03
     390:	8a 83       	std	Y+2, r24	; 0x02
     392:	8c 81       	ldd	r24, Y+4	; 0x04
     394:	9d 81       	ldd	r25, Y+5	; 0x05
     396:	80 58       	subi	r24, 0x80	; 128
     398:	9f 4f       	sbci	r25, 0xFF	; 255
     39a:	2a 81       	ldd	r18, Y+2	; 0x02
     39c:	3b 81       	ldd	r19, Y+3	; 0x03
     39e:	28 17       	cp	r18, r24
     3a0:	39 07       	cpc	r19, r25
     3a2:	21 f4       	brne	.+8      	; 0x3ac <RingBuffer_CountChar+0x62>
     3a4:	8c 81       	ldd	r24, Y+4	; 0x04
     3a6:	9d 81       	ldd	r25, Y+5	; 0x05
     3a8:	9b 83       	std	Y+3, r25	; 0x03
     3aa:	8a 83       	std	Y+2, r24	; 0x02
		{
			RingBuff_Count_t count = 0;

			RingBuff_Data_t* currentRead = Buffer->Out;

			while(currentRead != Buffer->In)
     3ac:	8c 81       	ldd	r24, Y+4	; 0x04
     3ae:	9d 81       	ldd	r25, Y+5	; 0x05
     3b0:	80 58       	subi	r24, 0x80	; 128
     3b2:	9f 4f       	sbci	r25, 0xFF	; 255
     3b4:	fc 01       	movw	r30, r24
     3b6:	20 81       	ld	r18, Z
     3b8:	31 81       	ldd	r19, Z+1	; 0x01
     3ba:	8a 81       	ldd	r24, Y+2	; 0x02
     3bc:	9b 81       	ldd	r25, Y+3	; 0x03
     3be:	28 17       	cp	r18, r24
     3c0:	39 07       	cpc	r19, r25
     3c2:	c1 f6       	brne	.-80     	; 0x374 <RingBuffer_CountChar+0x2a>
				{
					count++;
				}
				if (++currentRead == &Buffer->Buffer[BUFFER_SIZE]) currentRead = Buffer->Buffer;
			}
			return(count);
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
		}
     3c6:	26 96       	adiw	r28, 0x06	; 6
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	08 95       	ret

000003d8 <RingBuffer_RemoveUntilChar>:

		static inline void RingBuffer_RemoveUntilChar(RingBuff_t* const Buffer, RingBuff_Data_t* Destination, char endChar, uint8_t includingChar)
		{
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	29 97       	sbiw	r28, 0x09	; 9
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	9d 83       	std	Y+5, r25	; 0x05
     3ee:	8c 83       	std	Y+4, r24	; 0x04
     3f0:	7f 83       	std	Y+7, r23	; 0x07
     3f2:	6e 83       	std	Y+6, r22	; 0x06
     3f4:	48 87       	std	Y+8, r20	; 0x08
     3f6:	29 87       	std	Y+9, r18	; 0x09
			RingBuff_Data_t tempData;
			unsigned int uiDestinationOffset = 0;
     3f8:	1a 82       	std	Y+2, r1	; 0x02
     3fa:	19 82       	std	Y+1, r1	; 0x01
			
			while(1)
			{
				tempData = RingBuffer_Remove(Buffer);
     3fc:	8c 81       	ldd	r24, Y+4	; 0x04
     3fe:	9d 81       	ldd	r25, Y+5	; 0x05
     400:	0e 94 42 01 	call	0x284	; 0x284 <RingBuffer_Remove>
     404:	8b 83       	std	Y+3, r24	; 0x03
				if(tempData == endChar)
     406:	9b 81       	ldd	r25, Y+3	; 0x03
     408:	88 85       	ldd	r24, Y+8	; 0x08
     40a:	98 17       	cp	r25, r24
     40c:	d1 f4       	brne	.+52     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				{
					if(includingChar)
     40e:	89 85       	ldd	r24, Y+9	; 0x09
     410:	88 23       	and	r24, r24
     412:	71 f0       	breq	.+28     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
					{
						*(Destination+uiDestinationOffset) = tempData;
     414:	2e 81       	ldd	r18, Y+6	; 0x06
     416:	3f 81       	ldd	r19, Y+7	; 0x07
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	9a 81       	ldd	r25, Y+2	; 0x02
     41c:	82 0f       	add	r24, r18
     41e:	93 1f       	adc	r25, r19
     420:	2b 81       	ldd	r18, Y+3	; 0x03
     422:	fc 01       	movw	r30, r24
     424:	20 83       	st	Z, r18
						uiDestinationOffset++;
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	9a 81       	ldd	r25, Y+2	; 0x02
     42a:	01 96       	adiw	r24, 0x01	; 1
     42c:	9a 83       	std	Y+2, r25	; 0x02
     42e:	89 83       	std	Y+1, r24	; 0x01
					}
					*(Destination+uiDestinationOffset) = 0;
     430:	2e 81       	ldd	r18, Y+6	; 0x06
     432:	3f 81       	ldd	r19, Y+7	; 0x07
     434:	89 81       	ldd	r24, Y+1	; 0x01
     436:	9a 81       	ldd	r25, Y+2	; 0x02
     438:	82 0f       	add	r24, r18
     43a:	93 1f       	adc	r25, r19
     43c:	fc 01       	movw	r30, r24
     43e:	10 82       	st	Z, r1
					break;
     440:	0f c0       	rjmp	.+30     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
				}
				*(Destination+uiDestinationOffset) = tempData;
     442:	2e 81       	ldd	r18, Y+6	; 0x06
     444:	3f 81       	ldd	r19, Y+7	; 0x07
     446:	89 81       	ldd	r24, Y+1	; 0x01
     448:	9a 81       	ldd	r25, Y+2	; 0x02
     44a:	82 0f       	add	r24, r18
     44c:	93 1f       	adc	r25, r19
     44e:	2b 81       	ldd	r18, Y+3	; 0x03
     450:	fc 01       	movw	r30, r24
     452:	20 83       	st	Z, r18
				uiDestinationOffset++;
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	9a 81       	ldd	r25, Y+2	; 0x02
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	9a 83       	std	Y+2, r25	; 0x02
     45c:	89 83       	std	Y+1, r24	; 0x01
			}
     45e:	ce cf       	rjmp	.-100    	; 0x3fc <RingBuffer_RemoveUntilChar+0x24>
		}
     460:	00 00       	nop
     462:	29 96       	adiw	r28, 0x09	; 9
     464:	0f b6       	in	r0, 0x3f	; 63
     466:	f8 94       	cli
     468:	de bf       	out	0x3e, r29	; 62
     46a:	0f be       	out	0x3f, r0	; 63
     46c:	cd bf       	out	0x3d, r28	; 61
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <__vector_1>:
volatile uint8_t u8Status = 0x00;
volatile uint8_t u8Duty = 0;


ISR(INT0_vect)	// external interrupt (handshake from RGBooster board)
{				// start RGBooster send sequence: reset "ucRGBIdx" and "ucByteIdx" to zero. then start with calling the ISR directly "INT1_vect();"
     474:	1f 92       	push	r1
     476:	0f 92       	push	r0
     478:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     47c:	0f 92       	push	r0
     47e:	11 24       	eor	r1, r1
     480:	2f 93       	push	r18
     482:	3f 93       	push	r19
     484:	4f 93       	push	r20
     486:	8f 93       	push	r24
     488:	9f 93       	push	r25
     48a:	ef 93       	push	r30
     48c:	ff 93       	push	r31
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
	#endif
	
	if(u8RGBSingleColor)
     496:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <u8RGBSingleColor>
     49a:	88 23       	and	r24, r24
     49c:	09 f4       	brne	.+2      	; 0x4a0 <__vector_1+0x2c>
     49e:	b2 c0       	rjmp	.+356    	; 0x604 <__vector_1+0x190>
	{
		if(u8RGBIdx<(LED_COUNT))
     4a0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8RGBIdx>
     4a4:	84 31       	cpi	r24, 0x14	; 20
     4a6:	08 f0       	brcs	.+2      	; 0x4aa <__vector_1+0x36>
     4a8:	83 c1       	rjmp	.+774    	; 0x7b0 <__vector_1+0x33c>
		{
			switch(u8RGBByteIdx) // red green and blue are sent in 3 separate bytes. this variable remembers the next color to be sent
     4aa:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     4ae:	88 2f       	mov	r24, r24
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	81 30       	cpi	r24, 0x01	; 1
     4b4:	91 05       	cpc	r25, r1
     4b6:	d9 f1       	breq	.+118    	; 0x52e <__vector_1+0xba>
     4b8:	82 30       	cpi	r24, 0x02	; 2
     4ba:	91 05       	cpc	r25, r1
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <__vector_1+0x4c>
     4be:	6b c0       	rjmp	.+214    	; 0x596 <__vector_1+0x122>
     4c0:	89 2b       	or	r24, r25
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <__vector_1+0x52>
	
	
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
	#endif
}
     4c4:	75 c1       	rjmp	.+746    	; 0x7b0 <__vector_1+0x33c>
		if(u8RGBIdx<(LED_COUNT))
		{
			switch(u8RGBByteIdx) // red green and blue are sent in 3 separate bytes. this variable remembers the next color to be sent
			{
				case 0:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (u8RGBGreen & DATA_HIGH_BITMASK);
     4c6:	82 e2       	ldi	r24, 0x22	; 34
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	22 e2       	ldi	r18, 0x22	; 34
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	f9 01       	movw	r30, r18
     4d0:	20 81       	ld	r18, Z
     4d2:	32 2f       	mov	r19, r18
     4d4:	3f 70       	andi	r19, 0x0F	; 15
     4d6:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <u8RGBGreen>
     4da:	20 7f       	andi	r18, 0xF0	; 240
     4dc:	23 2b       	or	r18, r19
     4de:	fc 01       	movw	r30, r24
     4e0:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (u8RGBGreen & DATA_LOW_BITMASK);
     4e2:	85 e2       	ldi	r24, 0x25	; 37
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	25 e2       	ldi	r18, 0x25	; 37
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	f9 01       	movw	r30, r18
     4ec:	20 81       	ld	r18, Z
     4ee:	32 2f       	mov	r19, r18
     4f0:	30 7f       	andi	r19, 0xF0	; 240
     4f2:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <u8RGBGreen>
     4f6:	2f 70       	andi	r18, 0x0F	; 15
     4f8:	23 2b       	or	r18, r19
     4fa:	fc 01       	movw	r30, r24
     4fc:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     4fe:	8b e2       	ldi	r24, 0x2B	; 43
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	2b e2       	ldi	r18, 0x2B	; 43
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	f9 01       	movw	r30, r18
     508:	20 81       	ld	r18, Z
     50a:	28 60       	ori	r18, 0x08	; 8
     50c:	fc 01       	movw	r30, r24
     50e:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     510:	8b e2       	ldi	r24, 0x2B	; 43
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	2b e2       	ldi	r18, 0x2B	; 43
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	f9 01       	movw	r30, r18
     51a:	20 81       	ld	r18, Z
     51c:	27 7f       	andi	r18, 0xF7	; 247
     51e:	fc 01       	movw	r30, r24
     520:	20 83       	st	Z, r18
				u8RGBByteIdx++;
     522:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     526:	8f 5f       	subi	r24, 0xFF	; 255
     528:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
				break;
     52c:	41 c1       	rjmp	.+642    	; 0x7b0 <__vector_1+0x33c>

				case 1:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (u8RGBRed & DATA_HIGH_BITMASK);
     52e:	82 e2       	ldi	r24, 0x22	; 34
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	22 e2       	ldi	r18, 0x22	; 34
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	f9 01       	movw	r30, r18
     538:	20 81       	ld	r18, Z
     53a:	32 2f       	mov	r19, r18
     53c:	3f 70       	andi	r19, 0x0F	; 15
     53e:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <u8RGBRed>
     542:	20 7f       	andi	r18, 0xF0	; 240
     544:	23 2b       	or	r18, r19
     546:	fc 01       	movw	r30, r24
     548:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (u8RGBRed & DATA_LOW_BITMASK);
     54a:	85 e2       	ldi	r24, 0x25	; 37
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	25 e2       	ldi	r18, 0x25	; 37
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	f9 01       	movw	r30, r18
     554:	20 81       	ld	r18, Z
     556:	32 2f       	mov	r19, r18
     558:	30 7f       	andi	r19, 0xF0	; 240
     55a:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <u8RGBRed>
     55e:	2f 70       	andi	r18, 0x0F	; 15
     560:	23 2b       	or	r18, r19
     562:	fc 01       	movw	r30, r24
     564:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     566:	8b e2       	ldi	r24, 0x2B	; 43
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	2b e2       	ldi	r18, 0x2B	; 43
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	f9 01       	movw	r30, r18
     570:	20 81       	ld	r18, Z
     572:	28 60       	ori	r18, 0x08	; 8
     574:	fc 01       	movw	r30, r24
     576:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     578:	8b e2       	ldi	r24, 0x2B	; 43
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	2b e2       	ldi	r18, 0x2B	; 43
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	f9 01       	movw	r30, r18
     582:	20 81       	ld	r18, Z
     584:	27 7f       	andi	r18, 0xF7	; 247
     586:	fc 01       	movw	r30, r24
     588:	20 83       	st	Z, r18
				u8RGBByteIdx++;
     58a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     58e:	8f 5f       	subi	r24, 0xFF	; 255
     590:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
				break;
     594:	0d c1       	rjmp	.+538    	; 0x7b0 <__vector_1+0x33c>

				case 2:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (u8RGBBlue & DATA_HIGH_BITMASK);
     596:	82 e2       	ldi	r24, 0x22	; 34
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	22 e2       	ldi	r18, 0x22	; 34
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	f9 01       	movw	r30, r18
     5a0:	20 81       	ld	r18, Z
     5a2:	32 2f       	mov	r19, r18
     5a4:	3f 70       	andi	r19, 0x0F	; 15
     5a6:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <u8RGBBlue>
     5aa:	20 7f       	andi	r18, 0xF0	; 240
     5ac:	23 2b       	or	r18, r19
     5ae:	fc 01       	movw	r30, r24
     5b0:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (u8RGBBlue & DATA_LOW_BITMASK);
     5b2:	85 e2       	ldi	r24, 0x25	; 37
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	25 e2       	ldi	r18, 0x25	; 37
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	f9 01       	movw	r30, r18
     5bc:	20 81       	ld	r18, Z
     5be:	32 2f       	mov	r19, r18
     5c0:	30 7f       	andi	r19, 0xF0	; 240
     5c2:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <u8RGBBlue>
     5c6:	2f 70       	andi	r18, 0x0F	; 15
     5c8:	23 2b       	or	r18, r19
     5ca:	fc 01       	movw	r30, r24
     5cc:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     5ce:	8b e2       	ldi	r24, 0x2B	; 43
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	2b e2       	ldi	r18, 0x2B	; 43
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	f9 01       	movw	r30, r18
     5d8:	20 81       	ld	r18, Z
     5da:	28 60       	ori	r18, 0x08	; 8
     5dc:	fc 01       	movw	r30, r24
     5de:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     5e0:	8b e2       	ldi	r24, 0x2B	; 43
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	2b e2       	ldi	r18, 0x2B	; 43
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	f9 01       	movw	r30, r18
     5ea:	20 81       	ld	r18, Z
     5ec:	27 7f       	andi	r18, 0xF7	; 247
     5ee:	fc 01       	movw	r30, r24
     5f0:	20 83       	st	Z, r18
				u8RGBByteIdx=0;
     5f2:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
				u8RGBIdx++;
     5f6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8RGBIdx>
     5fa:	8f 5f       	subi	r24, 0xFF	; 255
     5fc:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <u8RGBIdx>
				break;
     600:	00 00       	nop
     602:	d6 c0       	rjmp	.+428    	; 0x7b0 <__vector_1+0x33c>
			}
		}
	}
	else
	{
		if(u8RGBIdx<(LED_COUNT))
     604:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8RGBIdx>
     608:	84 31       	cpi	r24, 0x14	; 20
     60a:	08 f0       	brcs	.+2      	; 0x60e <__vector_1+0x19a>
     60c:	d1 c0       	rjmp	.+418    	; 0x7b0 <__vector_1+0x33c>
		{
			switch(u8RGBByteIdx) // red green and blue are sent in 3 separate bytes. this variable remembers the next color to be sent
     60e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     612:	88 2f       	mov	r24, r24
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	81 30       	cpi	r24, 0x01	; 1
     618:	91 05       	cpc	r25, r1
     61a:	09 f4       	brne	.+2      	; 0x61e <__vector_1+0x1aa>
     61c:	47 c0       	rjmp	.+142    	; 0x6ac <__vector_1+0x238>
     61e:	82 30       	cpi	r24, 0x02	; 2
     620:	91 05       	cpc	r25, r1
     622:	09 f4       	brne	.+2      	; 0x626 <__vector_1+0x1b2>
     624:	83 c0       	rjmp	.+262    	; 0x72c <__vector_1+0x2b8>
     626:	89 2b       	or	r24, r25
     628:	09 f0       	breq	.+2      	; 0x62c <__vector_1+0x1b8>
	
	
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
	#endif
}
     62a:	c2 c0       	rjmp	.+388    	; 0x7b0 <__vector_1+0x33c>
		if(u8RGBIdx<(LED_COUNT))
		{
			switch(u8RGBByteIdx) // red green and blue are sent in 3 separate bytes. this variable remembers the next color to be sent
			{
				case 0:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (au8Green[u8RGBIdx] & DATA_HIGH_BITMASK);
     62c:	82 e2       	ldi	r24, 0x22	; 34
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	22 e2       	ldi	r18, 0x22	; 34
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	f9 01       	movw	r30, r18
     636:	20 81       	ld	r18, Z
     638:	42 2f       	mov	r20, r18
     63a:	4f 70       	andi	r20, 0x0F	; 15
     63c:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     640:	22 2f       	mov	r18, r18
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	2c 5e       	subi	r18, 0xEC	; 236
     646:	3e 4f       	sbci	r19, 0xFE	; 254
     648:	f9 01       	movw	r30, r18
     64a:	20 81       	ld	r18, Z
     64c:	20 7f       	andi	r18, 0xF0	; 240
     64e:	24 2b       	or	r18, r20
     650:	fc 01       	movw	r30, r24
     652:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (au8Green[u8RGBIdx] & DATA_LOW_BITMASK);
     654:	85 e2       	ldi	r24, 0x25	; 37
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	25 e2       	ldi	r18, 0x25	; 37
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	f9 01       	movw	r30, r18
     65e:	20 81       	ld	r18, Z
     660:	42 2f       	mov	r20, r18
     662:	40 7f       	andi	r20, 0xF0	; 240
     664:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     668:	22 2f       	mov	r18, r18
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	2c 5e       	subi	r18, 0xEC	; 236
     66e:	3e 4f       	sbci	r19, 0xFE	; 254
     670:	f9 01       	movw	r30, r18
     672:	20 81       	ld	r18, Z
     674:	2f 70       	andi	r18, 0x0F	; 15
     676:	24 2b       	or	r18, r20
     678:	fc 01       	movw	r30, r24
     67a:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     67c:	8b e2       	ldi	r24, 0x2B	; 43
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	2b e2       	ldi	r18, 0x2B	; 43
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	f9 01       	movw	r30, r18
     686:	20 81       	ld	r18, Z
     688:	28 60       	ori	r18, 0x08	; 8
     68a:	fc 01       	movw	r30, r24
     68c:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     68e:	8b e2       	ldi	r24, 0x2B	; 43
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	2b e2       	ldi	r18, 0x2B	; 43
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	f9 01       	movw	r30, r18
     698:	20 81       	ld	r18, Z
     69a:	27 7f       	andi	r18, 0xF7	; 247
     69c:	fc 01       	movw	r30, r24
     69e:	20 83       	st	Z, r18
				u8RGBByteIdx++;
     6a0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     6a4:	8f 5f       	subi	r24, 0xFF	; 255
     6a6:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
				break;
     6aa:	82 c0       	rjmp	.+260    	; 0x7b0 <__vector_1+0x33c>

				case 1:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (au8Red[u8RGBIdx] & DATA_HIGH_BITMASK);
     6ac:	82 e2       	ldi	r24, 0x22	; 34
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	22 e2       	ldi	r18, 0x22	; 34
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	f9 01       	movw	r30, r18
     6b6:	20 81       	ld	r18, Z
     6b8:	42 2f       	mov	r20, r18
     6ba:	4f 70       	andi	r20, 0x0F	; 15
     6bc:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     6c0:	22 2f       	mov	r18, r18
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	20 50       	subi	r18, 0x00	; 0
     6c6:	3f 4f       	sbci	r19, 0xFF	; 255
     6c8:	f9 01       	movw	r30, r18
     6ca:	20 81       	ld	r18, Z
     6cc:	20 7f       	andi	r18, 0xF0	; 240
     6ce:	24 2b       	or	r18, r20
     6d0:	fc 01       	movw	r30, r24
     6d2:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (au8Red[u8RGBIdx] & DATA_LOW_BITMASK);
     6d4:	85 e2       	ldi	r24, 0x25	; 37
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	25 e2       	ldi	r18, 0x25	; 37
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	f9 01       	movw	r30, r18
     6de:	20 81       	ld	r18, Z
     6e0:	42 2f       	mov	r20, r18
     6e2:	40 7f       	andi	r20, 0xF0	; 240
     6e4:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     6e8:	22 2f       	mov	r18, r18
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	20 50       	subi	r18, 0x00	; 0
     6ee:	3f 4f       	sbci	r19, 0xFF	; 255
     6f0:	f9 01       	movw	r30, r18
     6f2:	20 81       	ld	r18, Z
     6f4:	2f 70       	andi	r18, 0x0F	; 15
     6f6:	24 2b       	or	r18, r20
     6f8:	fc 01       	movw	r30, r24
     6fa:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     6fc:	8b e2       	ldi	r24, 0x2B	; 43
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	2b e2       	ldi	r18, 0x2B	; 43
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	f9 01       	movw	r30, r18
     706:	20 81       	ld	r18, Z
     708:	28 60       	ori	r18, 0x08	; 8
     70a:	fc 01       	movw	r30, r24
     70c:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     70e:	8b e2       	ldi	r24, 0x2B	; 43
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	2b e2       	ldi	r18, 0x2B	; 43
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	f9 01       	movw	r30, r18
     718:	20 81       	ld	r18, Z
     71a:	27 7f       	andi	r18, 0xF7	; 247
     71c:	fc 01       	movw	r30, r24
     71e:	20 83       	st	Z, r18
				u8RGBByteIdx++;
     720:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     724:	8f 5f       	subi	r24, 0xFF	; 255
     726:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
				break;
     72a:	42 c0       	rjmp	.+132    	; 0x7b0 <__vector_1+0x33c>

				case 2:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (au8Blue[u8RGBIdx] & DATA_HIGH_BITMASK);
     72c:	82 e2       	ldi	r24, 0x22	; 34
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	22 e2       	ldi	r18, 0x22	; 34
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	f9 01       	movw	r30, r18
     736:	20 81       	ld	r18, Z
     738:	42 2f       	mov	r20, r18
     73a:	4f 70       	andi	r20, 0x0F	; 15
     73c:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     740:	22 2f       	mov	r18, r18
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	28 5d       	subi	r18, 0xD8	; 216
     746:	3e 4f       	sbci	r19, 0xFE	; 254
     748:	f9 01       	movw	r30, r18
     74a:	20 81       	ld	r18, Z
     74c:	20 7f       	andi	r18, 0xF0	; 240
     74e:	24 2b       	or	r18, r20
     750:	fc 01       	movw	r30, r24
     752:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (au8Blue[u8RGBIdx] & DATA_LOW_BITMASK);
     754:	85 e2       	ldi	r24, 0x25	; 37
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	25 e2       	ldi	r18, 0x25	; 37
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	f9 01       	movw	r30, r18
     75e:	20 81       	ld	r18, Z
     760:	42 2f       	mov	r20, r18
     762:	40 7f       	andi	r20, 0xF0	; 240
     764:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     768:	22 2f       	mov	r18, r18
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	28 5d       	subi	r18, 0xD8	; 216
     76e:	3e 4f       	sbci	r19, 0xFE	; 254
     770:	f9 01       	movw	r30, r18
     772:	20 81       	ld	r18, Z
     774:	2f 70       	andi	r18, 0x0F	; 15
     776:	24 2b       	or	r18, r20
     778:	fc 01       	movw	r30, r24
     77a:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     77c:	8b e2       	ldi	r24, 0x2B	; 43
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	2b e2       	ldi	r18, 0x2B	; 43
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	f9 01       	movw	r30, r18
     786:	20 81       	ld	r18, Z
     788:	28 60       	ori	r18, 0x08	; 8
     78a:	fc 01       	movw	r30, r24
     78c:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     78e:	8b e2       	ldi	r24, 0x2B	; 43
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	2b e2       	ldi	r18, 0x2B	; 43
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	f9 01       	movw	r30, r18
     798:	20 81       	ld	r18, Z
     79a:	27 7f       	andi	r18, 0xF7	; 247
     79c:	fc 01       	movw	r30, r24
     79e:	20 83       	st	Z, r18
				u8RGBByteIdx=0;
     7a0:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
				u8RGBIdx++;
     7a4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8RGBIdx>
     7a8:	8f 5f       	subi	r24, 0xFF	; 255
     7aa:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <u8RGBIdx>
				break;
     7ae:	00 00       	nop
	
	
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
	#endif
}
     7b0:	00 00       	nop
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	ff 91       	pop	r31
     7b8:	ef 91       	pop	r30
     7ba:	9f 91       	pop	r25
     7bc:	8f 91       	pop	r24
     7be:	4f 91       	pop	r20
     7c0:	3f 91       	pop	r19
     7c2:	2f 91       	pop	r18
     7c4:	0f 90       	pop	r0
     7c6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     7ca:	0f 90       	pop	r0
     7cc:	1f 90       	pop	r1
     7ce:	18 95       	reti

000007d0 <__vector_9>:

ISR(TIMER2_COMPA_vect)
{
     7d0:	1f 92       	push	r1
     7d2:	0f 92       	push	r0
     7d4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     7d8:	0f 92       	push	r0
     7da:	11 24       	eor	r1, r1
     7dc:	af 92       	push	r10
     7de:	bf 92       	push	r11
     7e0:	cf 92       	push	r12
     7e2:	df 92       	push	r13
     7e4:	ef 92       	push	r14
     7e6:	ff 92       	push	r15
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	2f 93       	push	r18
     7ee:	3f 93       	push	r19
     7f0:	4f 93       	push	r20
     7f2:	5f 93       	push	r21
     7f4:	6f 93       	push	r22
     7f6:	7f 93       	push	r23
     7f8:	8f 93       	push	r24
     7fa:	9f 93       	push	r25
     7fc:	af 93       	push	r26
     7fe:	bf 93       	push	r27
     800:	ef 93       	push	r30
     802:	ff 93       	push	r31
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	cd b7       	in	r28, 0x3d	; 61
     80a:	de b7       	in	r29, 0x3e	; 62
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
	#endif
	
	if(u8PLEDFadeActive)
     80c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <u8PLEDFadeActive>
     810:	88 23       	and	r24, r24
     812:	09 f4       	brne	.+2      	; 0x816 <__vector_9+0x46>
     814:	e7 c0       	rjmp	.+462    	; 0x9e4 <__stack+0xe5>
	{
		if(u8PLEDFadeDirection) // rise
     816:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <u8PLEDFadeDirection>
     81a:	88 23       	and	r24, r24
     81c:	09 f4       	brne	.+2      	; 0x820 <__vector_9+0x50>
     81e:	72 c0       	rjmp	.+228    	; 0x904 <__stack+0x5>
		{
			u32PLEDFadeIntCount++;
     820:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <u32PLEDFadeIntCount>
     824:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <u32PLEDFadeIntCount+0x1>
     828:	a0 91 5d 01 	lds	r26, 0x015D	; 0x80015d <u32PLEDFadeIntCount+0x2>
     82c:	b0 91 5e 01 	lds	r27, 0x015E	; 0x80015e <u32PLEDFadeIntCount+0x3>
     830:	01 96       	adiw	r24, 0x01	; 1
     832:	a1 1d       	adc	r26, r1
     834:	b1 1d       	adc	r27, r1
     836:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <u32PLEDFadeIntCount>
     83a:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <u32PLEDFadeIntCount+0x1>
     83e:	a0 93 5d 01 	sts	0x015D, r26	; 0x80015d <u32PLEDFadeIntCount+0x2>
     842:	b0 93 5e 01 	sts	0x015E, r27	; 0x80015e <u32PLEDFadeIntCount+0x3>
			if(u32PLEDFadeIntCount>=u32PLEDFadeIntStep)
     846:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <u32PLEDFadeIntCount>
     84a:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <u32PLEDFadeIntCount+0x1>
     84e:	40 91 5d 01 	lds	r20, 0x015D	; 0x80015d <u32PLEDFadeIntCount+0x2>
     852:	50 91 5e 01 	lds	r21, 0x015E	; 0x80015e <u32PLEDFadeIntCount+0x3>
     856:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <u32PLEDFadeIntStep>
     85a:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <u32PLEDFadeIntStep+0x1>
     85e:	a0 91 59 01 	lds	r26, 0x0159	; 0x800159 <u32PLEDFadeIntStep+0x2>
     862:	b0 91 5a 01 	lds	r27, 0x015A	; 0x80015a <u32PLEDFadeIntStep+0x3>
     866:	28 17       	cp	r18, r24
     868:	39 07       	cpc	r19, r25
     86a:	4a 07       	cpc	r20, r26
     86c:	5b 07       	cpc	r21, r27
     86e:	08 f4       	brcc	.+2      	; 0x872 <__vector_9+0xa2>
     870:	b9 c0       	rjmp	.+370    	; 0x9e4 <__stack+0xe5>
			{
				u32PLEDFadeIntCount = 0;
     872:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <u32PLEDFadeIntCount>
     876:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <u32PLEDFadeIntCount+0x1>
     87a:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <u32PLEDFadeIntCount+0x2>
     87e:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <u32PLEDFadeIntCount+0x3>
				u16PLEDFadeCurrValue++;
     882:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u16PLEDFadeCurrValue>
     886:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <u16PLEDFadeCurrValue+0x1>
     88a:	01 96       	adiw	r24, 0x01	; 1
     88c:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <u16PLEDFadeCurrValue+0x1>
     890:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <u16PLEDFadeCurrValue>
				setPWMDuty(u16PLEDFadeCurrValue);
     894:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u16PLEDFadeCurrValue>
     898:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <u16PLEDFadeCurrValue+0x1>
     89c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <setPWMDuty>
				u8Duty = Map(u16PLEDFadeCurrValue,0,511,0,100);
     8a0:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u16PLEDFadeCurrValue>
     8a4:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <u16PLEDFadeCurrValue+0x1>
     8a8:	cc 01       	movw	r24, r24
     8aa:	a0 e0       	ldi	r26, 0x00	; 0
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	1f 92       	push	r1
     8b0:	1f 92       	push	r1
     8b2:	1f 92       	push	r1
     8b4:	24 e6       	ldi	r18, 0x64	; 100
     8b6:	2f 93       	push	r18
     8b8:	a1 2c       	mov	r10, r1
     8ba:	b1 2c       	mov	r11, r1
     8bc:	65 01       	movw	r12, r10
     8be:	e1 2c       	mov	r14, r1
     8c0:	f1 2c       	mov	r15, r1
     8c2:	87 01       	movw	r16, r14
     8c4:	ea 94       	dec	r14
     8c6:	f3 94       	inc	r15
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	a9 01       	movw	r20, r18
     8ce:	bc 01       	movw	r22, r24
     8d0:	cd 01       	movw	r24, r26
     8d2:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <Map>
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <u8Duty>

				if(u16PLEDFadeCurrValue>=u16PLEDFadeStopValue)
     8e6:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <u16PLEDFadeCurrValue>
     8ea:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <u16PLEDFadeCurrValue+0x1>
     8ee:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16PLEDFadeStopValue>
     8f2:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16PLEDFadeStopValue+0x1>
     8f6:	28 17       	cp	r18, r24
     8f8:	39 07       	cpc	r19, r25
     8fa:	08 f4       	brcc	.+2      	; 0x8fe <__vector_9+0x12e>
     8fc:	73 c0       	rjmp	.+230    	; 0x9e4 <__stack+0xe5>
				{
					u8PLEDFadeActive = 0;
     8fe:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <u8PLEDFadeActive>
     902:	70 c0       	rjmp	.+224    	; 0x9e4 <__stack+0xe5>
				}
			}
		}
		else // fall
		{
			u32PLEDFadeIntCount++;
     904:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <u32PLEDFadeIntCount>
     908:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <u32PLEDFadeIntCount+0x1>
     90c:	a0 91 5d 01 	lds	r26, 0x015D	; 0x80015d <u32PLEDFadeIntCount+0x2>
     910:	b0 91 5e 01 	lds	r27, 0x015E	; 0x80015e <u32PLEDFadeIntCount+0x3>
     914:	01 96       	adiw	r24, 0x01	; 1
     916:	a1 1d       	adc	r26, r1
     918:	b1 1d       	adc	r27, r1
     91a:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <u32PLEDFadeIntCount>
     91e:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <u32PLEDFadeIntCount+0x1>
     922:	a0 93 5d 01 	sts	0x015D, r26	; 0x80015d <u32PLEDFadeIntCount+0x2>
     926:	b0 93 5e 01 	sts	0x015E, r27	; 0x80015e <u32PLEDFadeIntCount+0x3>
			if(u32PLEDFadeIntCount>=u32PLEDFadeIntStep)
     92a:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <u32PLEDFadeIntCount>
     92e:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <u32PLEDFadeIntCount+0x1>
     932:	40 91 5d 01 	lds	r20, 0x015D	; 0x80015d <u32PLEDFadeIntCount+0x2>
     936:	50 91 5e 01 	lds	r21, 0x015E	; 0x80015e <u32PLEDFadeIntCount+0x3>
     93a:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <u32PLEDFadeIntStep>
     93e:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <u32PLEDFadeIntStep+0x1>
     942:	a0 91 59 01 	lds	r26, 0x0159	; 0x800159 <u32PLEDFadeIntStep+0x2>
     946:	b0 91 5a 01 	lds	r27, 0x015A	; 0x80015a <u32PLEDFadeIntStep+0x3>
     94a:	28 17       	cp	r18, r24
     94c:	39 07       	cpc	r19, r25
     94e:	4a 07       	cpc	r20, r26
     950:	5b 07       	cpc	r21, r27
     952:	08 f4       	brcc	.+2      	; 0x956 <__stack+0x57>
     954:	47 c0       	rjmp	.+142    	; 0x9e4 <__stack+0xe5>
			{
				u32PLEDFadeIntCount = 0;
     956:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <u32PLEDFadeIntCount>
     95a:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <u32PLEDFadeIntCount+0x1>
     95e:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <u32PLEDFadeIntCount+0x2>
     962:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <u32PLEDFadeIntCount+0x3>
				u16PLEDFadeCurrValue--;
     966:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u16PLEDFadeCurrValue>
     96a:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <u16PLEDFadeCurrValue+0x1>
     96e:	01 97       	sbiw	r24, 0x01	; 1
     970:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <u16PLEDFadeCurrValue+0x1>
     974:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <u16PLEDFadeCurrValue>
				setPWMDuty(u16PLEDFadeCurrValue);
     978:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u16PLEDFadeCurrValue>
     97c:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <u16PLEDFadeCurrValue+0x1>
     980:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <setPWMDuty>
				u8Duty = Map(u16PLEDFadeCurrValue,0,511,0,100);
     984:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u16PLEDFadeCurrValue>
     988:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <u16PLEDFadeCurrValue+0x1>
     98c:	cc 01       	movw	r24, r24
     98e:	a0 e0       	ldi	r26, 0x00	; 0
     990:	b0 e0       	ldi	r27, 0x00	; 0
     992:	1f 92       	push	r1
     994:	1f 92       	push	r1
     996:	1f 92       	push	r1
     998:	24 e6       	ldi	r18, 0x64	; 100
     99a:	2f 93       	push	r18
     99c:	a1 2c       	mov	r10, r1
     99e:	b1 2c       	mov	r11, r1
     9a0:	65 01       	movw	r12, r10
     9a2:	e1 2c       	mov	r14, r1
     9a4:	f1 2c       	mov	r15, r1
     9a6:	87 01       	movw	r16, r14
     9a8:	ea 94       	dec	r14
     9aa:	f3 94       	inc	r15
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	a9 01       	movw	r20, r18
     9b2:	bc 01       	movw	r22, r24
     9b4:	cd 01       	movw	r24, r26
     9b6:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <Map>
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	dc 01       	movw	r26, r24
     9c4:	cb 01       	movw	r24, r22
     9c6:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <u8Duty>

				if(u16PLEDFadeCurrValue<=u16PLEDFadeStopValue)
     9ca:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <u16PLEDFadeCurrValue>
     9ce:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <u16PLEDFadeCurrValue+0x1>
     9d2:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16PLEDFadeStopValue>
     9d6:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16PLEDFadeStopValue+0x1>
     9da:	82 17       	cp	r24, r18
     9dc:	93 07       	cpc	r25, r19
     9de:	10 f0       	brcs	.+4      	; 0x9e4 <__stack+0xe5>
				{
					u8PLEDFadeActive = 0;
     9e0:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <u8PLEDFadeActive>
				}
			}
		}
	}
	
	if(u8RGBAnimationActive)
     9e4:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u8RGBAnimationActive>
     9e8:	88 23       	and	r24, r24
     9ea:	b1 f0       	breq	.+44     	; 0xa18 <__stack+0x119>
	{
		u16RGBTimeCounter++;
     9ec:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u16RGBTimeCounter>
     9f0:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <u16RGBTimeCounter+0x1>
     9f4:	01 96       	adiw	r24, 0x01	; 1
     9f6:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <u16RGBTimeCounter+0x1>
     9fa:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <u16RGBTimeCounter>
		if(u16RGBTimeCounter>=u16RGBTime)
     9fe:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <u16RGBTimeCounter>
     a02:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <u16RGBTimeCounter+0x1>
     a06:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u16RGBTime>
     a0a:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <u16RGBTime+0x1>
     a0e:	28 17       	cp	r18, r24
     a10:	39 07       	cpc	r19, r25
     a12:	10 f0       	brcs	.+4      	; 0xa18 <__stack+0x119>
		{
			u8RGBAnimationActive = 0;
     a14:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <u8RGBAnimationActive>
		}
	}
	
	if(u8RGBNewDataReady)
     a18:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8RGBNewDataReady>
     a1c:	88 23       	and	r24, r24
     a1e:	41 f0       	breq	.+16     	; 0xa30 <__stack+0x131>
	{
		u8RGBNewDataReady = 0;
     a20:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <u8RGBNewDataReady>
		
		u8RGBByteIdx = 0;
     a24:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
		u8RGBIdx = 0;
     a28:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <u8RGBIdx>
		INT0_vect();
     a2c:	0e 94 3a 02 	call	0x474	; 0x474 <__vector_1>
	}

	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
	#endif
}
     a30:	00 00       	nop
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	ff 91       	pop	r31
     a38:	ef 91       	pop	r30
     a3a:	bf 91       	pop	r27
     a3c:	af 91       	pop	r26
     a3e:	9f 91       	pop	r25
     a40:	8f 91       	pop	r24
     a42:	7f 91       	pop	r23
     a44:	6f 91       	pop	r22
     a46:	5f 91       	pop	r21
     a48:	4f 91       	pop	r20
     a4a:	3f 91       	pop	r19
     a4c:	2f 91       	pop	r18
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	df 90       	pop	r13
     a58:	cf 90       	pop	r12
     a5a:	bf 90       	pop	r11
     a5c:	af 90       	pop	r10
     a5e:	0f 90       	pop	r0
     a60:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a64:	0f 90       	pop	r0
     a66:	1f 90       	pop	r1
     a68:	18 95       	reti

00000a6a <__vector_19>:


ISR(SPI_STC_vect)
{
     a6a:	1f 92       	push	r1
     a6c:	0f 92       	push	r0
     a6e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a72:	0f 92       	push	r0
     a74:	11 24       	eor	r1, r1
     a76:	2f 93       	push	r18
     a78:	3f 93       	push	r19
     a7a:	4f 93       	push	r20
     a7c:	5f 93       	push	r21
     a7e:	6f 93       	push	r22
     a80:	7f 93       	push	r23
     a82:	8f 93       	push	r24
     a84:	9f 93       	push	r25
     a86:	af 93       	push	r26
     a88:	bf 93       	push	r27
     a8a:	ef 93       	push	r30
     a8c:	ff 93       	push	r31
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	1f 92       	push	r1
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8spiData = SPDR0;
     a98:	8e e4       	ldi	r24, 0x4E	; 78
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	fc 01       	movw	r30, r24
     a9e:	80 81       	ld	r24, Z
     aa0:	89 83       	std	Y+1, r24	; 0x01
	
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
	#endif
	
	SPDR0 = 0;
     aa2:	8e e4       	ldi	r24, 0x4E	; 78
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	fc 01       	movw	r30, r24
     aa8:	10 82       	st	Z, r1

	switch(SPIBUFFER.spiState)
     aaa:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <SPIBUFFER+0x42>
     aae:	88 2f       	mov	r24, r24
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	09 2e       	mov	r0, r25
     ab4:	00 0c       	add	r0, r0
     ab6:	aa 0b       	sbc	r26, r26
     ab8:	bb 0b       	sbc	r27, r27
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	26 e0       	ldi	r18, 0x06	; 6
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	84 1b       	sub	r24, r20
     ac4:	95 0b       	sbc	r25, r21
     ac6:	28 17       	cp	r18, r24
     ac8:	39 07       	cpc	r19, r25
     aca:	08 f4       	brcc	.+2      	; 0xace <__vector_19+0x64>
     acc:	11 c1       	rjmp	.+546    	; 0xcf0 <__vector_19+0x286>
     ace:	82 5c       	subi	r24, 0xC2	; 194
     ad0:	9f 4f       	sbci	r25, 0xFF	; 255
     ad2:	fc 01       	movw	r30, r24
     ad4:	0c 94 b1 10 	jmp	0x2162	; 0x2162 <__tablejump2__>
	{
		case READY:
			if(u8spiData>=3)
     ad8:	89 81       	ldd	r24, Y+1	; 0x01
     ada:	83 30       	cpi	r24, 0x03	; 3
     adc:	90 f0       	brcs	.+36     	; 0xb02 <__vector_19+0x98>
			{
				SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
     ade:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <SPIBUFFER+0x40>
     ae2:	88 2f       	mov	r24, r24
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	8a 51       	subi	r24, 0x1A	; 26
     ae8:	9e 4f       	sbci	r25, 0xFE	; 254
     aea:	29 81       	ldd	r18, Y+1	; 0x01
     aec:	fc 01       	movw	r30, r24
     aee:	20 83       	st	Z, r18
				SPIBUFFER.u8Count++;
     af0:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <SPIBUFFER+0x40>
     af4:	8f 5f       	subi	r24, 0xFF	; 255
     af6:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <SPIBUFFER+0x40>
				SPIBUFFER.spiState = WRITE;
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <SPIBUFFER+0x42>
			}
			else
			{
				SPIBUFFER.spiState = READ;
			}
		break;
     b00:	f7 c0       	rjmp	.+494    	; 0xcf0 <__vector_19+0x286>
				SPIBUFFER.u8Count++;
				SPIBUFFER.spiState = WRITE;
			}
			else
			{
				SPIBUFFER.spiState = READ;
     b02:	82 e0       	ldi	r24, 0x02	; 2
     b04:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <SPIBUFFER+0x42>
			}
		break;
     b08:	f3 c0       	rjmp	.+486    	; 0xcf0 <__vector_19+0x286>

		case WRITE:
			SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
     b0a:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <SPIBUFFER+0x40>
     b0e:	88 2f       	mov	r24, r24
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	8a 51       	subi	r24, 0x1A	; 26
     b14:	9e 4f       	sbci	r25, 0xFE	; 254
     b16:	29 81       	ldd	r18, Y+1	; 0x01
     b18:	fc 01       	movw	r30, r24
     b1a:	20 83       	st	Z, r18
			SPIBUFFER.u8Count++;
     b1c:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <SPIBUFFER+0x40>
     b20:	8f 5f       	subi	r24, 0xFF	; 255
     b22:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <SPIBUFFER+0x40>
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
     b26:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <SPIBUFFER+0x40>
     b2a:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <SPIBUFFER>
     b2e:	98 17       	cp	r25, r24
     b30:	08 f4       	brcc	.+2      	; 0xb34 <__vector_19+0xca>
     b32:	db c0       	rjmp	.+438    	; 0xcea <__vector_19+0x280>
			{
				SPIBUFFER.spiState = DONE_WRITE;
     b34:	84 e0       	ldi	r24, 0x04	; 4
     b36:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <SPIBUFFER+0x42>
			}
		break;
     b3a:	d7 c0       	rjmp	.+430    	; 0xcea <__vector_19+0x280>

		case READ:
			SPIBUFFER.u8Count = 0;
     b3c:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <SPIBUFFER+0x40>
			
			switch(u8spiData)
     b40:	89 81       	ldd	r24, Y+1	; 0x01
     b42:	88 2f       	mov	r24, r24
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	82 3f       	cpi	r24, 0xF2	; 242
     b48:	91 05       	cpc	r25, r1
     b4a:	79 f1       	breq	.+94     	; 0xbaa <__vector_19+0x140>
     b4c:	83 3f       	cpi	r24, 0xF3	; 243
     b4e:	91 05       	cpc	r25, r1
     b50:	24 f4       	brge	.+8      	; 0xb5a <__vector_19+0xf0>
     b52:	81 3f       	cpi	r24, 0xF1	; 241
     b54:	91 05       	cpc	r25, r1
     b56:	51 f0       	breq	.+20     	; 0xb6c <__vector_19+0x102>
     b58:	a6 c0       	rjmp	.+332    	; 0xca6 <__vector_19+0x23c>
     b5a:	83 3f       	cpi	r24, 0xF3	; 243
     b5c:	91 05       	cpc	r25, r1
     b5e:	09 f4       	brne	.+2      	; 0xb62 <__vector_19+0xf8>
     b60:	43 c0       	rjmp	.+134    	; 0xbe8 <__vector_19+0x17e>
     b62:	84 3f       	cpi	r24, 0xF4	; 244
     b64:	91 05       	cpc	r25, r1
     b66:	09 f4       	brne	.+2      	; 0xb6a <__vector_19+0x100>
     b68:	5e c0       	rjmp	.+188    	; 0xc26 <__vector_19+0x1bc>
     b6a:	9d c0       	rjmp	.+314    	; 0xca6 <__vector_19+0x23c>
			{
				case 0xF1:
					SPDR0 = 0x01;
     b6c:	8e e4       	ldi	r24, 0x4E	; 78
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	21 e0       	ldi	r18, 0x01	; 1
     b72:	fc 01       	movw	r30, r24
     b74:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     b76:	84 e0       	ldi	r24, 0x04	; 4
     b78:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = u8Status;
     b82:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <u8Status>
     b86:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     b8a:	63 e0       	ldi	r22, 0x03	; 3
     b8c:	86 ee       	ldi	r24, 0xE6	; 230
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	0e 94 07 10 	call	0x200e	; 0x200e <CRC8>
     b94:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     b98:	84 e0       	ldi	r24, 0x04	; 4
     b9a:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     b9e:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     ba2:	83 e0       	ldi	r24, 0x03	; 3
     ba4:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <SPIBUFFER+0x42>
				break;
     ba8:	82 c0       	rjmp	.+260    	; 0xcae <__vector_19+0x244>
				
				case 0xF2:
					SPDR0 = 0x01;
     baa:	8e e4       	ldi	r24, 0x4E	; 78
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	21 e0       	ldi	r18, 0x01	; 1
     bb0:	fc 01       	movw	r30, r24
     bb2:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     bb4:	84 e0       	ldi	r24, 0x04	; 4
     bb6:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = u8Duty;
     bc0:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <u8Duty>
     bc4:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     bc8:	63 e0       	ldi	r22, 0x03	; 3
     bca:	86 ee       	ldi	r24, 0xE6	; 230
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	0e 94 07 10 	call	0x200e	; 0x200e <CRC8>
     bd2:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     bd6:	84 e0       	ldi	r24, 0x04	; 4
     bd8:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     bdc:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     be0:	83 e0       	ldi	r24, 0x03	; 3
     be2:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <SPIBUFFER+0x42>
				break;
     be6:	63 c0       	rjmp	.+198    	; 0xcae <__vector_19+0x244>
				
				case 0xF3:
					SPDR0 = 0x01;
     be8:	8e e4       	ldi	r24, 0x4E	; 78
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	21 e0       	ldi	r18, 0x01	; 1
     bee:	fc 01       	movw	r30, r24
     bf0:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     bf2:	84 e0       	ldi	r24, 0x04	; 4
     bf4:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = adcGetTemperature();
     bfe:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <adcGetTemperature>
     c02:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     c06:	63 e0       	ldi	r22, 0x03	; 3
     c08:	86 ee       	ldi	r24, 0xE6	; 230
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	0e 94 07 10 	call	0x200e	; 0x200e <CRC8>
     c10:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     c14:	84 e0       	ldi	r24, 0x04	; 4
     c16:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     c1a:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     c1e:	83 e0       	ldi	r24, 0x03	; 3
     c20:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <SPIBUFFER+0x42>
				break;
     c24:	44 c0       	rjmp	.+136    	; 0xcae <__vector_19+0x244>

				case 0xF4:
					SPDR0 = 0x01;
     c26:	8e e4       	ldi	r24, 0x4E	; 78
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	21 e0       	ldi	r18, 0x01	; 1
     c2c:	fc 01       	movw	r30, r24
     c2e:	20 83       	st	Z, r18
					if(u8PLEDFadeActive) // ongoing fade
     c30:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <u8PLEDFadeActive>
     c34:	88 23       	and	r24, r24
     c36:	09 f1       	breq	.+66     	; 0xc7a <__vector_19+0x210>
					{
						SPIBUFFER.au8Buffer[0] = 7;
     c38:	87 e0       	ldi	r24, 0x07	; 7
     c3a:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <SPIBUFFER>
						SPIBUFFER.au8Buffer[1] = u8spiData;
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <SPIBUFFER+0x1>
						SPIBUFFER.au8Buffer[2] = u8PLEDFadeStartPercent;
     c44:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <u8PLEDFadeStartPercent>
     c48:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <SPIBUFFER+0x2>
						SPIBUFFER.au8Buffer[3] = u8PLEDFadeStopPercent;
     c4c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8PLEDFadeStopPercent>
     c50:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <SPIBUFFER+0x3>
						SPIBUFFER.au8Buffer[4] = u8PLEDFadeTime;
     c54:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <u8PLEDFadeTime>
     c58:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <SPIBUFFER+0x4>
						SPIBUFFER.au8Buffer[5] = u8Duty;
     c5c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <u8Duty>
     c60:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <SPIBUFFER+0x5>
						SPIBUFFER.au8Buffer[6] = CRC8(&SPIBUFFER.au8Buffer[0],6);
     c64:	66 e0       	ldi	r22, 0x06	; 6
     c66:	86 ee       	ldi	r24, 0xE6	; 230
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	0e 94 07 10 	call	0x200e	; 0x200e <CRC8>
     c6e:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <SPIBUFFER+0x6>
						SPIBUFFER.u8Count = 7;
     c72:	87 e0       	ldi	r24, 0x07	; 7
     c74:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <SPIBUFFER+0x40>
     c78:	10 c0       	rjmp	.+32     	; 0xc9a <__vector_19+0x230>
					}
					else // no ongoing fade
					{
						SPIBUFFER.au8Buffer[0] = 3;
     c7a:	83 e0       	ldi	r24, 0x03	; 3
     c7c:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <SPIBUFFER>
						SPIBUFFER.au8Buffer[1] = u8spiData;
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <SPIBUFFER+0x1>
						SPIBUFFER.au8Buffer[2] = CRC8(&SPIBUFFER.au8Buffer[0],2);
     c86:	62 e0       	ldi	r22, 0x02	; 2
     c88:	86 ee       	ldi	r24, 0xE6	; 230
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	0e 94 07 10 	call	0x200e	; 0x200e <CRC8>
     c90:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <SPIBUFFER+0x2>
						SPIBUFFER.u8Count = 3;
     c94:	83 e0       	ldi	r24, 0x03	; 3
     c96:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <SPIBUFFER+0x40>
					}
					SPIBUFFER.u8ReadReturnCount = 0;
     c9a:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     c9e:	83 e0       	ldi	r24, 0x03	; 3
     ca0:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <SPIBUFFER+0x42>
				break;
     ca4:	04 c0       	rjmp	.+8      	; 0xcae <__vector_19+0x244>
				
				default:
					SPIBUFFER.spiState = IDLE;
     ca6:	86 e0       	ldi	r24, 0x06	; 6
     ca8:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <SPIBUFFER+0x42>
				break;
     cac:	00 00       	nop
			}
		break;
     cae:	20 c0       	rjmp	.+64     	; 0xcf0 <__vector_19+0x286>
		
		case READ_RETURN:
			SPDR0 = SPIBUFFER.au8Buffer[SPIBUFFER.u8ReadReturnCount];
     cb0:	8e e4       	ldi	r24, 0x4E	; 78
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	20 91 27 02 	lds	r18, 0x0227	; 0x800227 <SPIBUFFER+0x41>
     cb8:	22 2f       	mov	r18, r18
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	2a 51       	subi	r18, 0x1A	; 26
     cbe:	3e 4f       	sbci	r19, 0xFE	; 254
     cc0:	f9 01       	movw	r30, r18
     cc2:	20 81       	ld	r18, Z
     cc4:	fc 01       	movw	r30, r24
     cc6:	20 83       	st	Z, r18
			SPIBUFFER.u8ReadReturnCount++;
     cc8:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <SPIBUFFER+0x41>
     ccc:	8f 5f       	subi	r24, 0xFF	; 255
     cce:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <SPIBUFFER+0x41>
			if(SPIBUFFER.u8Count == SPIBUFFER.u8ReadReturnCount)
     cd2:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <SPIBUFFER+0x40>
     cd6:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <SPIBUFFER+0x41>
     cda:	98 17       	cp	r25, r24
     cdc:	41 f4       	brne	.+16     	; 0xcee <__vector_19+0x284>
			{
				SPIBUFFER.spiState = DONE_READ;
     cde:	85 e0       	ldi	r24, 0x05	; 5
     ce0:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <SPIBUFFER+0x42>
			}
		break;
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <__vector_19+0x284>
		
		break;

		case IDLE:

		break;
     ce6:	00 00       	nop
     ce8:	03 c0       	rjmp	.+6      	; 0xcf0 <__vector_19+0x286>
			SPIBUFFER.u8Count++;
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
			{
				SPIBUFFER.spiState = DONE_WRITE;
			}
		break;
     cea:	00 00       	nop
     cec:	01 c0       	rjmp	.+2      	; 0xcf0 <__vector_19+0x286>
			SPIBUFFER.u8ReadReturnCount++;
			if(SPIBUFFER.u8Count == SPIBUFFER.u8ReadReturnCount)
			{
				SPIBUFFER.spiState = DONE_READ;
			}
		break;
     cee:	00 00       	nop
		break;
	}
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
	#endif
}
     cf0:	00 00       	nop
     cf2:	0f 90       	pop	r0
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	ff 91       	pop	r31
     cfa:	ef 91       	pop	r30
     cfc:	bf 91       	pop	r27
     cfe:	af 91       	pop	r26
     d00:	9f 91       	pop	r25
     d02:	8f 91       	pop	r24
     d04:	7f 91       	pop	r23
     d06:	6f 91       	pop	r22
     d08:	5f 91       	pop	r21
     d0a:	4f 91       	pop	r20
     d0c:	3f 91       	pop	r19
     d0e:	2f 91       	pop	r18
     d10:	0f 90       	pop	r0
     d12:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d16:	0f 90       	pop	r0
     d18:	1f 90       	pop	r1
     d1a:	18 95       	reti

00000d1c <__vector_5>:

ISR(PCINT1_vect)
{
     d1c:	1f 92       	push	r1
     d1e:	0f 92       	push	r0
     d20:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d24:	0f 92       	push	r0
     d26:	11 24       	eor	r1, r1
     d28:	af 92       	push	r10
     d2a:	bf 92       	push	r11
     d2c:	cf 92       	push	r12
     d2e:	df 92       	push	r13
     d30:	ef 92       	push	r14
     d32:	ff 92       	push	r15
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	2f 93       	push	r18
     d3a:	3f 93       	push	r19
     d3c:	4f 93       	push	r20
     d3e:	5f 93       	push	r21
     d40:	6f 93       	push	r22
     d42:	7f 93       	push	r23
     d44:	8f 93       	push	r24
     d46:	9f 93       	push	r25
     d48:	af 93       	push	r26
     d4a:	bf 93       	push	r27
     d4c:	ef 93       	push	r30
     d4e:	ff 93       	push	r31
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
	#endif
	
	SPDR0 = 0;
     d58:	8e e4       	ldi	r24, 0x4E	; 78
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	fc 01       	movw	r30, r24
     d5e:	10 82       	st	Z, r1
	if(PIN_SPI & (1<<SPI_SS)) // SS HIGH
     d60:	83 e2       	ldi	r24, 0x23	; 35
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	fc 01       	movw	r30, r24
     d66:	80 81       	ld	r24, Z
     d68:	88 2f       	mov	r24, r24
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	80 71       	andi	r24, 0x10	; 16
     d6e:	99 27       	eor	r25, r25
     d70:	89 2b       	or	r24, r25
     d72:	09 f4       	brne	.+2      	; 0xd76 <__vector_5+0x5a>
     d74:	e1 c1       	rjmp	.+962    	; 0x1138 <__vector_5+0x41c>
	{
		
		if(SPIBUFFER.spiState == DONE_WRITE)
     d76:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <SPIBUFFER+0x42>
     d7a:	84 30       	cpi	r24, 0x04	; 4
     d7c:	09 f0       	breq	.+2      	; 0xd80 <__vector_5+0x64>
     d7e:	ee c1       	rjmp	.+988    	; 0x115c <__vector_5+0x440>
		{
			if(SPIBUFFER.u8Count == SPIBUFFER.au8Buffer[0]) // correct amount of bytes in buffer
     d80:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <SPIBUFFER+0x40>
     d84:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <SPIBUFFER>
     d88:	98 17       	cp	r25, r24
     d8a:	09 f0       	breq	.+2      	; 0xd8e <__vector_5+0x72>
     d8c:	e7 c1       	rjmp	.+974    	; 0x115c <__vector_5+0x440>
			{
				if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
     d8e:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <SPIBUFFER+0x40>
     d92:	68 2f       	mov	r22, r24
     d94:	86 ee       	ldi	r24, 0xE6	; 230
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	0e 94 07 10 	call	0x200e	; 0x200e <CRC8>
     d9c:	88 23       	and	r24, r24
     d9e:	09 f0       	breq	.+2      	; 0xda2 <__vector_5+0x86>
     da0:	dd c1       	rjmp	.+954    	; 0x115c <__vector_5+0x440>
				{
					switch(SPIBUFFER.au8Buffer[1]) // command
     da2:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <SPIBUFFER+0x1>
     da6:	88 2f       	mov	r24, r24
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	09 2e       	mov	r0, r25
     dac:	00 0c       	add	r0, r0
     dae:	aa 0b       	sbc	r26, r26
     db0:	bb 0b       	sbc	r27, r27
     db2:	41 e1       	ldi	r20, 0x11	; 17
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	22 e2       	ldi	r18, 0x22	; 34
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	84 1b       	sub	r24, r20
     dbc:	95 0b       	sbc	r25, r21
     dbe:	28 17       	cp	r18, r24
     dc0:	39 07       	cpc	r19, r25
     dc2:	08 f4       	brcc	.+2      	; 0xdc6 <__vector_5+0xaa>
     dc4:	cb c1       	rjmp	.+918    	; 0x115c <__vector_5+0x440>
     dc6:	8b 5b       	subi	r24, 0xBB	; 187
     dc8:	9f 4f       	sbci	r25, 0xFF	; 255
     dca:	fc 01       	movw	r30, r24
     dcc:	0c 94 b1 10 	jmp	0x2162	; 0x2162 <__tablejump2__>
					{
						case 0x11:
						if(SPIBUFFER.u8Count == 3)
     dd0:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <SPIBUFFER+0x40>
     dd4:	83 30       	cpi	r24, 0x03	; 3
     dd6:	09 f0       	breq	.+2      	; 0xdda <__vector_5+0xbe>
     dd8:	b4 c1       	rjmp	.+872    	; 0x1142 <__vector_5+0x426>
						{
							enablePLED();
     dda:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <enablePLED>
							u8Status |= (1<<STATUS_PLED);
     dde:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <u8Status>
     de2:	81 60       	ori	r24, 0x01	; 1
     de4:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <u8Status>
						}
						break;
     de8:	ac c1       	rjmp	.+856    	; 0x1142 <__vector_5+0x426>

						case 0x12:
						if(SPIBUFFER.u8Count == 3)
     dea:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <SPIBUFFER+0x40>
     dee:	83 30       	cpi	r24, 0x03	; 3
     df0:	09 f0       	breq	.+2      	; 0xdf4 <__vector_5+0xd8>
     df2:	a9 c1       	rjmp	.+850    	; 0x1146 <__vector_5+0x42a>
						{
							disablePLED();
     df4:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <disablePLED>
							u8Status &= ~(1<<STATUS_PLED);
     df8:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <u8Status>
     dfc:	8e 7f       	andi	r24, 0xFE	; 254
     dfe:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <u8Status>
						}
						break;
     e02:	a1 c1       	rjmp	.+834    	; 0x1146 <__vector_5+0x42a>

						case 0x13:
						if(SPIBUFFER.u8Count == 4)
     e04:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <SPIBUFFER+0x40>
     e08:	84 30       	cpi	r24, 0x04	; 4
     e0a:	09 f0       	breq	.+2      	; 0xe0e <__vector_5+0xf2>
     e0c:	9e c1       	rjmp	.+828    	; 0x114a <__vector_5+0x42e>
						{
							if(u8PLEDFadeActive == 0)
     e0e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <u8PLEDFadeActive>
     e12:	88 23       	and	r24, r24
     e14:	09 f0       	breq	.+2      	; 0xe18 <__vector_5+0xfc>
     e16:	99 c1       	rjmp	.+818    	; 0x114a <__vector_5+0x42e>
							{
								if(SPIBUFFER.au8Buffer[2]>100)
     e18:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <SPIBUFFER+0x2>
     e1c:	85 36       	cpi	r24, 0x65	; 101
     e1e:	20 f0       	brcs	.+8      	; 0xe28 <__vector_5+0x10c>
								{
									u8Duty = 100;
     e20:	84 e6       	ldi	r24, 0x64	; 100
     e22:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <u8Duty>
     e26:	04 c0       	rjmp	.+8      	; 0xe30 <__vector_5+0x114>
								}
								else
								{
									u8Duty = SPIBUFFER.au8Buffer[2];
     e28:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <SPIBUFFER+0x2>
     e2c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <u8Duty>
								}
								setPWMDutyPercent(u8Duty);
     e30:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <u8Duty>
     e34:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <setPWMDutyPercent>
							}
						}
						break;
     e38:	88 c1       	rjmp	.+784    	; 0x114a <__vector_5+0x42e>

						case 0x14:
						if(SPIBUFFER.u8Count == 6)
     e3a:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <SPIBUFFER+0x40>
     e3e:	86 30       	cpi	r24, 0x06	; 6
     e40:	09 f0       	breq	.+2      	; 0xe44 <__vector_5+0x128>
     e42:	85 c1       	rjmp	.+778    	; 0x114e <__vector_5+0x432>
						{	
							if(SPIBUFFER.au8Buffer[2]>100)
     e44:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <SPIBUFFER+0x2>
     e48:	85 36       	cpi	r24, 0x65	; 101
     e4a:	20 f0       	brcs	.+8      	; 0xe54 <__vector_5+0x138>
							{
								u8PLEDFadeStartPercent=100;
     e4c:	84 e6       	ldi	r24, 0x64	; 100
     e4e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <u8PLEDFadeStartPercent>
     e52:	04 c0       	rjmp	.+8      	; 0xe5c <__vector_5+0x140>
							}
							else
							{
								u8PLEDFadeStartPercent = SPIBUFFER.au8Buffer[2];
     e54:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <SPIBUFFER+0x2>
     e58:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <u8PLEDFadeStartPercent>
							}
							
							if(SPIBUFFER.au8Buffer[3]>100)
     e5c:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <SPIBUFFER+0x3>
     e60:	85 36       	cpi	r24, 0x65	; 101
     e62:	20 f0       	brcs	.+8      	; 0xe6c <__vector_5+0x150>
							{
								u8PLEDFadeStopPercent=100;
     e64:	84 e6       	ldi	r24, 0x64	; 100
     e66:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8PLEDFadeStopPercent>
     e6a:	04 c0       	rjmp	.+8      	; 0xe74 <__vector_5+0x158>
							}
							else
							{
								u8PLEDFadeStopPercent = SPIBUFFER.au8Buffer[3];
     e6c:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <SPIBUFFER+0x3>
     e70:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8PLEDFadeStopPercent>
							}
							
							u16PLEDFadeStartValue = Map(u8PLEDFadeStartPercent,0,100,0,511);
     e74:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <u8PLEDFadeStartPercent>
     e78:	88 2f       	mov	r24, r24
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	a0 e0       	ldi	r26, 0x00	; 0
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	1f 92       	push	r1
     e82:	1f 92       	push	r1
     e84:	21 e0       	ldi	r18, 0x01	; 1
     e86:	2f 93       	push	r18
     e88:	2f ef       	ldi	r18, 0xFF	; 255
     e8a:	2f 93       	push	r18
     e8c:	a1 2c       	mov	r10, r1
     e8e:	b1 2c       	mov	r11, r1
     e90:	65 01       	movw	r12, r10
     e92:	14 e6       	ldi	r17, 0x64	; 100
     e94:	e1 2e       	mov	r14, r17
     e96:	f1 2c       	mov	r15, r1
     e98:	00 e0       	ldi	r16, 0x00	; 0
     e9a:	10 e0       	ldi	r17, 0x00	; 0
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	a9 01       	movw	r20, r18
     ea2:	bc 01       	movw	r22, r24
     ea4:	cd 01       	movw	r24, r26
     ea6:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <Map>
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <u16PLEDFadeStartValue+0x1>
     eba:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <u16PLEDFadeStartValue>
							u16PLEDFadeStopValue = Map(u8PLEDFadeStopPercent,0,100,0,511);
     ebe:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8PLEDFadeStopPercent>
     ec2:	88 2f       	mov	r24, r24
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	a0 e0       	ldi	r26, 0x00	; 0
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	1f 92       	push	r1
     ecc:	1f 92       	push	r1
     ece:	21 e0       	ldi	r18, 0x01	; 1
     ed0:	2f 93       	push	r18
     ed2:	2f ef       	ldi	r18, 0xFF	; 255
     ed4:	2f 93       	push	r18
     ed6:	a1 2c       	mov	r10, r1
     ed8:	b1 2c       	mov	r11, r1
     eda:	65 01       	movw	r12, r10
     edc:	14 e6       	ldi	r17, 0x64	; 100
     ede:	e1 2e       	mov	r14, r17
     ee0:	f1 2c       	mov	r15, r1
     ee2:	00 e0       	ldi	r16, 0x00	; 0
     ee4:	10 e0       	ldi	r17, 0x00	; 0
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	a9 01       	movw	r20, r18
     eec:	bc 01       	movw	r22, r24
     eee:	cd 01       	movw	r24, r26
     ef0:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <Map>
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <u16PLEDFadeStopValue+0x1>
     f04:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <u16PLEDFadeStopValue>
							u8PLEDFadeTime = SPIBUFFER.au8Buffer[4];
     f08:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <SPIBUFFER+0x4>
     f0c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <u8PLEDFadeTime>
							
							setPWMDuty(u16PLEDFadeStartValue);
     f10:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16PLEDFadeStartValue>
     f14:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16PLEDFadeStartValue+0x1>
     f18:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <setPWMDuty>
							u8Duty = u8PLEDFadeStartPercent;
     f1c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <u8PLEDFadeStartPercent>
     f20:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <u8Duty>
							u16PLEDFadeCurrValue = u16PLEDFadeStartValue;
     f24:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16PLEDFadeStartValue>
     f28:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16PLEDFadeStartValue+0x1>
     f2c:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <u16PLEDFadeCurrValue+0x1>
     f30:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <u16PLEDFadeCurrValue>
							u32PLEDFadeIntCount = 0;
     f34:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <u32PLEDFadeIntCount>
     f38:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <u32PLEDFadeIntCount+0x1>
     f3c:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <u32PLEDFadeIntCount+0x2>
     f40:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <u32PLEDFadeIntCount+0x3>
							
							if(u8PLEDFadeStartPercent<u8PLEDFadeStopPercent) // PLED rise
     f44:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <u8PLEDFadeStartPercent>
     f48:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8PLEDFadeStopPercent>
     f4c:	98 17       	cp	r25, r24
     f4e:	58 f5       	brcc	.+86     	; 0xfa6 <__vector_5+0x28a>
							{
								u32PLEDFadeIntStep = 6000*u8PLEDFadeTime/(u16PLEDFadeStopValue-u16PLEDFadeStartValue);
     f50:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <u8PLEDFadeTime>
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	80 e7       	ldi	r24, 0x70	; 112
     f5a:	97 e1       	ldi	r25, 0x17	; 23
     f5c:	28 9f       	mul	r18, r24
     f5e:	a0 01       	movw	r20, r0
     f60:	29 9f       	mul	r18, r25
     f62:	50 0d       	add	r21, r0
     f64:	38 9f       	mul	r19, r24
     f66:	50 0d       	add	r21, r0
     f68:	11 24       	eor	r1, r1
     f6a:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <u16PLEDFadeStopValue>
     f6e:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <u16PLEDFadeStopValue+0x1>
     f72:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16PLEDFadeStartValue>
     f76:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16PLEDFadeStartValue+0x1>
     f7a:	28 1b       	sub	r18, r24
     f7c:	39 0b       	sbc	r19, r25
     f7e:	ca 01       	movw	r24, r20
     f80:	b9 01       	movw	r22, r18
     f82:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__udivmodhi4>
     f86:	cb 01       	movw	r24, r22
     f88:	cc 01       	movw	r24, r24
     f8a:	a0 e0       	ldi	r26, 0x00	; 0
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <u32PLEDFadeIntStep>
     f92:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <u32PLEDFadeIntStep+0x1>
     f96:	a0 93 59 01 	sts	0x0159, r26	; 0x800159 <u32PLEDFadeIntStep+0x2>
     f9a:	b0 93 5a 01 	sts	0x015A, r27	; 0x80015a <u32PLEDFadeIntStep+0x3>
								u8PLEDFadeDirection = 1;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <u8PLEDFadeDirection>
     fa4:	2f c0       	rjmp	.+94     	; 0x1004 <__vector_5+0x2e8>
							}
							else if(u8PLEDFadeStartPercent>u8PLEDFadeStopPercent) // PLED fall
     fa6:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <u8PLEDFadeStartPercent>
     faa:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8PLEDFadeStopPercent>
     fae:	89 17       	cp	r24, r25
     fb0:	48 f5       	brcc	.+82     	; 0x1004 <__vector_5+0x2e8>
							{
								u32PLEDFadeIntStep = 6000*u8PLEDFadeTime/(u16PLEDFadeStartValue-u16PLEDFadeStopValue);
     fb2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <u8PLEDFadeTime>
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	80 e7       	ldi	r24, 0x70	; 112
     fbc:	97 e1       	ldi	r25, 0x17	; 23
     fbe:	28 9f       	mul	r18, r24
     fc0:	a0 01       	movw	r20, r0
     fc2:	29 9f       	mul	r18, r25
     fc4:	50 0d       	add	r21, r0
     fc6:	38 9f       	mul	r19, r24
     fc8:	50 0d       	add	r21, r0
     fca:	11 24       	eor	r1, r1
     fcc:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <u16PLEDFadeStartValue>
     fd0:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <u16PLEDFadeStartValue+0x1>
     fd4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16PLEDFadeStopValue>
     fd8:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16PLEDFadeStopValue+0x1>
     fdc:	28 1b       	sub	r18, r24
     fde:	39 0b       	sbc	r19, r25
     fe0:	ca 01       	movw	r24, r20
     fe2:	b9 01       	movw	r22, r18
     fe4:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__udivmodhi4>
     fe8:	cb 01       	movw	r24, r22
     fea:	cc 01       	movw	r24, r24
     fec:	a0 e0       	ldi	r26, 0x00	; 0
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <u32PLEDFadeIntStep>
     ff4:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <u32PLEDFadeIntStep+0x1>
     ff8:	a0 93 59 01 	sts	0x0159, r26	; 0x800159 <u32PLEDFadeIntStep+0x2>
     ffc:	b0 93 5a 01 	sts	0x015A, r27	; 0x80015a <u32PLEDFadeIntStep+0x3>
								u8PLEDFadeDirection = 0;
    1000:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <u8PLEDFadeDirection>
							}
							
							u8PLEDFadeActive = 1;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <u8PLEDFadeActive>
						}
						break;
    100a:	a1 c0       	rjmp	.+322    	; 0x114e <__vector_5+0x432>
						
						case 0x15:
						u8PLEDFadeActive = 0;
    100c:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <u8PLEDFadeActive>
						break;
    1010:	a5 c0       	rjmp	.+330    	; 0x115c <__vector_5+0x440>
					
						case 0x21:
						if(SPIBUFFER.u8Count == 3)
    1012:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <SPIBUFFER+0x40>
    1016:	83 30       	cpi	r24, 0x03	; 3
    1018:	09 f0       	breq	.+2      	; 0x101c <__vector_5+0x300>
    101a:	9b c0       	rjmp	.+310    	; 0x1152 <__vector_5+0x436>
						{
							enableAudio();
    101c:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <enableAudio>
							u8Status |= (1<<STATUS_AUDIO);
    1020:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <u8Status>
    1024:	82 60       	ori	r24, 0x02	; 2
    1026:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <u8Status>
						}
						break;
    102a:	93 c0       	rjmp	.+294    	; 0x1152 <__vector_5+0x436>

						case 0x22:
						if(SPIBUFFER.u8Count == 3)
    102c:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <SPIBUFFER+0x40>
    1030:	83 30       	cpi	r24, 0x03	; 3
    1032:	09 f0       	breq	.+2      	; 0x1036 <__vector_5+0x31a>
    1034:	90 c0       	rjmp	.+288    	; 0x1156 <__vector_5+0x43a>
						{
							standbyAudio();
    1036:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <standbyAudio>
							u8Status &= ~(1<<STATUS_AUDIO);
    103a:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <u8Status>
    103e:	8d 7f       	andi	r24, 0xFD	; 253
    1040:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <u8Status>
						}
						break;
    1044:	88 c0       	rjmp	.+272    	; 0x1156 <__vector_5+0x43a>
					
						case 0x23:
						if(SPIBUFFER.u8Count == 4)
    1046:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <SPIBUFFER+0x40>
    104a:	84 30       	cpi	r24, 0x04	; 4
    104c:	09 f0       	breq	.+2      	; 0x1050 <__vector_5+0x334>
    104e:	85 c0       	rjmp	.+266    	; 0x115a <__vector_5+0x43e>
						{
							setVolume(SPIBUFFER.au8Buffer[2]);
    1050:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <SPIBUFFER+0x2>
    1054:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <setVolume>
						}
						break;
    1058:	80 c0       	rjmp	.+256    	; 0x115a <__vector_5+0x43e>
						
						case 0x31:
						RingBuffer_Insert(&RINGBUFFER,0x31);
    105a:	61 e3       	ldi	r22, 0x31	; 49
    105c:	81 e6       	ldi	r24, 0x61	; 97
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
						RingBuffer_Insert(&RINGBUFFER,0xFF);						
    1064:	6f ef       	ldi	r22, 0xFF	; 255
    1066:	81 e6       	ldi	r24, 0x61	; 97
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
						break;
    106e:	76 c0       	rjmp	.+236    	; 0x115c <__vector_5+0x440>
						
						case 0x32:
						if(SPIBUFFER.u8Count == 6)
    1070:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <SPIBUFFER+0x40>
    1074:	86 30       	cpi	r24, 0x06	; 6
    1076:	f9 f4       	brne	.+62     	; 0x10b6 <__vector_5+0x39a>
						{
							RingBuffer_Insert(&RINGBUFFER,0x32);
    1078:	62 e3       	ldi	r22, 0x32	; 50
    107a:	81 e6       	ldi	r24, 0x61	; 97
    107c:	91 e0       	ldi	r25, 0x01	; 1
    107e:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[2]);
    1082:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <SPIBUFFER+0x2>
    1086:	68 2f       	mov	r22, r24
    1088:	81 e6       	ldi	r24, 0x61	; 97
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[3]);
    1090:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <SPIBUFFER+0x3>
    1094:	68 2f       	mov	r22, r24
    1096:	81 e6       	ldi	r24, 0x61	; 97
    1098:	91 e0       	ldi	r25, 0x01	; 1
    109a:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[4]);
    109e:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <SPIBUFFER+0x4>
    10a2:	68 2f       	mov	r22, r24
    10a4:	81 e6       	ldi	r24, 0x61	; 97
    10a6:	91 e0       	ldi	r25, 0x01	; 1
    10a8:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,0xFF);
    10ac:	6f ef       	ldi	r22, 0xFF	; 255
    10ae:	81 e6       	ldi	r24, 0x61	; 97
    10b0:	91 e0       	ldi	r25, 0x01	; 1
    10b2:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
						}
						
						case 0x33:
						if(SPIBUFFER.u8Count == 10)
    10b6:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <SPIBUFFER+0x40>
    10ba:	8a 30       	cpi	r24, 0x0A	; 10
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <__vector_5+0x3a4>
    10be:	4e c0       	rjmp	.+156    	; 0x115c <__vector_5+0x440>
						{
							RingBuffer_Insert(&RINGBUFFER,0x33);
    10c0:	63 e3       	ldi	r22, 0x33	; 51
    10c2:	81 e6       	ldi	r24, 0x61	; 97
    10c4:	91 e0       	ldi	r25, 0x01	; 1
    10c6:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[2]);
    10ca:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <SPIBUFFER+0x2>
    10ce:	68 2f       	mov	r22, r24
    10d0:	81 e6       	ldi	r24, 0x61	; 97
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[3]);
    10d8:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <SPIBUFFER+0x3>
    10dc:	68 2f       	mov	r22, r24
    10de:	81 e6       	ldi	r24, 0x61	; 97
    10e0:	91 e0       	ldi	r25, 0x01	; 1
    10e2:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[4]);
    10e6:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <SPIBUFFER+0x4>
    10ea:	68 2f       	mov	r22, r24
    10ec:	81 e6       	ldi	r24, 0x61	; 97
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[5]);
    10f4:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <SPIBUFFER+0x5>
    10f8:	68 2f       	mov	r22, r24
    10fa:	81 e6       	ldi	r24, 0x61	; 97
    10fc:	91 e0       	ldi	r25, 0x01	; 1
    10fe:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[6]);
    1102:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <SPIBUFFER+0x6>
    1106:	68 2f       	mov	r22, r24
    1108:	81 e6       	ldi	r24, 0x61	; 97
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[7]);
    1110:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <SPIBUFFER+0x7>
    1114:	68 2f       	mov	r22, r24
    1116:	81 e6       	ldi	r24, 0x61	; 97
    1118:	91 e0       	ldi	r25, 0x01	; 1
    111a:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[8]);
    111e:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <SPIBUFFER+0x8>
    1122:	68 2f       	mov	r22, r24
    1124:	81 e6       	ldi	r24, 0x61	; 97
    1126:	91 e0       	ldi	r25, 0x01	; 1
    1128:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,0xFF);
    112c:	6f ef       	ldi	r22, 0xFF	; 255
    112e:	81 e6       	ldi	r24, 0x61	; 97
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
		SPIBUFFER.spiState = READY;
	}
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
	#endif
}
    1136:	12 c0       	rjmp	.+36     	; 0x115c <__vector_5+0x440>
			
		}
	}
	else // SS LOW
	{
		SPIBUFFER.u8Count = 0;
    1138:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <SPIBUFFER+0x40>
		SPIBUFFER.spiState = READY;
    113c:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <SPIBUFFER+0x42>
	}
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
	#endif
}
    1140:	0d c0       	rjmp	.+26     	; 0x115c <__vector_5+0x440>
						if(SPIBUFFER.u8Count == 3)
						{
							enablePLED();
							u8Status |= (1<<STATUS_PLED);
						}
						break;
    1142:	00 00       	nop
    1144:	0b c0       	rjmp	.+22     	; 0x115c <__vector_5+0x440>
						if(SPIBUFFER.u8Count == 3)
						{
							disablePLED();
							u8Status &= ~(1<<STATUS_PLED);
						}
						break;
    1146:	00 00       	nop
    1148:	09 c0       	rjmp	.+18     	; 0x115c <__vector_5+0x440>
									u8Duty = SPIBUFFER.au8Buffer[2];
								}
								setPWMDutyPercent(u8Duty);
							}
						}
						break;
    114a:	00 00       	nop
    114c:	07 c0       	rjmp	.+14     	; 0x115c <__vector_5+0x440>
								u8PLEDFadeDirection = 0;
							}
							
							u8PLEDFadeActive = 1;
						}
						break;
    114e:	00 00       	nop
    1150:	05 c0       	rjmp	.+10     	; 0x115c <__vector_5+0x440>
						if(SPIBUFFER.u8Count == 3)
						{
							enableAudio();
							u8Status |= (1<<STATUS_AUDIO);
						}
						break;
    1152:	00 00       	nop
    1154:	03 c0       	rjmp	.+6      	; 0x115c <__vector_5+0x440>
						if(SPIBUFFER.u8Count == 3)
						{
							standbyAudio();
							u8Status &= ~(1<<STATUS_AUDIO);
						}
						break;
    1156:	00 00       	nop
    1158:	01 c0       	rjmp	.+2      	; 0x115c <__vector_5+0x440>
						case 0x23:
						if(SPIBUFFER.u8Count == 4)
						{
							setVolume(SPIBUFFER.au8Buffer[2]);
						}
						break;
    115a:	00 00       	nop
		SPIBUFFER.spiState = READY;
	}
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
	#endif
}
    115c:	00 00       	nop
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	ff 91       	pop	r31
    1164:	ef 91       	pop	r30
    1166:	bf 91       	pop	r27
    1168:	af 91       	pop	r26
    116a:	9f 91       	pop	r25
    116c:	8f 91       	pop	r24
    116e:	7f 91       	pop	r23
    1170:	6f 91       	pop	r22
    1172:	5f 91       	pop	r21
    1174:	4f 91       	pop	r20
    1176:	3f 91       	pop	r19
    1178:	2f 91       	pop	r18
    117a:	1f 91       	pop	r17
    117c:	0f 91       	pop	r16
    117e:	ff 90       	pop	r15
    1180:	ef 90       	pop	r14
    1182:	df 90       	pop	r13
    1184:	cf 90       	pop	r12
    1186:	bf 90       	pop	r11
    1188:	af 90       	pop	r10
    118a:	0f 90       	pop	r0
    118c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1190:	0f 90       	pop	r0
    1192:	1f 90       	pop	r1
    1194:	18 95       	reti

00001196 <main>:
// 		
// 	}
// }

int main(void)
{
    1196:	df 92       	push	r13
    1198:	ef 92       	push	r14
    119a:	ff 92       	push	r15
    119c:	0f 93       	push	r16
    119e:	1f 93       	push	r17
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	28 97       	sbiw	r28, 0x08	; 8
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
	uint16_t i;
	uint8_t au8Command[8];
	portInit();
    11b4:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <portInit>
	adcInit();
    11b8:	0e 94 67 0e 	call	0x1cce	; 0x1cce <adcInit>
	initPWM(0);
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <initPWM>
	startPWM();
    11c4:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <startPWM>
	spiInitBuffer(&SPIBUFFER);
    11c8:	86 ee       	ldi	r24, 0xE6	; 230
    11ca:	91 e0       	ldi	r25, 0x01	; 1
    11cc:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <spiInitBuffer>
	spiSlaveInit();
    11d0:	0e 94 02 0c 	call	0x1804	; 0x1804 <spiSlaveInit>
 	spiPcInt();
    11d4:	0e 94 35 0c 	call	0x186a	; 0x186a <spiPcInt>
	RingBuffer_InitBuffer(&RINGBUFFER);
    11d8:	81 e6       	ldi	r24, 0x61	; 97
    11da:	91 e0       	ldi	r25, 0x01	; 1
    11dc:	0e 94 a5 00 	call	0x14a	; 0x14a <RingBuffer_InitBuffer>
	initRGBooster();
    11e0:	0e 94 9b 0b 	call	0x1736	; 0x1736 <initRGBooster>
	INT0_Init();
    11e4:	0e 94 80 0b 	call	0x1700	; 0x1700 <INT0_Init>
	INT_5ms_Init();
    11e8:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <INT_5ms_Init>

	wait_1ms(100);
    11ec:	84 e6       	ldi	r24, 0x64	; 100
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <wait_1ms>
	initAudio();
    11f4:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <initAudio>
	#ifdef INT_OUT
	DDRD |= (1<<DDRD1);
	PORTD &= ~(1<<PORTD1);
	#endif
		
	sei();
    11f8:	78 94       	sei
	
	u8RGBSingleColor = 0;
    11fa:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <u8RGBSingleColor>
	u8RGBByteIdx = 0;
    11fe:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
	u8RGBIdx = 0;
    1202:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <u8RGBIdx>
	INT0_vect();
    1206:	0e 94 3a 02 	call	0x474	; 0x474 <__vector_1>
	wait_1ms(100);
    120a:	84 e6       	ldi	r24, 0x64	; 100
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <wait_1ms>
	
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    1212:	61 e3       	ldi	r22, 0x31	; 49
    1214:	81 e6       	ldi	r24, 0x61	; 97
    1216:	91 e0       	ldi	r25, 0x01	; 1
    1218:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    121c:	6f ef       	ldi	r22, 0xFF	; 255
    121e:	81 e6       	ldi	r24, 0x61	; 97
    1220:	91 e0       	ldi	r25, 0x01	; 1
    1222:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    1226:	62 e3       	ldi	r22, 0x32	; 50
    1228:	81 e6       	ldi	r24, 0x61	; 97
    122a:	91 e0       	ldi	r25, 0x01	; 1
    122c:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    1230:	61 e0       	ldi	r22, 0x01	; 1
    1232:	81 e6       	ldi	r24, 0x61	; 97
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    123a:	61 e0       	ldi	r22, 0x01	; 1
    123c:	81 e6       	ldi	r24, 0x61	; 97
    123e:	91 e0       	ldi	r25, 0x01	; 1
    1240:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    1244:	60 e1       	ldi	r22, 0x10	; 16
    1246:	81 e6       	ldi	r24, 0x61	; 97
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    124e:	6f ef       	ldi	r22, 0xFF	; 255
    1250:	81 e6       	ldi	r24, 0x61	; 97
    1252:	91 e0       	ldi	r25, 0x01	; 1
    1254:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    1258:	61 e3       	ldi	r22, 0x31	; 49
    125a:	81 e6       	ldi	r24, 0x61	; 97
    125c:	91 e0       	ldi	r25, 0x01	; 1
    125e:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    1262:	6f ef       	ldi	r22, 0xFF	; 255
    1264:	81 e6       	ldi	r24, 0x61	; 97
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    126c:	62 e3       	ldi	r22, 0x32	; 50
    126e:	81 e6       	ldi	r24, 0x61	; 97
    1270:	91 e0       	ldi	r25, 0x01	; 1
    1272:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    1276:	61 e0       	ldi	r22, 0x01	; 1
    1278:	81 e6       	ldi	r24, 0x61	; 97
    127a:	91 e0       	ldi	r25, 0x01	; 1
    127c:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    1280:	61 e0       	ldi	r22, 0x01	; 1
    1282:	81 e6       	ldi	r24, 0x61	; 97
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    128a:	60 e1       	ldi	r22, 0x10	; 16
    128c:	81 e6       	ldi	r24, 0x61	; 97
    128e:	91 e0       	ldi	r25, 0x01	; 1
    1290:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    1294:	6f ef       	ldi	r22, 0xFF	; 255
    1296:	81 e6       	ldi	r24, 0x61	; 97
    1298:	91 e0       	ldi	r25, 0x01	; 1
    129a:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    129e:	61 e3       	ldi	r22, 0x31	; 49
    12a0:	81 e6       	ldi	r24, 0x61	; 97
    12a2:	91 e0       	ldi	r25, 0x01	; 1
    12a4:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    12a8:	6f ef       	ldi	r22, 0xFF	; 255
    12aa:	81 e6       	ldi	r24, 0x61	; 97
    12ac:	91 e0       	ldi	r25, 0x01	; 1
    12ae:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    12b2:	62 e3       	ldi	r22, 0x32	; 50
    12b4:	81 e6       	ldi	r24, 0x61	; 97
    12b6:	91 e0       	ldi	r25, 0x01	; 1
    12b8:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    12bc:	61 e0       	ldi	r22, 0x01	; 1
    12be:	81 e6       	ldi	r24, 0x61	; 97
    12c0:	91 e0       	ldi	r25, 0x01	; 1
    12c2:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    12c6:	61 e0       	ldi	r22, 0x01	; 1
    12c8:	81 e6       	ldi	r24, 0x61	; 97
    12ca:	91 e0       	ldi	r25, 0x01	; 1
    12cc:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    12d0:	60 e1       	ldi	r22, 0x10	; 16
    12d2:	81 e6       	ldi	r24, 0x61	; 97
    12d4:	91 e0       	ldi	r25, 0x01	; 1
    12d6:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    12da:	6f ef       	ldi	r22, 0xFF	; 255
    12dc:	81 e6       	ldi	r24, 0x61	; 97
    12de:	91 e0       	ldi	r25, 0x01	; 1
    12e0:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    12e4:	61 e3       	ldi	r22, 0x31	; 49
    12e6:	81 e6       	ldi	r24, 0x61	; 97
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    12ee:	6f ef       	ldi	r22, 0xFF	; 255
    12f0:	81 e6       	ldi	r24, 0x61	; 97
    12f2:	91 e0       	ldi	r25, 0x01	; 1
    12f4:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    12f8:	62 e3       	ldi	r22, 0x32	; 50
    12fa:	81 e6       	ldi	r24, 0x61	; 97
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    1302:	61 e0       	ldi	r22, 0x01	; 1
    1304:	81 e6       	ldi	r24, 0x61	; 97
    1306:	91 e0       	ldi	r25, 0x01	; 1
    1308:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    130c:	61 e0       	ldi	r22, 0x01	; 1
    130e:	81 e6       	ldi	r24, 0x61	; 97
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    1316:	60 e1       	ldi	r22, 0x10	; 16
    1318:	81 e6       	ldi	r24, 0x61	; 97
    131a:	91 e0       	ldi	r25, 0x01	; 1
    131c:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    1320:	6f ef       	ldi	r22, 0xFF	; 255
    1322:	81 e6       	ldi	r24, 0x61	; 97
    1324:	91 e0       	ldi	r25, 0x01	; 1
    1326:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    132a:	61 e3       	ldi	r22, 0x31	; 49
    132c:	81 e6       	ldi	r24, 0x61	; 97
    132e:	91 e0       	ldi	r25, 0x01	; 1
    1330:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    1334:	6f ef       	ldi	r22, 0xFF	; 255
    1336:	81 e6       	ldi	r24, 0x61	; 97
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    133e:	62 e3       	ldi	r22, 0x32	; 50
    1340:	81 e6       	ldi	r24, 0x61	; 97
    1342:	91 e0       	ldi	r25, 0x01	; 1
    1344:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    1348:	61 e0       	ldi	r22, 0x01	; 1
    134a:	81 e6       	ldi	r24, 0x61	; 97
    134c:	91 e0       	ldi	r25, 0x01	; 1
    134e:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    1352:	61 e0       	ldi	r22, 0x01	; 1
    1354:	81 e6       	ldi	r24, 0x61	; 97
    1356:	91 e0       	ldi	r25, 0x01	; 1
    1358:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    135c:	60 e1       	ldi	r22, 0x10	; 16
    135e:	81 e6       	ldi	r24, 0x61	; 97
    1360:	91 e0       	ldi	r25, 0x01	; 1
    1362:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    1366:	6f ef       	ldi	r22, 0xFF	; 255
    1368:	81 e6       	ldi	r24, 0x61	; 97
    136a:	91 e0       	ldi	r25, 0x01	; 1
    136c:	0e 94 de 00 	call	0x1bc	; 0x1bc <RingBuffer_Insert>
		
	
    while (1) 
    {
		if(u8RGBAnimationActive)
    1370:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u8RGBAnimationActive>
    1374:	88 23       	and	r24, r24
    1376:	09 f4       	brne	.+2      	; 0x137a <main+0x1e4>
    1378:	43 c1       	rjmp	.+646    	; 0x1600 <main+0x46a>
		{
			if(u8RGBNewDataReady==0)
    137a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8RGBNewDataReady>
    137e:	88 23       	and	r24, r24
    1380:	b9 f7       	brne	.-18     	; 0x1370 <main+0x1da>
			{
				if(u8RGBStartRed<u8RGBStopRed)
    1382:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <u8RGBStartRed>
    1386:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u8RGBStopRed>
    138a:	98 17       	cp	r25, r24
    138c:	88 f5       	brcc	.+98     	; 0x13f0 <main+0x25a>
				{
					u8RGBRed = (uint8_t)(((uint32_t)(u8RGBStopRed-u8RGBStartRed))*u16RGBTimeCounter/u16RGBTime + u8RGBStartRed);
    138e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u8RGBStopRed>
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    139a:	88 2f       	mov	r24, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	a9 01       	movw	r20, r18
    13a0:	48 1b       	sub	r20, r24
    13a2:	59 0b       	sbc	r21, r25
    13a4:	ca 01       	movw	r24, r20
    13a6:	9c 01       	movw	r18, r24
    13a8:	99 0f       	add	r25, r25
    13aa:	44 0b       	sbc	r20, r20
    13ac:	55 0b       	sbc	r21, r21
    13ae:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u16RGBTimeCounter>
    13b2:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <u16RGBTimeCounter+0x1>
    13b6:	cc 01       	movw	r24, r24
    13b8:	a0 e0       	ldi	r26, 0x00	; 0
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	bc 01       	movw	r22, r24
    13be:	cd 01       	movw	r24, r26
    13c0:	0e 94 4c 10 	call	0x2098	; 0x2098 <__mulsi3>
    13c4:	7b 01       	movw	r14, r22
    13c6:	8c 01       	movw	r16, r24
    13c8:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u16RGBTime>
    13cc:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <u16RGBTime+0x1>
    13d0:	9c 01       	movw	r18, r24
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	50 e0       	ldi	r21, 0x00	; 0
    13d6:	c8 01       	movw	r24, r16
    13d8:	b7 01       	movw	r22, r14
    13da:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__udivmodsi4>
    13de:	da 01       	movw	r26, r20
    13e0:	c9 01       	movw	r24, r18
    13e2:	98 2f       	mov	r25, r24
    13e4:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    13e8:	89 0f       	add	r24, r25
    13ea:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <u8RGBRed>
    13ee:	31 c0       	rjmp	.+98     	; 0x1452 <main+0x2bc>
				}
				else
				{
					u8RGBRed = (uint8_t)(u8RGBStartRed - ((uint32_t)(u8RGBStartRed-u8RGBStopRed))*u16RGBTimeCounter/u16RGBTime);
    13f0:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <u8RGBStartRed>
    13f4:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u8RGBStopRed>
    1400:	88 2f       	mov	r24, r24
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	a9 01       	movw	r20, r18
    1406:	48 1b       	sub	r20, r24
    1408:	59 0b       	sbc	r21, r25
    140a:	ca 01       	movw	r24, r20
    140c:	9c 01       	movw	r18, r24
    140e:	99 0f       	add	r25, r25
    1410:	44 0b       	sbc	r20, r20
    1412:	55 0b       	sbc	r21, r21
    1414:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u16RGBTimeCounter>
    1418:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <u16RGBTimeCounter+0x1>
    141c:	cc 01       	movw	r24, r24
    141e:	a0 e0       	ldi	r26, 0x00	; 0
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	bc 01       	movw	r22, r24
    1424:	cd 01       	movw	r24, r26
    1426:	0e 94 4c 10 	call	0x2098	; 0x2098 <__mulsi3>
    142a:	7b 01       	movw	r14, r22
    142c:	8c 01       	movw	r16, r24
    142e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u16RGBTime>
    1432:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <u16RGBTime+0x1>
    1436:	9c 01       	movw	r18, r24
    1438:	40 e0       	ldi	r20, 0x00	; 0
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	c8 01       	movw	r24, r16
    143e:	b7 01       	movw	r22, r14
    1440:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__udivmodsi4>
    1444:	da 01       	movw	r26, r20
    1446:	c9 01       	movw	r24, r18
    1448:	5d 2d       	mov	r21, r13
    144a:	58 1b       	sub	r21, r24
    144c:	85 2f       	mov	r24, r21
    144e:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <u8RGBRed>
				}
				
				if(u8RGBStartGreen<u8RGBStopGreen)
    1452:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <u8RGBStartGreen>
    1456:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8RGBStopGreen>
    145a:	98 17       	cp	r25, r24
    145c:	88 f5       	brcc	.+98     	; 0x14c0 <main+0x32a>
				{
					u8RGBGreen = (uint8_t)(((uint32_t)(u8RGBStopGreen-u8RGBStartGreen))*u16RGBTimeCounter/u16RGBTime + u8RGBStartGreen);
    145e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8RGBStopGreen>
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    146a:	88 2f       	mov	r24, r24
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	a9 01       	movw	r20, r18
    1470:	48 1b       	sub	r20, r24
    1472:	59 0b       	sbc	r21, r25
    1474:	ca 01       	movw	r24, r20
    1476:	9c 01       	movw	r18, r24
    1478:	99 0f       	add	r25, r25
    147a:	44 0b       	sbc	r20, r20
    147c:	55 0b       	sbc	r21, r21
    147e:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u16RGBTimeCounter>
    1482:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <u16RGBTimeCounter+0x1>
    1486:	cc 01       	movw	r24, r24
    1488:	a0 e0       	ldi	r26, 0x00	; 0
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	bc 01       	movw	r22, r24
    148e:	cd 01       	movw	r24, r26
    1490:	0e 94 4c 10 	call	0x2098	; 0x2098 <__mulsi3>
    1494:	7b 01       	movw	r14, r22
    1496:	8c 01       	movw	r16, r24
    1498:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u16RGBTime>
    149c:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <u16RGBTime+0x1>
    14a0:	9c 01       	movw	r18, r24
    14a2:	40 e0       	ldi	r20, 0x00	; 0
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	c8 01       	movw	r24, r16
    14a8:	b7 01       	movw	r22, r14
    14aa:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__udivmodsi4>
    14ae:	da 01       	movw	r26, r20
    14b0:	c9 01       	movw	r24, r18
    14b2:	98 2f       	mov	r25, r24
    14b4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    14b8:	89 0f       	add	r24, r25
    14ba:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u8RGBGreen>
    14be:	31 c0       	rjmp	.+98     	; 0x1522 <main+0x38c>
				}
				else
				{
					u8RGBGreen = (uint8_t)(u8RGBStartGreen - ((uint32_t)(u8RGBStartGreen-u8RGBStopGreen))*u16RGBTimeCounter/u16RGBTime);
    14c0:	d0 90 44 01 	lds	r13, 0x0144	; 0x800144 <u8RGBStartGreen>
    14c4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8RGBStopGreen>
    14d0:	88 2f       	mov	r24, r24
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	a9 01       	movw	r20, r18
    14d6:	48 1b       	sub	r20, r24
    14d8:	59 0b       	sbc	r21, r25
    14da:	ca 01       	movw	r24, r20
    14dc:	9c 01       	movw	r18, r24
    14de:	99 0f       	add	r25, r25
    14e0:	44 0b       	sbc	r20, r20
    14e2:	55 0b       	sbc	r21, r21
    14e4:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u16RGBTimeCounter>
    14e8:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <u16RGBTimeCounter+0x1>
    14ec:	cc 01       	movw	r24, r24
    14ee:	a0 e0       	ldi	r26, 0x00	; 0
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	bc 01       	movw	r22, r24
    14f4:	cd 01       	movw	r24, r26
    14f6:	0e 94 4c 10 	call	0x2098	; 0x2098 <__mulsi3>
    14fa:	7b 01       	movw	r14, r22
    14fc:	8c 01       	movw	r16, r24
    14fe:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u16RGBTime>
    1502:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <u16RGBTime+0x1>
    1506:	9c 01       	movw	r18, r24
    1508:	40 e0       	ldi	r20, 0x00	; 0
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	c8 01       	movw	r24, r16
    150e:	b7 01       	movw	r22, r14
    1510:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__udivmodsi4>
    1514:	da 01       	movw	r26, r20
    1516:	c9 01       	movw	r24, r18
    1518:	5d 2d       	mov	r21, r13
    151a:	58 1b       	sub	r21, r24
    151c:	85 2f       	mov	r24, r21
    151e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u8RGBGreen>
				}
				
				if(u8RGBStartBlue<u8RGBStopBlue)
    1522:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <u8RGBStartBlue>
    1526:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u8RGBStopBlue>
    152a:	98 17       	cp	r25, r24
    152c:	88 f5       	brcc	.+98     	; 0x1590 <main+0x3fa>
				{
					u8RGBBlue = (uint8_t)(((uint32_t)(u8RGBStopBlue-u8RGBStartBlue))*u16RGBTimeCounter/u16RGBTime + u8RGBStartBlue);
    152e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u8RGBStopBlue>
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    153a:	88 2f       	mov	r24, r24
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	a9 01       	movw	r20, r18
    1540:	48 1b       	sub	r20, r24
    1542:	59 0b       	sbc	r21, r25
    1544:	ca 01       	movw	r24, r20
    1546:	9c 01       	movw	r18, r24
    1548:	99 0f       	add	r25, r25
    154a:	44 0b       	sbc	r20, r20
    154c:	55 0b       	sbc	r21, r21
    154e:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u16RGBTimeCounter>
    1552:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <u16RGBTimeCounter+0x1>
    1556:	cc 01       	movw	r24, r24
    1558:	a0 e0       	ldi	r26, 0x00	; 0
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	bc 01       	movw	r22, r24
    155e:	cd 01       	movw	r24, r26
    1560:	0e 94 4c 10 	call	0x2098	; 0x2098 <__mulsi3>
    1564:	7b 01       	movw	r14, r22
    1566:	8c 01       	movw	r16, r24
    1568:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u16RGBTime>
    156c:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <u16RGBTime+0x1>
    1570:	9c 01       	movw	r18, r24
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	50 e0       	ldi	r21, 0x00	; 0
    1576:	c8 01       	movw	r24, r16
    1578:	b7 01       	movw	r22, r14
    157a:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__udivmodsi4>
    157e:	da 01       	movw	r26, r20
    1580:	c9 01       	movw	r24, r18
    1582:	98 2f       	mov	r25, r24
    1584:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    1588:	89 0f       	add	r24, r25
    158a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <u8RGBBlue>
    158e:	31 c0       	rjmp	.+98     	; 0x15f2 <main+0x45c>
				}
				else
				{
					u8RGBBlue = (uint8_t)(u8RGBStartBlue - ((uint32_t)(u8RGBStartBlue-u8RGBStopBlue))*u16RGBTimeCounter/u16RGBTime);
    1590:	d0 90 45 01 	lds	r13, 0x0145	; 0x800145 <u8RGBStartBlue>
    1594:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u8RGBStopBlue>
    15a0:	88 2f       	mov	r24, r24
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	a9 01       	movw	r20, r18
    15a6:	48 1b       	sub	r20, r24
    15a8:	59 0b       	sbc	r21, r25
    15aa:	ca 01       	movw	r24, r20
    15ac:	9c 01       	movw	r18, r24
    15ae:	99 0f       	add	r25, r25
    15b0:	44 0b       	sbc	r20, r20
    15b2:	55 0b       	sbc	r21, r21
    15b4:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u16RGBTimeCounter>
    15b8:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <u16RGBTimeCounter+0x1>
    15bc:	cc 01       	movw	r24, r24
    15be:	a0 e0       	ldi	r26, 0x00	; 0
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	bc 01       	movw	r22, r24
    15c4:	cd 01       	movw	r24, r26
    15c6:	0e 94 4c 10 	call	0x2098	; 0x2098 <__mulsi3>
    15ca:	7b 01       	movw	r14, r22
    15cc:	8c 01       	movw	r16, r24
    15ce:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u16RGBTime>
    15d2:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <u16RGBTime+0x1>
    15d6:	9c 01       	movw	r18, r24
    15d8:	40 e0       	ldi	r20, 0x00	; 0
    15da:	50 e0       	ldi	r21, 0x00	; 0
    15dc:	c8 01       	movw	r24, r16
    15de:	b7 01       	movw	r22, r14
    15e0:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__udivmodsi4>
    15e4:	da 01       	movw	r26, r20
    15e6:	c9 01       	movw	r24, r18
    15e8:	5d 2d       	mov	r21, r13
    15ea:	58 1b       	sub	r21, r24
    15ec:	85 2f       	mov	r24, r21
    15ee:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <u8RGBBlue>
				}
				u8RGBSingleColor = 1;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8RGBSingleColor>
				u8RGBNewDataReady = 1;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBNewDataReady>
    15fe:	b8 ce       	rjmp	.-656    	; 0x1370 <main+0x1da>
			}
		}
		else
		{
			if(RingBuffer_CountChar(&RINGBUFFER,0xFF) && (u8RGBNewDataReady==0))
    1600:	6f ef       	ldi	r22, 0xFF	; 255
    1602:	81 e6       	ldi	r24, 0x61	; 97
    1604:	91 e0       	ldi	r25, 0x01	; 1
    1606:	0e 94 a5 01 	call	0x34a	; 0x34a <RingBuffer_CountChar>
    160a:	88 23       	and	r24, r24
    160c:	09 f4       	brne	.+2      	; 0x1610 <main+0x47a>
    160e:	b0 ce       	rjmp	.-672    	; 0x1370 <main+0x1da>
    1610:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8RGBNewDataReady>
    1614:	88 23       	and	r24, r24
    1616:	09 f0       	breq	.+2      	; 0x161a <main+0x484>
    1618:	ab ce       	rjmp	.-682    	; 0x1370 <main+0x1da>
			{
				RingBuffer_RemoveUntilChar(&RINGBUFFER,au8Command,0xFF,0);
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	4f ef       	ldi	r20, 0xFF	; 255
    161e:	ce 01       	movw	r24, r28
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	bc 01       	movw	r22, r24
    1624:	81 e6       	ldi	r24, 0x61	; 97
    1626:	91 e0       	ldi	r25, 0x01	; 1
    1628:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <RingBuffer_RemoveUntilChar>
				
				switch(au8Command[0])
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	88 2f       	mov	r24, r24
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	82 33       	cpi	r24, 0x32	; 50
    1634:	91 05       	cpc	r25, r1
    1636:	99 f0       	breq	.+38     	; 0x165e <main+0x4c8>
    1638:	83 33       	cpi	r24, 0x33	; 51
    163a:	91 05       	cpc	r25, r1
    163c:	51 f1       	breq	.+84     	; 0x1692 <main+0x4fc>
    163e:	c1 97       	sbiw	r24, 0x31	; 49
    1640:	09 f0       	breq	.+2      	; 0x1644 <main+0x4ae>
    1642:	5d c0       	rjmp	.+186    	; 0x16fe <main+0x568>
				{
					case 0x31:
					u8RGBRed = 0;
    1644:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <u8RGBRed>
					u8RGBGreen = 0;
    1648:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <u8RGBGreen>
					u8RGBBlue = 0;
    164c:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <u8RGBBlue>
					u8RGBSingleColor = 1;
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8RGBSingleColor>
					u8RGBNewDataReady = 1;
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBNewDataReady>
					break;
    165c:	50 c0       	rjmp	.+160    	; 0x16fe <main+0x568>
					
					case 0x32:
					if(strlen(au8Command) == 4)
    165e:	ce 01       	movw	r24, r28
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <strlen>
    1666:	04 97       	sbiw	r24, 0x04	; 4
    1668:	09 f0       	breq	.+2      	; 0x166c <main+0x4d6>
    166a:	46 c0       	rjmp	.+140    	; 0x16f8 <main+0x562>
					{
						u8RGBRed = au8Command[1]-1;
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	81 50       	subi	r24, 0x01	; 1
    1670:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <u8RGBRed>
						u8RGBGreen = au8Command[2]-1;
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	81 50       	subi	r24, 0x01	; 1
    1678:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u8RGBGreen>
						u8RGBBlue = au8Command[3]-1;
    167c:	8c 81       	ldd	r24, Y+4	; 0x04
    167e:	81 50       	subi	r24, 0x01	; 1
    1680:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <u8RGBBlue>
						u8RGBSingleColor = 1;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8RGBSingleColor>
						u8RGBNewDataReady = 1;
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBNewDataReady>
					}
					break;
    1690:	33 c0       	rjmp	.+102    	; 0x16f8 <main+0x562>
					
					case 0x33:
					if(strlen(au8Command) == 8)
    1692:	ce 01       	movw	r24, r28
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <strlen>
    169a:	08 97       	sbiw	r24, 0x08	; 8
    169c:	79 f5       	brne	.+94     	; 0x16fc <main+0x566>
					{
						u8RGBStartRed = au8Command[1]-1;
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	81 50       	subi	r24, 0x01	; 1
    16a2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8RGBStartRed>
						u8RGBStartGreen = au8Command[2]-1;
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	81 50       	subi	r24, 0x01	; 1
    16aa:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8RGBStartGreen>
						u8RGBStartBlue = au8Command[3]-1;
    16ae:	8c 81       	ldd	r24, Y+4	; 0x04
    16b0:	81 50       	subi	r24, 0x01	; 1
    16b2:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <u8RGBStartBlue>
						u8RGBStopRed = au8Command[4]-1;
    16b6:	8d 81       	ldd	r24, Y+5	; 0x05
    16b8:	81 50       	subi	r24, 0x01	; 1
    16ba:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <u8RGBStopRed>
						u8RGBStopGreen = au8Command[5]-1;
    16be:	8e 81       	ldd	r24, Y+6	; 0x06
    16c0:	81 50       	subi	r24, 0x01	; 1
    16c2:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <u8RGBStopGreen>
						u8RGBStopBlue = au8Command[6]-1;
    16c6:	8f 81       	ldd	r24, Y+7	; 0x07
    16c8:	81 50       	subi	r24, 0x01	; 1
    16ca:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8RGBStopBlue>
						u16RGBTime = ((uint16_t)au8Command[7])*200;
    16ce:	88 85       	ldd	r24, Y+8	; 0x08
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	48 ec       	ldi	r20, 0xC8	; 200
    16d6:	42 9f       	mul	r20, r18
    16d8:	c0 01       	movw	r24, r0
    16da:	43 9f       	mul	r20, r19
    16dc:	90 0d       	add	r25, r0
    16de:	11 24       	eor	r1, r1
    16e0:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <u16RGBTime+0x1>
    16e4:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u16RGBTime>
						u16RGBTimeCounter = 0;
    16e8:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <u16RGBTimeCounter+0x1>
    16ec:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <u16RGBTimeCounter>
						u8RGBAnimationActive = 1;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <u8RGBAnimationActive>
					}
					break;
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <main+0x566>
						u8RGBGreen = au8Command[2]-1;
						u8RGBBlue = au8Command[3]-1;
						u8RGBSingleColor = 1;
						u8RGBNewDataReady = 1;
					}
					break;
    16f8:	00 00       	nop
    16fa:	3a ce       	rjmp	.-908    	; 0x1370 <main+0x1da>
						u8RGBStopBlue = au8Command[6]-1;
						u16RGBTime = ((uint16_t)au8Command[7])*200;
						u16RGBTimeCounter = 0;
						u8RGBAnimationActive = 1;
					}
					break;
    16fc:	00 00       	nop
				}
			}
		}
    }
    16fe:	38 ce       	rjmp	.-912    	; 0x1370 <main+0x1da>

00001700 <INT0_Init>:
#include "utils.h"
#include "rgbooster.h"


void INT0_Init(void)
{
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
	EICRA |= (1<<ISC01); // interrupt on falling edge
    1708:	89 e6       	ldi	r24, 0x69	; 105
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	29 e6       	ldi	r18, 0x69	; 105
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	f9 01       	movw	r30, r18
    1712:	20 81       	ld	r18, Z
    1714:	22 60       	ori	r18, 0x02	; 2
    1716:	fc 01       	movw	r30, r24
    1718:	20 83       	st	Z, r18
	EIFR  = (1<<INTF0); // clear flag
    171a:	8c e3       	ldi	r24, 0x3C	; 60
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	21 e0       	ldi	r18, 0x01	; 1
    1720:	fc 01       	movw	r30, r24
    1722:	20 83       	st	Z, r18
	EIMSK = (1<<INT0);  // INT1 enable
    1724:	8d e3       	ldi	r24, 0x3D	; 61
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	21 e0       	ldi	r18, 0x01	; 1
    172a:	fc 01       	movw	r30, r24
    172c:	20 83       	st	Z, r18
}
    172e:	00 00       	nop
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	08 95       	ret

00001736 <initRGBooster>:

void initRGBooster(void)
{
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
	DDR_DATA_LOW |= DATA_LOW_BITMASK; //RGB DATA LOWER NIBBLE -> OUTPUT
    173e:	84 e2       	ldi	r24, 0x24	; 36
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	24 e2       	ldi	r18, 0x24	; 36
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	f9 01       	movw	r30, r18
    1748:	20 81       	ld	r18, Z
    174a:	2f 60       	ori	r18, 0x0F	; 15
    174c:	fc 01       	movw	r30, r24
    174e:	20 83       	st	Z, r18
	PORT_DATA_LOW &= ~DATA_LOW_BITMASK; //RGB DATA LOWER NIBBLE -> LOW
    1750:	85 e2       	ldi	r24, 0x25	; 37
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	25 e2       	ldi	r18, 0x25	; 37
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	f9 01       	movw	r30, r18
    175a:	20 81       	ld	r18, Z
    175c:	20 7f       	andi	r18, 0xF0	; 240
    175e:	fc 01       	movw	r30, r24
    1760:	20 83       	st	Z, r18
	DDR_DATA_HIGH |= DATA_HIGH_BITMASK; //RGB DATA HIGHER NIBBLE -> OUTPUT
    1762:	81 e2       	ldi	r24, 0x21	; 33
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	21 e2       	ldi	r18, 0x21	; 33
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	f9 01       	movw	r30, r18
    176c:	20 81       	ld	r18, Z
    176e:	20 6f       	ori	r18, 0xF0	; 240
    1770:	fc 01       	movw	r30, r24
    1772:	20 83       	st	Z, r18
	PORT_DATA_HIGH &= ~DATA_HIGH_BITMASK; //RGB DATA HIGHER NIBBLE -> LOW
    1774:	82 e2       	ldi	r24, 0x22	; 34
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	22 e2       	ldi	r18, 0x22	; 34
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	f9 01       	movw	r30, r18
    177e:	20 81       	ld	r18, Z
    1780:	2f 70       	andi	r18, 0x0F	; 15
    1782:	fc 01       	movw	r30, r24
    1784:	20 83       	st	Z, r18

	DDR_CONTROL |= (1<<SEND); //SEND PIN -> OUTPUT
    1786:	8a e2       	ldi	r24, 0x2A	; 42
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	2a e2       	ldi	r18, 0x2A	; 42
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	f9 01       	movw	r30, r18
    1790:	20 81       	ld	r18, Z
    1792:	28 60       	ori	r18, 0x08	; 8
    1794:	fc 01       	movw	r30, r24
    1796:	20 83       	st	Z, r18
	PORT_CONTROL &= ~(1<<SEND); //SEND PIN LOW
    1798:	8b e2       	ldi	r24, 0x2B	; 43
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	2b e2       	ldi	r18, 0x2B	; 43
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	f9 01       	movw	r30, r18
    17a2:	20 81       	ld	r18, Z
    17a4:	27 7f       	andi	r18, 0xF7	; 247
    17a6:	fc 01       	movw	r30, r24
    17a8:	20 83       	st	Z, r18
	DDR_CONTROL &= ~(1<<DONE_BUSY); //DONE BUSY PIN -> INPUT
    17aa:	8a e2       	ldi	r24, 0x2A	; 42
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	2a e2       	ldi	r18, 0x2A	; 42
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	f9 01       	movw	r30, r18
    17b4:	20 81       	ld	r18, Z
    17b6:	2b 7f       	andi	r18, 0xFB	; 251
    17b8:	fc 01       	movw	r30, r24
    17ba:	20 83       	st	Z, r18
    17bc:	00 00       	nop
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
    17c2:	08 95       	ret

000017c4 <spiInitBuffer>:
#include <avr/io.h>
#include "spi.h"


void spiInitBuffer(SpiBuf_t* Buffer)
{
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <spiInitBuffer+0x6>
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	9a 83       	std	Y+2, r25	; 0x02
    17d0:	89 83       	std	Y+1, r24	; 0x01
	Buffer->u8Count = 0;
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	9a 81       	ldd	r25, Y+2	; 0x02
    17d6:	80 5c       	subi	r24, 0xC0	; 192
    17d8:	9f 4f       	sbci	r25, 0xFF	; 255
    17da:	fc 01       	movw	r30, r24
    17dc:	10 82       	st	Z, r1
	Buffer->u8ReadReturnCount = 0;
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	9a 81       	ldd	r25, Y+2	; 0x02
    17e2:	8f 5b       	subi	r24, 0xBF	; 191
    17e4:	9f 4f       	sbci	r25, 0xFF	; 255
    17e6:	fc 01       	movw	r30, r24
    17e8:	10 82       	st	Z, r1
	Buffer->spiState = IDLE;
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	9a 81       	ldd	r25, Y+2	; 0x02
    17ee:	8e 5b       	subi	r24, 0xBE	; 190
    17f0:	9f 4f       	sbci	r25, 0xFF	; 255
    17f2:	26 e0       	ldi	r18, 0x06	; 6
    17f4:	fc 01       	movw	r30, r24
    17f6:	20 83       	st	Z, r18
}
    17f8:	00 00       	nop
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	08 95       	ret

00001804 <spiSlaveInit>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiSlaveInit(void)
{
    1804:	cf 93       	push	r28
    1806:	df 93       	push	r29
    1808:	1f 92       	push	r1
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t ucTemp;
	SPSR0 = 0;
    180e:	8d e4       	ldi	r24, 0x4D	; 77
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	fc 01       	movw	r30, r24
    1814:	10 82       	st	Z, r1
	SPCR0 = (1<<SPIE0);
    1816:	8c e4       	ldi	r24, 0x4C	; 76
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	20 e8       	ldi	r18, 0x80	; 128
    181c:	fc 01       	movw	r30, r24
    181e:	20 83       	st	Z, r18
	
	ucTemp = SPSR0;					
    1820:	8d e4       	ldi	r24, 0x4D	; 77
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	fc 01       	movw	r30, r24
    1826:	80 81       	ld	r24, Z
    1828:	89 83       	std	Y+1, r24	; 0x01
	ucTemp = SPDR0;
    182a:	8e e4       	ldi	r24, 0x4E	; 78
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	fc 01       	movw	r30, r24
    1830:	80 81       	ld	r24, Z
    1832:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0;
    1834:	8e e4       	ldi	r24, 0x4E	; 78
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	fc 01       	movw	r30, r24
    183a:	10 82       	st	Z, r1
	
	DDRB |= (1<<PINB6);				// MISO needs to be an output
    183c:	84 e2       	ldi	r24, 0x24	; 36
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	24 e2       	ldi	r18, 0x24	; 36
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	f9 01       	movw	r30, r18
    1846:	20 81       	ld	r18, Z
    1848:	20 64       	ori	r18, 0x40	; 64
    184a:	fc 01       	movw	r30, r24
    184c:	20 83       	st	Z, r18
	
	SPCR0 |= (1<<SPE0);
    184e:	8c e4       	ldi	r24, 0x4C	; 76
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	2c e4       	ldi	r18, 0x4C	; 76
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	f9 01       	movw	r30, r18
    1858:	20 81       	ld	r18, Z
    185a:	20 64       	ori	r18, 0x40	; 64
    185c:	fc 01       	movw	r30, r24
    185e:	20 83       	st	Z, r18
}
    1860:	00 00       	nop
    1862:	0f 90       	pop	r0
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	08 95       	ret

0000186a <spiPcInt>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiPcInt(void)
{
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
	PCICR |= (1<<PCIE1);
    1872:	88 e6       	ldi	r24, 0x68	; 104
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	28 e6       	ldi	r18, 0x68	; 104
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	f9 01       	movw	r30, r18
    187c:	20 81       	ld	r18, Z
    187e:	22 60       	ori	r18, 0x02	; 2
    1880:	fc 01       	movw	r30, r24
    1882:	20 83       	st	Z, r18
	PCIFR = (1<<PCIF1);
    1884:	8b e3       	ldi	r24, 0x3B	; 59
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	22 e0       	ldi	r18, 0x02	; 2
    188a:	fc 01       	movw	r30, r24
    188c:	20 83       	st	Z, r18
	PCMSK1 |= (1<<PCINT12);
    188e:	8c e6       	ldi	r24, 0x6C	; 108
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	2c e6       	ldi	r18, 0x6C	; 108
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	f9 01       	movw	r30, r18
    1898:	20 81       	ld	r18, Z
    189a:	20 61       	ori	r18, 0x10	; 16
    189c:	fc 01       	movw	r30, r24
    189e:	20 83       	st	Z, r18
    18a0:	00 00       	nop
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	08 95       	ret

000018a8 <portInit>:
 * @return 8bit analog value
 *****************************************************************************/
uint8_t adcGetValue(void)
{
	return(ADCH);
}
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	8a e2       	ldi	r24, 0x2A	; 42
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	2a e2       	ldi	r18, 0x2A	; 42
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	f9 01       	movw	r30, r18
    18ba:	20 81       	ld	r18, Z
    18bc:	20 63       	ori	r18, 0x30	; 48
    18be:	fc 01       	movw	r30, r24
    18c0:	20 83       	st	Z, r18
    18c2:	8b e2       	ldi	r24, 0x2B	; 43
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	2b e2       	ldi	r18, 0x2B	; 43
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	f9 01       	movw	r30, r18
    18cc:	20 81       	ld	r18, Z
    18ce:	20 62       	ori	r18, 0x20	; 32
    18d0:	fc 01       	movw	r30, r24
    18d2:	20 83       	st	Z, r18
    18d4:	8b e2       	ldi	r24, 0x2B	; 43
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	2b e2       	ldi	r18, 0x2B	; 43
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	f9 01       	movw	r30, r18
    18de:	20 81       	ld	r18, Z
    18e0:	2f 7e       	andi	r18, 0xEF	; 239
    18e2:	fc 01       	movw	r30, r24
    18e4:	20 83       	st	Z, r18
    18e6:	8a e2       	ldi	r24, 0x2A	; 42
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	2a e2       	ldi	r18, 0x2A	; 42
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	f9 01       	movw	r30, r18
    18f0:	20 81       	ld	r18, Z
    18f2:	20 68       	ori	r18, 0x80	; 128
    18f4:	fc 01       	movw	r30, r24
    18f6:	20 83       	st	Z, r18
    18f8:	8b e2       	ldi	r24, 0x2B	; 43
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	2b e2       	ldi	r18, 0x2B	; 43
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	f9 01       	movw	r30, r18
    1902:	20 81       	ld	r18, Z
    1904:	20 68       	ori	r18, 0x80	; 128
    1906:	fc 01       	movw	r30, r24
    1908:	20 83       	st	Z, r18
    190a:	8a e2       	ldi	r24, 0x2A	; 42
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	2a e2       	ldi	r18, 0x2A	; 42
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	f9 01       	movw	r30, r18
    1914:	20 81       	ld	r18, Z
    1916:	2f 7b       	andi	r18, 0xBF	; 191
    1918:	fc 01       	movw	r30, r24
    191a:	20 83       	st	Z, r18
    191c:	8a e2       	ldi	r24, 0x2A	; 42
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	2a e2       	ldi	r18, 0x2A	; 42
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	f9 01       	movw	r30, r18
    1926:	20 81       	ld	r18, Z
    1928:	2c 7f       	andi	r18, 0xFC	; 252
    192a:	fc 01       	movw	r30, r24
    192c:	20 83       	st	Z, r18
    192e:	8b e2       	ldi	r24, 0x2B	; 43
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	2b e2       	ldi	r18, 0x2B	; 43
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	f9 01       	movw	r30, r18
    1938:	20 81       	ld	r18, Z
    193a:	21 60       	ori	r18, 0x01	; 1
    193c:	fc 01       	movw	r30, r24
    193e:	20 83       	st	Z, r18
    1940:	81 e2       	ldi	r24, 0x21	; 33
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	21 e2       	ldi	r18, 0x21	; 33
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	f9 01       	movw	r30, r18
    194a:	20 81       	ld	r18, Z
    194c:	2e 7f       	andi	r18, 0xFE	; 254
    194e:	fc 01       	movw	r30, r24
    1950:	20 83       	st	Z, r18
    1952:	82 e2       	ldi	r24, 0x22	; 34
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	22 e2       	ldi	r18, 0x22	; 34
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	f9 01       	movw	r30, r18
    195c:	20 81       	ld	r18, Z
    195e:	2e 7f       	andi	r18, 0xFE	; 254
    1960:	fc 01       	movw	r30, r24
    1962:	20 83       	st	Z, r18
    1964:	8e e7       	ldi	r24, 0x7E	; 126
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	2e e7       	ldi	r18, 0x7E	; 126
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	f9 01       	movw	r30, r18
    196e:	20 81       	ld	r18, Z
    1970:	21 60       	ori	r18, 0x01	; 1
    1972:	fc 01       	movw	r30, r24
    1974:	20 83       	st	Z, r18
    1976:	81 e2       	ldi	r24, 0x21	; 33
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	21 e2       	ldi	r18, 0x21	; 33
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	f9 01       	movw	r30, r18
    1980:	20 81       	ld	r18, Z
    1982:	21 7f       	andi	r18, 0xF1	; 241
    1984:	fc 01       	movw	r30, r24
    1986:	20 83       	st	Z, r18
    1988:	82 e2       	ldi	r24, 0x22	; 34
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	22 e2       	ldi	r18, 0x22	; 34
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	f9 01       	movw	r30, r18
    1992:	20 81       	ld	r18, Z
    1994:	2e 60       	ori	r18, 0x0E	; 14
    1996:	fc 01       	movw	r30, r24
    1998:	20 83       	st	Z, r18
    199a:	87 e2       	ldi	r24, 0x27	; 39
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	fc 01       	movw	r30, r24
    19a0:	80 81       	ld	r24, Z
    19a2:	87 e2       	ldi	r24, 0x27	; 39
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	fc 01       	movw	r30, r24
    19a8:	10 82       	st	Z, r1
    19aa:	88 e2       	ldi	r24, 0x28	; 40
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	fc 01       	movw	r30, r24
    19b0:	80 81       	ld	r24, Z
    19b2:	88 e2       	ldi	r24, 0x28	; 40
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	2f ef       	ldi	r18, 0xFF	; 255
    19b8:	fc 01       	movw	r30, r24
    19ba:	20 83       	st	Z, r18
    19bc:	00 00       	nop
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	08 95       	ret

000019c4 <enablePLED>:
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	8b e2       	ldi	r24, 0x2B	; 43
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	2b e2       	ldi	r18, 0x2B	; 43
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	f9 01       	movw	r30, r18
    19d6:	20 81       	ld	r18, Z
    19d8:	2f 7d       	andi	r18, 0xDF	; 223
    19da:	fc 01       	movw	r30, r24
    19dc:	20 83       	st	Z, r18
    19de:	00 00       	nop
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	08 95       	ret

000019e6 <disablePLED>:
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	8b e2       	ldi	r24, 0x2B	; 43
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	2b e2       	ldi	r18, 0x2B	; 43
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	f9 01       	movw	r30, r18
    19f8:	20 81       	ld	r18, Z
    19fa:	20 62       	ori	r18, 0x20	; 32
    19fc:	fc 01       	movw	r30, r24
    19fe:	20 83       	st	Z, r18
    1a00:	00 00       	nop
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	08 95       	ret

00001a08 <standbyAudio>:
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	8b e2       	ldi	r24, 0x2B	; 43
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	2b e2       	ldi	r18, 0x2B	; 43
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	f9 01       	movw	r30, r18
    1a1a:	20 81       	ld	r18, Z
    1a1c:	20 68       	ori	r18, 0x80	; 128
    1a1e:	fc 01       	movw	r30, r24
    1a20:	20 83       	st	Z, r18
    1a22:	8a e2       	ldi	r24, 0x2A	; 42
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	2a e2       	ldi	r18, 0x2A	; 42
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	f9 01       	movw	r30, r18
    1a2c:	20 81       	ld	r18, Z
    1a2e:	20 68       	ori	r18, 0x80	; 128
    1a30:	fc 01       	movw	r30, r24
    1a32:	20 83       	st	Z, r18
    1a34:	00 00       	nop
    1a36:	df 91       	pop	r29
    1a38:	cf 91       	pop	r28
    1a3a:	08 95       	ret

00001a3c <enableAudio>:
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	8b e2       	ldi	r24, 0x2B	; 43
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	2b e2       	ldi	r18, 0x2B	; 43
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	f9 01       	movw	r30, r18
    1a4e:	20 81       	ld	r18, Z
    1a50:	2f 77       	andi	r18, 0x7F	; 127
    1a52:	fc 01       	movw	r30, r24
    1a54:	20 83       	st	Z, r18
    1a56:	8a e2       	ldi	r24, 0x2A	; 42
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	2a e2       	ldi	r18, 0x2A	; 42
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	f9 01       	movw	r30, r18
    1a60:	20 81       	ld	r18, Z
    1a62:	20 68       	ori	r18, 0x80	; 128
    1a64:	fc 01       	movw	r30, r24
    1a66:	20 83       	st	Z, r18
    1a68:	00 00       	nop
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	08 95       	ret

00001a70 <incVolume>:
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <incVolume+0x6>
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	8a 83       	std	Y+2, r24	; 0x02
    1a7c:	8b e2       	ldi	r24, 0x2B	; 43
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	2b e2       	ldi	r18, 0x2B	; 43
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	f9 01       	movw	r30, r18
    1a86:	20 81       	ld	r18, Z
    1a88:	20 64       	ori	r18, 0x40	; 64
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	20 83       	st	Z, r18
    1a8e:	19 82       	std	Y+1, r1	; 0x01
    1a90:	15 c0       	rjmp	.+42     	; 0x1abc <incVolume+0x4c>
    1a92:	8a e2       	ldi	r24, 0x2A	; 42
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	2a e2       	ldi	r18, 0x2A	; 42
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	f9 01       	movw	r30, r18
    1a9c:	20 81       	ld	r18, Z
    1a9e:	20 64       	ori	r18, 0x40	; 64
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	20 83       	st	Z, r18
    1aa4:	8a e2       	ldi	r24, 0x2A	; 42
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	2a e2       	ldi	r18, 0x2A	; 42
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	f9 01       	movw	r30, r18
    1aae:	20 81       	ld	r18, Z
    1ab0:	2f 7b       	andi	r18, 0xBF	; 191
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	20 83       	st	Z, r18
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	8f 5f       	subi	r24, 0xFF	; 255
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	99 81       	ldd	r25, Y+1	; 0x01
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	98 17       	cp	r25, r24
    1ac2:	38 f3       	brcs	.-50     	; 0x1a92 <incVolume+0x22>
    1ac4:	00 00       	nop
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	08 95       	ret

00001ad0 <decVolume>:
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <decVolume+0x6>
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	8a 83       	std	Y+2, r24	; 0x02
    1adc:	8b e2       	ldi	r24, 0x2B	; 43
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	2b e2       	ldi	r18, 0x2B	; 43
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	f9 01       	movw	r30, r18
    1ae6:	20 81       	ld	r18, Z
    1ae8:	2f 7b       	andi	r18, 0xBF	; 191
    1aea:	fc 01       	movw	r30, r24
    1aec:	20 83       	st	Z, r18
    1aee:	19 82       	std	Y+1, r1	; 0x01
    1af0:	15 c0       	rjmp	.+42     	; 0x1b1c <decVolume+0x4c>
    1af2:	8a e2       	ldi	r24, 0x2A	; 42
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	2a e2       	ldi	r18, 0x2A	; 42
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	f9 01       	movw	r30, r18
    1afc:	20 81       	ld	r18, Z
    1afe:	20 64       	ori	r18, 0x40	; 64
    1b00:	fc 01       	movw	r30, r24
    1b02:	20 83       	st	Z, r18
    1b04:	8a e2       	ldi	r24, 0x2A	; 42
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	2a e2       	ldi	r18, 0x2A	; 42
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	f9 01       	movw	r30, r18
    1b0e:	20 81       	ld	r18, Z
    1b10:	2f 7b       	andi	r18, 0xBF	; 191
    1b12:	fc 01       	movw	r30, r24
    1b14:	20 83       	st	Z, r18
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	8f 5f       	subi	r24, 0xFF	; 255
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	99 81       	ldd	r25, Y+1	; 0x01
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	98 17       	cp	r25, r24
    1b22:	38 f3       	brcs	.-50     	; 0x1af2 <decVolume+0x22>
    1b24:	00 00       	nop
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	08 95       	ret

00001b30 <setVolume>:
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	1f 92       	push	r1
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	81 34       	cpi	r24, 0x41	; 65
    1b40:	10 f0       	brcs	.+4      	; 0x1b46 <setVolume+0x16>
    1b42:	80 e4       	ldi	r24, 0x40	; 64
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	80 e4       	ldi	r24, 0x40	; 64
    1b48:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <decVolume>
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <incVolume>
    1b52:	00 00       	nop
    1b54:	0f 90       	pop	r0
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	08 95       	ret

00001b5c <initAudio>:
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <enableAudio>
    1b68:	80 e4       	ldi	r24, 0x40	; 64
    1b6a:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <decVolume>
    1b6e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <standbyAudio>
    1b72:	00 00       	nop
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	08 95       	ret

00001b7a <initPWM>:
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <initPWM+0x6>
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	9a 83       	std	Y+2, r25	; 0x02
    1b86:	89 83       	std	Y+1, r24	; 0x01
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8c:	81 15       	cp	r24, r1
    1b8e:	92 40       	sbci	r25, 0x02	; 2
    1b90:	20 f0       	brcs	.+8      	; 0x1b9a <initPWM+0x20>
    1b92:	8f ef       	ldi	r24, 0xFF	; 255
    1b94:	91 e0       	ldi	r25, 0x01	; 1
    1b96:	9a 83       	std	Y+2, r25	; 0x02
    1b98:	89 83       	std	Y+1, r24	; 0x01
    1b9a:	80 e8       	ldi	r24, 0x80	; 128
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	22 e2       	ldi	r18, 0x22	; 34
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	20 83       	st	Z, r18
    1ba4:	81 e8       	ldi	r24, 0x81	; 129
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	28 e0       	ldi	r18, 0x08	; 8
    1baa:	fc 01       	movw	r30, r24
    1bac:	20 83       	st	Z, r18
    1bae:	84 e8       	ldi	r24, 0x84	; 132
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	11 82       	std	Z+1, r1	; 0x01
    1bb6:	10 82       	st	Z, r1
    1bb8:	8a e8       	ldi	r24, 0x8A	; 138
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	29 81       	ldd	r18, Y+1	; 0x01
    1bbe:	3a 81       	ldd	r19, Y+2	; 0x02
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	31 83       	std	Z+1, r19	; 0x01
    1bc4:	20 83       	st	Z, r18
    1bc6:	8f e6       	ldi	r24, 0x6F	; 111
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	fc 01       	movw	r30, r24
    1bcc:	10 82       	st	Z, r1
    1bce:	00 00       	nop
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	08 95       	ret

00001bda <startPWM>:
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	81 e8       	ldi	r24, 0x81	; 129
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	21 e8       	ldi	r18, 0x81	; 129
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	f9 01       	movw	r30, r18
    1bec:	20 81       	ld	r18, Z
    1bee:	21 60       	ori	r18, 0x01	; 1
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	20 83       	st	Z, r18
    1bf4:	00 00       	nop
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	08 95       	ret

00001bfc <setPWMDutyPercent>:
    1bfc:	8f 92       	push	r8
    1bfe:	9f 92       	push	r9
    1c00:	af 92       	push	r10
    1c02:	bf 92       	push	r11
    1c04:	cf 92       	push	r12
    1c06:	df 92       	push	r13
    1c08:	ef 92       	push	r14
    1c0a:	ff 92       	push	r15
    1c0c:	0f 93       	push	r16
    1c0e:	1f 93       	push	r17
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	1f 92       	push	r1
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	85 36       	cpi	r24, 0x65	; 101
    1c20:	10 f0       	brcs	.+4      	; 0x1c26 <setPWMDutyPercent+0x2a>
    1c22:	84 e6       	ldi	r24, 0x64	; 100
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	0f 2e       	mov	r0, r31
    1c28:	fa e8       	ldi	r31, 0x8A	; 138
    1c2a:	8f 2e       	mov	r8, r31
    1c2c:	91 2c       	mov	r9, r1
    1c2e:	f0 2d       	mov	r31, r0
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	88 2f       	mov	r24, r24
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	a0 e0       	ldi	r26, 0x00	; 0
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	1f 92       	push	r1
    1c3c:	1f 92       	push	r1
    1c3e:	21 e0       	ldi	r18, 0x01	; 1
    1c40:	2f 93       	push	r18
    1c42:	2f ef       	ldi	r18, 0xFF	; 255
    1c44:	2f 93       	push	r18
    1c46:	a1 2c       	mov	r10, r1
    1c48:	b1 2c       	mov	r11, r1
    1c4a:	65 01       	movw	r12, r10
    1c4c:	14 e6       	ldi	r17, 0x64	; 100
    1c4e:	e1 2e       	mov	r14, r17
    1c50:	f1 2c       	mov	r15, r1
    1c52:	00 e0       	ldi	r16, 0x00	; 0
    1c54:	10 e0       	ldi	r17, 0x00	; 0
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	a9 01       	movw	r20, r18
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <Map>
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	f4 01       	movw	r30, r8
    1c72:	91 83       	std	Z+1, r25	; 0x01
    1c74:	80 83       	st	Z, r24
    1c76:	00 00       	nop
    1c78:	0f 90       	pop	r0
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	1f 91       	pop	r17
    1c80:	0f 91       	pop	r16
    1c82:	ff 90       	pop	r15
    1c84:	ef 90       	pop	r14
    1c86:	df 90       	pop	r13
    1c88:	cf 90       	pop	r12
    1c8a:	bf 90       	pop	r11
    1c8c:	af 90       	pop	r10
    1c8e:	9f 90       	pop	r9
    1c90:	8f 90       	pop	r8
    1c92:	08 95       	ret

00001c94 <setPWMDuty>:
    1c94:	cf 93       	push	r28
    1c96:	df 93       	push	r29
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <setPWMDuty+0x6>
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	9a 83       	std	Y+2, r25	; 0x02
    1ca0:	89 83       	std	Y+1, r24	; 0x01
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca6:	81 15       	cp	r24, r1
    1ca8:	92 40       	sbci	r25, 0x02	; 2
    1caa:	20 f0       	brcs	.+8      	; 0x1cb4 <setPWMDuty+0x20>
    1cac:	8f ef       	ldi	r24, 0xFF	; 255
    1cae:	91 e0       	ldi	r25, 0x01	; 1
    1cb0:	9a 83       	std	Y+2, r25	; 0x02
    1cb2:	89 83       	std	Y+1, r24	; 0x01
    1cb4:	8a e8       	ldi	r24, 0x8A	; 138
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	29 81       	ldd	r18, Y+1	; 0x01
    1cba:	3a 81       	ldd	r19, Y+2	; 0x02
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	31 83       	std	Z+1, r19	; 0x01
    1cc0:	20 83       	st	Z, r18
    1cc2:	00 00       	nop
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	df 91       	pop	r29
    1cca:	cf 91       	pop	r28
    1ccc:	08 95       	ret

00001cce <adcInit>:
    1cce:	cf 93       	push	r28
    1cd0:	df 93       	push	r29
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	81 e2       	ldi	r24, 0x21	; 33
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	21 e2       	ldi	r18, 0x21	; 33
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	f9 01       	movw	r30, r18
    1ce0:	20 81       	ld	r18, Z
    1ce2:	2e 7f       	andi	r18, 0xFE	; 254
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	20 83       	st	Z, r18
    1ce8:	8e e7       	ldi	r24, 0x7E	; 126
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	2e e7       	ldi	r18, 0x7E	; 126
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	f9 01       	movw	r30, r18
    1cf2:	20 81       	ld	r18, Z
    1cf4:	21 60       	ori	r18, 0x01	; 1
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	20 83       	st	Z, r18
    1cfa:	8c e7       	ldi	r24, 0x7C	; 124
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	20 e6       	ldi	r18, 0x60	; 96
    1d00:	fc 01       	movw	r30, r24
    1d02:	20 83       	st	Z, r18
    1d04:	8a e7       	ldi	r24, 0x7A	; 122
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	27 e3       	ldi	r18, 0x37	; 55
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	20 83       	st	Z, r18
    1d0e:	8b e7       	ldi	r24, 0x7B	; 123
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	fc 01       	movw	r30, r24
    1d14:	10 82       	st	Z, r1
    1d16:	8a e7       	ldi	r24, 0x7A	; 122
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	2a e7       	ldi	r18, 0x7A	; 122
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	f9 01       	movw	r30, r18
    1d20:	20 81       	ld	r18, Z
    1d22:	20 68       	ori	r18, 0x80	; 128
    1d24:	fc 01       	movw	r30, r24
    1d26:	20 83       	st	Z, r18
    1d28:	8a e7       	ldi	r24, 0x7A	; 122
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	2a e7       	ldi	r18, 0x7A	; 122
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	f9 01       	movw	r30, r18
    1d32:	20 81       	ld	r18, Z
    1d34:	20 64       	ori	r18, 0x40	; 64
    1d36:	fc 01       	movw	r30, r24
    1d38:	20 83       	st	Z, r18
    1d3a:	00 00       	nop
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	08 95       	ret

00001d42 <adcGetTemperature>:

uint8_t adcGetTemperature(void)
{
    1d42:	af 92       	push	r10
    1d44:	bf 92       	push	r11
    1d46:	cf 92       	push	r12
    1d48:	df 92       	push	r13
    1d4a:	ef 92       	push	r14
    1d4c:	ff 92       	push	r15
    1d4e:	0f 93       	push	r16
    1d50:	1f 93       	push	r17
    1d52:	cf 93       	push	r28
    1d54:	df 93       	push	r29
    1d56:	00 d0       	rcall	.+0      	; 0x1d58 <adcGetTemperature+0x16>
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <adcGetTemperature+0x18>
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
	int32_t s32Temp;
	
	s32Temp = Map((int32_t)ADCH,0,255,-50,450);
    1d5e:	89 e7       	ldi	r24, 0x79	; 121
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	fc 01       	movw	r30, r24
    1d64:	80 81       	ld	r24, Z
    1d66:	88 2f       	mov	r24, r24
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	a0 e0       	ldi	r26, 0x00	; 0
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	1f 92       	push	r1
    1d70:	1f 92       	push	r1
    1d72:	21 e0       	ldi	r18, 0x01	; 1
    1d74:	2f 93       	push	r18
    1d76:	22 ec       	ldi	r18, 0xC2	; 194
    1d78:	2f 93       	push	r18
    1d7a:	0f 2e       	mov	r0, r31
    1d7c:	fe ec       	ldi	r31, 0xCE	; 206
    1d7e:	af 2e       	mov	r10, r31
    1d80:	bb 24       	eor	r11, r11
    1d82:	ba 94       	dec	r11
    1d84:	cb 2c       	mov	r12, r11
    1d86:	db 2c       	mov	r13, r11
    1d88:	f0 2d       	mov	r31, r0
    1d8a:	e1 2c       	mov	r14, r1
    1d8c:	f1 2c       	mov	r15, r1
    1d8e:	87 01       	movw	r16, r14
    1d90:	ea 94       	dec	r14
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	a9 01       	movw	r20, r18
    1d98:	bc 01       	movw	r22, r24
    1d9a:	cd 01       	movw	r24, r26
    1d9c:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <Map>
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	9a 83       	std	Y+2, r25	; 0x02
    1db0:	ab 83       	std	Y+3, r26	; 0x03
    1db2:	bc 83       	std	Y+4, r27	; 0x04
	if(s32Temp<0)
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	9a 81       	ldd	r25, Y+2	; 0x02
    1db8:	ab 81       	ldd	r26, Y+3	; 0x03
    1dba:	bc 81       	ldd	r27, Y+4	; 0x04
    1dbc:	bb 23       	and	r27, r27
    1dbe:	2c f4       	brge	.+10     	; 0x1dca <adcGetTemperature+0x88>
	{
		s32Temp = 0;
    1dc0:	19 82       	std	Y+1, r1	; 0x01
    1dc2:	1a 82       	std	Y+2, r1	; 0x02
    1dc4:	1b 82       	std	Y+3, r1	; 0x03
    1dc6:	1c 82       	std	Y+4, r1	; 0x04
    1dc8:	12 c0       	rjmp	.+36     	; 0x1dee <adcGetTemperature+0xac>
	}
	else if(s32Temp>255)
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dce:	ab 81       	ldd	r26, Y+3	; 0x03
    1dd0:	bc 81       	ldd	r27, Y+4	; 0x04
    1dd2:	8f 3f       	cpi	r24, 0xFF	; 255
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	a1 05       	cpc	r26, r1
    1dd8:	b1 05       	cpc	r27, r1
    1dda:	49 f0       	breq	.+18     	; 0x1dee <adcGetTemperature+0xac>
    1ddc:	44 f0       	brlt	.+16     	; 0x1dee <adcGetTemperature+0xac>
	{
		s32Temp = 255;
    1dde:	8f ef       	ldi	r24, 0xFF	; 255
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	a0 e0       	ldi	r26, 0x00	; 0
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	89 83       	std	Y+1, r24	; 0x01
    1de8:	9a 83       	std	Y+2, r25	; 0x02
    1dea:	ab 83       	std	Y+3, r26	; 0x03
    1dec:	bc 83       	std	Y+4, r27	; 0x04
	}
	return (uint8_t)s32Temp;
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	1f 91       	pop	r17
    1dfe:	0f 91       	pop	r16
    1e00:	ff 90       	pop	r15
    1e02:	ef 90       	pop	r14
    1e04:	df 90       	pop	r13
    1e06:	cf 90       	pop	r12
    1e08:	bf 90       	pop	r11
    1e0a:	af 90       	pop	r10
    1e0c:	08 95       	ret

00001e0e <INT_5ms_Init>:

///////////////////////////////////////////////////////////////////////////////
// UTILITIES
///////////////////////////////////////////////////////////////////////////////
void INT_5ms_Init(void)
{
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
	TCCR2A = (1<<WGM21);	// mode: CTC
    1e16:	80 eb       	ldi	r24, 0xB0	; 176
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	22 e0       	ldi	r18, 0x02	; 2
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	20 83       	st	Z, r18
	TCCR2B = 0;				// mode: CTC, clock off
    1e20:	81 eb       	ldi	r24, 0xB1	; 177
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	fc 01       	movw	r30, r24
    1e26:	10 82       	st	Z, r1
	TCNT2 = 0;
    1e28:	82 eb       	ldi	r24, 0xB2	; 178
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	10 82       	st	Z, r1
	OCR2A = 96;
    1e30:	83 eb       	ldi	r24, 0xB3	; 179
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	20 e6       	ldi	r18, 0x60	; 96
    1e36:	fc 01       	movw	r30, r24
    1e38:	20 83       	st	Z, r18
	TIMSK2 = (1<<OCIE2A);
    1e3a:	80 e7       	ldi	r24, 0x70	; 112
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	22 e0       	ldi	r18, 0x02	; 2
    1e40:	fc 01       	movw	r30, r24
    1e42:	20 83       	st	Z, r18
	TIFR2 = (1<<OCF2A);
    1e44:	87 e3       	ldi	r24, 0x37	; 55
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	22 e0       	ldi	r18, 0x02	; 2
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	20 83       	st	Z, r18

	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);
    1e4e:	81 eb       	ldi	r24, 0xB1	; 177
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	21 eb       	ldi	r18, 0xB1	; 177
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	f9 01       	movw	r30, r18
    1e58:	20 81       	ld	r18, Z
    1e5a:	27 60       	ori	r18, 0x07	; 7
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	20 83       	st	Z, r18
}
    1e60:	00 00       	nop
    1e62:	df 91       	pop	r29
    1e64:	cf 91       	pop	r28
    1e66:	08 95       	ret

00001e68 <wait_1ms>:
 *
 * @param [in] uiFactor: 1ms multiplier
 * @return no return value
 *****************************************************************************/
void wait_1ms(uint16_t uiFactor)
{
    1e68:	cf 93       	push	r28
    1e6a:	df 93       	push	r29
    1e6c:	00 d0       	rcall	.+0      	; 0x1e6e <wait_1ms+0x6>
    1e6e:	00 d0       	rcall	.+0      	; 0x1e70 <wait_1ms+0x8>
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	9c 83       	std	Y+4, r25	; 0x04
    1e76:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t i;
	TCCR0A = (1<<WGM01);	// mode: CTC
    1e78:	84 e4       	ldi	r24, 0x44	; 68
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	22 e0       	ldi	r18, 0x02	; 2
    1e7e:	fc 01       	movw	r30, r24
    1e80:	20 83       	st	Z, r18
	TCCR0B = 0;				// mode: CTC
    1e82:	85 e4       	ldi	r24, 0x45	; 69
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	fc 01       	movw	r30, r24
    1e88:	10 82       	st	Z, r1
	TIFR0 =  (1<<OCF0A);	// only OCFA flag needs to be cleared
    1e8a:	85 e3       	ldi	r24, 0x35	; 53
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	22 e0       	ldi	r18, 0x02	; 2
    1e90:	fc 01       	movw	r30, r24
    1e92:	20 83       	st	Z, r18
	TIMSK0 = 0;				// no interrupts
    1e94:	8e e6       	ldi	r24, 0x6E	; 110
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	fc 01       	movw	r30, r24
    1e9a:	10 82       	st	Z, r1
	TCNT0 = 0;
    1e9c:	86 e4       	ldi	r24, 0x46	; 70
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	10 82       	st	Z, r1
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
    1ea4:	87 e4       	ldi	r24, 0x47	; 71
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	2d e4       	ldi	r18, 0x4D	; 77
    1eaa:	fc 01       	movw	r30, r24
    1eac:	20 83       	st	Z, r18
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
    1eae:	85 e4       	ldi	r24, 0x45	; 69
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	25 e4       	ldi	r18, 0x45	; 69
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	f9 01       	movw	r30, r18
    1eb8:	20 81       	ld	r18, Z
    1eba:	24 60       	ori	r18, 0x04	; 4
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	20 83       	st	Z, r18
	
	for(i=0;i<uiFactor;i++)
    1ec0:	1a 82       	std	Y+2, r1	; 0x02
    1ec2:	19 82       	std	Y+1, r1	; 0x01
    1ec4:	15 c0       	rjmp	.+42     	; 0x1ef0 <wait_1ms+0x88>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
    1ec6:	00 00       	nop
    1ec8:	85 e3       	ldi	r24, 0x35	; 53
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	fc 01       	movw	r30, r24
    1ece:	80 81       	ld	r24, Z
    1ed0:	88 2f       	mov	r24, r24
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	82 70       	andi	r24, 0x02	; 2
    1ed6:	99 27       	eor	r25, r25
    1ed8:	89 2b       	or	r24, r25
    1eda:	b1 f3       	breq	.-20     	; 0x1ec8 <wait_1ms+0x60>
		TIFR0 =  (1<<OCF0A);		// clear flag
    1edc:	85 e3       	ldi	r24, 0x35	; 53
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	22 e0       	ldi	r18, 0x02	; 2
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	20 83       	st	Z, r18
	TCNT0 = 0;
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
	
	for(i=0;i<uiFactor;i++)
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eea:	01 96       	adiw	r24, 0x01	; 1
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	29 81       	ldd	r18, Y+1	; 0x01
    1ef2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef8:	28 17       	cp	r18, r24
    1efa:	39 07       	cpc	r19, r25
    1efc:	20 f3       	brcs	.-56     	; 0x1ec6 <wait_1ms+0x5e>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
		TIFR0 =  (1<<OCF0A);		// clear flag
	}
	TCCR0B &= ~(0x07);	// set prescaler to 0 (stop timer)
    1efe:	85 e4       	ldi	r24, 0x45	; 69
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	25 e4       	ldi	r18, 0x45	; 69
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	f9 01       	movw	r30, r18
    1f08:	20 81       	ld	r18, Z
    1f0a:	28 7f       	andi	r18, 0xF8	; 248
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	20 83       	st	Z, r18
}
    1f10:	00 00       	nop
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	0f 90       	pop	r0
    1f1a:	df 91       	pop	r29
    1f1c:	cf 91       	pop	r28
    1f1e:	08 95       	ret

00001f20 <Map>:
 * @param [in] s32OutMin: minimal value of output range
 * @param [in] s32OutMax: maximal value of output range
 * @return data in new number range
 *****************************************************************************/
int32_t Map(int32_t s32Data, int32_t s32InMin, int32_t s32InMax, int32_t s32OutMin, int32_t s32OutMax)
{
    1f20:	af 92       	push	r10
    1f22:	bf 92       	push	r11
    1f24:	cf 92       	push	r12
    1f26:	df 92       	push	r13
    1f28:	ef 92       	push	r14
    1f2a:	ff 92       	push	r15
    1f2c:	0f 93       	push	r16
    1f2e:	1f 93       	push	r17
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	60 97       	sbiw	r28, 0x10	; 16
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	de bf       	out	0x3e, r29	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	cd bf       	out	0x3d, r28	; 61
    1f44:	69 83       	std	Y+1, r22	; 0x01
    1f46:	7a 83       	std	Y+2, r23	; 0x02
    1f48:	8b 83       	std	Y+3, r24	; 0x03
    1f4a:	9c 83       	std	Y+4, r25	; 0x04
    1f4c:	2d 83       	std	Y+5, r18	; 0x05
    1f4e:	3e 83       	std	Y+6, r19	; 0x06
    1f50:	4f 83       	std	Y+7, r20	; 0x07
    1f52:	58 87       	std	Y+8, r21	; 0x08
    1f54:	e9 86       	std	Y+9, r14	; 0x09
    1f56:	fa 86       	std	Y+10, r15	; 0x0a
    1f58:	0b 87       	std	Y+11, r16	; 0x0b
    1f5a:	1c 87       	std	Y+12, r17	; 0x0c
    1f5c:	ad 86       	std	Y+13, r10	; 0x0d
    1f5e:	be 86       	std	Y+14, r11	; 0x0e
    1f60:	cf 86       	std	Y+15, r12	; 0x0f
    1f62:	d8 8a       	std	Y+16, r13	; 0x10
	return((s32Data-s32InMin)*(s32OutMax-s32OutMin)/(s32InMax-s32InMin)+s32OutMin);
    1f64:	29 81       	ldd	r18, Y+1	; 0x01
    1f66:	3a 81       	ldd	r19, Y+2	; 0x02
    1f68:	4b 81       	ldd	r20, Y+3	; 0x03
    1f6a:	5c 81       	ldd	r21, Y+4	; 0x04
    1f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f70:	af 81       	ldd	r26, Y+7	; 0x07
    1f72:	b8 85       	ldd	r27, Y+8	; 0x08
    1f74:	79 01       	movw	r14, r18
    1f76:	8a 01       	movw	r16, r20
    1f78:	e8 1a       	sub	r14, r24
    1f7a:	f9 0a       	sbc	r15, r25
    1f7c:	0a 0b       	sbc	r16, r26
    1f7e:	1b 0b       	sbc	r17, r27
    1f80:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1f82:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1f84:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1f86:	58 a1       	ldd	r21, Y+32	; 0x20
    1f88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8c:	af 85       	ldd	r26, Y+15	; 0x0f
    1f8e:	b8 89       	ldd	r27, Y+16	; 0x10
    1f90:	59 01       	movw	r10, r18
    1f92:	6a 01       	movw	r12, r20
    1f94:	a8 1a       	sub	r10, r24
    1f96:	b9 0a       	sbc	r11, r25
    1f98:	ca 0a       	sbc	r12, r26
    1f9a:	db 0a       	sbc	r13, r27
    1f9c:	d6 01       	movw	r26, r12
    1f9e:	c5 01       	movw	r24, r10
    1fa0:	a8 01       	movw	r20, r16
    1fa2:	97 01       	movw	r18, r14
    1fa4:	bc 01       	movw	r22, r24
    1fa6:	cd 01       	movw	r24, r26
    1fa8:	0e 94 4c 10 	call	0x2098	; 0x2098 <__mulsi3>
    1fac:	7b 01       	movw	r14, r22
    1fae:	8c 01       	movw	r16, r24
    1fb0:	29 85       	ldd	r18, Y+9	; 0x09
    1fb2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fb4:	4b 85       	ldd	r20, Y+11	; 0x0b
    1fb6:	5c 85       	ldd	r21, Y+12	; 0x0c
    1fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fba:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbc:	af 81       	ldd	r26, Y+7	; 0x07
    1fbe:	b8 85       	ldd	r27, Y+8	; 0x08
    1fc0:	28 1b       	sub	r18, r24
    1fc2:	39 0b       	sbc	r19, r25
    1fc4:	4a 0b       	sbc	r20, r26
    1fc6:	5b 0b       	sbc	r21, r27
    1fc8:	c8 01       	movw	r24, r16
    1fca:	b7 01       	movw	r22, r14
    1fcc:	0e 94 92 10 	call	0x2124	; 0x2124 <__divmodsi4>
    1fd0:	da 01       	movw	r26, r20
    1fd2:	c9 01       	movw	r24, r18
    1fd4:	9c 01       	movw	r18, r24
    1fd6:	ad 01       	movw	r20, r26
    1fd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fdc:	af 85       	ldd	r26, Y+15	; 0x0f
    1fde:	b8 89       	ldd	r27, Y+16	; 0x10
    1fe0:	82 0f       	add	r24, r18
    1fe2:	93 1f       	adc	r25, r19
    1fe4:	a4 1f       	adc	r26, r20
    1fe6:	b5 1f       	adc	r27, r21
}
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	60 96       	adiw	r28, 0x10	; 16
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	cd bf       	out	0x3d, r28	; 61
    1ff8:	df 91       	pop	r29
    1ffa:	cf 91       	pop	r28
    1ffc:	1f 91       	pop	r17
    1ffe:	0f 91       	pop	r16
    2000:	ff 90       	pop	r15
    2002:	ef 90       	pop	r14
    2004:	df 90       	pop	r13
    2006:	cf 90       	pop	r12
    2008:	bf 90       	pop	r11
    200a:	af 90       	pop	r10
    200c:	08 95       	ret

0000200e <CRC8>:

uint8_t CRC8(uint8_t* au8Data, uint8_t u8Length)
{
    200e:	cf 93       	push	r28
    2010:	df 93       	push	r29
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	28 97       	sbiw	r28, 0x08	; 8
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	9f 83       	std	Y+7, r25	; 0x07
    2024:	8e 83       	std	Y+6, r24	; 0x06
    2026:	68 87       	std	Y+8, r22	; 0x08
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;
    2028:	19 82       	std	Y+1, r1	; 0x01

	for(i=0;i<u8Length;i++)
    202a:	1a 82       	std	Y+2, r1	; 0x02
    202c:	27 c0       	rjmp	.+78     	; 0x207c <CRC8+0x6e>
	{
		u8InByte = au8Data[i];
    202e:	8a 81       	ldd	r24, Y+2	; 0x02
    2030:	88 2f       	mov	r24, r24
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	2e 81       	ldd	r18, Y+6	; 0x06
    2036:	3f 81       	ldd	r19, Y+7	; 0x07
    2038:	82 0f       	add	r24, r18
    203a:	93 1f       	adc	r25, r19
    203c:	fc 01       	movw	r30, r24
    203e:	80 81       	ld	r24, Z
    2040:	8c 83       	std	Y+4, r24	; 0x04
		for(j=0;j<8;j++)
    2042:	1b 82       	std	Y+3, r1	; 0x03
    2044:	15 c0       	rjmp	.+42     	; 0x2070 <CRC8+0x62>
		{
			u8Temp = (u8CRC^u8InByte)&0x80;
    2046:	99 81       	ldd	r25, Y+1	; 0x01
    2048:	8c 81       	ldd	r24, Y+4	; 0x04
    204a:	89 27       	eor	r24, r25
    204c:	80 78       	andi	r24, 0x80	; 128
    204e:	8d 83       	std	Y+5, r24	; 0x05
			u8CRC <<= 1;
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	88 0f       	add	r24, r24
    2054:	89 83       	std	Y+1, r24	; 0x01
			if(u8Temp!=0)
    2056:	8d 81       	ldd	r24, Y+5	; 0x05
    2058:	88 23       	and	r24, r24
    205a:	21 f0       	breq	.+8      	; 0x2064 <CRC8+0x56>
			{
				u8CRC ^= 0x07;
    205c:	99 81       	ldd	r25, Y+1	; 0x01
    205e:	87 e0       	ldi	r24, 0x07	; 7
    2060:	89 27       	eor	r24, r25
    2062:	89 83       	std	Y+1, r24	; 0x01
			}
			u8InByte<<=1;
    2064:	8c 81       	ldd	r24, Y+4	; 0x04
    2066:	88 0f       	add	r24, r24
    2068:	8c 83       	std	Y+4, r24	; 0x04
	u8CRC = 0;

	for(i=0;i<u8Length;i++)
	{
		u8InByte = au8Data[i];
		for(j=0;j<8;j++)
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	8f 5f       	subi	r24, 0xFF	; 255
    206e:	8b 83       	std	Y+3, r24	; 0x03
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	88 30       	cpi	r24, 0x08	; 8
    2074:	40 f3       	brcs	.-48     	; 0x2046 <CRC8+0x38>
{
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;

	for(i=0;i<u8Length;i++)
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	8f 5f       	subi	r24, 0xFF	; 255
    207a:	8a 83       	std	Y+2, r24	; 0x02
    207c:	9a 81       	ldd	r25, Y+2	; 0x02
    207e:	88 85       	ldd	r24, Y+8	; 0x08
    2080:	98 17       	cp	r25, r24
    2082:	a8 f2       	brcs	.-86     	; 0x202e <CRC8+0x20>
			}
			u8InByte<<=1;
		}
	}

	return u8CRC;
    2084:	89 81       	ldd	r24, Y+1	; 0x01
}
    2086:	28 96       	adiw	r28, 0x08	; 8
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	cd bf       	out	0x3d, r28	; 61
    2092:	df 91       	pop	r29
    2094:	cf 91       	pop	r28
    2096:	08 95       	ret

00002098 <__mulsi3>:
    2098:	db 01       	movw	r26, r22
    209a:	8f 93       	push	r24
    209c:	9f 93       	push	r25
    209e:	0e 94 b7 10 	call	0x216e	; 0x216e <__muluhisi3>
    20a2:	bf 91       	pop	r27
    20a4:	af 91       	pop	r26
    20a6:	a2 9f       	mul	r26, r18
    20a8:	80 0d       	add	r24, r0
    20aa:	91 1d       	adc	r25, r1
    20ac:	a3 9f       	mul	r26, r19
    20ae:	90 0d       	add	r25, r0
    20b0:	b2 9f       	mul	r27, r18
    20b2:	90 0d       	add	r25, r0
    20b4:	11 24       	eor	r1, r1
    20b6:	08 95       	ret

000020b8 <__udivmodhi4>:
    20b8:	aa 1b       	sub	r26, r26
    20ba:	bb 1b       	sub	r27, r27
    20bc:	51 e1       	ldi	r21, 0x11	; 17
    20be:	07 c0       	rjmp	.+14     	; 0x20ce <__udivmodhi4_ep>

000020c0 <__udivmodhi4_loop>:
    20c0:	aa 1f       	adc	r26, r26
    20c2:	bb 1f       	adc	r27, r27
    20c4:	a6 17       	cp	r26, r22
    20c6:	b7 07       	cpc	r27, r23
    20c8:	10 f0       	brcs	.+4      	; 0x20ce <__udivmodhi4_ep>
    20ca:	a6 1b       	sub	r26, r22
    20cc:	b7 0b       	sbc	r27, r23

000020ce <__udivmodhi4_ep>:
    20ce:	88 1f       	adc	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	5a 95       	dec	r21
    20d4:	a9 f7       	brne	.-22     	; 0x20c0 <__udivmodhi4_loop>
    20d6:	80 95       	com	r24
    20d8:	90 95       	com	r25
    20da:	bc 01       	movw	r22, r24
    20dc:	cd 01       	movw	r24, r26
    20de:	08 95       	ret

000020e0 <__udivmodsi4>:
    20e0:	a1 e2       	ldi	r26, 0x21	; 33
    20e2:	1a 2e       	mov	r1, r26
    20e4:	aa 1b       	sub	r26, r26
    20e6:	bb 1b       	sub	r27, r27
    20e8:	fd 01       	movw	r30, r26
    20ea:	0d c0       	rjmp	.+26     	; 0x2106 <__udivmodsi4_ep>

000020ec <__udivmodsi4_loop>:
    20ec:	aa 1f       	adc	r26, r26
    20ee:	bb 1f       	adc	r27, r27
    20f0:	ee 1f       	adc	r30, r30
    20f2:	ff 1f       	adc	r31, r31
    20f4:	a2 17       	cp	r26, r18
    20f6:	b3 07       	cpc	r27, r19
    20f8:	e4 07       	cpc	r30, r20
    20fa:	f5 07       	cpc	r31, r21
    20fc:	20 f0       	brcs	.+8      	; 0x2106 <__udivmodsi4_ep>
    20fe:	a2 1b       	sub	r26, r18
    2100:	b3 0b       	sbc	r27, r19
    2102:	e4 0b       	sbc	r30, r20
    2104:	f5 0b       	sbc	r31, r21

00002106 <__udivmodsi4_ep>:
    2106:	66 1f       	adc	r22, r22
    2108:	77 1f       	adc	r23, r23
    210a:	88 1f       	adc	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	1a 94       	dec	r1
    2110:	69 f7       	brne	.-38     	; 0x20ec <__udivmodsi4_loop>
    2112:	60 95       	com	r22
    2114:	70 95       	com	r23
    2116:	80 95       	com	r24
    2118:	90 95       	com	r25
    211a:	9b 01       	movw	r18, r22
    211c:	ac 01       	movw	r20, r24
    211e:	bd 01       	movw	r22, r26
    2120:	cf 01       	movw	r24, r30
    2122:	08 95       	ret

00002124 <__divmodsi4>:
    2124:	05 2e       	mov	r0, r21
    2126:	97 fb       	bst	r25, 7
    2128:	1e f4       	brtc	.+6      	; 0x2130 <__divmodsi4+0xc>
    212a:	00 94       	com	r0
    212c:	0e 94 a9 10 	call	0x2152	; 0x2152 <__negsi2>
    2130:	57 fd       	sbrc	r21, 7
    2132:	07 d0       	rcall	.+14     	; 0x2142 <__divmodsi4_neg2>
    2134:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__udivmodsi4>
    2138:	07 fc       	sbrc	r0, 7
    213a:	03 d0       	rcall	.+6      	; 0x2142 <__divmodsi4_neg2>
    213c:	4e f4       	brtc	.+18     	; 0x2150 <__divmodsi4_exit>
    213e:	0c 94 a9 10 	jmp	0x2152	; 0x2152 <__negsi2>

00002142 <__divmodsi4_neg2>:
    2142:	50 95       	com	r21
    2144:	40 95       	com	r20
    2146:	30 95       	com	r19
    2148:	21 95       	neg	r18
    214a:	3f 4f       	sbci	r19, 0xFF	; 255
    214c:	4f 4f       	sbci	r20, 0xFF	; 255
    214e:	5f 4f       	sbci	r21, 0xFF	; 255

00002150 <__divmodsi4_exit>:
    2150:	08 95       	ret

00002152 <__negsi2>:
    2152:	90 95       	com	r25
    2154:	80 95       	com	r24
    2156:	70 95       	com	r23
    2158:	61 95       	neg	r22
    215a:	7f 4f       	sbci	r23, 0xFF	; 255
    215c:	8f 4f       	sbci	r24, 0xFF	; 255
    215e:	9f 4f       	sbci	r25, 0xFF	; 255
    2160:	08 95       	ret

00002162 <__tablejump2__>:
    2162:	ee 0f       	add	r30, r30
    2164:	ff 1f       	adc	r31, r31
    2166:	05 90       	lpm	r0, Z+
    2168:	f4 91       	lpm	r31, Z
    216a:	e0 2d       	mov	r30, r0
    216c:	09 94       	ijmp

0000216e <__muluhisi3>:
    216e:	0e 94 c2 10 	call	0x2184	; 0x2184 <__umulhisi3>
    2172:	a5 9f       	mul	r26, r21
    2174:	90 0d       	add	r25, r0
    2176:	b4 9f       	mul	r27, r20
    2178:	90 0d       	add	r25, r0
    217a:	a4 9f       	mul	r26, r20
    217c:	80 0d       	add	r24, r0
    217e:	91 1d       	adc	r25, r1
    2180:	11 24       	eor	r1, r1
    2182:	08 95       	ret

00002184 <__umulhisi3>:
    2184:	a2 9f       	mul	r26, r18
    2186:	b0 01       	movw	r22, r0
    2188:	b3 9f       	mul	r27, r19
    218a:	c0 01       	movw	r24, r0
    218c:	a3 9f       	mul	r26, r19
    218e:	70 0d       	add	r23, r0
    2190:	81 1d       	adc	r24, r1
    2192:	11 24       	eor	r1, r1
    2194:	91 1d       	adc	r25, r1
    2196:	b2 9f       	mul	r27, r18
    2198:	70 0d       	add	r23, r0
    219a:	81 1d       	adc	r24, r1
    219c:	11 24       	eor	r1, r1
    219e:	91 1d       	adc	r25, r1
    21a0:	08 95       	ret

000021a2 <strlen>:
    21a2:	fc 01       	movw	r30, r24
    21a4:	01 90       	ld	r0, Z+
    21a6:	00 20       	and	r0, r0
    21a8:	e9 f7       	brne	.-6      	; 0x21a4 <strlen+0x2>
    21aa:	80 95       	com	r24
    21ac:	90 95       	com	r25
    21ae:	8e 0f       	add	r24, r30
    21b0:	9f 1f       	adc	r25, r31
    21b2:	08 95       	ret

000021b4 <_exit>:
    21b4:	f8 94       	cli

000021b6 <__stop_program>:
    21b6:	ff cf       	rjmp	.-2      	; 0x21b6 <__stop_program>
