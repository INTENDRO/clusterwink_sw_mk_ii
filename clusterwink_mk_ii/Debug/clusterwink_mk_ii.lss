
clusterwink_mk_ii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00001d34  00001dc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000de  0080013e  0080013e  00001e06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00001e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012d9  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b33  00000000  00000000  000032e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012d9  00000000  00000000  00003e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000700  00000000  00000000  000050f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000855  00000000  00000000  000057f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eb6  00000000  00000000  0000604d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00006f03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
       4:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__vector_1>
       8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
       c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      14:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__vector_5>
      18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      24:	0c 94 38 02 	jmp	0x470	; 0x470 <__vector_9>
      28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      4c:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__vector_19>
      50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      7c:	ba 04       	cpc	r11, r10
      7e:	d3 04       	cpc	r13, r3
      80:	ec 04       	cpc	r14, r12
      82:	a6 05       	cpc	r26, r6
      84:	c1 05       	cpc	r28, r1
      86:	c1 05       	cpc	r28, r1
      88:	c1 05       	cpc	r28, r1
      8a:	48 06       	cpc	r4, r24
      8c:	55 06       	cpc	r5, r21
      8e:	62 06       	cpc	r6, r18
      90:	7d 06       	cpc	r7, r29
      92:	66 07       	cpc	r22, r22
      94:	a8 07       	cpc	r26, r24
      96:	a8 07       	cpc	r26, r24
      98:	a8 07       	cpc	r26, r24
      9a:	a8 07       	cpc	r26, r24
      9c:	a8 07       	cpc	r26, r24
      9e:	a8 07       	cpc	r26, r24
      a0:	a8 07       	cpc	r26, r24
      a2:	a8 07       	cpc	r26, r24
      a4:	a8 07       	cpc	r26, r24
      a6:	a8 07       	cpc	r26, r24
      a8:	a8 07       	cpc	r26, r24
      aa:	69 07       	cpc	r22, r25
      ac:	75 07       	cpc	r23, r21
      ae:	81 07       	cpc	r24, r17
      b0:	a8 07       	cpc	r26, r24
      b2:	a8 07       	cpc	r26, r24
      b4:	a8 07       	cpc	r26, r24
      b6:	a8 07       	cpc	r26, r24
      b8:	a8 07       	cpc	r26, r24
      ba:	a8 07       	cpc	r26, r24
      bc:	a8 07       	cpc	r26, r24
      be:	a8 07       	cpc	r26, r24
      c0:	a8 07       	cpc	r26, r24
      c2:	a8 07       	cpc	r26, r24
      c4:	a8 07       	cpc	r26, r24
      c6:	a8 07       	cpc	r26, r24
      c8:	a8 07       	cpc	r26, r24
      ca:	8a 07       	cpc	r24, r26

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	d8 e0       	ldi	r29, 0x08	; 8
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
      d8:	11 e0       	ldi	r17, 0x01	; 1
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b1 e0       	ldi	r27, 0x01	; 1
      de:	e4 e3       	ldi	r30, 0x34	; 52
      e0:	fd e1       	ldi	r31, 0x1D	; 29
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
      e4:	05 90       	lpm	r0, Z+
      e6:	0d 92       	st	X+, r0
      e8:	ae 33       	cpi	r26, 0x3E	; 62
      ea:	b1 07       	cpc	r27, r17
      ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
      ee:	22 e0       	ldi	r18, 0x02	; 2
      f0:	ae e3       	ldi	r26, 0x3E	; 62
      f2:	b1 e0       	ldi	r27, 0x01	; 1
      f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
      f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
      f8:	ac 31       	cpi	r26, 0x1C	; 28
      fa:	b2 07       	cpc	r27, r18
      fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
      fe:	0e 94 ce 07 	call	0xf9c	; 0xf9c <main>
     102:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <_exit>

00000106 <__bad_interrupt>:
     106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
     10a:	cf 93       	push	r28
     10c:	df 93       	push	r29
     10e:	cd b7       	in	r28, 0x3d	; 61
     110:	de b7       	in	r29, 0x3e	; 62
    cli();
     112:	f8 94       	cli
    return 1;
     114:	81 e0       	ldi	r24, 0x01	; 1
}
     116:	df 91       	pop	r29
     118:	cf 91       	pop	r28
     11a:	08 95       	ret

0000011c <__iRestore>:
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	00 d0       	rcall	.+0      	; 0x122 <__iRestore+0x6>
     122:	cd b7       	in	r28, 0x3d	; 61
     124:	de b7       	in	r29, 0x3e	; 62
     126:	9a 83       	std	Y+2, r25	; 0x02
     128:	89 83       	std	Y+1, r24	; 0x01
    SREG = *__s;
     12a:	8f e5       	ldi	r24, 0x5F	; 95
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	29 81       	ldd	r18, Y+1	; 0x01
     130:	3a 81       	ldd	r19, Y+2	; 0x02
     132:	f9 01       	movw	r30, r18
     134:	20 81       	ld	r18, Z
     136:	fc 01       	movw	r30, r24
     138:	20 83       	st	Z, r18
    __asm__ volatile ("" ::: "memory");
}
     13a:	00 00       	nop
     13c:	0f 90       	pop	r0
     13e:	0f 90       	pop	r0
     140:	df 91       	pop	r29
     142:	cf 91       	pop	r28
     144:	08 95       	ret

00000146 <RingBuffer_InitBuffer>:
		 *  by re-initializing them using this function.
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	00 d0       	rcall	.+0      	; 0x14c <RingBuffer_InitBuffer+0x6>
     14c:	00 d0       	rcall	.+0      	; 0x14e <RingBuffer_InitBuffer+0x8>
     14e:	cd b7       	in	r28, 0x3d	; 61
     150:	de b7       	in	r29, 0x3e	; 62
     152:	9c 83       	std	Y+4, r25	; 0x04
     154:	8b 83       	std	Y+3, r24	; 0x03
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     156:	8f e5       	ldi	r24, 0x5F	; 95
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	fc 01       	movw	r30, r24
     15c:	80 81       	ld	r24, Z
     15e:	8a 83       	std	Y+2, r24	; 0x02
     160:	0e 94 85 00 	call	0x10a	; 0x10a <__iCliRetVal>
     164:	89 83       	std	Y+1, r24	; 0x01
     166:	19 c0       	rjmp	.+50     	; 0x19a <RingBuffer_InitBuffer+0x54>
			{
				Buffer->In    = Buffer->Buffer;
     168:	2b 81       	ldd	r18, Y+3	; 0x03
     16a:	3c 81       	ldd	r19, Y+4	; 0x04
     16c:	8b 81       	ldd	r24, Y+3	; 0x03
     16e:	9c 81       	ldd	r25, Y+4	; 0x04
     170:	80 58       	subi	r24, 0x80	; 128
     172:	9f 4f       	sbci	r25, 0xFF	; 255
     174:	fc 01       	movw	r30, r24
     176:	31 83       	std	Z+1, r19	; 0x01
     178:	20 83       	st	Z, r18
				Buffer->Out   = Buffer->Buffer;
     17a:	2b 81       	ldd	r18, Y+3	; 0x03
     17c:	3c 81       	ldd	r19, Y+4	; 0x04
     17e:	8b 81       	ldd	r24, Y+3	; 0x03
     180:	9c 81       	ldd	r25, Y+4	; 0x04
     182:	8e 57       	subi	r24, 0x7E	; 126
     184:	9f 4f       	sbci	r25, 0xFF	; 255
     186:	fc 01       	movw	r30, r24
     188:	31 83       	std	Z+1, r19	; 0x01
     18a:	20 83       	st	Z, r18
				Buffer->Count = 0;
     18c:	8b 81       	ldd	r24, Y+3	; 0x03
     18e:	9c 81       	ldd	r25, Y+4	; 0x04
     190:	8c 57       	subi	r24, 0x7C	; 124
     192:	9f 4f       	sbci	r25, 0xFF	; 255
     194:	fc 01       	movw	r30, r24
     196:	10 82       	st	Z, r1
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     198:	19 82       	std	Y+1, r1	; 0x01
     19a:	89 81       	ldd	r24, Y+1	; 0x01
     19c:	88 23       	and	r24, r24
     19e:	21 f7       	brne	.-56     	; 0x168 <RingBuffer_InitBuffer+0x22>
     1a0:	ce 01       	movw	r24, r28
     1a2:	02 96       	adiw	r24, 0x02	; 2
     1a4:	0e 94 8e 00 	call	0x11c	; 0x11c <__iRestore>
			{
				Buffer->In    = Buffer->Buffer;
				Buffer->Out   = Buffer->Buffer;
				Buffer->Count = 0;
			}
		}
     1a8:	00 00       	nop
     1aa:	0f 90       	pop	r0
     1ac:	0f 90       	pop	r0
     1ae:	0f 90       	pop	r0
     1b0:	0f 90       	pop	r0
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <RingBuffer_Insert>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	00 d0       	rcall	.+0      	; 0x1be <RingBuffer_Insert+0x6>
     1be:	00 d0       	rcall	.+0      	; 0x1c0 <RingBuffer_Insert+0x8>
     1c0:	1f 92       	push	r1
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
     1c6:	9c 83       	std	Y+4, r25	; 0x04
     1c8:	8b 83       	std	Y+3, r24	; 0x03
     1ca:	6d 83       	std	Y+5, r22	; 0x05
			*Buffer->In = Data;
     1cc:	8b 81       	ldd	r24, Y+3	; 0x03
     1ce:	9c 81       	ldd	r25, Y+4	; 0x04
     1d0:	80 58       	subi	r24, 0x80	; 128
     1d2:	9f 4f       	sbci	r25, 0xFF	; 255
     1d4:	fc 01       	movw	r30, r24
     1d6:	80 81       	ld	r24, Z
     1d8:	91 81       	ldd	r25, Z+1	; 0x01
     1da:	2d 81       	ldd	r18, Y+5	; 0x05
     1dc:	fc 01       	movw	r30, r24
     1de:	20 83       	st	Z, r18
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
     1e0:	8b 81       	ldd	r24, Y+3	; 0x03
     1e2:	9c 81       	ldd	r25, Y+4	; 0x04
     1e4:	80 58       	subi	r24, 0x80	; 128
     1e6:	9f 4f       	sbci	r25, 0xFF	; 255
     1e8:	fc 01       	movw	r30, r24
     1ea:	80 81       	ld	r24, Z
     1ec:	91 81       	ldd	r25, Z+1	; 0x01
     1ee:	9c 01       	movw	r18, r24
     1f0:	2f 5f       	subi	r18, 0xFF	; 255
     1f2:	3f 4f       	sbci	r19, 0xFF	; 255
     1f4:	8b 81       	ldd	r24, Y+3	; 0x03
     1f6:	9c 81       	ldd	r25, Y+4	; 0x04
     1f8:	80 58       	subi	r24, 0x80	; 128
     1fa:	9f 4f       	sbci	r25, 0xFF	; 255
     1fc:	fc 01       	movw	r30, r24
     1fe:	31 83       	std	Z+1, r19	; 0x01
     200:	20 83       	st	Z, r18
     202:	8b 81       	ldd	r24, Y+3	; 0x03
     204:	9c 81       	ldd	r25, Y+4	; 0x04
     206:	80 58       	subi	r24, 0x80	; 128
     208:	9f 4f       	sbci	r25, 0xFF	; 255
     20a:	fc 01       	movw	r30, r24
     20c:	20 81       	ld	r18, Z
     20e:	31 81       	ldd	r19, Z+1	; 0x01
     210:	8b 81       	ldd	r24, Y+3	; 0x03
     212:	9c 81       	ldd	r25, Y+4	; 0x04
     214:	80 58       	subi	r24, 0x80	; 128
     216:	9f 4f       	sbci	r25, 0xFF	; 255
     218:	28 17       	cp	r18, r24
     21a:	39 07       	cpc	r19, r25
     21c:	49 f4       	brne	.+18     	; 0x230 <RingBuffer_Insert+0x78>
			  Buffer->In = Buffer->Buffer;
     21e:	2b 81       	ldd	r18, Y+3	; 0x03
     220:	3c 81       	ldd	r19, Y+4	; 0x04
     222:	8b 81       	ldd	r24, Y+3	; 0x03
     224:	9c 81       	ldd	r25, Y+4	; 0x04
     226:	80 58       	subi	r24, 0x80	; 128
     228:	9f 4f       	sbci	r25, 0xFF	; 255
     22a:	fc 01       	movw	r30, r24
     22c:	31 83       	std	Z+1, r19	; 0x01
     22e:	20 83       	st	Z, r18

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     230:	8f e5       	ldi	r24, 0x5F	; 95
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	fc 01       	movw	r30, r24
     236:	80 81       	ld	r24, Z
     238:	8a 83       	std	Y+2, r24	; 0x02
     23a:	0e 94 85 00 	call	0x10a	; 0x10a <__iCliRetVal>
     23e:	89 83       	std	Y+1, r24	; 0x01
     240:	0f c0       	rjmp	.+30     	; 0x260 <RingBuffer_Insert+0xa8>
			{
				Buffer->Count++;
     242:	8b 81       	ldd	r24, Y+3	; 0x03
     244:	9c 81       	ldd	r25, Y+4	; 0x04
     246:	8c 57       	subi	r24, 0x7C	; 124
     248:	9f 4f       	sbci	r25, 0xFF	; 255
     24a:	fc 01       	movw	r30, r24
     24c:	80 81       	ld	r24, Z
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	28 0f       	add	r18, r24
     252:	8b 81       	ldd	r24, Y+3	; 0x03
     254:	9c 81       	ldd	r25, Y+4	; 0x04
     256:	8c 57       	subi	r24, 0x7C	; 124
     258:	9f 4f       	sbci	r25, 0xFF	; 255
     25a:	fc 01       	movw	r30, r24
     25c:	20 83       	st	Z, r18
			*Buffer->In = Data;
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->In = Buffer->Buffer;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     25e:	19 82       	std	Y+1, r1	; 0x01
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	88 23       	and	r24, r24
     264:	71 f7       	brne	.-36     	; 0x242 <RingBuffer_Insert+0x8a>
     266:	ce 01       	movw	r24, r28
     268:	02 96       	adiw	r24, 0x02	; 2
     26a:	0e 94 8e 00 	call	0x11c	; 0x11c <__iRestore>
			{
				Buffer->Count++;
			}
		}
     26e:	00 00       	nop
     270:	0f 90       	pop	r0
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	08 95       	ret

00000280 <RingBuffer_Remove>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to retrieve from
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	00 d0       	rcall	.+0      	; 0x286 <RingBuffer_Remove+0x6>
     286:	00 d0       	rcall	.+0      	; 0x288 <RingBuffer_Remove+0x8>
     288:	1f 92       	push	r1
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
     28e:	9d 83       	std	Y+5, r25	; 0x05
     290:	8c 83       	std	Y+4, r24	; 0x04
			RingBuff_Data_t Data = *Buffer->Out;
     292:	8c 81       	ldd	r24, Y+4	; 0x04
     294:	9d 81       	ldd	r25, Y+5	; 0x05
     296:	8e 57       	subi	r24, 0x7E	; 126
     298:	9f 4f       	sbci	r25, 0xFF	; 255
     29a:	fc 01       	movw	r30, r24
     29c:	80 81       	ld	r24, Z
     29e:	91 81       	ldd	r25, Z+1	; 0x01
     2a0:	fc 01       	movw	r30, r24
     2a2:	80 81       	ld	r24, Z
     2a4:	8a 83       	std	Y+2, r24	; 0x02
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
     2a6:	8c 81       	ldd	r24, Y+4	; 0x04
     2a8:	9d 81       	ldd	r25, Y+5	; 0x05
     2aa:	8e 57       	subi	r24, 0x7E	; 126
     2ac:	9f 4f       	sbci	r25, 0xFF	; 255
     2ae:	fc 01       	movw	r30, r24
     2b0:	80 81       	ld	r24, Z
     2b2:	91 81       	ldd	r25, Z+1	; 0x01
     2b4:	9c 01       	movw	r18, r24
     2b6:	2f 5f       	subi	r18, 0xFF	; 255
     2b8:	3f 4f       	sbci	r19, 0xFF	; 255
     2ba:	8c 81       	ldd	r24, Y+4	; 0x04
     2bc:	9d 81       	ldd	r25, Y+5	; 0x05
     2be:	8e 57       	subi	r24, 0x7E	; 126
     2c0:	9f 4f       	sbci	r25, 0xFF	; 255
     2c2:	fc 01       	movw	r30, r24
     2c4:	31 83       	std	Z+1, r19	; 0x01
     2c6:	20 83       	st	Z, r18
     2c8:	8c 81       	ldd	r24, Y+4	; 0x04
     2ca:	9d 81       	ldd	r25, Y+5	; 0x05
     2cc:	8e 57       	subi	r24, 0x7E	; 126
     2ce:	9f 4f       	sbci	r25, 0xFF	; 255
     2d0:	fc 01       	movw	r30, r24
     2d2:	20 81       	ld	r18, Z
     2d4:	31 81       	ldd	r19, Z+1	; 0x01
     2d6:	8c 81       	ldd	r24, Y+4	; 0x04
     2d8:	9d 81       	ldd	r25, Y+5	; 0x05
     2da:	80 58       	subi	r24, 0x80	; 128
     2dc:	9f 4f       	sbci	r25, 0xFF	; 255
     2de:	28 17       	cp	r18, r24
     2e0:	39 07       	cpc	r19, r25
     2e2:	49 f4       	brne	.+18     	; 0x2f6 <RingBuffer_Remove+0x76>
			  Buffer->Out = Buffer->Buffer;
     2e4:	2c 81       	ldd	r18, Y+4	; 0x04
     2e6:	3d 81       	ldd	r19, Y+5	; 0x05
     2e8:	8c 81       	ldd	r24, Y+4	; 0x04
     2ea:	9d 81       	ldd	r25, Y+5	; 0x05
     2ec:	8e 57       	subi	r24, 0x7E	; 126
     2ee:	9f 4f       	sbci	r25, 0xFF	; 255
     2f0:	fc 01       	movw	r30, r24
     2f2:	31 83       	std	Z+1, r19	; 0x01
     2f4:	20 83       	st	Z, r18

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     2f6:	8f e5       	ldi	r24, 0x5F	; 95
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	fc 01       	movw	r30, r24
     2fc:	80 81       	ld	r24, Z
     2fe:	8b 83       	std	Y+3, r24	; 0x03
     300:	0e 94 85 00 	call	0x10a	; 0x10a <__iCliRetVal>
     304:	89 83       	std	Y+1, r24	; 0x01
     306:	0f c0       	rjmp	.+30     	; 0x326 <RingBuffer_Remove+0xa6>
			{
				Buffer->Count--;
     308:	8c 81       	ldd	r24, Y+4	; 0x04
     30a:	9d 81       	ldd	r25, Y+5	; 0x05
     30c:	8c 57       	subi	r24, 0x7C	; 124
     30e:	9f 4f       	sbci	r25, 0xFF	; 255
     310:	fc 01       	movw	r30, r24
     312:	80 81       	ld	r24, Z
     314:	2f ef       	ldi	r18, 0xFF	; 255
     316:	28 0f       	add	r18, r24
     318:	8c 81       	ldd	r24, Y+4	; 0x04
     31a:	9d 81       	ldd	r25, Y+5	; 0x05
     31c:	8c 57       	subi	r24, 0x7C	; 124
     31e:	9f 4f       	sbci	r25, 0xFF	; 255
     320:	fc 01       	movw	r30, r24
     322:	20 83       	st	Z, r18
			RingBuff_Data_t Data = *Buffer->Out;
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->Out = Buffer->Buffer;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     324:	19 82       	std	Y+1, r1	; 0x01
     326:	89 81       	ldd	r24, Y+1	; 0x01
     328:	88 23       	and	r24, r24
     32a:	71 f7       	brne	.-36     	; 0x308 <RingBuffer_Remove+0x88>
     32c:	ce 01       	movw	r24, r28
     32e:	03 96       	adiw	r24, 0x03	; 3
     330:	0e 94 8e 00 	call	0x11c	; 0x11c <__iRestore>
			{
				Buffer->Count--;
			}
			
			return Data;
     334:	8a 81       	ldd	r24, Y+2	; 0x02
		}
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <RingBuffer_CountChar>:
			}
			*(Destination+PeakLength) = 0;
		}

		static inline RingBuff_Count_t RingBuffer_CountChar(RingBuff_t* const Buffer, char charToCheck)
		{
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	00 d0       	rcall	.+0      	; 0x34c <RingBuffer_CountChar+0x6>
     34c:	00 d0       	rcall	.+0      	; 0x34e <RingBuffer_CountChar+0x8>
     34e:	00 d0       	rcall	.+0      	; 0x350 <RingBuffer_CountChar+0xa>
     350:	cd b7       	in	r28, 0x3d	; 61
     352:	de b7       	in	r29, 0x3e	; 62
     354:	9d 83       	std	Y+5, r25	; 0x05
     356:	8c 83       	std	Y+4, r24	; 0x04
     358:	6e 83       	std	Y+6, r22	; 0x06
			RingBuff_Count_t count = 0;
     35a:	19 82       	std	Y+1, r1	; 0x01

			RingBuff_Data_t* currentRead = Buffer->Out;
     35c:	8c 81       	ldd	r24, Y+4	; 0x04
     35e:	9d 81       	ldd	r25, Y+5	; 0x05
     360:	8e 57       	subi	r24, 0x7E	; 126
     362:	9f 4f       	sbci	r25, 0xFF	; 255
     364:	fc 01       	movw	r30, r24
     366:	80 81       	ld	r24, Z
     368:	91 81       	ldd	r25, Z+1	; 0x01
     36a:	9b 83       	std	Y+3, r25	; 0x03
     36c:	8a 83       	std	Y+2, r24	; 0x02

			while(currentRead != Buffer->In)
     36e:	1c c0       	rjmp	.+56     	; 0x3a8 <RingBuffer_CountChar+0x62>
			{
				if(*currentRead==charToCheck)
     370:	8a 81       	ldd	r24, Y+2	; 0x02
     372:	9b 81       	ldd	r25, Y+3	; 0x03
     374:	fc 01       	movw	r30, r24
     376:	90 81       	ld	r25, Z
     378:	8e 81       	ldd	r24, Y+6	; 0x06
     37a:	98 17       	cp	r25, r24
     37c:	19 f4       	brne	.+6      	; 0x384 <RingBuffer_CountChar+0x3e>
				{
					count++;
     37e:	89 81       	ldd	r24, Y+1	; 0x01
     380:	8f 5f       	subi	r24, 0xFF	; 255
     382:	89 83       	std	Y+1, r24	; 0x01
				}
				if (++currentRead == &Buffer->Buffer[BUFFER_SIZE]) currentRead = Buffer->Buffer;
     384:	8a 81       	ldd	r24, Y+2	; 0x02
     386:	9b 81       	ldd	r25, Y+3	; 0x03
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	9b 83       	std	Y+3, r25	; 0x03
     38c:	8a 83       	std	Y+2, r24	; 0x02
     38e:	8c 81       	ldd	r24, Y+4	; 0x04
     390:	9d 81       	ldd	r25, Y+5	; 0x05
     392:	80 58       	subi	r24, 0x80	; 128
     394:	9f 4f       	sbci	r25, 0xFF	; 255
     396:	2a 81       	ldd	r18, Y+2	; 0x02
     398:	3b 81       	ldd	r19, Y+3	; 0x03
     39a:	28 17       	cp	r18, r24
     39c:	39 07       	cpc	r19, r25
     39e:	21 f4       	brne	.+8      	; 0x3a8 <RingBuffer_CountChar+0x62>
     3a0:	8c 81       	ldd	r24, Y+4	; 0x04
     3a2:	9d 81       	ldd	r25, Y+5	; 0x05
     3a4:	9b 83       	std	Y+3, r25	; 0x03
     3a6:	8a 83       	std	Y+2, r24	; 0x02
		{
			RingBuff_Count_t count = 0;

			RingBuff_Data_t* currentRead = Buffer->Out;

			while(currentRead != Buffer->In)
     3a8:	8c 81       	ldd	r24, Y+4	; 0x04
     3aa:	9d 81       	ldd	r25, Y+5	; 0x05
     3ac:	80 58       	subi	r24, 0x80	; 128
     3ae:	9f 4f       	sbci	r25, 0xFF	; 255
     3b0:	fc 01       	movw	r30, r24
     3b2:	20 81       	ld	r18, Z
     3b4:	31 81       	ldd	r19, Z+1	; 0x01
     3b6:	8a 81       	ldd	r24, Y+2	; 0x02
     3b8:	9b 81       	ldd	r25, Y+3	; 0x03
     3ba:	28 17       	cp	r18, r24
     3bc:	39 07       	cpc	r19, r25
     3be:	c1 f6       	brne	.-80     	; 0x370 <RingBuffer_CountChar+0x2a>
				{
					count++;
				}
				if (++currentRead == &Buffer->Buffer[BUFFER_SIZE]) currentRead = Buffer->Buffer;
			}
			return(count);
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
		}
     3c2:	26 96       	adiw	r28, 0x06	; 6
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	cd bf       	out	0x3d, r28	; 61
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	08 95       	ret

000003d4 <RingBuffer_RemoveUntilChar>:

		static inline void RingBuffer_RemoveUntilChar(RingBuff_t* const Buffer, RingBuff_Data_t* Destination, char endChar, uint8_t includingChar)
		{
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
     3dc:	29 97       	sbiw	r28, 0x09	; 9
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	de bf       	out	0x3e, r29	; 62
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	cd bf       	out	0x3d, r28	; 61
     3e8:	9d 83       	std	Y+5, r25	; 0x05
     3ea:	8c 83       	std	Y+4, r24	; 0x04
     3ec:	7f 83       	std	Y+7, r23	; 0x07
     3ee:	6e 83       	std	Y+6, r22	; 0x06
     3f0:	48 87       	std	Y+8, r20	; 0x08
     3f2:	29 87       	std	Y+9, r18	; 0x09
			RingBuff_Data_t tempData;
			unsigned int uiDestinationOffset = 0;
     3f4:	1a 82       	std	Y+2, r1	; 0x02
     3f6:	19 82       	std	Y+1, r1	; 0x01
			
			while(1)
			{
				tempData = RingBuffer_Remove(Buffer);
     3f8:	8c 81       	ldd	r24, Y+4	; 0x04
     3fa:	9d 81       	ldd	r25, Y+5	; 0x05
     3fc:	0e 94 40 01 	call	0x280	; 0x280 <RingBuffer_Remove>
     400:	8b 83       	std	Y+3, r24	; 0x03
				if(tempData == endChar)
     402:	9b 81       	ldd	r25, Y+3	; 0x03
     404:	88 85       	ldd	r24, Y+8	; 0x08
     406:	98 17       	cp	r25, r24
     408:	d1 f4       	brne	.+52     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
				{
					if(includingChar)
     40a:	89 85       	ldd	r24, Y+9	; 0x09
     40c:	88 23       	and	r24, r24
     40e:	71 f0       	breq	.+28     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
					{
						*(Destination+uiDestinationOffset) = tempData;
     410:	2e 81       	ldd	r18, Y+6	; 0x06
     412:	3f 81       	ldd	r19, Y+7	; 0x07
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	9a 81       	ldd	r25, Y+2	; 0x02
     418:	82 0f       	add	r24, r18
     41a:	93 1f       	adc	r25, r19
     41c:	2b 81       	ldd	r18, Y+3	; 0x03
     41e:	fc 01       	movw	r30, r24
     420:	20 83       	st	Z, r18
						uiDestinationOffset++;
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	9a 81       	ldd	r25, Y+2	; 0x02
     426:	01 96       	adiw	r24, 0x01	; 1
     428:	9a 83       	std	Y+2, r25	; 0x02
     42a:	89 83       	std	Y+1, r24	; 0x01
					}
					*(Destination+uiDestinationOffset) = 0;
     42c:	2e 81       	ldd	r18, Y+6	; 0x06
     42e:	3f 81       	ldd	r19, Y+7	; 0x07
     430:	89 81       	ldd	r24, Y+1	; 0x01
     432:	9a 81       	ldd	r25, Y+2	; 0x02
     434:	82 0f       	add	r24, r18
     436:	93 1f       	adc	r25, r19
     438:	fc 01       	movw	r30, r24
     43a:	10 82       	st	Z, r1
					break;
     43c:	0f c0       	rjmp	.+30     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
				}
				*(Destination+uiDestinationOffset) = tempData;
     43e:	2e 81       	ldd	r18, Y+6	; 0x06
     440:	3f 81       	ldd	r19, Y+7	; 0x07
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	9a 81       	ldd	r25, Y+2	; 0x02
     446:	82 0f       	add	r24, r18
     448:	93 1f       	adc	r25, r19
     44a:	2b 81       	ldd	r18, Y+3	; 0x03
     44c:	fc 01       	movw	r30, r24
     44e:	20 83       	st	Z, r18
				uiDestinationOffset++;
     450:	89 81       	ldd	r24, Y+1	; 0x01
     452:	9a 81       	ldd	r25, Y+2	; 0x02
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	9a 83       	std	Y+2, r25	; 0x02
     458:	89 83       	std	Y+1, r24	; 0x01
			}
     45a:	ce cf       	rjmp	.-100    	; 0x3f8 <RingBuffer_RemoveUntilChar+0x24>
		}
     45c:	00 00       	nop
     45e:	29 96       	adiw	r28, 0x09	; 9
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
     464:	de bf       	out	0x3e, r29	; 62
     466:	0f be       	out	0x3f, r0	; 63
     468:	cd bf       	out	0x3d, r28	; 61
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	08 95       	ret

00000470 <__vector_9>:

volatile uint8_t u8Status = 0x00;
volatile uint8_t u8Duty = 0;

ISR(TIMER2_COMPA_vect)
{
     470:	1f 92       	push	r1
     472:	0f 92       	push	r0
     474:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     478:	0f 92       	push	r0
     47a:	11 24       	eor	r1, r1
     47c:	af 92       	push	r10
     47e:	bf 92       	push	r11
     480:	cf 92       	push	r12
     482:	df 92       	push	r13
     484:	ef 92       	push	r14
     486:	ff 92       	push	r15
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	2f 93       	push	r18
     48e:	3f 93       	push	r19
     490:	4f 93       	push	r20
     492:	5f 93       	push	r21
     494:	6f 93       	push	r22
     496:	7f 93       	push	r23
     498:	8f 93       	push	r24
     49a:	9f 93       	push	r25
     49c:	af 93       	push	r26
     49e:	bf 93       	push	r27
     4a0:	ef 93       	push	r30
     4a2:	ff 93       	push	r31
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
     4ac:	8b e2       	ldi	r24, 0x2B	; 43
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	2b e2       	ldi	r18, 0x2B	; 43
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	f9 01       	movw	r30, r18
     4b6:	20 81       	ld	r18, Z
     4b8:	22 60       	ori	r18, 0x02	; 2
     4ba:	fc 01       	movw	r30, r24
     4bc:	20 83       	st	Z, r18
	#endif

	if(u8PLEDFadeActive)
     4be:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8PLEDFadeActive>
     4c2:	88 23       	and	r24, r24
     4c4:	09 f4       	brne	.+2      	; 0x4c8 <__vector_9+0x58>
     4c6:	e7 c0       	rjmp	.+462    	; 0x696 <__vector_9+0x226>
	{
		if(u8PLEDFadeDirection) // rise
     4c8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <u8PLEDFadeDirection>
     4cc:	88 23       	and	r24, r24
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <__vector_9+0x62>
     4d0:	72 c0       	rjmp	.+228    	; 0x5b6 <__vector_9+0x146>
		{
			u32PLEDFadeIntCount++;
     4d2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u32PLEDFadeIntCount>
     4d6:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <u32PLEDFadeIntCount+0x1>
     4da:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <u32PLEDFadeIntCount+0x2>
     4de:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <u32PLEDFadeIntCount+0x3>
     4e2:	01 96       	adiw	r24, 0x01	; 1
     4e4:	a1 1d       	adc	r26, r1
     4e6:	b1 1d       	adc	r27, r1
     4e8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <u32PLEDFadeIntCount>
     4ec:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <u32PLEDFadeIntCount+0x1>
     4f0:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <u32PLEDFadeIntCount+0x2>
     4f4:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <u32PLEDFadeIntCount+0x3>
			if(u32PLEDFadeIntCount>=u32PLEDFadeIntStep)
     4f8:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <u32PLEDFadeIntCount>
     4fc:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <u32PLEDFadeIntCount+0x1>
     500:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <u32PLEDFadeIntCount+0x2>
     504:	50 91 4f 01 	lds	r21, 0x014F	; 0x80014f <u32PLEDFadeIntCount+0x3>
     508:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u32PLEDFadeIntStep>
     50c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <u32PLEDFadeIntStep+0x1>
     510:	a0 91 4a 01 	lds	r26, 0x014A	; 0x80014a <u32PLEDFadeIntStep+0x2>
     514:	b0 91 4b 01 	lds	r27, 0x014B	; 0x80014b <u32PLEDFadeIntStep+0x3>
     518:	28 17       	cp	r18, r24
     51a:	39 07       	cpc	r19, r25
     51c:	4a 07       	cpc	r20, r26
     51e:	5b 07       	cpc	r21, r27
     520:	08 f4       	brcc	.+2      	; 0x524 <__vector_9+0xb4>
     522:	b9 c0       	rjmp	.+370    	; 0x696 <__vector_9+0x226>
			{
				u32PLEDFadeIntCount = 0;
     524:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <u32PLEDFadeIntCount>
     528:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <u32PLEDFadeIntCount+0x1>
     52c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <u32PLEDFadeIntCount+0x2>
     530:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <u32PLEDFadeIntCount+0x3>
				u16PLEDFadeCurrValue++;
     534:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u16PLEDFadeCurrValue>
     538:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     53c:	01 96       	adiw	r24, 0x01	; 1
     53e:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     542:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <u16PLEDFadeCurrValue>
				setPWMDuty(u16PLEDFadeCurrValue);
     546:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u16PLEDFadeCurrValue>
     54a:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     54e:	0e 94 08 0c 	call	0x1810	; 0x1810 <setPWMDuty>
				u8Duty = Map(u16PLEDFadeCurrValue,0,511,0,100);
     552:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u16PLEDFadeCurrValue>
     556:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     55a:	cc 01       	movw	r24, r24
     55c:	a0 e0       	ldi	r26, 0x00	; 0
     55e:	b0 e0       	ldi	r27, 0x00	; 0
     560:	1f 92       	push	r1
     562:	1f 92       	push	r1
     564:	1f 92       	push	r1
     566:	24 e6       	ldi	r18, 0x64	; 100
     568:	2f 93       	push	r18
     56a:	a1 2c       	mov	r10, r1
     56c:	b1 2c       	mov	r11, r1
     56e:	65 01       	movw	r12, r10
     570:	e1 2c       	mov	r14, r1
     572:	f1 2c       	mov	r15, r1
     574:	87 01       	movw	r16, r14
     576:	ea 94       	dec	r14
     578:	f3 94       	inc	r15
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	a9 01       	movw	r20, r18
     580:	bc 01       	movw	r22, r24
     582:	cd 01       	movw	r24, r26
     584:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <Map>
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	dc 01       	movw	r26, r24
     592:	cb 01       	movw	r24, r22
     594:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <u8Duty>

				if(u16PLEDFadeCurrValue>=u16PLEDFadeStopValue)
     598:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <u16PLEDFadeCurrValue>
     59c:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     5a0:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <u16PLEDFadeStopValue>
     5a4:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <u16PLEDFadeStopValue+0x1>
     5a8:	28 17       	cp	r18, r24
     5aa:	39 07       	cpc	r19, r25
     5ac:	08 f4       	brcc	.+2      	; 0x5b0 <__vector_9+0x140>
     5ae:	73 c0       	rjmp	.+230    	; 0x696 <__vector_9+0x226>
				{
					u8PLEDFadeActive = 0;
     5b0:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <u8PLEDFadeActive>
     5b4:	70 c0       	rjmp	.+224    	; 0x696 <__vector_9+0x226>
				}
			}
		}
		else // fall
		{
			u32PLEDFadeIntCount++;
     5b6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u32PLEDFadeIntCount>
     5ba:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <u32PLEDFadeIntCount+0x1>
     5be:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <u32PLEDFadeIntCount+0x2>
     5c2:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <u32PLEDFadeIntCount+0x3>
     5c6:	01 96       	adiw	r24, 0x01	; 1
     5c8:	a1 1d       	adc	r26, r1
     5ca:	b1 1d       	adc	r27, r1
     5cc:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <u32PLEDFadeIntCount>
     5d0:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <u32PLEDFadeIntCount+0x1>
     5d4:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <u32PLEDFadeIntCount+0x2>
     5d8:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <u32PLEDFadeIntCount+0x3>
			if(u32PLEDFadeIntCount>=u32PLEDFadeIntStep)
     5dc:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <u32PLEDFadeIntCount>
     5e0:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <u32PLEDFadeIntCount+0x1>
     5e4:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <u32PLEDFadeIntCount+0x2>
     5e8:	50 91 4f 01 	lds	r21, 0x014F	; 0x80014f <u32PLEDFadeIntCount+0x3>
     5ec:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u32PLEDFadeIntStep>
     5f0:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <u32PLEDFadeIntStep+0x1>
     5f4:	a0 91 4a 01 	lds	r26, 0x014A	; 0x80014a <u32PLEDFadeIntStep+0x2>
     5f8:	b0 91 4b 01 	lds	r27, 0x014B	; 0x80014b <u32PLEDFadeIntStep+0x3>
     5fc:	28 17       	cp	r18, r24
     5fe:	39 07       	cpc	r19, r25
     600:	4a 07       	cpc	r20, r26
     602:	5b 07       	cpc	r21, r27
     604:	08 f4       	brcc	.+2      	; 0x608 <__vector_9+0x198>
     606:	47 c0       	rjmp	.+142    	; 0x696 <__vector_9+0x226>
			{
				u32PLEDFadeIntCount = 0;
     608:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <u32PLEDFadeIntCount>
     60c:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <u32PLEDFadeIntCount+0x1>
     610:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <u32PLEDFadeIntCount+0x2>
     614:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <u32PLEDFadeIntCount+0x3>
				u16PLEDFadeCurrValue--;
     618:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u16PLEDFadeCurrValue>
     61c:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     626:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <u16PLEDFadeCurrValue>
				setPWMDuty(u16PLEDFadeCurrValue);
     62a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u16PLEDFadeCurrValue>
     62e:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     632:	0e 94 08 0c 	call	0x1810	; 0x1810 <setPWMDuty>
				u8Duty = Map(u16PLEDFadeCurrValue,0,511,0,100);
     636:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u16PLEDFadeCurrValue>
     63a:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     63e:	cc 01       	movw	r24, r24
     640:	a0 e0       	ldi	r26, 0x00	; 0
     642:	b0 e0       	ldi	r27, 0x00	; 0
     644:	1f 92       	push	r1
     646:	1f 92       	push	r1
     648:	1f 92       	push	r1
     64a:	24 e6       	ldi	r18, 0x64	; 100
     64c:	2f 93       	push	r18
     64e:	a1 2c       	mov	r10, r1
     650:	b1 2c       	mov	r11, r1
     652:	65 01       	movw	r12, r10
     654:	e1 2c       	mov	r14, r1
     656:	f1 2c       	mov	r15, r1
     658:	87 01       	movw	r16, r14
     65a:	ea 94       	dec	r14
     65c:	f3 94       	inc	r15
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	a9 01       	movw	r20, r18
     664:	bc 01       	movw	r22, r24
     666:	cd 01       	movw	r24, r26
     668:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <Map>
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	dc 01       	movw	r26, r24
     676:	cb 01       	movw	r24, r22
     678:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <u8Duty>

				if(u16PLEDFadeCurrValue<=u16PLEDFadeStopValue)
     67c:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <u16PLEDFadeCurrValue>
     680:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     684:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <u16PLEDFadeStopValue>
     688:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <u16PLEDFadeStopValue+0x1>
     68c:	82 17       	cp	r24, r18
     68e:	93 07       	cpc	r25, r19
     690:	10 f0       	brcs	.+4      	; 0x696 <__vector_9+0x226>
				{
					u8PLEDFadeActive = 0;
     692:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <u8PLEDFadeActive>
			}
		}
	}

	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
     696:	8b e2       	ldi	r24, 0x2B	; 43
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	2b e2       	ldi	r18, 0x2B	; 43
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	f9 01       	movw	r30, r18
     6a0:	20 81       	ld	r18, Z
     6a2:	2d 7f       	andi	r18, 0xFD	; 253
     6a4:	fc 01       	movw	r30, r24
     6a6:	20 83       	st	Z, r18
	#endif
}
     6a8:	00 00       	nop
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	ff 91       	pop	r31
     6b0:	ef 91       	pop	r30
     6b2:	bf 91       	pop	r27
     6b4:	af 91       	pop	r26
     6b6:	9f 91       	pop	r25
     6b8:	8f 91       	pop	r24
     6ba:	7f 91       	pop	r23
     6bc:	6f 91       	pop	r22
     6be:	5f 91       	pop	r21
     6c0:	4f 91       	pop	r20
     6c2:	3f 91       	pop	r19
     6c4:	2f 91       	pop	r18
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	ff 90       	pop	r15
     6cc:	ef 90       	pop	r14
     6ce:	df 90       	pop	r13
     6d0:	cf 90       	pop	r12
     6d2:	bf 90       	pop	r11
     6d4:	af 90       	pop	r10
     6d6:	0f 90       	pop	r0
     6d8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     6dc:	0f 90       	pop	r0
     6de:	1f 90       	pop	r1
     6e0:	18 95       	reti

000006e2 <__vector_1>:


ISR(INT0_vect)	// external interrupt (handshake from RGBooster board)
{				// start RGBooster send sequence: reset "ucRGBIdx" and "ucByteIdx" to zero. then start with calling the ISR directly "INT1_vect();"
     6e2:	1f 92       	push	r1
     6e4:	0f 92       	push	r0
     6e6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     6ea:	0f 92       	push	r0
     6ec:	11 24       	eor	r1, r1
     6ee:	2f 93       	push	r18
     6f0:	3f 93       	push	r19
     6f2:	4f 93       	push	r20
     6f4:	8f 93       	push	r24
     6f6:	9f 93       	push	r25
     6f8:	ef 93       	push	r30
     6fa:	ff 93       	push	r31
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	cd b7       	in	r28, 0x3d	; 61
     702:	de b7       	in	r29, 0x3e	; 62
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
     704:	8b e2       	ldi	r24, 0x2B	; 43
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	2b e2       	ldi	r18, 0x2B	; 43
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	f9 01       	movw	r30, r18
     70e:	20 81       	ld	r18, Z
     710:	22 60       	ori	r18, 0x02	; 2
     712:	fc 01       	movw	r30, r24
     714:	20 83       	st	Z, r18
	#endif
	
	if(ucRGBIdx<(LED_COUNT))
     716:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <ucRGBIdx>
     71a:	84 31       	cpi	r24, 0x14	; 20
     71c:	08 f0       	brcs	.+2      	; 0x720 <__vector_1+0x3e>
     71e:	d1 c0       	rjmp	.+418    	; 0x8c2 <__vector_1+0x1e0>
	{
		switch(ucByteIdx) // red green and blue are sent in 3 separate bytes. this variable remembers the next color to be sent
     720:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     724:	88 2f       	mov	r24, r24
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	81 30       	cpi	r24, 0x01	; 1
     72a:	91 05       	cpc	r25, r1
     72c:	09 f4       	brne	.+2      	; 0x730 <__vector_1+0x4e>
     72e:	47 c0       	rjmp	.+142    	; 0x7be <__vector_1+0xdc>
     730:	82 30       	cpi	r24, 0x02	; 2
     732:	91 05       	cpc	r25, r1
     734:	09 f4       	brne	.+2      	; 0x738 <__vector_1+0x56>
     736:	83 c0       	rjmp	.+262    	; 0x83e <__vector_1+0x15c>
     738:	89 2b       	or	r24, r25
     73a:	09 f0       	breq	.+2      	; 0x73e <__vector_1+0x5c>
     73c:	c2 c0       	rjmp	.+388    	; 0x8c2 <__vector_1+0x1e0>
		{
			case 0:
			PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (aucGreen[ucRGBIdx] & DATA_HIGH_BITMASK);
     73e:	82 e2       	ldi	r24, 0x22	; 34
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	22 e2       	ldi	r18, 0x22	; 34
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	f9 01       	movw	r30, r18
     748:	20 81       	ld	r18, Z
     74a:	42 2f       	mov	r20, r18
     74c:	4f 70       	andi	r20, 0x0F	; 15
     74e:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <ucRGBIdx>
     752:	22 2f       	mov	r18, r18
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	2c 5e       	subi	r18, 0xEC	; 236
     758:	3e 4f       	sbci	r19, 0xFE	; 254
     75a:	f9 01       	movw	r30, r18
     75c:	20 81       	ld	r18, Z
     75e:	20 7f       	andi	r18, 0xF0	; 240
     760:	24 2b       	or	r18, r20
     762:	fc 01       	movw	r30, r24
     764:	20 83       	st	Z, r18
			PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (aucGreen[ucRGBIdx] & DATA_LOW_BITMASK);
     766:	85 e2       	ldi	r24, 0x25	; 37
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	25 e2       	ldi	r18, 0x25	; 37
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	f9 01       	movw	r30, r18
     770:	20 81       	ld	r18, Z
     772:	42 2f       	mov	r20, r18
     774:	40 7f       	andi	r20, 0xF0	; 240
     776:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <ucRGBIdx>
     77a:	22 2f       	mov	r18, r18
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	2c 5e       	subi	r18, 0xEC	; 236
     780:	3e 4f       	sbci	r19, 0xFE	; 254
     782:	f9 01       	movw	r30, r18
     784:	20 81       	ld	r18, Z
     786:	2f 70       	andi	r18, 0x0F	; 15
     788:	24 2b       	or	r18, r20
     78a:	fc 01       	movw	r30, r24
     78c:	20 83       	st	Z, r18
			PORT_CONTROL |= (1<<SEND); // generate send impulse
     78e:	8b e2       	ldi	r24, 0x2B	; 43
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	2b e2       	ldi	r18, 0x2B	; 43
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	f9 01       	movw	r30, r18
     798:	20 81       	ld	r18, Z
     79a:	28 60       	ori	r18, 0x08	; 8
     79c:	fc 01       	movw	r30, r24
     79e:	20 83       	st	Z, r18
			PORT_CONTROL &= ~(1<<SEND);
     7a0:	8b e2       	ldi	r24, 0x2B	; 43
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	2b e2       	ldi	r18, 0x2B	; 43
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	f9 01       	movw	r30, r18
     7aa:	20 81       	ld	r18, Z
     7ac:	27 7f       	andi	r18, 0xF7	; 247
     7ae:	fc 01       	movw	r30, r24
     7b0:	20 83       	st	Z, r18
			ucByteIdx++;
     7b2:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     7b6:	8f 5f       	subi	r24, 0xFF	; 255
     7b8:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
			break;
     7bc:	82 c0       	rjmp	.+260    	; 0x8c2 <__vector_1+0x1e0>

			case 1:
			PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (aucRed[ucRGBIdx] & DATA_HIGH_BITMASK);
     7be:	82 e2       	ldi	r24, 0x22	; 34
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	22 e2       	ldi	r18, 0x22	; 34
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	f9 01       	movw	r30, r18
     7c8:	20 81       	ld	r18, Z
     7ca:	42 2f       	mov	r20, r18
     7cc:	4f 70       	andi	r20, 0x0F	; 15
     7ce:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <ucRGBIdx>
     7d2:	22 2f       	mov	r18, r18
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	20 50       	subi	r18, 0x00	; 0
     7d8:	3f 4f       	sbci	r19, 0xFF	; 255
     7da:	f9 01       	movw	r30, r18
     7dc:	20 81       	ld	r18, Z
     7de:	20 7f       	andi	r18, 0xF0	; 240
     7e0:	24 2b       	or	r18, r20
     7e2:	fc 01       	movw	r30, r24
     7e4:	20 83       	st	Z, r18
			PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (aucRed[ucRGBIdx] & DATA_LOW_BITMASK);
     7e6:	85 e2       	ldi	r24, 0x25	; 37
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	25 e2       	ldi	r18, 0x25	; 37
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	f9 01       	movw	r30, r18
     7f0:	20 81       	ld	r18, Z
     7f2:	42 2f       	mov	r20, r18
     7f4:	40 7f       	andi	r20, 0xF0	; 240
     7f6:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <ucRGBIdx>
     7fa:	22 2f       	mov	r18, r18
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	20 50       	subi	r18, 0x00	; 0
     800:	3f 4f       	sbci	r19, 0xFF	; 255
     802:	f9 01       	movw	r30, r18
     804:	20 81       	ld	r18, Z
     806:	2f 70       	andi	r18, 0x0F	; 15
     808:	24 2b       	or	r18, r20
     80a:	fc 01       	movw	r30, r24
     80c:	20 83       	st	Z, r18
			PORT_CONTROL |= (1<<SEND); // generate send impulse
     80e:	8b e2       	ldi	r24, 0x2B	; 43
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	2b e2       	ldi	r18, 0x2B	; 43
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	f9 01       	movw	r30, r18
     818:	20 81       	ld	r18, Z
     81a:	28 60       	ori	r18, 0x08	; 8
     81c:	fc 01       	movw	r30, r24
     81e:	20 83       	st	Z, r18
			PORT_CONTROL &= ~(1<<SEND);
     820:	8b e2       	ldi	r24, 0x2B	; 43
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	2b e2       	ldi	r18, 0x2B	; 43
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	f9 01       	movw	r30, r18
     82a:	20 81       	ld	r18, Z
     82c:	27 7f       	andi	r18, 0xF7	; 247
     82e:	fc 01       	movw	r30, r24
     830:	20 83       	st	Z, r18
			ucByteIdx++;
     832:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     836:	8f 5f       	subi	r24, 0xFF	; 255
     838:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
			break;
     83c:	42 c0       	rjmp	.+132    	; 0x8c2 <__vector_1+0x1e0>

			case 2:
			PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (aucBlue[ucRGBIdx] & DATA_HIGH_BITMASK);
     83e:	82 e2       	ldi	r24, 0x22	; 34
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	22 e2       	ldi	r18, 0x22	; 34
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	f9 01       	movw	r30, r18
     848:	20 81       	ld	r18, Z
     84a:	42 2f       	mov	r20, r18
     84c:	4f 70       	andi	r20, 0x0F	; 15
     84e:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <ucRGBIdx>
     852:	22 2f       	mov	r18, r18
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	28 5d       	subi	r18, 0xD8	; 216
     858:	3e 4f       	sbci	r19, 0xFE	; 254
     85a:	f9 01       	movw	r30, r18
     85c:	20 81       	ld	r18, Z
     85e:	20 7f       	andi	r18, 0xF0	; 240
     860:	24 2b       	or	r18, r20
     862:	fc 01       	movw	r30, r24
     864:	20 83       	st	Z, r18
			PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (aucBlue[ucRGBIdx] & DATA_LOW_BITMASK);
     866:	85 e2       	ldi	r24, 0x25	; 37
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	25 e2       	ldi	r18, 0x25	; 37
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	f9 01       	movw	r30, r18
     870:	20 81       	ld	r18, Z
     872:	42 2f       	mov	r20, r18
     874:	40 7f       	andi	r20, 0xF0	; 240
     876:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <ucRGBIdx>
     87a:	22 2f       	mov	r18, r18
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	28 5d       	subi	r18, 0xD8	; 216
     880:	3e 4f       	sbci	r19, 0xFE	; 254
     882:	f9 01       	movw	r30, r18
     884:	20 81       	ld	r18, Z
     886:	2f 70       	andi	r18, 0x0F	; 15
     888:	24 2b       	or	r18, r20
     88a:	fc 01       	movw	r30, r24
     88c:	20 83       	st	Z, r18
			PORT_CONTROL |= (1<<SEND); // generate send impulse
     88e:	8b e2       	ldi	r24, 0x2B	; 43
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	2b e2       	ldi	r18, 0x2B	; 43
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	f9 01       	movw	r30, r18
     898:	20 81       	ld	r18, Z
     89a:	28 60       	ori	r18, 0x08	; 8
     89c:	fc 01       	movw	r30, r24
     89e:	20 83       	st	Z, r18
			PORT_CONTROL &= ~(1<<SEND);
     8a0:	8b e2       	ldi	r24, 0x2B	; 43
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	2b e2       	ldi	r18, 0x2B	; 43
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	f9 01       	movw	r30, r18
     8aa:	20 81       	ld	r18, Z
     8ac:	27 7f       	andi	r18, 0xF7	; 247
     8ae:	fc 01       	movw	r30, r24
     8b0:	20 83       	st	Z, r18
			ucByteIdx=0;
     8b2:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
			ucRGBIdx++;
     8b6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <ucRGBIdx>
     8ba:	8f 5f       	subi	r24, 0xFF	; 255
     8bc:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <ucRGBIdx>
			break;
     8c0:	00 00       	nop
		}
	}
	
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
     8c2:	8b e2       	ldi	r24, 0x2B	; 43
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	2b e2       	ldi	r18, 0x2B	; 43
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	f9 01       	movw	r30, r18
     8cc:	20 81       	ld	r18, Z
     8ce:	2d 7f       	andi	r18, 0xFD	; 253
     8d0:	fc 01       	movw	r30, r24
     8d2:	20 83       	st	Z, r18
	#endif
}
     8d4:	00 00       	nop
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	ff 91       	pop	r31
     8dc:	ef 91       	pop	r30
     8de:	9f 91       	pop	r25
     8e0:	8f 91       	pop	r24
     8e2:	4f 91       	pop	r20
     8e4:	3f 91       	pop	r19
     8e6:	2f 91       	pop	r18
     8e8:	0f 90       	pop	r0
     8ea:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     8ee:	0f 90       	pop	r0
     8f0:	1f 90       	pop	r1
     8f2:	18 95       	reti

000008f4 <__vector_19>:


ISR(SPI_STC_vect)
{
     8f4:	1f 92       	push	r1
     8f6:	0f 92       	push	r0
     8f8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     8fc:	0f 92       	push	r0
     8fe:	11 24       	eor	r1, r1
     900:	2f 93       	push	r18
     902:	3f 93       	push	r19
     904:	4f 93       	push	r20
     906:	5f 93       	push	r21
     908:	6f 93       	push	r22
     90a:	7f 93       	push	r23
     90c:	8f 93       	push	r24
     90e:	9f 93       	push	r25
     910:	af 93       	push	r26
     912:	bf 93       	push	r27
     914:	ef 93       	push	r30
     916:	ff 93       	push	r31
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	1f 92       	push	r1
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8spiData = SPDR0;
     922:	8e e4       	ldi	r24, 0x4E	; 78
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	fc 01       	movw	r30, r24
     928:	80 81       	ld	r24, Z
     92a:	89 83       	std	Y+1, r24	; 0x01
	
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
     92c:	8b e2       	ldi	r24, 0x2B	; 43
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	2b e2       	ldi	r18, 0x2B	; 43
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	f9 01       	movw	r30, r18
     936:	20 81       	ld	r18, Z
     938:	22 60       	ori	r18, 0x02	; 2
     93a:	fc 01       	movw	r30, r24
     93c:	20 83       	st	Z, r18
	#endif
	
	SPDR0 = 0;
     93e:	8e e4       	ldi	r24, 0x4E	; 78
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	fc 01       	movw	r30, r24
     944:	10 82       	st	Z, r1

	switch(SPIBUFFER.spiState)
     946:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <SPIBUFFER+0x42>
     94a:	88 2f       	mov	r24, r24
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	09 2e       	mov	r0, r25
     950:	00 0c       	add	r0, r0
     952:	aa 0b       	sbc	r26, r26
     954:	bb 0b       	sbc	r27, r27
     956:	40 e0       	ldi	r20, 0x00	; 0
     958:	50 e0       	ldi	r21, 0x00	; 0
     95a:	26 e0       	ldi	r18, 0x06	; 6
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	84 1b       	sub	r24, r20
     960:	95 0b       	sbc	r25, r21
     962:	28 17       	cp	r18, r24
     964:	39 07       	cpc	r19, r25
     966:	08 f4       	brcc	.+2      	; 0x96a <__stack+0x6b>
     968:	11 c1       	rjmp	.+546    	; 0xb8c <__stack+0x28d>
     96a:	82 5c       	subi	r24, 0xC2	; 194
     96c:	9f 4f       	sbci	r25, 0xFF	; 255
     96e:	fc 01       	movw	r30, r24
     970:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__tablejump2__>
	{
		case READY:
			if(u8spiData>=3)
     974:	89 81       	ldd	r24, Y+1	; 0x01
     976:	83 30       	cpi	r24, 0x03	; 3
     978:	90 f0       	brcs	.+36     	; 0x99e <__stack+0x9f>
			{
				SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
     97a:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <SPIBUFFER+0x40>
     97e:	88 2f       	mov	r24, r24
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	89 52       	subi	r24, 0x29	; 41
     984:	9e 4f       	sbci	r25, 0xFE	; 254
     986:	29 81       	ldd	r18, Y+1	; 0x01
     988:	fc 01       	movw	r30, r24
     98a:	20 83       	st	Z, r18
				SPIBUFFER.u8Count++;
     98c:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <SPIBUFFER+0x40>
     990:	8f 5f       	subi	r24, 0xFF	; 255
     992:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <SPIBUFFER+0x40>
				SPIBUFFER.spiState = WRITE;
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <SPIBUFFER+0x42>
			}
			else
			{
				SPIBUFFER.spiState = READ;
			}
		break;
     99c:	f7 c0       	rjmp	.+494    	; 0xb8c <__stack+0x28d>
				SPIBUFFER.u8Count++;
				SPIBUFFER.spiState = WRITE;
			}
			else
			{
				SPIBUFFER.spiState = READ;
     99e:	82 e0       	ldi	r24, 0x02	; 2
     9a0:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <SPIBUFFER+0x42>
			}
		break;
     9a4:	f3 c0       	rjmp	.+486    	; 0xb8c <__stack+0x28d>

		case WRITE:
			SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
     9a6:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <SPIBUFFER+0x40>
     9aa:	88 2f       	mov	r24, r24
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	89 52       	subi	r24, 0x29	; 41
     9b0:	9e 4f       	sbci	r25, 0xFE	; 254
     9b2:	29 81       	ldd	r18, Y+1	; 0x01
     9b4:	fc 01       	movw	r30, r24
     9b6:	20 83       	st	Z, r18
			SPIBUFFER.u8Count++;
     9b8:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <SPIBUFFER+0x40>
     9bc:	8f 5f       	subi	r24, 0xFF	; 255
     9be:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <SPIBUFFER+0x40>
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
     9c2:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <SPIBUFFER+0x40>
     9c6:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <SPIBUFFER>
     9ca:	98 17       	cp	r25, r24
     9cc:	08 f4       	brcc	.+2      	; 0x9d0 <__stack+0xd1>
     9ce:	db c0       	rjmp	.+438    	; 0xb86 <__stack+0x287>
			{
				SPIBUFFER.spiState = DONE_WRITE;
     9d0:	84 e0       	ldi	r24, 0x04	; 4
     9d2:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <SPIBUFFER+0x42>
			}
		break;
     9d6:	d7 c0       	rjmp	.+430    	; 0xb86 <__stack+0x287>

		case READ:
			SPIBUFFER.u8Count = 0;
     9d8:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <SPIBUFFER+0x40>
			
			switch(u8spiData)
     9dc:	89 81       	ldd	r24, Y+1	; 0x01
     9de:	88 2f       	mov	r24, r24
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	82 3f       	cpi	r24, 0xF2	; 242
     9e4:	91 05       	cpc	r25, r1
     9e6:	79 f1       	breq	.+94     	; 0xa46 <__stack+0x147>
     9e8:	83 3f       	cpi	r24, 0xF3	; 243
     9ea:	91 05       	cpc	r25, r1
     9ec:	24 f4       	brge	.+8      	; 0x9f6 <__stack+0xf7>
     9ee:	81 3f       	cpi	r24, 0xF1	; 241
     9f0:	91 05       	cpc	r25, r1
     9f2:	51 f0       	breq	.+20     	; 0xa08 <__stack+0x109>
     9f4:	a6 c0       	rjmp	.+332    	; 0xb42 <__stack+0x243>
     9f6:	83 3f       	cpi	r24, 0xF3	; 243
     9f8:	91 05       	cpc	r25, r1
     9fa:	09 f4       	brne	.+2      	; 0x9fe <__stack+0xff>
     9fc:	43 c0       	rjmp	.+134    	; 0xa84 <__stack+0x185>
     9fe:	84 3f       	cpi	r24, 0xF4	; 244
     a00:	91 05       	cpc	r25, r1
     a02:	09 f4       	brne	.+2      	; 0xa06 <__stack+0x107>
     a04:	5e c0       	rjmp	.+188    	; 0xac2 <__stack+0x1c3>
     a06:	9d c0       	rjmp	.+314    	; 0xb42 <__stack+0x243>
			{
				case 0xF1:
					SPDR0 = 0x01;
     a08:	8e e4       	ldi	r24, 0x4E	; 78
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	21 e0       	ldi	r18, 0x01	; 1
     a0e:	fc 01       	movw	r30, r24
     a10:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     a12:	84 e0       	ldi	r24, 0x04	; 4
     a14:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     a18:	89 81       	ldd	r24, Y+1	; 0x01
     a1a:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = u8Status;
     a1e:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <u8Status>
     a22:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     a26:	63 e0       	ldi	r22, 0x03	; 3
     a28:	87 ed       	ldi	r24, 0xD7	; 215
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <CRC8>
     a30:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     a34:	84 e0       	ldi	r24, 0x04	; 4
     a36:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     a3a:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     a3e:	83 e0       	ldi	r24, 0x03	; 3
     a40:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <SPIBUFFER+0x42>
				break;
     a44:	82 c0       	rjmp	.+260    	; 0xb4a <__stack+0x24b>
				
				case 0xF2:
					SPDR0 = 0x01;
     a46:	8e e4       	ldi	r24, 0x4E	; 78
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	21 e0       	ldi	r18, 0x01	; 1
     a4c:	fc 01       	movw	r30, r24
     a4e:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     a50:	84 e0       	ldi	r24, 0x04	; 4
     a52:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     a56:	89 81       	ldd	r24, Y+1	; 0x01
     a58:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = u8Duty;
     a5c:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <u8Duty>
     a60:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     a64:	63 e0       	ldi	r22, 0x03	; 3
     a66:	87 ed       	ldi	r24, 0xD7	; 215
     a68:	91 e0       	ldi	r25, 0x01	; 1
     a6a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <CRC8>
     a6e:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     a72:	84 e0       	ldi	r24, 0x04	; 4
     a74:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     a78:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     a7c:	83 e0       	ldi	r24, 0x03	; 3
     a7e:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <SPIBUFFER+0x42>
				break;
     a82:	63 c0       	rjmp	.+198    	; 0xb4a <__stack+0x24b>
				
				case 0xF3:
					SPDR0 = 0x01;
     a84:	8e e4       	ldi	r24, 0x4E	; 78
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	21 e0       	ldi	r18, 0x01	; 1
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     a8e:	84 e0       	ldi	r24, 0x04	; 4
     a90:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     a94:	89 81       	ldd	r24, Y+1	; 0x01
     a96:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = adcGetTemperature();
     a9a:	0e 94 5f 0c 	call	0x18be	; 0x18be <adcGetTemperature>
     a9e:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     aa2:	63 e0       	ldi	r22, 0x03	; 3
     aa4:	87 ed       	ldi	r24, 0xD7	; 215
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <CRC8>
     aac:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     ab0:	84 e0       	ldi	r24, 0x04	; 4
     ab2:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     ab6:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     aba:	83 e0       	ldi	r24, 0x03	; 3
     abc:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <SPIBUFFER+0x42>
				break;
     ac0:	44 c0       	rjmp	.+136    	; 0xb4a <__stack+0x24b>

				case 0xF4:
					SPDR0 = 0x01;
     ac2:	8e e4       	ldi	r24, 0x4E	; 78
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	21 e0       	ldi	r18, 0x01	; 1
     ac8:	fc 01       	movw	r30, r24
     aca:	20 83       	st	Z, r18
					if(u8PLEDFadeActive) // ongoing fade
     acc:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8PLEDFadeActive>
     ad0:	88 23       	and	r24, r24
     ad2:	09 f1       	breq	.+66     	; 0xb16 <__stack+0x217>
					{
						SPIBUFFER.au8Buffer[0] = 7;
     ad4:	87 e0       	ldi	r24, 0x07	; 7
     ad6:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <SPIBUFFER>
						SPIBUFFER.au8Buffer[1] = u8spiData;
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <SPIBUFFER+0x1>
						SPIBUFFER.au8Buffer[2] = u8PLEDFadeStartPercent;
     ae0:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <u8PLEDFadeStartPercent>
     ae4:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <SPIBUFFER+0x2>
						SPIBUFFER.au8Buffer[3] = u8PLEDFadeStopPercent;
     ae8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8PLEDFadeStopPercent>
     aec:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <SPIBUFFER+0x3>
						SPIBUFFER.au8Buffer[4] = u8PLEDFadeTime;
     af0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <u8PLEDFadeTime>
     af4:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <SPIBUFFER+0x4>
						SPIBUFFER.au8Buffer[5] = u8Duty;
     af8:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <u8Duty>
     afc:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <SPIBUFFER+0x5>
						SPIBUFFER.au8Buffer[6] = CRC8(&SPIBUFFER.au8Buffer[0],6);
     b00:	66 e0       	ldi	r22, 0x06	; 6
     b02:	87 ed       	ldi	r24, 0xD7	; 215
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <CRC8>
     b0a:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <SPIBUFFER+0x6>
						SPIBUFFER.u8Count = 7;
     b0e:	87 e0       	ldi	r24, 0x07	; 7
     b10:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <SPIBUFFER+0x40>
     b14:	10 c0       	rjmp	.+32     	; 0xb36 <__stack+0x237>
					}
					else // no ongoing fade
					{
						SPIBUFFER.au8Buffer[0] = 3;
     b16:	83 e0       	ldi	r24, 0x03	; 3
     b18:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <SPIBUFFER>
						SPIBUFFER.au8Buffer[1] = u8spiData;
     b1c:	89 81       	ldd	r24, Y+1	; 0x01
     b1e:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <SPIBUFFER+0x1>
						SPIBUFFER.au8Buffer[2] = CRC8(&SPIBUFFER.au8Buffer[0],2);
     b22:	62 e0       	ldi	r22, 0x02	; 2
     b24:	87 ed       	ldi	r24, 0xD7	; 215
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <CRC8>
     b2c:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <SPIBUFFER+0x2>
						SPIBUFFER.u8Count = 3;
     b30:	83 e0       	ldi	r24, 0x03	; 3
     b32:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <SPIBUFFER+0x40>
					}
					SPIBUFFER.u8ReadReturnCount = 0;
     b36:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     b3a:	83 e0       	ldi	r24, 0x03	; 3
     b3c:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <SPIBUFFER+0x42>
				break;
     b40:	04 c0       	rjmp	.+8      	; 0xb4a <__stack+0x24b>
				
				default:
					SPIBUFFER.spiState = IDLE;
     b42:	86 e0       	ldi	r24, 0x06	; 6
     b44:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <SPIBUFFER+0x42>
				break;
     b48:	00 00       	nop
			}
		break;
     b4a:	20 c0       	rjmp	.+64     	; 0xb8c <__stack+0x28d>
		
		case READ_RETURN:
			SPDR0 = SPIBUFFER.au8Buffer[SPIBUFFER.u8ReadReturnCount];
     b4c:	8e e4       	ldi	r24, 0x4E	; 78
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <SPIBUFFER+0x41>
     b54:	22 2f       	mov	r18, r18
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	29 52       	subi	r18, 0x29	; 41
     b5a:	3e 4f       	sbci	r19, 0xFE	; 254
     b5c:	f9 01       	movw	r30, r18
     b5e:	20 81       	ld	r18, Z
     b60:	fc 01       	movw	r30, r24
     b62:	20 83       	st	Z, r18
			SPIBUFFER.u8ReadReturnCount++;
     b64:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <SPIBUFFER+0x41>
     b68:	8f 5f       	subi	r24, 0xFF	; 255
     b6a:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <SPIBUFFER+0x41>
			if(SPIBUFFER.u8Count == SPIBUFFER.u8ReadReturnCount)
     b6e:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <SPIBUFFER+0x40>
     b72:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <SPIBUFFER+0x41>
     b76:	98 17       	cp	r25, r24
     b78:	41 f4       	brne	.+16     	; 0xb8a <__stack+0x28b>
			{
				SPIBUFFER.spiState = DONE_READ;
     b7a:	85 e0       	ldi	r24, 0x05	; 5
     b7c:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <SPIBUFFER+0x42>
			}
		break;
     b80:	04 c0       	rjmp	.+8      	; 0xb8a <__stack+0x28b>
		
		break;

		case IDLE:

		break;
     b82:	00 00       	nop
     b84:	03 c0       	rjmp	.+6      	; 0xb8c <__stack+0x28d>
			SPIBUFFER.u8Count++;
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
			{
				SPIBUFFER.spiState = DONE_WRITE;
			}
		break;
     b86:	00 00       	nop
     b88:	01 c0       	rjmp	.+2      	; 0xb8c <__stack+0x28d>
			SPIBUFFER.u8ReadReturnCount++;
			if(SPIBUFFER.u8Count == SPIBUFFER.u8ReadReturnCount)
			{
				SPIBUFFER.spiState = DONE_READ;
			}
		break;
     b8a:	00 00       	nop
		case IDLE:

		break;
	}
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
     b8c:	8b e2       	ldi	r24, 0x2B	; 43
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	2b e2       	ldi	r18, 0x2B	; 43
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	f9 01       	movw	r30, r18
     b96:	20 81       	ld	r18, Z
     b98:	2d 7f       	andi	r18, 0xFD	; 253
     b9a:	fc 01       	movw	r30, r24
     b9c:	20 83       	st	Z, r18
	#endif
}
     b9e:	00 00       	nop
     ba0:	0f 90       	pop	r0
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	ff 91       	pop	r31
     ba8:	ef 91       	pop	r30
     baa:	bf 91       	pop	r27
     bac:	af 91       	pop	r26
     bae:	9f 91       	pop	r25
     bb0:	8f 91       	pop	r24
     bb2:	7f 91       	pop	r23
     bb4:	6f 91       	pop	r22
     bb6:	5f 91       	pop	r21
     bb8:	4f 91       	pop	r20
     bba:	3f 91       	pop	r19
     bbc:	2f 91       	pop	r18
     bbe:	0f 90       	pop	r0
     bc0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     bc4:	0f 90       	pop	r0
     bc6:	1f 90       	pop	r1
     bc8:	18 95       	reti

00000bca <__vector_5>:

ISR(PCINT1_vect)
{
     bca:	1f 92       	push	r1
     bcc:	0f 92       	push	r0
     bce:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     bd2:	0f 92       	push	r0
     bd4:	11 24       	eor	r1, r1
     bd6:	af 92       	push	r10
     bd8:	bf 92       	push	r11
     bda:	cf 92       	push	r12
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	2f 93       	push	r18
     be8:	3f 93       	push	r19
     bea:	4f 93       	push	r20
     bec:	5f 93       	push	r21
     bee:	6f 93       	push	r22
     bf0:	7f 93       	push	r23
     bf2:	8f 93       	push	r24
     bf4:	9f 93       	push	r25
     bf6:	af 93       	push	r26
     bf8:	bf 93       	push	r27
     bfa:	ef 93       	push	r30
     bfc:	ff 93       	push	r31
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
     c06:	8b e2       	ldi	r24, 0x2B	; 43
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	2b e2       	ldi	r18, 0x2B	; 43
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	f9 01       	movw	r30, r18
     c10:	20 81       	ld	r18, Z
     c12:	22 60       	ori	r18, 0x02	; 2
     c14:	fc 01       	movw	r30, r24
     c16:	20 83       	st	Z, r18
	#endif
	
	SPDR0 = 0;
     c18:	8e e4       	ldi	r24, 0x4E	; 78
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	fc 01       	movw	r30, r24
     c1e:	10 82       	st	Z, r1
	if(PIN_SPI & (1<<SPI_SS)) // SS HIGH
     c20:	83 e2       	ldi	r24, 0x23	; 35
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	fc 01       	movw	r30, r24
     c26:	80 81       	ld	r24, Z
     c28:	88 2f       	mov	r24, r24
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	80 71       	andi	r24, 0x10	; 16
     c2e:	99 27       	eor	r25, r25
     c30:	89 2b       	or	r24, r25
     c32:	09 f4       	brne	.+2      	; 0xc36 <__vector_5+0x6c>
     c34:	7b c1       	rjmp	.+758    	; 0xf2c <__vector_5+0x362>
	{
		
		if(SPIBUFFER.spiState == DONE_WRITE)
     c36:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <SPIBUFFER+0x42>
     c3a:	84 30       	cpi	r24, 0x04	; 4
     c3c:	09 f0       	breq	.+2      	; 0xc40 <__vector_5+0x76>
     c3e:	88 c1       	rjmp	.+784    	; 0xf50 <__vector_5+0x386>
		{
			if(SPIBUFFER.u8Count == SPIBUFFER.au8Buffer[0]) // correct amount of bytes in buffer
     c40:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <SPIBUFFER+0x40>
     c44:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <SPIBUFFER>
     c48:	98 17       	cp	r25, r24
     c4a:	09 f0       	breq	.+2      	; 0xc4e <__vector_5+0x84>
     c4c:	81 c1       	rjmp	.+770    	; 0xf50 <__vector_5+0x386>
			{
				if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
     c4e:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <SPIBUFFER+0x40>
     c52:	68 2f       	mov	r22, r24
     c54:	87 ed       	ldi	r24, 0xD7	; 215
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <CRC8>
     c5c:	88 23       	and	r24, r24
     c5e:	09 f0       	breq	.+2      	; 0xc62 <__vector_5+0x98>
     c60:	77 c1       	rjmp	.+750    	; 0xf50 <__vector_5+0x386>
				{
					switch(SPIBUFFER.au8Buffer[1]) // command
     c62:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <SPIBUFFER+0x1>
     c66:	88 2f       	mov	r24, r24
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	09 2e       	mov	r0, r25
     c6c:	00 0c       	add	r0, r0
     c6e:	aa 0b       	sbc	r26, r26
     c70:	bb 0b       	sbc	r27, r27
     c72:	41 e1       	ldi	r20, 0x11	; 17
     c74:	50 e0       	ldi	r21, 0x00	; 0
     c76:	20 e2       	ldi	r18, 0x20	; 32
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	84 1b       	sub	r24, r20
     c7c:	95 0b       	sbc	r25, r21
     c7e:	28 17       	cp	r18, r24
     c80:	39 07       	cpc	r19, r25
     c82:	08 f4       	brcc	.+2      	; 0xc86 <__vector_5+0xbc>
     c84:	65 c1       	rjmp	.+714    	; 0xf50 <__vector_5+0x386>
     c86:	8b 5b       	subi	r24, 0xBB	; 187
     c88:	9f 4f       	sbci	r25, 0xFF	; 255
     c8a:	fc 01       	movw	r30, r24
     c8c:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__tablejump2__>
					{
						case 0x11:
						if(SPIBUFFER.u8Count == 3)
     c90:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <SPIBUFFER+0x40>
     c94:	83 30       	cpi	r24, 0x03	; 3
     c96:	09 f0       	breq	.+2      	; 0xc9a <__vector_5+0xd0>
     c98:	4e c1       	rjmp	.+668    	; 0xf36 <__vector_5+0x36c>
						{
							enablePLED();
     c9a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <enablePLED>
							u8Status |= (1<<STATUS_PLED);
     c9e:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <u8Status>
     ca2:	81 60       	ori	r24, 0x01	; 1
     ca4:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <u8Status>
						}
						break;
     ca8:	46 c1       	rjmp	.+652    	; 0xf36 <__vector_5+0x36c>

						case 0x12:
						if(SPIBUFFER.u8Count == 3)
     caa:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <SPIBUFFER+0x40>
     cae:	83 30       	cpi	r24, 0x03	; 3
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <__vector_5+0xea>
     cb2:	43 c1       	rjmp	.+646    	; 0xf3a <__vector_5+0x370>
						{
							disablePLED();
     cb4:	0e 94 b1 0a 	call	0x1562	; 0x1562 <disablePLED>
							u8Status &= ~(1<<STATUS_PLED);
     cb8:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <u8Status>
     cbc:	8e 7f       	andi	r24, 0xFE	; 254
     cbe:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <u8Status>
						}
						break;
     cc2:	3b c1       	rjmp	.+630    	; 0xf3a <__vector_5+0x370>

						case 0x13:
						if(SPIBUFFER.u8Count == 4)
     cc4:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <SPIBUFFER+0x40>
     cc8:	84 30       	cpi	r24, 0x04	; 4
     cca:	09 f0       	breq	.+2      	; 0xcce <__vector_5+0x104>
     ccc:	38 c1       	rjmp	.+624    	; 0xf3e <__vector_5+0x374>
						{
							if(u8PLEDFadeActive == 0)
     cce:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8PLEDFadeActive>
     cd2:	88 23       	and	r24, r24
     cd4:	09 f0       	breq	.+2      	; 0xcd8 <__vector_5+0x10e>
     cd6:	33 c1       	rjmp	.+614    	; 0xf3e <__vector_5+0x374>
							{
								if(SPIBUFFER.au8Buffer[2]>100)
     cd8:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <SPIBUFFER+0x2>
     cdc:	85 36       	cpi	r24, 0x65	; 101
     cde:	20 f0       	brcs	.+8      	; 0xce8 <__vector_5+0x11e>
								{
									u8Duty = 100;
     ce0:	84 e6       	ldi	r24, 0x64	; 100
     ce2:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <u8Duty>
     ce6:	04 c0       	rjmp	.+8      	; 0xcf0 <__vector_5+0x126>
								}
								else
								{
									u8Duty = SPIBUFFER.au8Buffer[2];
     ce8:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <SPIBUFFER+0x2>
     cec:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <u8Duty>
								}
								setPWMDutyPercent(u8Duty);
     cf0:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <u8Duty>
     cf4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <setPWMDutyPercent>
							}
						}
						break;
     cf8:	22 c1       	rjmp	.+580    	; 0xf3e <__vector_5+0x374>

						case 0x14:
						if(SPIBUFFER.u8Count == 6)
     cfa:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <SPIBUFFER+0x40>
     cfe:	86 30       	cpi	r24, 0x06	; 6
     d00:	09 f0       	breq	.+2      	; 0xd04 <__vector_5+0x13a>
     d02:	1f c1       	rjmp	.+574    	; 0xf42 <__vector_5+0x378>
						{	
							if(SPIBUFFER.au8Buffer[2]>100)
     d04:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <SPIBUFFER+0x2>
     d08:	85 36       	cpi	r24, 0x65	; 101
     d0a:	20 f0       	brcs	.+8      	; 0xd14 <__vector_5+0x14a>
							{
								u8PLEDFadeStartPercent=100;
     d0c:	84 e6       	ldi	r24, 0x64	; 100
     d0e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8PLEDFadeStartPercent>
     d12:	04 c0       	rjmp	.+8      	; 0xd1c <__vector_5+0x152>
							}
							else
							{
								u8PLEDFadeStartPercent = SPIBUFFER.au8Buffer[2];
     d14:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <SPIBUFFER+0x2>
     d18:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8PLEDFadeStartPercent>
							}
							
							if(SPIBUFFER.au8Buffer[3]>100)
     d1c:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <SPIBUFFER+0x3>
     d20:	85 36       	cpi	r24, 0x65	; 101
     d22:	20 f0       	brcs	.+8      	; 0xd2c <__vector_5+0x162>
							{
								u8PLEDFadeStopPercent=100;
     d24:	84 e6       	ldi	r24, 0x64	; 100
     d26:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8PLEDFadeStopPercent>
     d2a:	04 c0       	rjmp	.+8      	; 0xd34 <__vector_5+0x16a>
							}
							else
							{
								u8PLEDFadeStopPercent = SPIBUFFER.au8Buffer[3];
     d2c:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <SPIBUFFER+0x3>
     d30:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8PLEDFadeStopPercent>
							}
							
							u16PLEDFadeStartValue = Map(u8PLEDFadeStartPercent,0,100,0,511);
     d34:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <u8PLEDFadeStartPercent>
     d38:	88 2f       	mov	r24, r24
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	1f 92       	push	r1
     d42:	1f 92       	push	r1
     d44:	21 e0       	ldi	r18, 0x01	; 1
     d46:	2f 93       	push	r18
     d48:	2f ef       	ldi	r18, 0xFF	; 255
     d4a:	2f 93       	push	r18
     d4c:	a1 2c       	mov	r10, r1
     d4e:	b1 2c       	mov	r11, r1
     d50:	65 01       	movw	r12, r10
     d52:	14 e6       	ldi	r17, 0x64	; 100
     d54:	e1 2e       	mov	r14, r17
     d56:	f1 2c       	mov	r15, r1
     d58:	00 e0       	ldi	r16, 0x00	; 0
     d5a:	10 e0       	ldi	r17, 0x00	; 0
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	a9 01       	movw	r20, r18
     d62:	bc 01       	movw	r22, r24
     d64:	cd 01       	movw	r24, r26
     d66:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <Map>
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <u16PLEDFadeStartValue+0x1>
     d7a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u16PLEDFadeStartValue>
							u16PLEDFadeStopValue = Map(u8PLEDFadeStopPercent,0,100,0,511);
     d7e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8PLEDFadeStopPercent>
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	a0 e0       	ldi	r26, 0x00	; 0
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	1f 92       	push	r1
     d8c:	1f 92       	push	r1
     d8e:	21 e0       	ldi	r18, 0x01	; 1
     d90:	2f 93       	push	r18
     d92:	2f ef       	ldi	r18, 0xFF	; 255
     d94:	2f 93       	push	r18
     d96:	a1 2c       	mov	r10, r1
     d98:	b1 2c       	mov	r11, r1
     d9a:	65 01       	movw	r12, r10
     d9c:	14 e6       	ldi	r17, 0x64	; 100
     d9e:	e1 2e       	mov	r14, r17
     da0:	f1 2c       	mov	r15, r1
     da2:	00 e0       	ldi	r16, 0x00	; 0
     da4:	10 e0       	ldi	r17, 0x00	; 0
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	a9 01       	movw	r20, r18
     dac:	bc 01       	movw	r22, r24
     dae:	cd 01       	movw	r24, r26
     db0:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <Map>
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <u16PLEDFadeStopValue+0x1>
     dc4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u16PLEDFadeStopValue>
							u8PLEDFadeTime = SPIBUFFER.au8Buffer[4];
     dc8:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <SPIBUFFER+0x4>
     dcc:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <u8PLEDFadeTime>
							
							setPWMDuty(u16PLEDFadeStartValue);
     dd0:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u16PLEDFadeStartValue>
     dd4:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <u16PLEDFadeStartValue+0x1>
     dd8:	0e 94 08 0c 	call	0x1810	; 0x1810 <setPWMDuty>
							u8Duty = u8PLEDFadeStartPercent;
     ddc:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <u8PLEDFadeStartPercent>
     de0:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <u8Duty>
							u16PLEDFadeCurrValue = u16PLEDFadeStartValue;
     de4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u16PLEDFadeStartValue>
     de8:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <u16PLEDFadeStartValue+0x1>
     dec:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     df0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <u16PLEDFadeCurrValue>
							u32PLEDFadeIntCount = 0;
     df4:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <u32PLEDFadeIntCount>
     df8:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <u32PLEDFadeIntCount+0x1>
     dfc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <u32PLEDFadeIntCount+0x2>
     e00:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <u32PLEDFadeIntCount+0x3>
							
							if(u8PLEDFadeStartPercent<u8PLEDFadeStopPercent) // PLED rise
     e04:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <u8PLEDFadeStartPercent>
     e08:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8PLEDFadeStopPercent>
     e0c:	98 17       	cp	r25, r24
     e0e:	58 f5       	brcc	.+86     	; 0xe66 <__vector_5+0x29c>
							{
								u32PLEDFadeIntStep = 6000*u8PLEDFadeTime/(u16PLEDFadeStopValue-u16PLEDFadeStartValue);
     e10:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <u8PLEDFadeTime>
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	80 e7       	ldi	r24, 0x70	; 112
     e1a:	97 e1       	ldi	r25, 0x17	; 23
     e1c:	28 9f       	mul	r18, r24
     e1e:	a0 01       	movw	r20, r0
     e20:	29 9f       	mul	r18, r25
     e22:	50 0d       	add	r21, r0
     e24:	38 9f       	mul	r19, r24
     e26:	50 0d       	add	r21, r0
     e28:	11 24       	eor	r1, r1
     e2a:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <u16PLEDFadeStopValue>
     e2e:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <u16PLEDFadeStopValue+0x1>
     e32:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u16PLEDFadeStartValue>
     e36:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <u16PLEDFadeStartValue+0x1>
     e3a:	28 1b       	sub	r18, r24
     e3c:	39 0b       	sbc	r19, r25
     e3e:	ca 01       	movw	r24, r20
     e40:	b9 01       	movw	r22, r18
     e42:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <__udivmodhi4>
     e46:	cb 01       	movw	r24, r22
     e48:	cc 01       	movw	r24, r24
     e4a:	a0 e0       	ldi	r26, 0x00	; 0
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u32PLEDFadeIntStep>
     e52:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <u32PLEDFadeIntStep+0x1>
     e56:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <u32PLEDFadeIntStep+0x2>
     e5a:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <u32PLEDFadeIntStep+0x3>
								u8PLEDFadeDirection = 1;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <u8PLEDFadeDirection>
     e64:	2f c0       	rjmp	.+94     	; 0xec4 <__vector_5+0x2fa>
							}
							else if(u8PLEDFadeStartPercent>u8PLEDFadeStopPercent) // PLED fall
     e66:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <u8PLEDFadeStartPercent>
     e6a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8PLEDFadeStopPercent>
     e6e:	89 17       	cp	r24, r25
     e70:	48 f5       	brcc	.+82     	; 0xec4 <__vector_5+0x2fa>
							{
								u32PLEDFadeIntStep = 6000*u8PLEDFadeTime/(u16PLEDFadeStartValue-u16PLEDFadeStopValue);
     e72:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <u8PLEDFadeTime>
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	80 e7       	ldi	r24, 0x70	; 112
     e7c:	97 e1       	ldi	r25, 0x17	; 23
     e7e:	28 9f       	mul	r18, r24
     e80:	a0 01       	movw	r20, r0
     e82:	29 9f       	mul	r18, r25
     e84:	50 0d       	add	r21, r0
     e86:	38 9f       	mul	r19, r24
     e88:	50 0d       	add	r21, r0
     e8a:	11 24       	eor	r1, r1
     e8c:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <u16PLEDFadeStartValue>
     e90:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <u16PLEDFadeStartValue+0x1>
     e94:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <u16PLEDFadeStopValue>
     e98:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <u16PLEDFadeStopValue+0x1>
     e9c:	28 1b       	sub	r18, r24
     e9e:	39 0b       	sbc	r19, r25
     ea0:	ca 01       	movw	r24, r20
     ea2:	b9 01       	movw	r22, r18
     ea4:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <__udivmodhi4>
     ea8:	cb 01       	movw	r24, r22
     eaa:	cc 01       	movw	r24, r24
     eac:	a0 e0       	ldi	r26, 0x00	; 0
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u32PLEDFadeIntStep>
     eb4:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <u32PLEDFadeIntStep+0x1>
     eb8:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <u32PLEDFadeIntStep+0x2>
     ebc:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <u32PLEDFadeIntStep+0x3>
								u8PLEDFadeDirection = 0;
     ec0:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <u8PLEDFadeDirection>
							}
							
							u8PLEDFadeActive = 1;
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <u8PLEDFadeActive>
						}
						break;
     eca:	3b c0       	rjmp	.+118    	; 0xf42 <__vector_5+0x378>
						
						case 0x15:
						u8PLEDFadeActive = 0;
     ecc:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <u8PLEDFadeActive>
						break;
     ed0:	3f c0       	rjmp	.+126    	; 0xf50 <__vector_5+0x386>
					
						case 0x21:
						if(SPIBUFFER.u8Count == 3)
     ed2:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <SPIBUFFER+0x40>
     ed6:	83 30       	cpi	r24, 0x03	; 3
     ed8:	b1 f5       	brne	.+108    	; 0xf46 <__vector_5+0x37c>
						{
							enableAudio();
     eda:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <enableAudio>
							u8Status |= (1<<STATUS_AUDIO);
     ede:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <u8Status>
     ee2:	82 60       	ori	r24, 0x02	; 2
     ee4:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <u8Status>
						}
						break;
     ee8:	2e c0       	rjmp	.+92     	; 0xf46 <__vector_5+0x37c>

						case 0x22:
						if(SPIBUFFER.u8Count == 3)
     eea:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <SPIBUFFER+0x40>
     eee:	83 30       	cpi	r24, 0x03	; 3
     ef0:	61 f5       	brne	.+88     	; 0xf4a <__vector_5+0x380>
						{
							standbyAudio();
     ef2:	0e 94 c2 0a 	call	0x1584	; 0x1584 <standbyAudio>
							u8Status &= ~(1<<STATUS_AUDIO);
     ef6:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <u8Status>
     efa:	8d 7f       	andi	r24, 0xFD	; 253
     efc:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <u8Status>
						}
						break;
     f00:	24 c0       	rjmp	.+72     	; 0xf4a <__vector_5+0x380>
					
						case 0x23:
						if(SPIBUFFER.u8Count == 4)
     f02:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <SPIBUFFER+0x40>
     f06:	84 30       	cpi	r24, 0x04	; 4
     f08:	11 f5       	brne	.+68     	; 0xf4e <__vector_5+0x384>
						{
							setVolume(SPIBUFFER.au8Buffer[2]);
     f0a:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <SPIBUFFER+0x2>
     f0e:	0e 94 56 0b 	call	0x16ac	; 0x16ac <setVolume>
						}
						break;
     f12:	1d c0       	rjmp	.+58     	; 0xf4e <__vector_5+0x384>
						
						case 0x31:
						RingBuffer_Insert(&RINGBUFFER,0x31);
     f14:	61 e3       	ldi	r22, 0x31	; 49
     f16:	82 e5       	ldi	r24, 0x52	; 82
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
						RingBuffer_Insert(&RINGBUFFER,0xFF);						
     f1e:	6f ef       	ldi	r22, 0xFF	; 255
     f20:	82 e5       	ldi	r24, 0x52	; 82
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
						break;
     f28:	00 00       	nop
     f2a:	12 c0       	rjmp	.+36     	; 0xf50 <__vector_5+0x386>
			
		}
	}
	else // SS LOW
	{
		SPIBUFFER.u8Count = 0;
     f2c:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <SPIBUFFER+0x40>
		SPIBUFFER.spiState = READY;
     f30:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <SPIBUFFER+0x42>
     f34:	0d c0       	rjmp	.+26     	; 0xf50 <__vector_5+0x386>
						if(SPIBUFFER.u8Count == 3)
						{
							enablePLED();
							u8Status |= (1<<STATUS_PLED);
						}
						break;
     f36:	00 00       	nop
     f38:	0b c0       	rjmp	.+22     	; 0xf50 <__vector_5+0x386>
						if(SPIBUFFER.u8Count == 3)
						{
							disablePLED();
							u8Status &= ~(1<<STATUS_PLED);
						}
						break;
     f3a:	00 00       	nop
     f3c:	09 c0       	rjmp	.+18     	; 0xf50 <__vector_5+0x386>
									u8Duty = SPIBUFFER.au8Buffer[2];
								}
								setPWMDutyPercent(u8Duty);
							}
						}
						break;
     f3e:	00 00       	nop
     f40:	07 c0       	rjmp	.+14     	; 0xf50 <__vector_5+0x386>
								u8PLEDFadeDirection = 0;
							}
							
							u8PLEDFadeActive = 1;
						}
						break;
     f42:	00 00       	nop
     f44:	05 c0       	rjmp	.+10     	; 0xf50 <__vector_5+0x386>
						if(SPIBUFFER.u8Count == 3)
						{
							enableAudio();
							u8Status |= (1<<STATUS_AUDIO);
						}
						break;
     f46:	00 00       	nop
     f48:	03 c0       	rjmp	.+6      	; 0xf50 <__vector_5+0x386>
						if(SPIBUFFER.u8Count == 3)
						{
							standbyAudio();
							u8Status &= ~(1<<STATUS_AUDIO);
						}
						break;
     f4a:	00 00       	nop
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <__vector_5+0x386>
						case 0x23:
						if(SPIBUFFER.u8Count == 4)
						{
							setVolume(SPIBUFFER.au8Buffer[2]);
						}
						break;
     f4e:	00 00       	nop
	{
		SPIBUFFER.u8Count = 0;
		SPIBUFFER.spiState = READY;
	}
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
     f50:	8b e2       	ldi	r24, 0x2B	; 43
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	2b e2       	ldi	r18, 0x2B	; 43
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	f9 01       	movw	r30, r18
     f5a:	20 81       	ld	r18, Z
     f5c:	2d 7f       	andi	r18, 0xFD	; 253
     f5e:	fc 01       	movw	r30, r24
     f60:	20 83       	st	Z, r18
	#endif
}
     f62:	00 00       	nop
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	ff 91       	pop	r31
     f6a:	ef 91       	pop	r30
     f6c:	bf 91       	pop	r27
     f6e:	af 91       	pop	r26
     f70:	9f 91       	pop	r25
     f72:	8f 91       	pop	r24
     f74:	7f 91       	pop	r23
     f76:	6f 91       	pop	r22
     f78:	5f 91       	pop	r21
     f7a:	4f 91       	pop	r20
     f7c:	3f 91       	pop	r19
     f7e:	2f 91       	pop	r18
     f80:	1f 91       	pop	r17
     f82:	0f 91       	pop	r16
     f84:	ff 90       	pop	r15
     f86:	ef 90       	pop	r14
     f88:	df 90       	pop	r13
     f8a:	cf 90       	pop	r12
     f8c:	bf 90       	pop	r11
     f8e:	af 90       	pop	r10
     f90:	0f 90       	pop	r0
     f92:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f96:	0f 90       	pop	r0
     f98:	1f 90       	pop	r1
     f9a:	18 95       	reti

00000f9c <main>:
// 		
// 	}
// }

int main(void)
{
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	2a 97       	sbiw	r28, 0x0a	; 10
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	de bf       	out	0x3e, r29	; 62
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	cd bf       	out	0x3d, r28	; 61
	uint16_t i;
	uint8_t au8Command[8];
	portInit();
     fb0:	0e 94 12 0a 	call	0x1424	; 0x1424 <portInit>
	adcInit();
     fb4:	0e 94 25 0c 	call	0x184a	; 0x184a <adcInit>
	initPWM(0);
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <initPWM>
	startPWM();
     fc0:	0e 94 ab 0b 	call	0x1756	; 0x1756 <startPWM>
	spiInitBuffer(&SPIBUFFER);
     fc4:	87 ed       	ldi	r24, 0xD7	; 215
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	0e 94 a0 09 	call	0x1340	; 0x1340 <spiInitBuffer>
	spiSlaveInit();
     fcc:	0e 94 c0 09 	call	0x1380	; 0x1380 <spiSlaveInit>
 	spiPcInt();
     fd0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <spiPcInt>
	RingBuffer_InitBuffer(&RINGBUFFER);
     fd4:	82 e5       	ldi	r24, 0x52	; 82
     fd6:	91 e0       	ldi	r25, 0x01	; 1
     fd8:	0e 94 a3 00 	call	0x146	; 0x146 <RingBuffer_InitBuffer>
	initRGBooster();
     fdc:	0e 94 59 09 	call	0x12b2	; 0x12b2 <initRGBooster>
	INT0_Init();
     fe0:	0e 94 3e 09 	call	0x127c	; 0x127c <INT0_Init>
	INT_5ms_Init();
     fe4:	0e 94 c5 0c 	call	0x198a	; 0x198a <INT_5ms_Init>

	wait_1ms(100);
     fe8:	84 e6       	ldi	r24, 0x64	; 100
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <wait_1ms>
	initAudio();
     ff0:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <initAudio>


	#ifdef INT_OUT
	DDRD |= (1<<DDRD1);
     ff4:	8a e2       	ldi	r24, 0x2A	; 42
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	2a e2       	ldi	r18, 0x2A	; 42
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	f9 01       	movw	r30, r18
     ffe:	20 81       	ld	r18, Z
    1000:	22 60       	ori	r18, 0x02	; 2
    1002:	fc 01       	movw	r30, r24
    1004:	20 83       	st	Z, r18
	PORTD &= ~(1<<PORTD1);
    1006:	8b e2       	ldi	r24, 0x2B	; 43
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	2b e2       	ldi	r18, 0x2B	; 43
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	f9 01       	movw	r30, r18
    1010:	20 81       	ld	r18, Z
    1012:	2d 7f       	andi	r18, 0xFD	; 253
    1014:	fc 01       	movw	r30, r24
    1016:	20 83       	st	Z, r18
	#endif
		
	sei();
    1018:	78 94       	sei
	
	ucByteIdx = 0;
    101a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
	ucRGBIdx = 0;
    101e:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <ucRGBIdx>
	INT0_vect();
    1022:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__vector_1>
	wait_1ms(100);
    1026:	84 e6       	ldi	r24, 0x64	; 100
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <wait_1ms>
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    102e:	61 e3       	ldi	r22, 0x31	; 49
    1030:	82 e5       	ldi	r24, 0x52	; 82
    1032:	91 e0       	ldi	r25, 0x01	; 1
    1034:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    1038:	6f ef       	ldi	r22, 0xFF	; 255
    103a:	82 e5       	ldi	r24, 0x52	; 82
    103c:	91 e0       	ldi	r25, 0x01	; 1
    103e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    1042:	62 e3       	ldi	r22, 0x32	; 50
    1044:	82 e5       	ldi	r24, 0x52	; 82
    1046:	91 e0       	ldi	r25, 0x01	; 1
    1048:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    104c:	61 e0       	ldi	r22, 0x01	; 1
    104e:	82 e5       	ldi	r24, 0x52	; 82
    1050:	91 e0       	ldi	r25, 0x01	; 1
    1052:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    1056:	61 e0       	ldi	r22, 0x01	; 1
    1058:	82 e5       	ldi	r24, 0x52	; 82
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    1060:	60 e1       	ldi	r22, 0x10	; 16
    1062:	82 e5       	ldi	r24, 0x52	; 82
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    106a:	6f ef       	ldi	r22, 0xFF	; 255
    106c:	82 e5       	ldi	r24, 0x52	; 82
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    1074:	61 e3       	ldi	r22, 0x31	; 49
    1076:	82 e5       	ldi	r24, 0x52	; 82
    1078:	91 e0       	ldi	r25, 0x01	; 1
    107a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    107e:	6f ef       	ldi	r22, 0xFF	; 255
    1080:	82 e5       	ldi	r24, 0x52	; 82
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    1088:	62 e3       	ldi	r22, 0x32	; 50
    108a:	82 e5       	ldi	r24, 0x52	; 82
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    1092:	61 e0       	ldi	r22, 0x01	; 1
    1094:	82 e5       	ldi	r24, 0x52	; 82
    1096:	91 e0       	ldi	r25, 0x01	; 1
    1098:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    109c:	61 e0       	ldi	r22, 0x01	; 1
    109e:	82 e5       	ldi	r24, 0x52	; 82
    10a0:	91 e0       	ldi	r25, 0x01	; 1
    10a2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    10a6:	60 e1       	ldi	r22, 0x10	; 16
    10a8:	82 e5       	ldi	r24, 0x52	; 82
    10aa:	91 e0       	ldi	r25, 0x01	; 1
    10ac:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    10b0:	6f ef       	ldi	r22, 0xFF	; 255
    10b2:	82 e5       	ldi	r24, 0x52	; 82
    10b4:	91 e0       	ldi	r25, 0x01	; 1
    10b6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    10ba:	61 e3       	ldi	r22, 0x31	; 49
    10bc:	82 e5       	ldi	r24, 0x52	; 82
    10be:	91 e0       	ldi	r25, 0x01	; 1
    10c0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    10c4:	6f ef       	ldi	r22, 0xFF	; 255
    10c6:	82 e5       	ldi	r24, 0x52	; 82
    10c8:	91 e0       	ldi	r25, 0x01	; 1
    10ca:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    10ce:	62 e3       	ldi	r22, 0x32	; 50
    10d0:	82 e5       	ldi	r24, 0x52	; 82
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    10d8:	61 e0       	ldi	r22, 0x01	; 1
    10da:	82 e5       	ldi	r24, 0x52	; 82
    10dc:	91 e0       	ldi	r25, 0x01	; 1
    10de:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    10e2:	61 e0       	ldi	r22, 0x01	; 1
    10e4:	82 e5       	ldi	r24, 0x52	; 82
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    10ec:	60 e1       	ldi	r22, 0x10	; 16
    10ee:	82 e5       	ldi	r24, 0x52	; 82
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    10f6:	6f ef       	ldi	r22, 0xFF	; 255
    10f8:	82 e5       	ldi	r24, 0x52	; 82
    10fa:	91 e0       	ldi	r25, 0x01	; 1
    10fc:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    1100:	61 e3       	ldi	r22, 0x31	; 49
    1102:	82 e5       	ldi	r24, 0x52	; 82
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    110a:	6f ef       	ldi	r22, 0xFF	; 255
    110c:	82 e5       	ldi	r24, 0x52	; 82
    110e:	91 e0       	ldi	r25, 0x01	; 1
    1110:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    1114:	62 e3       	ldi	r22, 0x32	; 50
    1116:	82 e5       	ldi	r24, 0x52	; 82
    1118:	91 e0       	ldi	r25, 0x01	; 1
    111a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    111e:	61 e0       	ldi	r22, 0x01	; 1
    1120:	82 e5       	ldi	r24, 0x52	; 82
    1122:	91 e0       	ldi	r25, 0x01	; 1
    1124:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    1128:	61 e0       	ldi	r22, 0x01	; 1
    112a:	82 e5       	ldi	r24, 0x52	; 82
    112c:	91 e0       	ldi	r25, 0x01	; 1
    112e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    1132:	60 e1       	ldi	r22, 0x10	; 16
    1134:	82 e5       	ldi	r24, 0x52	; 82
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    113c:	6f ef       	ldi	r22, 0xFF	; 255
    113e:	82 e5       	ldi	r24, 0x52	; 82
    1140:	91 e0       	ldi	r25, 0x01	; 1
    1142:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    1146:	61 e3       	ldi	r22, 0x31	; 49
    1148:	82 e5       	ldi	r24, 0x52	; 82
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    1150:	6f ef       	ldi	r22, 0xFF	; 255
    1152:	82 e5       	ldi	r24, 0x52	; 82
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    115a:	62 e3       	ldi	r22, 0x32	; 50
    115c:	82 e5       	ldi	r24, 0x52	; 82
    115e:	91 e0       	ldi	r25, 0x01	; 1
    1160:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    1164:	61 e0       	ldi	r22, 0x01	; 1
    1166:	82 e5       	ldi	r24, 0x52	; 82
    1168:	91 e0       	ldi	r25, 0x01	; 1
    116a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    116e:	61 e0       	ldi	r22, 0x01	; 1
    1170:	82 e5       	ldi	r24, 0x52	; 82
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    1178:	60 e1       	ldi	r22, 0x10	; 16
    117a:	82 e5       	ldi	r24, 0x52	; 82
    117c:	91 e0       	ldi	r25, 0x01	; 1
    117e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    1182:	6f ef       	ldi	r22, 0xFF	; 255
    1184:	82 e5       	ldi	r24, 0x52	; 82
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RingBuffer_Insert>
		
	
    while (1) 
    {
		if(RingBuffer_CountChar(&RINGBUFFER,0xFF))
    118c:	6f ef       	ldi	r22, 0xFF	; 255
    118e:	82 e5       	ldi	r24, 0x52	; 82
    1190:	91 e0       	ldi	r25, 0x01	; 1
    1192:	0e 94 a3 01 	call	0x346	; 0x346 <RingBuffer_CountChar>
    1196:	88 23       	and	r24, r24
    1198:	09 f4       	brne	.+2      	; 0x119c <main+0x200>
    119a:	6b c0       	rjmp	.+214    	; 0x1272 <main+0x2d6>
		{
			RingBuffer_RemoveUntilChar(&RINGBUFFER,au8Command,0xFF,0);
    119c:	ce 01       	movw	r24, r28
    119e:	03 96       	adiw	r24, 0x03	; 3
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	4f ef       	ldi	r20, 0xFF	; 255
    11a4:	bc 01       	movw	r22, r24
    11a6:	82 e5       	ldi	r24, 0x52	; 82
    11a8:	91 e0       	ldi	r25, 0x01	; 1
    11aa:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <RingBuffer_RemoveUntilChar>
			
			switch(au8Command[0])
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	88 2f       	mov	r24, r24
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	81 33       	cpi	r24, 0x31	; 49
    11b6:	91 05       	cpc	r25, r1
    11b8:	19 f0       	breq	.+6      	; 0x11c0 <main+0x224>
    11ba:	c2 97       	sbiw	r24, 0x32	; 50
    11bc:	31 f1       	breq	.+76     	; 0x120a <main+0x26e>
    11be:	59 c0       	rjmp	.+178    	; 0x1272 <main+0x2d6>
			{
				case 0x31:
				for(i=0;i<LED_COUNT;i++)
    11c0:	1a 82       	std	Y+2, r1	; 0x02
    11c2:	19 82       	std	Y+1, r1	; 0x01
    11c4:	17 c0       	rjmp	.+46     	; 0x11f4 <main+0x258>
				{
					aucRed[i] = 0;
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ca:	80 50       	subi	r24, 0x00	; 0
    11cc:	9f 4f       	sbci	r25, 0xFF	; 255
    11ce:	fc 01       	movw	r30, r24
    11d0:	10 82       	st	Z, r1
					aucGreen[i] = 0;
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	8c 5e       	subi	r24, 0xEC	; 236
    11d8:	9e 4f       	sbci	r25, 0xFE	; 254
    11da:	fc 01       	movw	r30, r24
    11dc:	10 82       	st	Z, r1
					aucBlue[i] = 0;
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	9a 81       	ldd	r25, Y+2	; 0x02
    11e2:	88 5d       	subi	r24, 0xD8	; 216
    11e4:	9e 4f       	sbci	r25, 0xFE	; 254
    11e6:	fc 01       	movw	r30, r24
    11e8:	10 82       	st	Z, r1
			RingBuffer_RemoveUntilChar(&RINGBUFFER,au8Command,0xFF,0);
			
			switch(au8Command[0])
			{
				case 0x31:
				for(i=0;i<LED_COUNT;i++)
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	9a 81       	ldd	r25, Y+2	; 0x02
    11ee:	01 96       	adiw	r24, 0x01	; 1
    11f0:	9a 83       	std	Y+2, r25	; 0x02
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
    11f8:	44 97       	sbiw	r24, 0x14	; 20
    11fa:	28 f3       	brcs	.-54     	; 0x11c6 <main+0x22a>
				{
					aucRed[i] = 0;
					aucGreen[i] = 0;
					aucBlue[i] = 0;
				}
				ucByteIdx = 0;
    11fc:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
				ucRGBIdx = 0;
    1200:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <ucRGBIdx>
				INT0_vect();
    1204:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__vector_1>
				break;
    1208:	34 c0       	rjmp	.+104    	; 0x1272 <main+0x2d6>
				
				case 0x32:
				if(strlen(au8Command) == 4)
    120a:	ce 01       	movw	r24, r28
    120c:	03 96       	adiw	r24, 0x03	; 3
    120e:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <strlen>
    1212:	04 97       	sbiw	r24, 0x04	; 4
    1214:	69 f5       	brne	.+90     	; 0x1270 <main+0x2d4>
				{
					for(i=0;i<LED_COUNT;i++)
    1216:	1a 82       	std	Y+2, r1	; 0x02
    1218:	19 82       	std	Y+1, r1	; 0x01
    121a:	20 c0       	rjmp	.+64     	; 0x125c <main+0x2c0>
					{
						aucRed[i] = au8Command[1]-1;
    121c:	8c 81       	ldd	r24, Y+4	; 0x04
    121e:	2f ef       	ldi	r18, 0xFF	; 255
    1220:	28 0f       	add	r18, r24
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	9a 81       	ldd	r25, Y+2	; 0x02
    1226:	80 50       	subi	r24, 0x00	; 0
    1228:	9f 4f       	sbci	r25, 0xFF	; 255
    122a:	fc 01       	movw	r30, r24
    122c:	20 83       	st	Z, r18
						aucGreen[i] = au8Command[2]-1;
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	2f ef       	ldi	r18, 0xFF	; 255
    1232:	28 0f       	add	r18, r24
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	9a 81       	ldd	r25, Y+2	; 0x02
    1238:	8c 5e       	subi	r24, 0xEC	; 236
    123a:	9e 4f       	sbci	r25, 0xFE	; 254
    123c:	fc 01       	movw	r30, r24
    123e:	20 83       	st	Z, r18
						aucBlue[i] = au8Command[3]-1;
    1240:	8e 81       	ldd	r24, Y+6	; 0x06
    1242:	2f ef       	ldi	r18, 0xFF	; 255
    1244:	28 0f       	add	r18, r24
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	9a 81       	ldd	r25, Y+2	; 0x02
    124a:	88 5d       	subi	r24, 0xD8	; 216
    124c:	9e 4f       	sbci	r25, 0xFE	; 254
    124e:	fc 01       	movw	r30, r24
    1250:	20 83       	st	Z, r18
				break;
				
				case 0x32:
				if(strlen(au8Command) == 4)
				{
					for(i=0;i<LED_COUNT;i++)
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	9a 81       	ldd	r25, Y+2	; 0x02
    1256:	01 96       	adiw	r24, 0x01	; 1
    1258:	9a 83       	std	Y+2, r25	; 0x02
    125a:	89 83       	std	Y+1, r24	; 0x01
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	9a 81       	ldd	r25, Y+2	; 0x02
    1260:	44 97       	sbiw	r24, 0x14	; 20
    1262:	e0 f2       	brcs	.-72     	; 0x121c <main+0x280>
					{
						aucRed[i] = au8Command[1]-1;
						aucGreen[i] = au8Command[2]-1;
						aucBlue[i] = au8Command[3]-1;
					}
					ucByteIdx = 0;
    1264:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
					ucRGBIdx = 0;
    1268:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <ucRGBIdx>
					INT0_vect();
    126c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__vector_1>
				}
				break;
    1270:	00 00       	nop
			}
		}
		wait_1ms(2);
    1272:	82 e0       	ldi	r24, 0x02	; 2
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <wait_1ms>
    }
    127a:	88 cf       	rjmp	.-240    	; 0x118c <main+0x1f0>

0000127c <INT0_Init>:
#include "utils.h"
#include "rgbooster.h"


void INT0_Init(void)
{
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
	EICRA |= (1<<ISC01); // interrupt on falling edge
    1284:	89 e6       	ldi	r24, 0x69	; 105
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	29 e6       	ldi	r18, 0x69	; 105
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	f9 01       	movw	r30, r18
    128e:	20 81       	ld	r18, Z
    1290:	22 60       	ori	r18, 0x02	; 2
    1292:	fc 01       	movw	r30, r24
    1294:	20 83       	st	Z, r18
	EIFR  = (1<<INTF0); // clear flag
    1296:	8c e3       	ldi	r24, 0x3C	; 60
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	21 e0       	ldi	r18, 0x01	; 1
    129c:	fc 01       	movw	r30, r24
    129e:	20 83       	st	Z, r18
	EIMSK = (1<<INT0);  // INT1 enable
    12a0:	8d e3       	ldi	r24, 0x3D	; 61
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	21 e0       	ldi	r18, 0x01	; 1
    12a6:	fc 01       	movw	r30, r24
    12a8:	20 83       	st	Z, r18
}
    12aa:	00 00       	nop
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	08 95       	ret

000012b2 <initRGBooster>:

void initRGBooster(void)
{
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
	DDR_DATA_LOW |= DATA_LOW_BITMASK; //RGB DATA LOWER NIBBLE -> OUTPUT
    12ba:	84 e2       	ldi	r24, 0x24	; 36
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	24 e2       	ldi	r18, 0x24	; 36
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	f9 01       	movw	r30, r18
    12c4:	20 81       	ld	r18, Z
    12c6:	2f 60       	ori	r18, 0x0F	; 15
    12c8:	fc 01       	movw	r30, r24
    12ca:	20 83       	st	Z, r18
	PORT_DATA_LOW &= ~DATA_LOW_BITMASK; //RGB DATA LOWER NIBBLE -> LOW
    12cc:	85 e2       	ldi	r24, 0x25	; 37
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	25 e2       	ldi	r18, 0x25	; 37
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	f9 01       	movw	r30, r18
    12d6:	20 81       	ld	r18, Z
    12d8:	20 7f       	andi	r18, 0xF0	; 240
    12da:	fc 01       	movw	r30, r24
    12dc:	20 83       	st	Z, r18
	DDR_DATA_HIGH |= DATA_HIGH_BITMASK; //RGB DATA HIGHER NIBBLE -> OUTPUT
    12de:	81 e2       	ldi	r24, 0x21	; 33
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	21 e2       	ldi	r18, 0x21	; 33
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	f9 01       	movw	r30, r18
    12e8:	20 81       	ld	r18, Z
    12ea:	20 6f       	ori	r18, 0xF0	; 240
    12ec:	fc 01       	movw	r30, r24
    12ee:	20 83       	st	Z, r18
	PORT_DATA_HIGH &= ~DATA_HIGH_BITMASK; //RGB DATA HIGHER NIBBLE -> LOW
    12f0:	82 e2       	ldi	r24, 0x22	; 34
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	22 e2       	ldi	r18, 0x22	; 34
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	f9 01       	movw	r30, r18
    12fa:	20 81       	ld	r18, Z
    12fc:	2f 70       	andi	r18, 0x0F	; 15
    12fe:	fc 01       	movw	r30, r24
    1300:	20 83       	st	Z, r18

	DDR_CONTROL |= (1<<SEND); //SEND PIN -> OUTPUT
    1302:	8a e2       	ldi	r24, 0x2A	; 42
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	2a e2       	ldi	r18, 0x2A	; 42
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	f9 01       	movw	r30, r18
    130c:	20 81       	ld	r18, Z
    130e:	28 60       	ori	r18, 0x08	; 8
    1310:	fc 01       	movw	r30, r24
    1312:	20 83       	st	Z, r18
	PORT_CONTROL &= ~(1<<SEND); //SEND PIN LOW
    1314:	8b e2       	ldi	r24, 0x2B	; 43
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	2b e2       	ldi	r18, 0x2B	; 43
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	f9 01       	movw	r30, r18
    131e:	20 81       	ld	r18, Z
    1320:	27 7f       	andi	r18, 0xF7	; 247
    1322:	fc 01       	movw	r30, r24
    1324:	20 83       	st	Z, r18
	DDR_CONTROL &= ~(1<<DONE_BUSY); //DONE BUSY PIN -> INPUT
    1326:	8a e2       	ldi	r24, 0x2A	; 42
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	2a e2       	ldi	r18, 0x2A	; 42
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	f9 01       	movw	r30, r18
    1330:	20 81       	ld	r18, Z
    1332:	2b 7f       	andi	r18, 0xFB	; 251
    1334:	fc 01       	movw	r30, r24
    1336:	20 83       	st	Z, r18
    1338:	00 00       	nop
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	08 95       	ret

00001340 <spiInitBuffer>:
#include <avr/io.h>
#include "spi.h"


void spiInitBuffer(SpiBuf_t* Buffer)
{
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	00 d0       	rcall	.+0      	; 0x1346 <spiInitBuffer+0x6>
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	9a 83       	std	Y+2, r25	; 0x02
    134c:	89 83       	std	Y+1, r24	; 0x01
	Buffer->u8Count = 0;
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	9a 81       	ldd	r25, Y+2	; 0x02
    1352:	80 5c       	subi	r24, 0xC0	; 192
    1354:	9f 4f       	sbci	r25, 0xFF	; 255
    1356:	fc 01       	movw	r30, r24
    1358:	10 82       	st	Z, r1
	Buffer->u8ReadReturnCount = 0;
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	8f 5b       	subi	r24, 0xBF	; 191
    1360:	9f 4f       	sbci	r25, 0xFF	; 255
    1362:	fc 01       	movw	r30, r24
    1364:	10 82       	st	Z, r1
	Buffer->spiState = IDLE;
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	9a 81       	ldd	r25, Y+2	; 0x02
    136a:	8e 5b       	subi	r24, 0xBE	; 190
    136c:	9f 4f       	sbci	r25, 0xFF	; 255
    136e:	26 e0       	ldi	r18, 0x06	; 6
    1370:	fc 01       	movw	r30, r24
    1372:	20 83       	st	Z, r18
}
    1374:	00 00       	nop
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	08 95       	ret

00001380 <spiSlaveInit>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiSlaveInit(void)
{
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	1f 92       	push	r1
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t ucTemp;
	SPSR0 = 0;
    138a:	8d e4       	ldi	r24, 0x4D	; 77
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	fc 01       	movw	r30, r24
    1390:	10 82       	st	Z, r1
	SPCR0 = (1<<SPIE0);
    1392:	8c e4       	ldi	r24, 0x4C	; 76
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	20 e8       	ldi	r18, 0x80	; 128
    1398:	fc 01       	movw	r30, r24
    139a:	20 83       	st	Z, r18
	
	ucTemp = SPSR0;					
    139c:	8d e4       	ldi	r24, 0x4D	; 77
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	fc 01       	movw	r30, r24
    13a2:	80 81       	ld	r24, Z
    13a4:	89 83       	std	Y+1, r24	; 0x01
	ucTemp = SPDR0;
    13a6:	8e e4       	ldi	r24, 0x4E	; 78
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	fc 01       	movw	r30, r24
    13ac:	80 81       	ld	r24, Z
    13ae:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0;
    13b0:	8e e4       	ldi	r24, 0x4E	; 78
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	fc 01       	movw	r30, r24
    13b6:	10 82       	st	Z, r1
	
	DDRB |= (1<<PINB6);				// MISO needs to be an output
    13b8:	84 e2       	ldi	r24, 0x24	; 36
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	24 e2       	ldi	r18, 0x24	; 36
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	f9 01       	movw	r30, r18
    13c2:	20 81       	ld	r18, Z
    13c4:	20 64       	ori	r18, 0x40	; 64
    13c6:	fc 01       	movw	r30, r24
    13c8:	20 83       	st	Z, r18
	
	SPCR0 |= (1<<SPE0);
    13ca:	8c e4       	ldi	r24, 0x4C	; 76
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	2c e4       	ldi	r18, 0x4C	; 76
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	f9 01       	movw	r30, r18
    13d4:	20 81       	ld	r18, Z
    13d6:	20 64       	ori	r18, 0x40	; 64
    13d8:	fc 01       	movw	r30, r24
    13da:	20 83       	st	Z, r18
}
    13dc:	00 00       	nop
    13de:	0f 90       	pop	r0
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	08 95       	ret

000013e6 <spiPcInt>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiPcInt(void)
{
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
	PCICR |= (1<<PCIE1);
    13ee:	88 e6       	ldi	r24, 0x68	; 104
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	28 e6       	ldi	r18, 0x68	; 104
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	f9 01       	movw	r30, r18
    13f8:	20 81       	ld	r18, Z
    13fa:	22 60       	ori	r18, 0x02	; 2
    13fc:	fc 01       	movw	r30, r24
    13fe:	20 83       	st	Z, r18
	PCIFR = (1<<PCIF1);
    1400:	8b e3       	ldi	r24, 0x3B	; 59
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	22 e0       	ldi	r18, 0x02	; 2
    1406:	fc 01       	movw	r30, r24
    1408:	20 83       	st	Z, r18
	PCMSK1 |= (1<<PCINT12);
    140a:	8c e6       	ldi	r24, 0x6C	; 108
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	2c e6       	ldi	r18, 0x6C	; 108
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	f9 01       	movw	r30, r18
    1414:	20 81       	ld	r18, Z
    1416:	20 61       	ori	r18, 0x10	; 16
    1418:	fc 01       	movw	r30, r24
    141a:	20 83       	st	Z, r18
    141c:	00 00       	nop
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	08 95       	ret

00001424 <portInit>:
 * @return 8bit analog value
 *****************************************************************************/
uint8_t adcGetValue(void)
{
	return(ADCH);
}
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	8a e2       	ldi	r24, 0x2A	; 42
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	2a e2       	ldi	r18, 0x2A	; 42
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	f9 01       	movw	r30, r18
    1436:	20 81       	ld	r18, Z
    1438:	20 63       	ori	r18, 0x30	; 48
    143a:	fc 01       	movw	r30, r24
    143c:	20 83       	st	Z, r18
    143e:	8b e2       	ldi	r24, 0x2B	; 43
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	2b e2       	ldi	r18, 0x2B	; 43
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	f9 01       	movw	r30, r18
    1448:	20 81       	ld	r18, Z
    144a:	20 62       	ori	r18, 0x20	; 32
    144c:	fc 01       	movw	r30, r24
    144e:	20 83       	st	Z, r18
    1450:	8b e2       	ldi	r24, 0x2B	; 43
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	2b e2       	ldi	r18, 0x2B	; 43
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	f9 01       	movw	r30, r18
    145a:	20 81       	ld	r18, Z
    145c:	2f 7e       	andi	r18, 0xEF	; 239
    145e:	fc 01       	movw	r30, r24
    1460:	20 83       	st	Z, r18
    1462:	8a e2       	ldi	r24, 0x2A	; 42
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	2a e2       	ldi	r18, 0x2A	; 42
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	f9 01       	movw	r30, r18
    146c:	20 81       	ld	r18, Z
    146e:	20 68       	ori	r18, 0x80	; 128
    1470:	fc 01       	movw	r30, r24
    1472:	20 83       	st	Z, r18
    1474:	8b e2       	ldi	r24, 0x2B	; 43
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	2b e2       	ldi	r18, 0x2B	; 43
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	f9 01       	movw	r30, r18
    147e:	20 81       	ld	r18, Z
    1480:	20 68       	ori	r18, 0x80	; 128
    1482:	fc 01       	movw	r30, r24
    1484:	20 83       	st	Z, r18
    1486:	8a e2       	ldi	r24, 0x2A	; 42
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	2a e2       	ldi	r18, 0x2A	; 42
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	f9 01       	movw	r30, r18
    1490:	20 81       	ld	r18, Z
    1492:	2f 7b       	andi	r18, 0xBF	; 191
    1494:	fc 01       	movw	r30, r24
    1496:	20 83       	st	Z, r18
    1498:	8a e2       	ldi	r24, 0x2A	; 42
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	2a e2       	ldi	r18, 0x2A	; 42
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	f9 01       	movw	r30, r18
    14a2:	20 81       	ld	r18, Z
    14a4:	2c 7f       	andi	r18, 0xFC	; 252
    14a6:	fc 01       	movw	r30, r24
    14a8:	20 83       	st	Z, r18
    14aa:	8b e2       	ldi	r24, 0x2B	; 43
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	2b e2       	ldi	r18, 0x2B	; 43
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	f9 01       	movw	r30, r18
    14b4:	20 81       	ld	r18, Z
    14b6:	21 60       	ori	r18, 0x01	; 1
    14b8:	fc 01       	movw	r30, r24
    14ba:	20 83       	st	Z, r18
    14bc:	81 e2       	ldi	r24, 0x21	; 33
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	21 e2       	ldi	r18, 0x21	; 33
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	f9 01       	movw	r30, r18
    14c6:	20 81       	ld	r18, Z
    14c8:	2e 7f       	andi	r18, 0xFE	; 254
    14ca:	fc 01       	movw	r30, r24
    14cc:	20 83       	st	Z, r18
    14ce:	82 e2       	ldi	r24, 0x22	; 34
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	22 e2       	ldi	r18, 0x22	; 34
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	f9 01       	movw	r30, r18
    14d8:	20 81       	ld	r18, Z
    14da:	2e 7f       	andi	r18, 0xFE	; 254
    14dc:	fc 01       	movw	r30, r24
    14de:	20 83       	st	Z, r18
    14e0:	8e e7       	ldi	r24, 0x7E	; 126
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	2e e7       	ldi	r18, 0x7E	; 126
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	f9 01       	movw	r30, r18
    14ea:	20 81       	ld	r18, Z
    14ec:	21 60       	ori	r18, 0x01	; 1
    14ee:	fc 01       	movw	r30, r24
    14f0:	20 83       	st	Z, r18
    14f2:	81 e2       	ldi	r24, 0x21	; 33
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	21 e2       	ldi	r18, 0x21	; 33
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	f9 01       	movw	r30, r18
    14fc:	20 81       	ld	r18, Z
    14fe:	21 7f       	andi	r18, 0xF1	; 241
    1500:	fc 01       	movw	r30, r24
    1502:	20 83       	st	Z, r18
    1504:	82 e2       	ldi	r24, 0x22	; 34
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	22 e2       	ldi	r18, 0x22	; 34
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	f9 01       	movw	r30, r18
    150e:	20 81       	ld	r18, Z
    1510:	2e 60       	ori	r18, 0x0E	; 14
    1512:	fc 01       	movw	r30, r24
    1514:	20 83       	st	Z, r18
    1516:	87 e2       	ldi	r24, 0x27	; 39
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	fc 01       	movw	r30, r24
    151c:	80 81       	ld	r24, Z
    151e:	87 e2       	ldi	r24, 0x27	; 39
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	fc 01       	movw	r30, r24
    1524:	10 82       	st	Z, r1
    1526:	88 e2       	ldi	r24, 0x28	; 40
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	fc 01       	movw	r30, r24
    152c:	80 81       	ld	r24, Z
    152e:	88 e2       	ldi	r24, 0x28	; 40
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	2f ef       	ldi	r18, 0xFF	; 255
    1534:	fc 01       	movw	r30, r24
    1536:	20 83       	st	Z, r18
    1538:	00 00       	nop
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	08 95       	ret

00001540 <enablePLED>:
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	8b e2       	ldi	r24, 0x2B	; 43
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	2b e2       	ldi	r18, 0x2B	; 43
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	f9 01       	movw	r30, r18
    1552:	20 81       	ld	r18, Z
    1554:	2f 7d       	andi	r18, 0xDF	; 223
    1556:	fc 01       	movw	r30, r24
    1558:	20 83       	st	Z, r18
    155a:	00 00       	nop
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	08 95       	ret

00001562 <disablePLED>:
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	8b e2       	ldi	r24, 0x2B	; 43
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	2b e2       	ldi	r18, 0x2B	; 43
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	f9 01       	movw	r30, r18
    1574:	20 81       	ld	r18, Z
    1576:	20 62       	ori	r18, 0x20	; 32
    1578:	fc 01       	movw	r30, r24
    157a:	20 83       	st	Z, r18
    157c:	00 00       	nop
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	08 95       	ret

00001584 <standbyAudio>:
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	8b e2       	ldi	r24, 0x2B	; 43
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	2b e2       	ldi	r18, 0x2B	; 43
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	f9 01       	movw	r30, r18
    1596:	20 81       	ld	r18, Z
    1598:	20 68       	ori	r18, 0x80	; 128
    159a:	fc 01       	movw	r30, r24
    159c:	20 83       	st	Z, r18
    159e:	8a e2       	ldi	r24, 0x2A	; 42
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	2a e2       	ldi	r18, 0x2A	; 42
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	f9 01       	movw	r30, r18
    15a8:	20 81       	ld	r18, Z
    15aa:	20 68       	ori	r18, 0x80	; 128
    15ac:	fc 01       	movw	r30, r24
    15ae:	20 83       	st	Z, r18
    15b0:	00 00       	nop
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	08 95       	ret

000015b8 <enableAudio>:
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	8b e2       	ldi	r24, 0x2B	; 43
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	2b e2       	ldi	r18, 0x2B	; 43
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	f9 01       	movw	r30, r18
    15ca:	20 81       	ld	r18, Z
    15cc:	2f 77       	andi	r18, 0x7F	; 127
    15ce:	fc 01       	movw	r30, r24
    15d0:	20 83       	st	Z, r18
    15d2:	8a e2       	ldi	r24, 0x2A	; 42
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	2a e2       	ldi	r18, 0x2A	; 42
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	f9 01       	movw	r30, r18
    15dc:	20 81       	ld	r18, Z
    15de:	20 68       	ori	r18, 0x80	; 128
    15e0:	fc 01       	movw	r30, r24
    15e2:	20 83       	st	Z, r18
    15e4:	00 00       	nop
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	08 95       	ret

000015ec <incVolume>:
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <incVolume+0x6>
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	8a 83       	std	Y+2, r24	; 0x02
    15f8:	8b e2       	ldi	r24, 0x2B	; 43
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	2b e2       	ldi	r18, 0x2B	; 43
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	f9 01       	movw	r30, r18
    1602:	20 81       	ld	r18, Z
    1604:	20 64       	ori	r18, 0x40	; 64
    1606:	fc 01       	movw	r30, r24
    1608:	20 83       	st	Z, r18
    160a:	19 82       	std	Y+1, r1	; 0x01
    160c:	15 c0       	rjmp	.+42     	; 0x1638 <incVolume+0x4c>
    160e:	8a e2       	ldi	r24, 0x2A	; 42
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	2a e2       	ldi	r18, 0x2A	; 42
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	f9 01       	movw	r30, r18
    1618:	20 81       	ld	r18, Z
    161a:	20 64       	ori	r18, 0x40	; 64
    161c:	fc 01       	movw	r30, r24
    161e:	20 83       	st	Z, r18
    1620:	8a e2       	ldi	r24, 0x2A	; 42
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	2a e2       	ldi	r18, 0x2A	; 42
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	f9 01       	movw	r30, r18
    162a:	20 81       	ld	r18, Z
    162c:	2f 7b       	andi	r18, 0xBF	; 191
    162e:	fc 01       	movw	r30, r24
    1630:	20 83       	st	Z, r18
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	8f 5f       	subi	r24, 0xFF	; 255
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	99 81       	ldd	r25, Y+1	; 0x01
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	98 17       	cp	r25, r24
    163e:	38 f3       	brcs	.-50     	; 0x160e <incVolume+0x22>
    1640:	00 00       	nop
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	08 95       	ret

0000164c <decVolume>:
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	00 d0       	rcall	.+0      	; 0x1652 <decVolume+0x6>
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	8a 83       	std	Y+2, r24	; 0x02
    1658:	8b e2       	ldi	r24, 0x2B	; 43
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	2b e2       	ldi	r18, 0x2B	; 43
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	f9 01       	movw	r30, r18
    1662:	20 81       	ld	r18, Z
    1664:	2f 7b       	andi	r18, 0xBF	; 191
    1666:	fc 01       	movw	r30, r24
    1668:	20 83       	st	Z, r18
    166a:	19 82       	std	Y+1, r1	; 0x01
    166c:	15 c0       	rjmp	.+42     	; 0x1698 <decVolume+0x4c>
    166e:	8a e2       	ldi	r24, 0x2A	; 42
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	2a e2       	ldi	r18, 0x2A	; 42
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	f9 01       	movw	r30, r18
    1678:	20 81       	ld	r18, Z
    167a:	20 64       	ori	r18, 0x40	; 64
    167c:	fc 01       	movw	r30, r24
    167e:	20 83       	st	Z, r18
    1680:	8a e2       	ldi	r24, 0x2A	; 42
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	2a e2       	ldi	r18, 0x2A	; 42
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	f9 01       	movw	r30, r18
    168a:	20 81       	ld	r18, Z
    168c:	2f 7b       	andi	r18, 0xBF	; 191
    168e:	fc 01       	movw	r30, r24
    1690:	20 83       	st	Z, r18
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	8f 5f       	subi	r24, 0xFF	; 255
    1696:	89 83       	std	Y+1, r24	; 0x01
    1698:	99 81       	ldd	r25, Y+1	; 0x01
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	98 17       	cp	r25, r24
    169e:	38 f3       	brcs	.-50     	; 0x166e <decVolume+0x22>
    16a0:	00 00       	nop
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	08 95       	ret

000016ac <setVolume>:
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	1f 92       	push	r1
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	89 83       	std	Y+1, r24	; 0x01
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	81 34       	cpi	r24, 0x41	; 65
    16bc:	10 f0       	brcs	.+4      	; 0x16c2 <setVolume+0x16>
    16be:	80 e4       	ldi	r24, 0x40	; 64
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	80 e4       	ldi	r24, 0x40	; 64
    16c4:	0e 94 26 0b 	call	0x164c	; 0x164c <decVolume>
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <incVolume>
    16ce:	00 00       	nop
    16d0:	0f 90       	pop	r0
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	08 95       	ret

000016d8 <initAudio>:
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <enableAudio>
    16e4:	80 e4       	ldi	r24, 0x40	; 64
    16e6:	0e 94 26 0b 	call	0x164c	; 0x164c <decVolume>
    16ea:	0e 94 c2 0a 	call	0x1584	; 0x1584 <standbyAudio>
    16ee:	00 00       	nop
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	08 95       	ret

000016f6 <initPWM>:
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <initPWM+0x6>
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	9a 81       	ldd	r25, Y+2	; 0x02
    1708:	81 15       	cp	r24, r1
    170a:	92 40       	sbci	r25, 0x02	; 2
    170c:	20 f0       	brcs	.+8      	; 0x1716 <initPWM+0x20>
    170e:	8f ef       	ldi	r24, 0xFF	; 255
    1710:	91 e0       	ldi	r25, 0x01	; 1
    1712:	9a 83       	std	Y+2, r25	; 0x02
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	80 e8       	ldi	r24, 0x80	; 128
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	22 e2       	ldi	r18, 0x22	; 34
    171c:	fc 01       	movw	r30, r24
    171e:	20 83       	st	Z, r18
    1720:	81 e8       	ldi	r24, 0x81	; 129
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	28 e0       	ldi	r18, 0x08	; 8
    1726:	fc 01       	movw	r30, r24
    1728:	20 83       	st	Z, r18
    172a:	84 e8       	ldi	r24, 0x84	; 132
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	fc 01       	movw	r30, r24
    1730:	11 82       	std	Z+1, r1	; 0x01
    1732:	10 82       	st	Z, r1
    1734:	8a e8       	ldi	r24, 0x8A	; 138
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	29 81       	ldd	r18, Y+1	; 0x01
    173a:	3a 81       	ldd	r19, Y+2	; 0x02
    173c:	fc 01       	movw	r30, r24
    173e:	31 83       	std	Z+1, r19	; 0x01
    1740:	20 83       	st	Z, r18
    1742:	8f e6       	ldi	r24, 0x6F	; 111
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	fc 01       	movw	r30, r24
    1748:	10 82       	st	Z, r1
    174a:	00 00       	nop
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	08 95       	ret

00001756 <startPWM>:
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	81 e8       	ldi	r24, 0x81	; 129
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	21 e8       	ldi	r18, 0x81	; 129
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	f9 01       	movw	r30, r18
    1768:	20 81       	ld	r18, Z
    176a:	21 60       	ori	r18, 0x01	; 1
    176c:	fc 01       	movw	r30, r24
    176e:	20 83       	st	Z, r18
    1770:	00 00       	nop
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	08 95       	ret

00001778 <setPWMDutyPercent>:
    1778:	8f 92       	push	r8
    177a:	9f 92       	push	r9
    177c:	af 92       	push	r10
    177e:	bf 92       	push	r11
    1780:	cf 92       	push	r12
    1782:	df 92       	push	r13
    1784:	ef 92       	push	r14
    1786:	ff 92       	push	r15
    1788:	0f 93       	push	r16
    178a:	1f 93       	push	r17
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	1f 92       	push	r1
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	85 36       	cpi	r24, 0x65	; 101
    179c:	10 f0       	brcs	.+4      	; 0x17a2 <setPWMDutyPercent+0x2a>
    179e:	84 e6       	ldi	r24, 0x64	; 100
    17a0:	89 83       	std	Y+1, r24	; 0x01
    17a2:	0f 2e       	mov	r0, r31
    17a4:	fa e8       	ldi	r31, 0x8A	; 138
    17a6:	8f 2e       	mov	r8, r31
    17a8:	91 2c       	mov	r9, r1
    17aa:	f0 2d       	mov	r31, r0
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	88 2f       	mov	r24, r24
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	a0 e0       	ldi	r26, 0x00	; 0
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	1f 92       	push	r1
    17b8:	1f 92       	push	r1
    17ba:	21 e0       	ldi	r18, 0x01	; 1
    17bc:	2f 93       	push	r18
    17be:	2f ef       	ldi	r18, 0xFF	; 255
    17c0:	2f 93       	push	r18
    17c2:	a1 2c       	mov	r10, r1
    17c4:	b1 2c       	mov	r11, r1
    17c6:	65 01       	movw	r12, r10
    17c8:	14 e6       	ldi	r17, 0x64	; 100
    17ca:	e1 2e       	mov	r14, r17
    17cc:	f1 2c       	mov	r15, r1
    17ce:	00 e0       	ldi	r16, 0x00	; 0
    17d0:	10 e0       	ldi	r17, 0x00	; 0
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	a9 01       	movw	r20, r18
    17d8:	bc 01       	movw	r22, r24
    17da:	cd 01       	movw	r24, r26
    17dc:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <Map>
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	f4 01       	movw	r30, r8
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	80 83       	st	Z, r24
    17f2:	00 00       	nop
    17f4:	0f 90       	pop	r0
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	1f 91       	pop	r17
    17fc:	0f 91       	pop	r16
    17fe:	ff 90       	pop	r15
    1800:	ef 90       	pop	r14
    1802:	df 90       	pop	r13
    1804:	cf 90       	pop	r12
    1806:	bf 90       	pop	r11
    1808:	af 90       	pop	r10
    180a:	9f 90       	pop	r9
    180c:	8f 90       	pop	r8
    180e:	08 95       	ret

00001810 <setPWMDuty>:
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	00 d0       	rcall	.+0      	; 0x1816 <setPWMDuty+0x6>
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	9a 83       	std	Y+2, r25	; 0x02
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	9a 81       	ldd	r25, Y+2	; 0x02
    1822:	81 15       	cp	r24, r1
    1824:	92 40       	sbci	r25, 0x02	; 2
    1826:	20 f0       	brcs	.+8      	; 0x1830 <setPWMDuty+0x20>
    1828:	8f ef       	ldi	r24, 0xFF	; 255
    182a:	91 e0       	ldi	r25, 0x01	; 1
    182c:	9a 83       	std	Y+2, r25	; 0x02
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	8a e8       	ldi	r24, 0x8A	; 138
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	29 81       	ldd	r18, Y+1	; 0x01
    1836:	3a 81       	ldd	r19, Y+2	; 0x02
    1838:	fc 01       	movw	r30, r24
    183a:	31 83       	std	Z+1, r19	; 0x01
    183c:	20 83       	st	Z, r18
    183e:	00 00       	nop
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	08 95       	ret

0000184a <adcInit>:
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	81 e2       	ldi	r24, 0x21	; 33
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	21 e2       	ldi	r18, 0x21	; 33
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	f9 01       	movw	r30, r18
    185c:	20 81       	ld	r18, Z
    185e:	2e 7f       	andi	r18, 0xFE	; 254
    1860:	fc 01       	movw	r30, r24
    1862:	20 83       	st	Z, r18
    1864:	8e e7       	ldi	r24, 0x7E	; 126
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	2e e7       	ldi	r18, 0x7E	; 126
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	f9 01       	movw	r30, r18
    186e:	20 81       	ld	r18, Z
    1870:	21 60       	ori	r18, 0x01	; 1
    1872:	fc 01       	movw	r30, r24
    1874:	20 83       	st	Z, r18
    1876:	8c e7       	ldi	r24, 0x7C	; 124
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	20 e6       	ldi	r18, 0x60	; 96
    187c:	fc 01       	movw	r30, r24
    187e:	20 83       	st	Z, r18
    1880:	8a e7       	ldi	r24, 0x7A	; 122
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	27 e3       	ldi	r18, 0x37	; 55
    1886:	fc 01       	movw	r30, r24
    1888:	20 83       	st	Z, r18
    188a:	8b e7       	ldi	r24, 0x7B	; 123
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	fc 01       	movw	r30, r24
    1890:	10 82       	st	Z, r1
    1892:	8a e7       	ldi	r24, 0x7A	; 122
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	2a e7       	ldi	r18, 0x7A	; 122
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	f9 01       	movw	r30, r18
    189c:	20 81       	ld	r18, Z
    189e:	20 68       	ori	r18, 0x80	; 128
    18a0:	fc 01       	movw	r30, r24
    18a2:	20 83       	st	Z, r18
    18a4:	8a e7       	ldi	r24, 0x7A	; 122
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	2a e7       	ldi	r18, 0x7A	; 122
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	f9 01       	movw	r30, r18
    18ae:	20 81       	ld	r18, Z
    18b0:	20 64       	ori	r18, 0x40	; 64
    18b2:	fc 01       	movw	r30, r24
    18b4:	20 83       	st	Z, r18
    18b6:	00 00       	nop
    18b8:	df 91       	pop	r29
    18ba:	cf 91       	pop	r28
    18bc:	08 95       	ret

000018be <adcGetTemperature>:

uint8_t adcGetTemperature(void)
{
    18be:	af 92       	push	r10
    18c0:	bf 92       	push	r11
    18c2:	cf 92       	push	r12
    18c4:	df 92       	push	r13
    18c6:	ef 92       	push	r14
    18c8:	ff 92       	push	r15
    18ca:	0f 93       	push	r16
    18cc:	1f 93       	push	r17
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <adcGetTemperature+0x16>
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <adcGetTemperature+0x18>
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
	int32_t s32Temp;
	
	s32Temp = Map((int32_t)ADCH,0,255,-50,450);
    18da:	89 e7       	ldi	r24, 0x79	; 121
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	fc 01       	movw	r30, r24
    18e0:	80 81       	ld	r24, Z
    18e2:	88 2f       	mov	r24, r24
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	a0 e0       	ldi	r26, 0x00	; 0
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	1f 92       	push	r1
    18ec:	1f 92       	push	r1
    18ee:	21 e0       	ldi	r18, 0x01	; 1
    18f0:	2f 93       	push	r18
    18f2:	22 ec       	ldi	r18, 0xC2	; 194
    18f4:	2f 93       	push	r18
    18f6:	0f 2e       	mov	r0, r31
    18f8:	fe ec       	ldi	r31, 0xCE	; 206
    18fa:	af 2e       	mov	r10, r31
    18fc:	bb 24       	eor	r11, r11
    18fe:	ba 94       	dec	r11
    1900:	cb 2c       	mov	r12, r11
    1902:	db 2c       	mov	r13, r11
    1904:	f0 2d       	mov	r31, r0
    1906:	e1 2c       	mov	r14, r1
    1908:	f1 2c       	mov	r15, r1
    190a:	87 01       	movw	r16, r14
    190c:	ea 94       	dec	r14
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	a9 01       	movw	r20, r18
    1914:	bc 01       	movw	r22, r24
    1916:	cd 01       	movw	r24, r26
    1918:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <Map>
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	89 83       	std	Y+1, r24	; 0x01
    192a:	9a 83       	std	Y+2, r25	; 0x02
    192c:	ab 83       	std	Y+3, r26	; 0x03
    192e:	bc 83       	std	Y+4, r27	; 0x04
	if(s32Temp<0)
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	ab 81       	ldd	r26, Y+3	; 0x03
    1936:	bc 81       	ldd	r27, Y+4	; 0x04
    1938:	bb 23       	and	r27, r27
    193a:	2c f4       	brge	.+10     	; 0x1946 <adcGetTemperature+0x88>
	{
		s32Temp = 0;
    193c:	19 82       	std	Y+1, r1	; 0x01
    193e:	1a 82       	std	Y+2, r1	; 0x02
    1940:	1b 82       	std	Y+3, r1	; 0x03
    1942:	1c 82       	std	Y+4, r1	; 0x04
    1944:	12 c0       	rjmp	.+36     	; 0x196a <adcGetTemperature+0xac>
	}
	else if(s32Temp>255)
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	9a 81       	ldd	r25, Y+2	; 0x02
    194a:	ab 81       	ldd	r26, Y+3	; 0x03
    194c:	bc 81       	ldd	r27, Y+4	; 0x04
    194e:	8f 3f       	cpi	r24, 0xFF	; 255
    1950:	91 05       	cpc	r25, r1
    1952:	a1 05       	cpc	r26, r1
    1954:	b1 05       	cpc	r27, r1
    1956:	49 f0       	breq	.+18     	; 0x196a <adcGetTemperature+0xac>
    1958:	44 f0       	brlt	.+16     	; 0x196a <adcGetTemperature+0xac>
	{
		s32Temp = 255;
    195a:	8f ef       	ldi	r24, 0xFF	; 255
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	a0 e0       	ldi	r26, 0x00	; 0
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	9a 83       	std	Y+2, r25	; 0x02
    1966:	ab 83       	std	Y+3, r26	; 0x03
    1968:	bc 83       	std	Y+4, r27	; 0x04
	}
	return (uint8_t)s32Temp;
    196a:	89 81       	ldd	r24, Y+1	; 0x01
}
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	1f 91       	pop	r17
    197a:	0f 91       	pop	r16
    197c:	ff 90       	pop	r15
    197e:	ef 90       	pop	r14
    1980:	df 90       	pop	r13
    1982:	cf 90       	pop	r12
    1984:	bf 90       	pop	r11
    1986:	af 90       	pop	r10
    1988:	08 95       	ret

0000198a <INT_5ms_Init>:

///////////////////////////////////////////////////////////////////////////////
// UTILITIES
///////////////////////////////////////////////////////////////////////////////
void INT_5ms_Init(void)
{
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
	TCCR2A = (1<<WGM21);	// mode: CTC
    1992:	80 eb       	ldi	r24, 0xB0	; 176
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	22 e0       	ldi	r18, 0x02	; 2
    1998:	fc 01       	movw	r30, r24
    199a:	20 83       	st	Z, r18
	TCCR2B = 0;				// mode: CTC, clock off
    199c:	81 eb       	ldi	r24, 0xB1	; 177
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	fc 01       	movw	r30, r24
    19a2:	10 82       	st	Z, r1
	TCNT2 = 0;
    19a4:	82 eb       	ldi	r24, 0xB2	; 178
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	fc 01       	movw	r30, r24
    19aa:	10 82       	st	Z, r1
	OCR2A = 96;
    19ac:	83 eb       	ldi	r24, 0xB3	; 179
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	20 e6       	ldi	r18, 0x60	; 96
    19b2:	fc 01       	movw	r30, r24
    19b4:	20 83       	st	Z, r18
	TIMSK2 = (1<<OCIE2A);
    19b6:	80 e7       	ldi	r24, 0x70	; 112
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	22 e0       	ldi	r18, 0x02	; 2
    19bc:	fc 01       	movw	r30, r24
    19be:	20 83       	st	Z, r18
	TIFR2 = (1<<OCF2A);
    19c0:	87 e3       	ldi	r24, 0x37	; 55
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	22 e0       	ldi	r18, 0x02	; 2
    19c6:	fc 01       	movw	r30, r24
    19c8:	20 83       	st	Z, r18

	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);
    19ca:	81 eb       	ldi	r24, 0xB1	; 177
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	21 eb       	ldi	r18, 0xB1	; 177
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	f9 01       	movw	r30, r18
    19d4:	20 81       	ld	r18, Z
    19d6:	27 60       	ori	r18, 0x07	; 7
    19d8:	fc 01       	movw	r30, r24
    19da:	20 83       	st	Z, r18
}
    19dc:	00 00       	nop
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	08 95       	ret

000019e4 <wait_1ms>:
 *
 * @param [in] uiFactor: 1ms multiplier
 * @return no return value
 *****************************************************************************/
void wait_1ms(uint16_t uiFactor)
{
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <wait_1ms+0x6>
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <wait_1ms+0x8>
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	9c 83       	std	Y+4, r25	; 0x04
    19f2:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t i;
	TCCR0A = (1<<WGM01);	// mode: CTC
    19f4:	84 e4       	ldi	r24, 0x44	; 68
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	22 e0       	ldi	r18, 0x02	; 2
    19fa:	fc 01       	movw	r30, r24
    19fc:	20 83       	st	Z, r18
	TCCR0B = 0;				// mode: CTC
    19fe:	85 e4       	ldi	r24, 0x45	; 69
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	fc 01       	movw	r30, r24
    1a04:	10 82       	st	Z, r1
	TIFR0 =  (1<<OCF0A);	// only OCFA flag needs to be cleared
    1a06:	85 e3       	ldi	r24, 0x35	; 53
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	22 e0       	ldi	r18, 0x02	; 2
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	20 83       	st	Z, r18
	TIMSK0 = 0;				// no interrupts
    1a10:	8e e6       	ldi	r24, 0x6E	; 110
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	fc 01       	movw	r30, r24
    1a16:	10 82       	st	Z, r1
	TCNT0 = 0;
    1a18:	86 e4       	ldi	r24, 0x46	; 70
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	10 82       	st	Z, r1
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
    1a20:	87 e4       	ldi	r24, 0x47	; 71
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	2d e4       	ldi	r18, 0x4D	; 77
    1a26:	fc 01       	movw	r30, r24
    1a28:	20 83       	st	Z, r18
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
    1a2a:	85 e4       	ldi	r24, 0x45	; 69
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	25 e4       	ldi	r18, 0x45	; 69
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	f9 01       	movw	r30, r18
    1a34:	20 81       	ld	r18, Z
    1a36:	24 60       	ori	r18, 0x04	; 4
    1a38:	fc 01       	movw	r30, r24
    1a3a:	20 83       	st	Z, r18
	
	for(i=0;i<uiFactor;i++)
    1a3c:	1a 82       	std	Y+2, r1	; 0x02
    1a3e:	19 82       	std	Y+1, r1	; 0x01
    1a40:	15 c0       	rjmp	.+42     	; 0x1a6c <wait_1ms+0x88>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
    1a42:	00 00       	nop
    1a44:	85 e3       	ldi	r24, 0x35	; 53
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	fc 01       	movw	r30, r24
    1a4a:	80 81       	ld	r24, Z
    1a4c:	88 2f       	mov	r24, r24
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	82 70       	andi	r24, 0x02	; 2
    1a52:	99 27       	eor	r25, r25
    1a54:	89 2b       	or	r24, r25
    1a56:	b1 f3       	breq	.-20     	; 0x1a44 <wait_1ms+0x60>
		TIFR0 =  (1<<OCF0A);		// clear flag
    1a58:	85 e3       	ldi	r24, 0x35	; 53
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	22 e0       	ldi	r18, 0x02	; 2
    1a5e:	fc 01       	movw	r30, r24
    1a60:	20 83       	st	Z, r18
	TCNT0 = 0;
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
	
	for(i=0;i<uiFactor;i++)
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	9a 81       	ldd	r25, Y+2	; 0x02
    1a66:	01 96       	adiw	r24, 0x01	; 1
    1a68:	9a 83       	std	Y+2, r25	; 0x02
    1a6a:	89 83       	std	Y+1, r24	; 0x01
    1a6c:	29 81       	ldd	r18, Y+1	; 0x01
    1a6e:	3a 81       	ldd	r19, Y+2	; 0x02
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	9c 81       	ldd	r25, Y+4	; 0x04
    1a74:	28 17       	cp	r18, r24
    1a76:	39 07       	cpc	r19, r25
    1a78:	20 f3       	brcs	.-56     	; 0x1a42 <wait_1ms+0x5e>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
		TIFR0 =  (1<<OCF0A);		// clear flag
	}
	TCCR0B &= ~(0x07);	// set prescaler to 0 (stop timer)
    1a7a:	85 e4       	ldi	r24, 0x45	; 69
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	25 e4       	ldi	r18, 0x45	; 69
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	f9 01       	movw	r30, r18
    1a84:	20 81       	ld	r18, Z
    1a86:	28 7f       	andi	r18, 0xF8	; 248
    1a88:	fc 01       	movw	r30, r24
    1a8a:	20 83       	st	Z, r18
}
    1a8c:	00 00       	nop
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	08 95       	ret

00001a9c <Map>:
 * @param [in] s32OutMin: minimal value of output range
 * @param [in] s32OutMax: maximal value of output range
 * @return data in new number range
 *****************************************************************************/
int32_t Map(int32_t s32Data, int32_t s32InMin, int32_t s32InMax, int32_t s32OutMin, int32_t s32OutMax)
{
    1a9c:	af 92       	push	r10
    1a9e:	bf 92       	push	r11
    1aa0:	cf 92       	push	r12
    1aa2:	df 92       	push	r13
    1aa4:	ef 92       	push	r14
    1aa6:	ff 92       	push	r15
    1aa8:	0f 93       	push	r16
    1aaa:	1f 93       	push	r17
    1aac:	cf 93       	push	r28
    1aae:	df 93       	push	r29
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	60 97       	sbiw	r28, 0x10	; 16
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	69 83       	std	Y+1, r22	; 0x01
    1ac2:	7a 83       	std	Y+2, r23	; 0x02
    1ac4:	8b 83       	std	Y+3, r24	; 0x03
    1ac6:	9c 83       	std	Y+4, r25	; 0x04
    1ac8:	2d 83       	std	Y+5, r18	; 0x05
    1aca:	3e 83       	std	Y+6, r19	; 0x06
    1acc:	4f 83       	std	Y+7, r20	; 0x07
    1ace:	58 87       	std	Y+8, r21	; 0x08
    1ad0:	e9 86       	std	Y+9, r14	; 0x09
    1ad2:	fa 86       	std	Y+10, r15	; 0x0a
    1ad4:	0b 87       	std	Y+11, r16	; 0x0b
    1ad6:	1c 87       	std	Y+12, r17	; 0x0c
    1ad8:	ad 86       	std	Y+13, r10	; 0x0d
    1ada:	be 86       	std	Y+14, r11	; 0x0e
    1adc:	cf 86       	std	Y+15, r12	; 0x0f
    1ade:	d8 8a       	std	Y+16, r13	; 0x10
	return((s32Data-s32InMin)*(s32OutMax-s32OutMin)/(s32InMax-s32InMin)+s32OutMin);
    1ae0:	29 81       	ldd	r18, Y+1	; 0x01
    1ae2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ae4:	4b 81       	ldd	r20, Y+3	; 0x03
    1ae6:	5c 81       	ldd	r21, Y+4	; 0x04
    1ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aea:	9e 81       	ldd	r25, Y+6	; 0x06
    1aec:	af 81       	ldd	r26, Y+7	; 0x07
    1aee:	b8 85       	ldd	r27, Y+8	; 0x08
    1af0:	79 01       	movw	r14, r18
    1af2:	8a 01       	movw	r16, r20
    1af4:	e8 1a       	sub	r14, r24
    1af6:	f9 0a       	sbc	r15, r25
    1af8:	0a 0b       	sbc	r16, r26
    1afa:	1b 0b       	sbc	r17, r27
    1afc:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1afe:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1b00:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1b02:	58 a1       	ldd	r21, Y+32	; 0x20
    1b04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b08:	af 85       	ldd	r26, Y+15	; 0x0f
    1b0a:	b8 89       	ldd	r27, Y+16	; 0x10
    1b0c:	59 01       	movw	r10, r18
    1b0e:	6a 01       	movw	r12, r20
    1b10:	a8 1a       	sub	r10, r24
    1b12:	b9 0a       	sbc	r11, r25
    1b14:	ca 0a       	sbc	r12, r26
    1b16:	db 0a       	sbc	r13, r27
    1b18:	d6 01       	movw	r26, r12
    1b1a:	c5 01       	movw	r24, r10
    1b1c:	a8 01       	movw	r20, r16
    1b1e:	97 01       	movw	r18, r14
    1b20:	bc 01       	movw	r22, r24
    1b22:	cd 01       	movw	r24, r26
    1b24:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__mulsi3>
    1b28:	7b 01       	movw	r14, r22
    1b2a:	8c 01       	movw	r16, r24
    1b2c:	29 85       	ldd	r18, Y+9	; 0x09
    1b2e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b30:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b32:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b34:	8d 81       	ldd	r24, Y+5	; 0x05
    1b36:	9e 81       	ldd	r25, Y+6	; 0x06
    1b38:	af 81       	ldd	r26, Y+7	; 0x07
    1b3a:	b8 85       	ldd	r27, Y+8	; 0x08
    1b3c:	28 1b       	sub	r18, r24
    1b3e:	39 0b       	sbc	r19, r25
    1b40:	4a 0b       	sbc	r20, r26
    1b42:	5b 0b       	sbc	r21, r27
    1b44:	c8 01       	movw	r24, r16
    1b46:	b7 01       	movw	r22, r14
    1b48:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__divmodsi4>
    1b4c:	da 01       	movw	r26, r20
    1b4e:	c9 01       	movw	r24, r18
    1b50:	9c 01       	movw	r18, r24
    1b52:	ad 01       	movw	r20, r26
    1b54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b58:	af 85       	ldd	r26, Y+15	; 0x0f
    1b5a:	b8 89       	ldd	r27, Y+16	; 0x10
    1b5c:	82 0f       	add	r24, r18
    1b5e:	93 1f       	adc	r25, r19
    1b60:	a4 1f       	adc	r26, r20
    1b62:	b5 1f       	adc	r27, r21
}
    1b64:	bc 01       	movw	r22, r24
    1b66:	cd 01       	movw	r24, r26
    1b68:	60 96       	adiw	r28, 0x10	; 16
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	1f 91       	pop	r17
    1b7a:	0f 91       	pop	r16
    1b7c:	ff 90       	pop	r15
    1b7e:	ef 90       	pop	r14
    1b80:	df 90       	pop	r13
    1b82:	cf 90       	pop	r12
    1b84:	bf 90       	pop	r11
    1b86:	af 90       	pop	r10
    1b88:	08 95       	ret

00001b8a <CRC8>:

uint8_t CRC8(uint8_t* au8Data, uint8_t u8Length)
{
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	28 97       	sbiw	r28, 0x08	; 8
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	9f 83       	std	Y+7, r25	; 0x07
    1ba0:	8e 83       	std	Y+6, r24	; 0x06
    1ba2:	68 87       	std	Y+8, r22	; 0x08
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;
    1ba4:	19 82       	std	Y+1, r1	; 0x01

	for(i=0;i<u8Length;i++)
    1ba6:	1a 82       	std	Y+2, r1	; 0x02
    1ba8:	27 c0       	rjmp	.+78     	; 0x1bf8 <CRC8+0x6e>
	{
		u8InByte = au8Data[i];
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	88 2f       	mov	r24, r24
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	2e 81       	ldd	r18, Y+6	; 0x06
    1bb2:	3f 81       	ldd	r19, Y+7	; 0x07
    1bb4:	82 0f       	add	r24, r18
    1bb6:	93 1f       	adc	r25, r19
    1bb8:	fc 01       	movw	r30, r24
    1bba:	80 81       	ld	r24, Z
    1bbc:	8c 83       	std	Y+4, r24	; 0x04
		for(j=0;j<8;j++)
    1bbe:	1b 82       	std	Y+3, r1	; 0x03
    1bc0:	15 c0       	rjmp	.+42     	; 0x1bec <CRC8+0x62>
		{
			u8Temp = (u8CRC^u8InByte)&0x80;
    1bc2:	99 81       	ldd	r25, Y+1	; 0x01
    1bc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc6:	89 27       	eor	r24, r25
    1bc8:	80 78       	andi	r24, 0x80	; 128
    1bca:	8d 83       	std	Y+5, r24	; 0x05
			u8CRC <<= 1;
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	88 0f       	add	r24, r24
    1bd0:	89 83       	std	Y+1, r24	; 0x01
			if(u8Temp!=0)
    1bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd4:	88 23       	and	r24, r24
    1bd6:	21 f0       	breq	.+8      	; 0x1be0 <CRC8+0x56>
			{
				u8CRC ^= 0x07;
    1bd8:	99 81       	ldd	r25, Y+1	; 0x01
    1bda:	87 e0       	ldi	r24, 0x07	; 7
    1bdc:	89 27       	eor	r24, r25
    1bde:	89 83       	std	Y+1, r24	; 0x01
			}
			u8InByte<<=1;
    1be0:	8c 81       	ldd	r24, Y+4	; 0x04
    1be2:	88 0f       	add	r24, r24
    1be4:	8c 83       	std	Y+4, r24	; 0x04
	u8CRC = 0;

	for(i=0;i<u8Length;i++)
	{
		u8InByte = au8Data[i];
		for(j=0;j<8;j++)
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	8f 5f       	subi	r24, 0xFF	; 255
    1bea:	8b 83       	std	Y+3, r24	; 0x03
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	88 30       	cpi	r24, 0x08	; 8
    1bf0:	40 f3       	brcs	.-48     	; 0x1bc2 <CRC8+0x38>
{
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;

	for(i=0;i<u8Length;i++)
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	8f 5f       	subi	r24, 0xFF	; 255
    1bf6:	8a 83       	std	Y+2, r24	; 0x02
    1bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfa:	88 85       	ldd	r24, Y+8	; 0x08
    1bfc:	98 17       	cp	r25, r24
    1bfe:	a8 f2       	brcs	.-86     	; 0x1baa <CRC8+0x20>
			}
			u8InByte<<=1;
		}
	}

	return u8CRC;
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c02:	28 96       	adiw	r28, 0x08	; 8
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	08 95       	ret

00001c14 <__mulsi3>:
    1c14:	db 01       	movw	r26, r22
    1c16:	8f 93       	push	r24
    1c18:	9f 93       	push	r25
    1c1a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__muluhisi3>
    1c1e:	bf 91       	pop	r27
    1c20:	af 91       	pop	r26
    1c22:	a2 9f       	mul	r26, r18
    1c24:	80 0d       	add	r24, r0
    1c26:	91 1d       	adc	r25, r1
    1c28:	a3 9f       	mul	r26, r19
    1c2a:	90 0d       	add	r25, r0
    1c2c:	b2 9f       	mul	r27, r18
    1c2e:	90 0d       	add	r25, r0
    1c30:	11 24       	eor	r1, r1
    1c32:	08 95       	ret

00001c34 <__udivmodhi4>:
    1c34:	aa 1b       	sub	r26, r26
    1c36:	bb 1b       	sub	r27, r27
    1c38:	51 e1       	ldi	r21, 0x11	; 17
    1c3a:	07 c0       	rjmp	.+14     	; 0x1c4a <__udivmodhi4_ep>

00001c3c <__udivmodhi4_loop>:
    1c3c:	aa 1f       	adc	r26, r26
    1c3e:	bb 1f       	adc	r27, r27
    1c40:	a6 17       	cp	r26, r22
    1c42:	b7 07       	cpc	r27, r23
    1c44:	10 f0       	brcs	.+4      	; 0x1c4a <__udivmodhi4_ep>
    1c46:	a6 1b       	sub	r26, r22
    1c48:	b7 0b       	sbc	r27, r23

00001c4a <__udivmodhi4_ep>:
    1c4a:	88 1f       	adc	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	5a 95       	dec	r21
    1c50:	a9 f7       	brne	.-22     	; 0x1c3c <__udivmodhi4_loop>
    1c52:	80 95       	com	r24
    1c54:	90 95       	com	r25
    1c56:	bc 01       	movw	r22, r24
    1c58:	cd 01       	movw	r24, r26
    1c5a:	08 95       	ret

00001c5c <__divmodsi4>:
    1c5c:	05 2e       	mov	r0, r21
    1c5e:	97 fb       	bst	r25, 7
    1c60:	1e f4       	brtc	.+6      	; 0x1c68 <__divmodsi4+0xc>
    1c62:	00 94       	com	r0
    1c64:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__negsi2>
    1c68:	57 fd       	sbrc	r21, 7
    1c6a:	07 d0       	rcall	.+14     	; 0x1c7a <__divmodsi4_neg2>
    1c6c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__udivmodsi4>
    1c70:	07 fc       	sbrc	r0, 7
    1c72:	03 d0       	rcall	.+6      	; 0x1c7a <__divmodsi4_neg2>
    1c74:	4e f4       	brtc	.+18     	; 0x1c88 <__divmodsi4_exit>
    1c76:	0c 94 45 0e 	jmp	0x1c8a	; 0x1c8a <__negsi2>

00001c7a <__divmodsi4_neg2>:
    1c7a:	50 95       	com	r21
    1c7c:	40 95       	com	r20
    1c7e:	30 95       	com	r19
    1c80:	21 95       	neg	r18
    1c82:	3f 4f       	sbci	r19, 0xFF	; 255
    1c84:	4f 4f       	sbci	r20, 0xFF	; 255
    1c86:	5f 4f       	sbci	r21, 0xFF	; 255

00001c88 <__divmodsi4_exit>:
    1c88:	08 95       	ret

00001c8a <__negsi2>:
    1c8a:	90 95       	com	r25
    1c8c:	80 95       	com	r24
    1c8e:	70 95       	com	r23
    1c90:	61 95       	neg	r22
    1c92:	7f 4f       	sbci	r23, 0xFF	; 255
    1c94:	8f 4f       	sbci	r24, 0xFF	; 255
    1c96:	9f 4f       	sbci	r25, 0xFF	; 255
    1c98:	08 95       	ret

00001c9a <__tablejump2__>:
    1c9a:	ee 0f       	add	r30, r30
    1c9c:	ff 1f       	adc	r31, r31
    1c9e:	05 90       	lpm	r0, Z+
    1ca0:	f4 91       	lpm	r31, Z
    1ca2:	e0 2d       	mov	r30, r0
    1ca4:	09 94       	ijmp

00001ca6 <__muluhisi3>:
    1ca6:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__umulhisi3>
    1caa:	a5 9f       	mul	r26, r21
    1cac:	90 0d       	add	r25, r0
    1cae:	b4 9f       	mul	r27, r20
    1cb0:	90 0d       	add	r25, r0
    1cb2:	a4 9f       	mul	r26, r20
    1cb4:	80 0d       	add	r24, r0
    1cb6:	91 1d       	adc	r25, r1
    1cb8:	11 24       	eor	r1, r1
    1cba:	08 95       	ret

00001cbc <__udivmodsi4>:
    1cbc:	a1 e2       	ldi	r26, 0x21	; 33
    1cbe:	1a 2e       	mov	r1, r26
    1cc0:	aa 1b       	sub	r26, r26
    1cc2:	bb 1b       	sub	r27, r27
    1cc4:	fd 01       	movw	r30, r26
    1cc6:	0d c0       	rjmp	.+26     	; 0x1ce2 <__udivmodsi4_ep>

00001cc8 <__udivmodsi4_loop>:
    1cc8:	aa 1f       	adc	r26, r26
    1cca:	bb 1f       	adc	r27, r27
    1ccc:	ee 1f       	adc	r30, r30
    1cce:	ff 1f       	adc	r31, r31
    1cd0:	a2 17       	cp	r26, r18
    1cd2:	b3 07       	cpc	r27, r19
    1cd4:	e4 07       	cpc	r30, r20
    1cd6:	f5 07       	cpc	r31, r21
    1cd8:	20 f0       	brcs	.+8      	; 0x1ce2 <__udivmodsi4_ep>
    1cda:	a2 1b       	sub	r26, r18
    1cdc:	b3 0b       	sbc	r27, r19
    1cde:	e4 0b       	sbc	r30, r20
    1ce0:	f5 0b       	sbc	r31, r21

00001ce2 <__udivmodsi4_ep>:
    1ce2:	66 1f       	adc	r22, r22
    1ce4:	77 1f       	adc	r23, r23
    1ce6:	88 1f       	adc	r24, r24
    1ce8:	99 1f       	adc	r25, r25
    1cea:	1a 94       	dec	r1
    1cec:	69 f7       	brne	.-38     	; 0x1cc8 <__udivmodsi4_loop>
    1cee:	60 95       	com	r22
    1cf0:	70 95       	com	r23
    1cf2:	80 95       	com	r24
    1cf4:	90 95       	com	r25
    1cf6:	9b 01       	movw	r18, r22
    1cf8:	ac 01       	movw	r20, r24
    1cfa:	bd 01       	movw	r22, r26
    1cfc:	cf 01       	movw	r24, r30
    1cfe:	08 95       	ret

00001d00 <__umulhisi3>:
    1d00:	a2 9f       	mul	r26, r18
    1d02:	b0 01       	movw	r22, r0
    1d04:	b3 9f       	mul	r27, r19
    1d06:	c0 01       	movw	r24, r0
    1d08:	a3 9f       	mul	r26, r19
    1d0a:	70 0d       	add	r23, r0
    1d0c:	81 1d       	adc	r24, r1
    1d0e:	11 24       	eor	r1, r1
    1d10:	91 1d       	adc	r25, r1
    1d12:	b2 9f       	mul	r27, r18
    1d14:	70 0d       	add	r23, r0
    1d16:	81 1d       	adc	r24, r1
    1d18:	11 24       	eor	r1, r1
    1d1a:	91 1d       	adc	r25, r1
    1d1c:	08 95       	ret

00001d1e <strlen>:
    1d1e:	fc 01       	movw	r30, r24
    1d20:	01 90       	ld	r0, Z+
    1d22:	00 20       	and	r0, r0
    1d24:	e9 f7       	brne	.-6      	; 0x1d20 <strlen+0x2>
    1d26:	80 95       	com	r24
    1d28:	90 95       	com	r25
    1d2a:	8e 0f       	add	r24, r30
    1d2c:	9f 1f       	adc	r25, r31
    1d2e:	08 95       	ret

00001d30 <_exit>:
    1d30:	f8 94       	cli

00001d32 <__stop_program>:
    1d32:	ff cf       	rjmp	.-2      	; 0x1d32 <__stop_program>
