
clusterwink_mk_ii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00002cda  00002d6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002cda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f5  0080013e  0080013e  00002dac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002dac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ddc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00002e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001499  00000000  00000000  00002fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b2f  00000000  00000000  0000444d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000185f  00000000  00000000  00004f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000720  00000000  00000000  000067dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009cd  00000000  00000000  00006efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f05  00000000  00000000  000078c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000087ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
       4:	0c 94 46 02 	jmp	0x48c	; 0x48c <__vector_1>
       8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      14:	0c 94 fd 06 	jmp	0xdfa	; 0xdfa <__vector_5>
      18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      24:	0c 94 05 04 	jmp	0x80a	; 0x80a <__vector_9>
      28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      40:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      48:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      4c:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__vector_19>
      50:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      54:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      68:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      6c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      70:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      74:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      78:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      7c:	d6 05       	cpc	r29, r6
      7e:	ef 05       	cpc	r30, r15
      80:	08 06       	cpc	r0, r24
      82:	c2 06       	cpc	r12, r18
      84:	de 06       	cpc	r13, r30
      86:	de 06       	cpc	r13, r30
      88:	de 06       	cpc	r13, r30
      8a:	62 07       	cpc	r22, r18
      8c:	6f 07       	cpc	r22, r31
      8e:	7c 07       	cpc	r23, r28
      90:	96 07       	cpc	r25, r22
      92:	99 07       	cpc	r25, r25
      94:	db 09       	sbc	r29, r11
      96:	db 09       	sbc	r29, r11
      98:	db 09       	sbc	r29, r11
      9a:	db 09       	sbc	r29, r11
      9c:	db 09       	sbc	r29, r11
      9e:	db 09       	sbc	r29, r11
      a0:	db 09       	sbc	r29, r11
      a2:	db 09       	sbc	r29, r11
      a4:	db 09       	sbc	r29, r11
      a6:	db 09       	sbc	r29, r11
      a8:	db 09       	sbc	r29, r11
      aa:	83 08       	sbc	r8, r3
      ac:	90 08       	sbc	r9, r0
      ae:	9d 08       	sbc	r9, r13
      b0:	db 09       	sbc	r29, r11
      b2:	db 09       	sbc	r29, r11
      b4:	db 09       	sbc	r29, r11
      b6:	db 09       	sbc	r29, r11
      b8:	db 09       	sbc	r29, r11
      ba:	db 09       	sbc	r29, r11
      bc:	db 09       	sbc	r29, r11
      be:	db 09       	sbc	r29, r11
      c0:	db 09       	sbc	r29, r11
      c2:	db 09       	sbc	r29, r11
      c4:	db 09       	sbc	r29, r11
      c6:	db 09       	sbc	r29, r11
      c8:	db 09       	sbc	r29, r11
      ca:	a7 08       	sbc	r10, r7
      cc:	b2 08       	sbc	r11, r2
      ce:	d5 08       	sbc	r13, r5
      d0:	db 09       	sbc	r29, r11
      d2:	db 09       	sbc	r29, r11
      d4:	db 09       	sbc	r29, r11
      d6:	db 09       	sbc	r29, r11
      d8:	db 09       	sbc	r29, r11
      da:	db 09       	sbc	r29, r11
      dc:	db 09       	sbc	r29, r11
      de:	db 09       	sbc	r29, r11
      e0:	db 09       	sbc	r29, r11
      e2:	db 09       	sbc	r29, r11
      e4:	db 09       	sbc	r29, r11
      e6:	db 09       	sbc	r29, r11
      e8:	db 09       	sbc	r29, r11
      ea:	0f 09       	sbc	r16, r15
      ec:	1a 09       	sbc	r17, r10
      ee:	63 09       	sbc	r22, r3

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d8 e0       	ldi	r29, 0x08	; 8
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_copy_data>:
      fc:	11 e0       	ldi	r17, 0x01	; 1
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	ea ed       	ldi	r30, 0xDA	; 218
     104:	fc e2       	ldi	r31, 0x2C	; 44
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x10>
     108:	05 90       	lpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	ae 33       	cpi	r26, 0x3E	; 62
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0xc>

00000112 <__do_clear_bss>:
     112:	22 e0       	ldi	r18, 0x02	; 2
     114:	ae e3       	ldi	r26, 0x3E	; 62
     116:	b1 e0       	ldi	r27, 0x01	; 1
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	a3 33       	cpi	r26, 0x33	; 51
     11e:	b2 07       	cpc	r27, r18
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>
     122:	0e 94 04 0a 	call	0x1408	; 0x1408 <main>
     126:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <_exit>

0000012a <__bad_interrupt>:
     12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
    cli();
     136:	f8 94       	cli
    return 1;
     138:	81 e0       	ldi	r24, 0x01	; 1
}
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	08 95       	ret

00000140 <__iRestore>:
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	00 d0       	rcall	.+0      	; 0x146 <__iRestore+0x6>
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	9a 83       	std	Y+2, r25	; 0x02
     14c:	89 83       	std	Y+1, r24	; 0x01
    SREG = *__s;
     14e:	8f e5       	ldi	r24, 0x5F	; 95
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	29 81       	ldd	r18, Y+1	; 0x01
     154:	3a 81       	ldd	r19, Y+2	; 0x02
     156:	f9 01       	movw	r30, r18
     158:	20 81       	ld	r18, Z
     15a:	fc 01       	movw	r30, r24
     15c:	20 83       	st	Z, r18
    __asm__ volatile ("" ::: "memory");
}
     15e:	0f 90       	pop	r0
     160:	0f 90       	pop	r0
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <RingBuffer_InitBuffer>:
		 *  by re-initializing them using this function.
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	00 d0       	rcall	.+0      	; 0x16e <RingBuffer_InitBuffer+0x6>
     16e:	00 d0       	rcall	.+0      	; 0x170 <RingBuffer_InitBuffer+0x8>
     170:	cd b7       	in	r28, 0x3d	; 61
     172:	de b7       	in	r29, 0x3e	; 62
     174:	9c 83       	std	Y+4, r25	; 0x04
     176:	8b 83       	std	Y+3, r24	; 0x03
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     178:	8f e5       	ldi	r24, 0x5F	; 95
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	fc 01       	movw	r30, r24
     17e:	80 81       	ld	r24, Z
     180:	8a 83       	std	Y+2, r24	; 0x02
     182:	0e 94 97 00 	call	0x12e	; 0x12e <__iCliRetVal>
     186:	89 83       	std	Y+1, r24	; 0x01
     188:	19 c0       	rjmp	.+50     	; 0x1bc <RingBuffer_InitBuffer+0x54>
			{
				Buffer->In    = Buffer->Buffer;
     18a:	2b 81       	ldd	r18, Y+3	; 0x03
     18c:	3c 81       	ldd	r19, Y+4	; 0x04
     18e:	8b 81       	ldd	r24, Y+3	; 0x03
     190:	9c 81       	ldd	r25, Y+4	; 0x04
     192:	80 58       	subi	r24, 0x80	; 128
     194:	9f 4f       	sbci	r25, 0xFF	; 255
     196:	fc 01       	movw	r30, r24
     198:	31 83       	std	Z+1, r19	; 0x01
     19a:	20 83       	st	Z, r18
				Buffer->Out   = Buffer->Buffer;
     19c:	2b 81       	ldd	r18, Y+3	; 0x03
     19e:	3c 81       	ldd	r19, Y+4	; 0x04
     1a0:	8b 81       	ldd	r24, Y+3	; 0x03
     1a2:	9c 81       	ldd	r25, Y+4	; 0x04
     1a4:	8e 57       	subi	r24, 0x7E	; 126
     1a6:	9f 4f       	sbci	r25, 0xFF	; 255
     1a8:	fc 01       	movw	r30, r24
     1aa:	31 83       	std	Z+1, r19	; 0x01
     1ac:	20 83       	st	Z, r18
				Buffer->Count = 0;
     1ae:	8b 81       	ldd	r24, Y+3	; 0x03
     1b0:	9c 81       	ldd	r25, Y+4	; 0x04
     1b2:	8c 57       	subi	r24, 0x7C	; 124
     1b4:	9f 4f       	sbci	r25, 0xFF	; 255
     1b6:	fc 01       	movw	r30, r24
     1b8:	10 82       	st	Z, r1
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     1ba:	19 82       	std	Y+1, r1	; 0x01
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	88 23       	and	r24, r24
     1c0:	21 f7       	brne	.-56     	; 0x18a <RingBuffer_InitBuffer+0x22>
     1c2:	ce 01       	movw	r24, r28
     1c4:	02 96       	adiw	r24, 0x02	; 2
     1c6:	0e 94 a0 00 	call	0x140	; 0x140 <__iRestore>
			{
				Buffer->In    = Buffer->Buffer;
				Buffer->Out   = Buffer->Buffer;
				Buffer->Count = 0;
			}
		}
     1ca:	0f 90       	pop	r0
     1cc:	0f 90       	pop	r0
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	08 95       	ret

000001d8 <RingBuffer_Insert>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	00 d0       	rcall	.+0      	; 0x1de <RingBuffer_Insert+0x6>
     1de:	00 d0       	rcall	.+0      	; 0x1e0 <RingBuffer_Insert+0x8>
     1e0:	1f 92       	push	r1
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
     1e6:	9c 83       	std	Y+4, r25	; 0x04
     1e8:	8b 83       	std	Y+3, r24	; 0x03
     1ea:	6d 83       	std	Y+5, r22	; 0x05
			*Buffer->In = Data;
     1ec:	8b 81       	ldd	r24, Y+3	; 0x03
     1ee:	9c 81       	ldd	r25, Y+4	; 0x04
     1f0:	80 58       	subi	r24, 0x80	; 128
     1f2:	9f 4f       	sbci	r25, 0xFF	; 255
     1f4:	fc 01       	movw	r30, r24
     1f6:	80 81       	ld	r24, Z
     1f8:	91 81       	ldd	r25, Z+1	; 0x01
     1fa:	2d 81       	ldd	r18, Y+5	; 0x05
     1fc:	fc 01       	movw	r30, r24
     1fe:	20 83       	st	Z, r18
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
     200:	8b 81       	ldd	r24, Y+3	; 0x03
     202:	9c 81       	ldd	r25, Y+4	; 0x04
     204:	80 58       	subi	r24, 0x80	; 128
     206:	9f 4f       	sbci	r25, 0xFF	; 255
     208:	fc 01       	movw	r30, r24
     20a:	80 81       	ld	r24, Z
     20c:	91 81       	ldd	r25, Z+1	; 0x01
     20e:	9c 01       	movw	r18, r24
     210:	2f 5f       	subi	r18, 0xFF	; 255
     212:	3f 4f       	sbci	r19, 0xFF	; 255
     214:	8b 81       	ldd	r24, Y+3	; 0x03
     216:	9c 81       	ldd	r25, Y+4	; 0x04
     218:	80 58       	subi	r24, 0x80	; 128
     21a:	9f 4f       	sbci	r25, 0xFF	; 255
     21c:	fc 01       	movw	r30, r24
     21e:	31 83       	std	Z+1, r19	; 0x01
     220:	20 83       	st	Z, r18
     222:	8b 81       	ldd	r24, Y+3	; 0x03
     224:	9c 81       	ldd	r25, Y+4	; 0x04
     226:	80 58       	subi	r24, 0x80	; 128
     228:	9f 4f       	sbci	r25, 0xFF	; 255
     22a:	fc 01       	movw	r30, r24
     22c:	20 81       	ld	r18, Z
     22e:	31 81       	ldd	r19, Z+1	; 0x01
     230:	8b 81       	ldd	r24, Y+3	; 0x03
     232:	9c 81       	ldd	r25, Y+4	; 0x04
     234:	80 58       	subi	r24, 0x80	; 128
     236:	9f 4f       	sbci	r25, 0xFF	; 255
     238:	28 17       	cp	r18, r24
     23a:	39 07       	cpc	r19, r25
     23c:	49 f4       	brne	.+18     	; 0x250 <RingBuffer_Insert+0x78>
			  Buffer->In = Buffer->Buffer;
     23e:	2b 81       	ldd	r18, Y+3	; 0x03
     240:	3c 81       	ldd	r19, Y+4	; 0x04
     242:	8b 81       	ldd	r24, Y+3	; 0x03
     244:	9c 81       	ldd	r25, Y+4	; 0x04
     246:	80 58       	subi	r24, 0x80	; 128
     248:	9f 4f       	sbci	r25, 0xFF	; 255
     24a:	fc 01       	movw	r30, r24
     24c:	31 83       	std	Z+1, r19	; 0x01
     24e:	20 83       	st	Z, r18

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     250:	8f e5       	ldi	r24, 0x5F	; 95
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	fc 01       	movw	r30, r24
     256:	80 81       	ld	r24, Z
     258:	8a 83       	std	Y+2, r24	; 0x02
     25a:	0e 94 97 00 	call	0x12e	; 0x12e <__iCliRetVal>
     25e:	89 83       	std	Y+1, r24	; 0x01
     260:	0f c0       	rjmp	.+30     	; 0x280 <RingBuffer_Insert+0xa8>
			{
				Buffer->Count++;
     262:	8b 81       	ldd	r24, Y+3	; 0x03
     264:	9c 81       	ldd	r25, Y+4	; 0x04
     266:	8c 57       	subi	r24, 0x7C	; 124
     268:	9f 4f       	sbci	r25, 0xFF	; 255
     26a:	fc 01       	movw	r30, r24
     26c:	80 81       	ld	r24, Z
     26e:	21 e0       	ldi	r18, 0x01	; 1
     270:	28 0f       	add	r18, r24
     272:	8b 81       	ldd	r24, Y+3	; 0x03
     274:	9c 81       	ldd	r25, Y+4	; 0x04
     276:	8c 57       	subi	r24, 0x7C	; 124
     278:	9f 4f       	sbci	r25, 0xFF	; 255
     27a:	fc 01       	movw	r30, r24
     27c:	20 83       	st	Z, r18
			*Buffer->In = Data;
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->In = Buffer->Buffer;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     27e:	19 82       	std	Y+1, r1	; 0x01
     280:	89 81       	ldd	r24, Y+1	; 0x01
     282:	88 23       	and	r24, r24
     284:	71 f7       	brne	.-36     	; 0x262 <RingBuffer_Insert+0x8a>
     286:	ce 01       	movw	r24, r28
     288:	02 96       	adiw	r24, 0x02	; 2
     28a:	0e 94 a0 00 	call	0x140	; 0x140 <__iRestore>
			{
				Buffer->Count++;
			}
		}
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	08 95       	ret

0000029e <RingBuffer_Remove>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to retrieve from
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <RingBuffer_Remove+0x6>
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <RingBuffer_Remove+0x8>
     2a6:	1f 92       	push	r1
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	9d 83       	std	Y+5, r25	; 0x05
     2ae:	8c 83       	std	Y+4, r24	; 0x04
			RingBuff_Data_t Data = *Buffer->Out;
     2b0:	8c 81       	ldd	r24, Y+4	; 0x04
     2b2:	9d 81       	ldd	r25, Y+5	; 0x05
     2b4:	8e 57       	subi	r24, 0x7E	; 126
     2b6:	9f 4f       	sbci	r25, 0xFF	; 255
     2b8:	fc 01       	movw	r30, r24
     2ba:	80 81       	ld	r24, Z
     2bc:	91 81       	ldd	r25, Z+1	; 0x01
     2be:	fc 01       	movw	r30, r24
     2c0:	80 81       	ld	r24, Z
     2c2:	8a 83       	std	Y+2, r24	; 0x02
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
     2c4:	8c 81       	ldd	r24, Y+4	; 0x04
     2c6:	9d 81       	ldd	r25, Y+5	; 0x05
     2c8:	8e 57       	subi	r24, 0x7E	; 126
     2ca:	9f 4f       	sbci	r25, 0xFF	; 255
     2cc:	fc 01       	movw	r30, r24
     2ce:	80 81       	ld	r24, Z
     2d0:	91 81       	ldd	r25, Z+1	; 0x01
     2d2:	9c 01       	movw	r18, r24
     2d4:	2f 5f       	subi	r18, 0xFF	; 255
     2d6:	3f 4f       	sbci	r19, 0xFF	; 255
     2d8:	8c 81       	ldd	r24, Y+4	; 0x04
     2da:	9d 81       	ldd	r25, Y+5	; 0x05
     2dc:	8e 57       	subi	r24, 0x7E	; 126
     2de:	9f 4f       	sbci	r25, 0xFF	; 255
     2e0:	fc 01       	movw	r30, r24
     2e2:	31 83       	std	Z+1, r19	; 0x01
     2e4:	20 83       	st	Z, r18
     2e6:	8c 81       	ldd	r24, Y+4	; 0x04
     2e8:	9d 81       	ldd	r25, Y+5	; 0x05
     2ea:	8e 57       	subi	r24, 0x7E	; 126
     2ec:	9f 4f       	sbci	r25, 0xFF	; 255
     2ee:	fc 01       	movw	r30, r24
     2f0:	20 81       	ld	r18, Z
     2f2:	31 81       	ldd	r19, Z+1	; 0x01
     2f4:	8c 81       	ldd	r24, Y+4	; 0x04
     2f6:	9d 81       	ldd	r25, Y+5	; 0x05
     2f8:	80 58       	subi	r24, 0x80	; 128
     2fa:	9f 4f       	sbci	r25, 0xFF	; 255
     2fc:	28 17       	cp	r18, r24
     2fe:	39 07       	cpc	r19, r25
     300:	49 f4       	brne	.+18     	; 0x314 <RingBuffer_Remove+0x76>
			  Buffer->Out = Buffer->Buffer;
     302:	2c 81       	ldd	r18, Y+4	; 0x04
     304:	3d 81       	ldd	r19, Y+5	; 0x05
     306:	8c 81       	ldd	r24, Y+4	; 0x04
     308:	9d 81       	ldd	r25, Y+5	; 0x05
     30a:	8e 57       	subi	r24, 0x7E	; 126
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	fc 01       	movw	r30, r24
     310:	31 83       	std	Z+1, r19	; 0x01
     312:	20 83       	st	Z, r18

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     314:	8f e5       	ldi	r24, 0x5F	; 95
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	fc 01       	movw	r30, r24
     31a:	80 81       	ld	r24, Z
     31c:	8b 83       	std	Y+3, r24	; 0x03
     31e:	0e 94 97 00 	call	0x12e	; 0x12e <__iCliRetVal>
     322:	89 83       	std	Y+1, r24	; 0x01
     324:	0f c0       	rjmp	.+30     	; 0x344 <RingBuffer_Remove+0xa6>
			{
				Buffer->Count--;
     326:	8c 81       	ldd	r24, Y+4	; 0x04
     328:	9d 81       	ldd	r25, Y+5	; 0x05
     32a:	8c 57       	subi	r24, 0x7C	; 124
     32c:	9f 4f       	sbci	r25, 0xFF	; 255
     32e:	fc 01       	movw	r30, r24
     330:	80 81       	ld	r24, Z
     332:	2f ef       	ldi	r18, 0xFF	; 255
     334:	28 0f       	add	r18, r24
     336:	8c 81       	ldd	r24, Y+4	; 0x04
     338:	9d 81       	ldd	r25, Y+5	; 0x05
     33a:	8c 57       	subi	r24, 0x7C	; 124
     33c:	9f 4f       	sbci	r25, 0xFF	; 255
     33e:	fc 01       	movw	r30, r24
     340:	20 83       	st	Z, r18
			RingBuff_Data_t Data = *Buffer->Out;
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->Out = Buffer->Buffer;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     342:	19 82       	std	Y+1, r1	; 0x01
     344:	89 81       	ldd	r24, Y+1	; 0x01
     346:	88 23       	and	r24, r24
     348:	71 f7       	brne	.-36     	; 0x326 <RingBuffer_Remove+0x88>
     34a:	ce 01       	movw	r24, r28
     34c:	03 96       	adiw	r24, 0x03	; 3
     34e:	0e 94 a0 00 	call	0x140	; 0x140 <__iRestore>
			{
				Buffer->Count--;
			}
			
			return Data;
     352:	8a 81       	ldd	r24, Y+2	; 0x02
		}
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	08 95       	ret

00000364 <RingBuffer_CountChar>:
			}
			*(Destination+PeakLength) = 0;
		}

		static inline RingBuff_Count_t RingBuffer_CountChar(RingBuff_t* const Buffer, char charToCheck)
		{
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	00 d0       	rcall	.+0      	; 0x36a <RingBuffer_CountChar+0x6>
     36a:	00 d0       	rcall	.+0      	; 0x36c <RingBuffer_CountChar+0x8>
     36c:	00 d0       	rcall	.+0      	; 0x36e <RingBuffer_CountChar+0xa>
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	9d 83       	std	Y+5, r25	; 0x05
     374:	8c 83       	std	Y+4, r24	; 0x04
     376:	6e 83       	std	Y+6, r22	; 0x06
			RingBuff_Count_t count = 0;
     378:	19 82       	std	Y+1, r1	; 0x01

			RingBuff_Data_t* currentRead = Buffer->Out;
     37a:	8c 81       	ldd	r24, Y+4	; 0x04
     37c:	9d 81       	ldd	r25, Y+5	; 0x05
     37e:	8e 57       	subi	r24, 0x7E	; 126
     380:	9f 4f       	sbci	r25, 0xFF	; 255
     382:	fc 01       	movw	r30, r24
     384:	80 81       	ld	r24, Z
     386:	91 81       	ldd	r25, Z+1	; 0x01
     388:	9b 83       	std	Y+3, r25	; 0x03
     38a:	8a 83       	std	Y+2, r24	; 0x02

			while(currentRead != Buffer->In)
     38c:	1c c0       	rjmp	.+56     	; 0x3c6 <RingBuffer_CountChar+0x62>
			{
				if(*currentRead==charToCheck)
     38e:	8a 81       	ldd	r24, Y+2	; 0x02
     390:	9b 81       	ldd	r25, Y+3	; 0x03
     392:	fc 01       	movw	r30, r24
     394:	90 81       	ld	r25, Z
     396:	8e 81       	ldd	r24, Y+6	; 0x06
     398:	98 17       	cp	r25, r24
     39a:	19 f4       	brne	.+6      	; 0x3a2 <RingBuffer_CountChar+0x3e>
				{
					count++;
     39c:	89 81       	ldd	r24, Y+1	; 0x01
     39e:	8f 5f       	subi	r24, 0xFF	; 255
     3a0:	89 83       	std	Y+1, r24	; 0x01
				}
				if (++currentRead == &Buffer->Buffer[BUFFER_SIZE]) currentRead = Buffer->Buffer;
     3a2:	8a 81       	ldd	r24, Y+2	; 0x02
     3a4:	9b 81       	ldd	r25, Y+3	; 0x03
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	9b 83       	std	Y+3, r25	; 0x03
     3aa:	8a 83       	std	Y+2, r24	; 0x02
     3ac:	8c 81       	ldd	r24, Y+4	; 0x04
     3ae:	9d 81       	ldd	r25, Y+5	; 0x05
     3b0:	80 58       	subi	r24, 0x80	; 128
     3b2:	9f 4f       	sbci	r25, 0xFF	; 255
     3b4:	2a 81       	ldd	r18, Y+2	; 0x02
     3b6:	3b 81       	ldd	r19, Y+3	; 0x03
     3b8:	28 17       	cp	r18, r24
     3ba:	39 07       	cpc	r19, r25
     3bc:	21 f4       	brne	.+8      	; 0x3c6 <RingBuffer_CountChar+0x62>
     3be:	8c 81       	ldd	r24, Y+4	; 0x04
     3c0:	9d 81       	ldd	r25, Y+5	; 0x05
     3c2:	9b 83       	std	Y+3, r25	; 0x03
     3c4:	8a 83       	std	Y+2, r24	; 0x02
		{
			RingBuff_Count_t count = 0;

			RingBuff_Data_t* currentRead = Buffer->Out;

			while(currentRead != Buffer->In)
     3c6:	8c 81       	ldd	r24, Y+4	; 0x04
     3c8:	9d 81       	ldd	r25, Y+5	; 0x05
     3ca:	80 58       	subi	r24, 0x80	; 128
     3cc:	9f 4f       	sbci	r25, 0xFF	; 255
     3ce:	fc 01       	movw	r30, r24
     3d0:	20 81       	ld	r18, Z
     3d2:	31 81       	ldd	r19, Z+1	; 0x01
     3d4:	8a 81       	ldd	r24, Y+2	; 0x02
     3d6:	9b 81       	ldd	r25, Y+3	; 0x03
     3d8:	28 17       	cp	r18, r24
     3da:	39 07       	cpc	r19, r25
     3dc:	c1 f6       	brne	.-80     	; 0x38e <RingBuffer_CountChar+0x2a>
				{
					count++;
				}
				if (++currentRead == &Buffer->Buffer[BUFFER_SIZE]) currentRead = Buffer->Buffer;
			}
			return(count);
     3de:	89 81       	ldd	r24, Y+1	; 0x01
		}
     3e0:	26 96       	adiw	r28, 0x06	; 6
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	08 95       	ret

000003f2 <RingBuffer_RemoveUntilChar>:

		static inline void RingBuffer_RemoveUntilChar(RingBuff_t* const Buffer, RingBuff_Data_t* Destination, char endChar, uint8_t includingChar)
		{
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	29 97       	sbiw	r28, 0x09	; 9
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61
     406:	9d 83       	std	Y+5, r25	; 0x05
     408:	8c 83       	std	Y+4, r24	; 0x04
     40a:	7f 83       	std	Y+7, r23	; 0x07
     40c:	6e 83       	std	Y+6, r22	; 0x06
     40e:	48 87       	std	Y+8, r20	; 0x08
     410:	29 87       	std	Y+9, r18	; 0x09
			RingBuff_Data_t tempData;
			unsigned int uiDestinationOffset = 0;
     412:	1a 82       	std	Y+2, r1	; 0x02
     414:	19 82       	std	Y+1, r1	; 0x01
			
			while(1)
			{
				tempData = RingBuffer_Remove(Buffer);
     416:	8c 81       	ldd	r24, Y+4	; 0x04
     418:	9d 81       	ldd	r25, Y+5	; 0x05
     41a:	0e 94 4f 01 	call	0x29e	; 0x29e <RingBuffer_Remove>
     41e:	8b 83       	std	Y+3, r24	; 0x03
				if(tempData == endChar)
     420:	9b 81       	ldd	r25, Y+3	; 0x03
     422:	88 85       	ldd	r24, Y+8	; 0x08
     424:	98 17       	cp	r25, r24
     426:	d1 f4       	brne	.+52     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
				{
					if(includingChar)
     428:	89 85       	ldd	r24, Y+9	; 0x09
     42a:	88 23       	and	r24, r24
     42c:	71 f0       	breq	.+28     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
					{
						*(Destination+uiDestinationOffset) = tempData;
     42e:	2e 81       	ldd	r18, Y+6	; 0x06
     430:	3f 81       	ldd	r19, Y+7	; 0x07
     432:	89 81       	ldd	r24, Y+1	; 0x01
     434:	9a 81       	ldd	r25, Y+2	; 0x02
     436:	82 0f       	add	r24, r18
     438:	93 1f       	adc	r25, r19
     43a:	2b 81       	ldd	r18, Y+3	; 0x03
     43c:	fc 01       	movw	r30, r24
     43e:	20 83       	st	Z, r18
						uiDestinationOffset++;
     440:	89 81       	ldd	r24, Y+1	; 0x01
     442:	9a 81       	ldd	r25, Y+2	; 0x02
     444:	01 96       	adiw	r24, 0x01	; 1
     446:	9a 83       	std	Y+2, r25	; 0x02
     448:	89 83       	std	Y+1, r24	; 0x01
					}
					*(Destination+uiDestinationOffset) = 0;
     44a:	2e 81       	ldd	r18, Y+6	; 0x06
     44c:	3f 81       	ldd	r19, Y+7	; 0x07
     44e:	89 81       	ldd	r24, Y+1	; 0x01
     450:	9a 81       	ldd	r25, Y+2	; 0x02
     452:	82 0f       	add	r24, r18
     454:	93 1f       	adc	r25, r19
     456:	fc 01       	movw	r30, r24
     458:	10 82       	st	Z, r1
					break;
     45a:	0f c0       	rjmp	.+30     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
				}
				*(Destination+uiDestinationOffset) = tempData;
     45c:	2e 81       	ldd	r18, Y+6	; 0x06
     45e:	3f 81       	ldd	r19, Y+7	; 0x07
     460:	89 81       	ldd	r24, Y+1	; 0x01
     462:	9a 81       	ldd	r25, Y+2	; 0x02
     464:	82 0f       	add	r24, r18
     466:	93 1f       	adc	r25, r19
     468:	2b 81       	ldd	r18, Y+3	; 0x03
     46a:	fc 01       	movw	r30, r24
     46c:	20 83       	st	Z, r18
				uiDestinationOffset++;
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	9a 81       	ldd	r25, Y+2	; 0x02
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	9a 83       	std	Y+2, r25	; 0x02
     476:	89 83       	std	Y+1, r24	; 0x01
			}
     478:	ce cf       	rjmp	.-100    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		}
     47a:	29 96       	adiw	r28, 0x09	; 9
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	f8 94       	cli
     480:	de bf       	out	0x3e, r29	; 62
     482:	0f be       	out	0x3f, r0	; 63
     484:	cd bf       	out	0x3d, r28	; 61
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	08 95       	ret

0000048c <__vector_1>:
volatile uint8_t u8Status = 0x00;
volatile uint8_t u8Duty = 0;


ISR(INT0_vect)	// external interrupt (handshake from RGBooster board)
{				// start RGBooster send sequence: reset "ucRGBIdx" and "ucByteIdx" to zero. then start with calling the ISR directly "INT1_vect();"
     48c:	1f 92       	push	r1
     48e:	0f 92       	push	r0
     490:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     494:	0f 92       	push	r0
     496:	11 24       	eor	r1, r1
     498:	2f 93       	push	r18
     49a:	3f 93       	push	r19
     49c:	4f 93       	push	r20
     49e:	8f 93       	push	r24
     4a0:	9f 93       	push	r25
     4a2:	ef 93       	push	r30
     4a4:	ff 93       	push	r31
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
	#ifdef TX_DEBUG
	PORTD |= (1<<PORTD1);
     4ae:	8b e2       	ldi	r24, 0x2B	; 43
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	2b e2       	ldi	r18, 0x2B	; 43
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	f9 01       	movw	r30, r18
     4b8:	20 81       	ld	r18, Z
     4ba:	22 60       	ori	r18, 0x02	; 2
     4bc:	fc 01       	movw	r30, r24
     4be:	20 83       	st	Z, r18
	#endif
	
	if(u8RGBSingleColor)
     4c0:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <u8RGBSingleColor>
     4c4:	88 23       	and	r24, r24
     4c6:	09 f4       	brne	.+2      	; 0x4ca <__vector_1+0x3e>
     4c8:	b2 c0       	rjmp	.+356    	; 0x62e <__vector_1+0x1a2>
	{
		if(u8RGBIdx<(LED_COUNT))
     4ca:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8RGBIdx>
     4ce:	84 31       	cpi	r24, 0x14	; 20
     4d0:	08 f0       	brcs	.+2      	; 0x4d4 <__vector_1+0x48>
     4d2:	83 c1       	rjmp	.+774    	; 0x7da <__vector_1+0x34e>
		{
			switch(u8RGBByteIdx) // red green and blue are sent in 3 separate bytes. this variable remembers the next color to be sent
     4d4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     4d8:	88 2f       	mov	r24, r24
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	81 30       	cpi	r24, 0x01	; 1
     4de:	91 05       	cpc	r25, r1
     4e0:	d9 f1       	breq	.+118    	; 0x558 <__vector_1+0xcc>
     4e2:	82 30       	cpi	r24, 0x02	; 2
     4e4:	91 05       	cpc	r25, r1
     4e6:	09 f4       	brne	.+2      	; 0x4ea <__vector_1+0x5e>
     4e8:	6b c0       	rjmp	.+214    	; 0x5c0 <__vector_1+0x134>
     4ea:	89 2b       	or	r24, r25
     4ec:	09 f0       	breq	.+2      	; 0x4f0 <__vector_1+0x64>
     4ee:	75 c1       	rjmp	.+746    	; 0x7da <__vector_1+0x34e>
			{
				case 0:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (u8RGBGreen & DATA_HIGH_BITMASK);
     4f0:	82 e2       	ldi	r24, 0x22	; 34
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	22 e2       	ldi	r18, 0x22	; 34
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	f9 01       	movw	r30, r18
     4fa:	20 81       	ld	r18, Z
     4fc:	32 2f       	mov	r19, r18
     4fe:	3f 70       	andi	r19, 0x0F	; 15
     500:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <u8RGBGreen>
     504:	20 7f       	andi	r18, 0xF0	; 240
     506:	23 2b       	or	r18, r19
     508:	fc 01       	movw	r30, r24
     50a:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (u8RGBGreen & DATA_LOW_BITMASK);
     50c:	85 e2       	ldi	r24, 0x25	; 37
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	25 e2       	ldi	r18, 0x25	; 37
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	f9 01       	movw	r30, r18
     516:	20 81       	ld	r18, Z
     518:	32 2f       	mov	r19, r18
     51a:	30 7f       	andi	r19, 0xF0	; 240
     51c:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <u8RGBGreen>
     520:	2f 70       	andi	r18, 0x0F	; 15
     522:	23 2b       	or	r18, r19
     524:	fc 01       	movw	r30, r24
     526:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     528:	8b e2       	ldi	r24, 0x2B	; 43
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	2b e2       	ldi	r18, 0x2B	; 43
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	f9 01       	movw	r30, r18
     532:	20 81       	ld	r18, Z
     534:	28 60       	ori	r18, 0x08	; 8
     536:	fc 01       	movw	r30, r24
     538:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     53a:	8b e2       	ldi	r24, 0x2B	; 43
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	2b e2       	ldi	r18, 0x2B	; 43
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	f9 01       	movw	r30, r18
     544:	20 81       	ld	r18, Z
     546:	27 7f       	andi	r18, 0xF7	; 247
     548:	fc 01       	movw	r30, r24
     54a:	20 83       	st	Z, r18
				u8RGBByteIdx++;
     54c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     550:	8f 5f       	subi	r24, 0xFF	; 255
     552:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
				break;
     556:	6a c0       	rjmp	.+212    	; 0x62c <__vector_1+0x1a0>

				case 1:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (u8RGBRed & DATA_HIGH_BITMASK);
     558:	82 e2       	ldi	r24, 0x22	; 34
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	22 e2       	ldi	r18, 0x22	; 34
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	f9 01       	movw	r30, r18
     562:	20 81       	ld	r18, Z
     564:	32 2f       	mov	r19, r18
     566:	3f 70       	andi	r19, 0x0F	; 15
     568:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <u8RGBRed>
     56c:	20 7f       	andi	r18, 0xF0	; 240
     56e:	23 2b       	or	r18, r19
     570:	fc 01       	movw	r30, r24
     572:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (u8RGBRed & DATA_LOW_BITMASK);
     574:	85 e2       	ldi	r24, 0x25	; 37
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	25 e2       	ldi	r18, 0x25	; 37
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	f9 01       	movw	r30, r18
     57e:	20 81       	ld	r18, Z
     580:	32 2f       	mov	r19, r18
     582:	30 7f       	andi	r19, 0xF0	; 240
     584:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <u8RGBRed>
     588:	2f 70       	andi	r18, 0x0F	; 15
     58a:	23 2b       	or	r18, r19
     58c:	fc 01       	movw	r30, r24
     58e:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     590:	8b e2       	ldi	r24, 0x2B	; 43
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	2b e2       	ldi	r18, 0x2B	; 43
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	f9 01       	movw	r30, r18
     59a:	20 81       	ld	r18, Z
     59c:	28 60       	ori	r18, 0x08	; 8
     59e:	fc 01       	movw	r30, r24
     5a0:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     5a2:	8b e2       	ldi	r24, 0x2B	; 43
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	2b e2       	ldi	r18, 0x2B	; 43
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	f9 01       	movw	r30, r18
     5ac:	20 81       	ld	r18, Z
     5ae:	27 7f       	andi	r18, 0xF7	; 247
     5b0:	fc 01       	movw	r30, r24
     5b2:	20 83       	st	Z, r18
				u8RGBByteIdx++;
     5b4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     5b8:	8f 5f       	subi	r24, 0xFF	; 255
     5ba:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
				break;
     5be:	36 c0       	rjmp	.+108    	; 0x62c <__vector_1+0x1a0>

				case 2:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (u8RGBBlue & DATA_HIGH_BITMASK);
     5c0:	82 e2       	ldi	r24, 0x22	; 34
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	22 e2       	ldi	r18, 0x22	; 34
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	f9 01       	movw	r30, r18
     5ca:	20 81       	ld	r18, Z
     5cc:	32 2f       	mov	r19, r18
     5ce:	3f 70       	andi	r19, 0x0F	; 15
     5d0:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <u8RGBBlue>
     5d4:	20 7f       	andi	r18, 0xF0	; 240
     5d6:	23 2b       	or	r18, r19
     5d8:	fc 01       	movw	r30, r24
     5da:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (u8RGBBlue & DATA_LOW_BITMASK);
     5dc:	85 e2       	ldi	r24, 0x25	; 37
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	25 e2       	ldi	r18, 0x25	; 37
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	f9 01       	movw	r30, r18
     5e6:	20 81       	ld	r18, Z
     5e8:	32 2f       	mov	r19, r18
     5ea:	30 7f       	andi	r19, 0xF0	; 240
     5ec:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <u8RGBBlue>
     5f0:	2f 70       	andi	r18, 0x0F	; 15
     5f2:	23 2b       	or	r18, r19
     5f4:	fc 01       	movw	r30, r24
     5f6:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     5f8:	8b e2       	ldi	r24, 0x2B	; 43
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	2b e2       	ldi	r18, 0x2B	; 43
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	f9 01       	movw	r30, r18
     602:	20 81       	ld	r18, Z
     604:	28 60       	ori	r18, 0x08	; 8
     606:	fc 01       	movw	r30, r24
     608:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     60a:	8b e2       	ldi	r24, 0x2B	; 43
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	2b e2       	ldi	r18, 0x2B	; 43
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	f9 01       	movw	r30, r18
     614:	20 81       	ld	r18, Z
     616:	27 7f       	andi	r18, 0xF7	; 247
     618:	fc 01       	movw	r30, r24
     61a:	20 83       	st	Z, r18
				u8RGBByteIdx=0;
     61c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
				u8RGBIdx++;
     620:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8RGBIdx>
     624:	8f 5f       	subi	r24, 0xFF	; 255
     626:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <u8RGBIdx>
				break;
     62a:	00 00       	nop
     62c:	d6 c0       	rjmp	.+428    	; 0x7da <__vector_1+0x34e>
			}
		}
	}
	else
	{
		if(u8RGBIdx<(LED_COUNT))
     62e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8RGBIdx>
     632:	84 31       	cpi	r24, 0x14	; 20
     634:	08 f0       	brcs	.+2      	; 0x638 <__vector_1+0x1ac>
     636:	d1 c0       	rjmp	.+418    	; 0x7da <__vector_1+0x34e>
		{
			switch(u8RGBByteIdx) // red green and blue are sent in 3 separate bytes. this variable remembers the next color to be sent
     638:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     63c:	88 2f       	mov	r24, r24
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	81 30       	cpi	r24, 0x01	; 1
     642:	91 05       	cpc	r25, r1
     644:	09 f4       	brne	.+2      	; 0x648 <__vector_1+0x1bc>
     646:	47 c0       	rjmp	.+142    	; 0x6d6 <__vector_1+0x24a>
     648:	82 30       	cpi	r24, 0x02	; 2
     64a:	91 05       	cpc	r25, r1
     64c:	09 f4       	brne	.+2      	; 0x650 <__vector_1+0x1c4>
     64e:	83 c0       	rjmp	.+262    	; 0x756 <__vector_1+0x2ca>
     650:	89 2b       	or	r24, r25
     652:	09 f0       	breq	.+2      	; 0x656 <__vector_1+0x1ca>
     654:	c2 c0       	rjmp	.+388    	; 0x7da <__vector_1+0x34e>
			{
				case 0:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (au8Green[u8RGBIdx] & DATA_HIGH_BITMASK);
     656:	82 e2       	ldi	r24, 0x22	; 34
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	22 e2       	ldi	r18, 0x22	; 34
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	f9 01       	movw	r30, r18
     660:	20 81       	ld	r18, Z
     662:	42 2f       	mov	r20, r18
     664:	4f 70       	andi	r20, 0x0F	; 15
     666:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     66a:	22 2f       	mov	r18, r18
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	2c 5e       	subi	r18, 0xEC	; 236
     670:	3e 4f       	sbci	r19, 0xFE	; 254
     672:	f9 01       	movw	r30, r18
     674:	20 81       	ld	r18, Z
     676:	20 7f       	andi	r18, 0xF0	; 240
     678:	24 2b       	or	r18, r20
     67a:	fc 01       	movw	r30, r24
     67c:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (au8Green[u8RGBIdx] & DATA_LOW_BITMASK);
     67e:	85 e2       	ldi	r24, 0x25	; 37
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	25 e2       	ldi	r18, 0x25	; 37
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	f9 01       	movw	r30, r18
     688:	20 81       	ld	r18, Z
     68a:	42 2f       	mov	r20, r18
     68c:	40 7f       	andi	r20, 0xF0	; 240
     68e:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     692:	22 2f       	mov	r18, r18
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	2c 5e       	subi	r18, 0xEC	; 236
     698:	3e 4f       	sbci	r19, 0xFE	; 254
     69a:	f9 01       	movw	r30, r18
     69c:	20 81       	ld	r18, Z
     69e:	2f 70       	andi	r18, 0x0F	; 15
     6a0:	24 2b       	or	r18, r20
     6a2:	fc 01       	movw	r30, r24
     6a4:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     6a6:	8b e2       	ldi	r24, 0x2B	; 43
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	2b e2       	ldi	r18, 0x2B	; 43
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	f9 01       	movw	r30, r18
     6b0:	20 81       	ld	r18, Z
     6b2:	28 60       	ori	r18, 0x08	; 8
     6b4:	fc 01       	movw	r30, r24
     6b6:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     6b8:	8b e2       	ldi	r24, 0x2B	; 43
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	2b e2       	ldi	r18, 0x2B	; 43
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	f9 01       	movw	r30, r18
     6c2:	20 81       	ld	r18, Z
     6c4:	27 7f       	andi	r18, 0xF7	; 247
     6c6:	fc 01       	movw	r30, r24
     6c8:	20 83       	st	Z, r18
				u8RGBByteIdx++;
     6ca:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     6ce:	8f 5f       	subi	r24, 0xFF	; 255
     6d0:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
				break;
     6d4:	82 c0       	rjmp	.+260    	; 0x7da <__vector_1+0x34e>

				case 1:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (au8Red[u8RGBIdx] & DATA_HIGH_BITMASK);
     6d6:	82 e2       	ldi	r24, 0x22	; 34
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	22 e2       	ldi	r18, 0x22	; 34
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	f9 01       	movw	r30, r18
     6e0:	20 81       	ld	r18, Z
     6e2:	42 2f       	mov	r20, r18
     6e4:	4f 70       	andi	r20, 0x0F	; 15
     6e6:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     6ea:	22 2f       	mov	r18, r18
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	20 50       	subi	r18, 0x00	; 0
     6f0:	3f 4f       	sbci	r19, 0xFF	; 255
     6f2:	f9 01       	movw	r30, r18
     6f4:	20 81       	ld	r18, Z
     6f6:	20 7f       	andi	r18, 0xF0	; 240
     6f8:	24 2b       	or	r18, r20
     6fa:	fc 01       	movw	r30, r24
     6fc:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (au8Red[u8RGBIdx] & DATA_LOW_BITMASK);
     6fe:	85 e2       	ldi	r24, 0x25	; 37
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	25 e2       	ldi	r18, 0x25	; 37
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	f9 01       	movw	r30, r18
     708:	20 81       	ld	r18, Z
     70a:	42 2f       	mov	r20, r18
     70c:	40 7f       	andi	r20, 0xF0	; 240
     70e:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     712:	22 2f       	mov	r18, r18
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	20 50       	subi	r18, 0x00	; 0
     718:	3f 4f       	sbci	r19, 0xFF	; 255
     71a:	f9 01       	movw	r30, r18
     71c:	20 81       	ld	r18, Z
     71e:	2f 70       	andi	r18, 0x0F	; 15
     720:	24 2b       	or	r18, r20
     722:	fc 01       	movw	r30, r24
     724:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     726:	8b e2       	ldi	r24, 0x2B	; 43
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	2b e2       	ldi	r18, 0x2B	; 43
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	f9 01       	movw	r30, r18
     730:	20 81       	ld	r18, Z
     732:	28 60       	ori	r18, 0x08	; 8
     734:	fc 01       	movw	r30, r24
     736:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     738:	8b e2       	ldi	r24, 0x2B	; 43
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	2b e2       	ldi	r18, 0x2B	; 43
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	f9 01       	movw	r30, r18
     742:	20 81       	ld	r18, Z
     744:	27 7f       	andi	r18, 0xF7	; 247
     746:	fc 01       	movw	r30, r24
     748:	20 83       	st	Z, r18
				u8RGBByteIdx++;
     74a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     74e:	8f 5f       	subi	r24, 0xFF	; 255
     750:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
				break;
     754:	42 c0       	rjmp	.+132    	; 0x7da <__vector_1+0x34e>

				case 2:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (au8Blue[u8RGBIdx] & DATA_HIGH_BITMASK);
     756:	82 e2       	ldi	r24, 0x22	; 34
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	22 e2       	ldi	r18, 0x22	; 34
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	f9 01       	movw	r30, r18
     760:	20 81       	ld	r18, Z
     762:	42 2f       	mov	r20, r18
     764:	4f 70       	andi	r20, 0x0F	; 15
     766:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     76a:	22 2f       	mov	r18, r18
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	28 5d       	subi	r18, 0xD8	; 216
     770:	3e 4f       	sbci	r19, 0xFE	; 254
     772:	f9 01       	movw	r30, r18
     774:	20 81       	ld	r18, Z
     776:	20 7f       	andi	r18, 0xF0	; 240
     778:	24 2b       	or	r18, r20
     77a:	fc 01       	movw	r30, r24
     77c:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (au8Blue[u8RGBIdx] & DATA_LOW_BITMASK);
     77e:	85 e2       	ldi	r24, 0x25	; 37
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	25 e2       	ldi	r18, 0x25	; 37
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	f9 01       	movw	r30, r18
     788:	20 81       	ld	r18, Z
     78a:	42 2f       	mov	r20, r18
     78c:	40 7f       	andi	r20, 0xF0	; 240
     78e:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     792:	22 2f       	mov	r18, r18
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	28 5d       	subi	r18, 0xD8	; 216
     798:	3e 4f       	sbci	r19, 0xFE	; 254
     79a:	f9 01       	movw	r30, r18
     79c:	20 81       	ld	r18, Z
     79e:	2f 70       	andi	r18, 0x0F	; 15
     7a0:	24 2b       	or	r18, r20
     7a2:	fc 01       	movw	r30, r24
     7a4:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     7a6:	8b e2       	ldi	r24, 0x2B	; 43
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	2b e2       	ldi	r18, 0x2B	; 43
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	f9 01       	movw	r30, r18
     7b0:	20 81       	ld	r18, Z
     7b2:	28 60       	ori	r18, 0x08	; 8
     7b4:	fc 01       	movw	r30, r24
     7b6:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     7b8:	8b e2       	ldi	r24, 0x2B	; 43
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	2b e2       	ldi	r18, 0x2B	; 43
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	f9 01       	movw	r30, r18
     7c2:	20 81       	ld	r18, Z
     7c4:	27 7f       	andi	r18, 0xF7	; 247
     7c6:	fc 01       	movw	r30, r24
     7c8:	20 83       	st	Z, r18
				u8RGBByteIdx=0;
     7ca:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
				u8RGBIdx++;
     7ce:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8RGBIdx>
     7d2:	8f 5f       	subi	r24, 0xFF	; 255
     7d4:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <u8RGBIdx>
				break;
     7d8:	00 00       	nop
		}
	}
	
	
	#ifdef TX_DEBUG
	PORTD &= ~(1<<PORTD1);
     7da:	8b e2       	ldi	r24, 0x2B	; 43
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	2b e2       	ldi	r18, 0x2B	; 43
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	f9 01       	movw	r30, r18
     7e4:	20 81       	ld	r18, Z
     7e6:	2d 7f       	andi	r18, 0xFD	; 253
     7e8:	fc 01       	movw	r30, r24
     7ea:	20 83       	st	Z, r18
	#endif
}
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	ff 91       	pop	r31
     7f2:	ef 91       	pop	r30
     7f4:	9f 91       	pop	r25
     7f6:	8f 91       	pop	r24
     7f8:	4f 91       	pop	r20
     7fa:	3f 91       	pop	r19
     7fc:	2f 91       	pop	r18
     7fe:	0f 90       	pop	r0
     800:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     804:	0f 90       	pop	r0
     806:	1f 90       	pop	r1
     808:	18 95       	reti

0000080a <__vector_9>:

ISR(TIMER2_COMPA_vect)
{
     80a:	1f 92       	push	r1
     80c:	0f 92       	push	r0
     80e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     812:	0f 92       	push	r0
     814:	11 24       	eor	r1, r1
     816:	af 92       	push	r10
     818:	bf 92       	push	r11
     81a:	cf 92       	push	r12
     81c:	df 92       	push	r13
     81e:	ef 92       	push	r14
     820:	ff 92       	push	r15
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	2f 93       	push	r18
     828:	3f 93       	push	r19
     82a:	4f 93       	push	r20
     82c:	5f 93       	push	r21
     82e:	6f 93       	push	r22
     830:	7f 93       	push	r23
     832:	8f 93       	push	r24
     834:	9f 93       	push	r25
     836:	af 93       	push	r26
     838:	bf 93       	push	r27
     83a:	ef 93       	push	r30
     83c:	ff 93       	push	r31
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
	#ifdef TX_DEBUG
	PORTD |= (1<<PORTD1);
     846:	8b e2       	ldi	r24, 0x2B	; 43
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	2b e2       	ldi	r18, 0x2B	; 43
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	f9 01       	movw	r30, r18
     850:	20 81       	ld	r18, Z
     852:	22 60       	ori	r18, 0x02	; 2
     854:	fc 01       	movw	r30, r24
     856:	20 83       	st	Z, r18
	#endif
	
	if(u8PLEDFadeActive)
     858:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <u8PLEDFadeActive>
     85c:	88 23       	and	r24, r24
     85e:	09 f4       	brne	.+2      	; 0x862 <__vector_9+0x58>
     860:	e7 c0       	rjmp	.+462    	; 0xa30 <__stack+0x131>
	{
		if(u8PLEDFadeDirection) // rise
     862:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <u8PLEDFadeDirection>
     866:	88 23       	and	r24, r24
     868:	09 f4       	brne	.+2      	; 0x86c <__vector_9+0x62>
     86a:	72 c0       	rjmp	.+228    	; 0x950 <__stack+0x51>
		{
			u32PLEDFadeIntCount++;
     86c:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <u32PLEDFadeIntCount>
     870:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <u32PLEDFadeIntCount+0x1>
     874:	a0 91 65 01 	lds	r26, 0x0165	; 0x800165 <u32PLEDFadeIntCount+0x2>
     878:	b0 91 66 01 	lds	r27, 0x0166	; 0x800166 <u32PLEDFadeIntCount+0x3>
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	a1 1d       	adc	r26, r1
     880:	b1 1d       	adc	r27, r1
     882:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <u32PLEDFadeIntCount>
     886:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <u32PLEDFadeIntCount+0x1>
     88a:	a0 93 65 01 	sts	0x0165, r26	; 0x800165 <u32PLEDFadeIntCount+0x2>
     88e:	b0 93 66 01 	sts	0x0166, r27	; 0x800166 <u32PLEDFadeIntCount+0x3>
			if(u32PLEDFadeIntCount>=u32PLEDFadeIntStep)
     892:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <u32PLEDFadeIntCount>
     896:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <u32PLEDFadeIntCount+0x1>
     89a:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <u32PLEDFadeIntCount+0x2>
     89e:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <u32PLEDFadeIntCount+0x3>
     8a2:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <u32PLEDFadeIntStep>
     8a6:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <u32PLEDFadeIntStep+0x1>
     8aa:	a0 91 61 01 	lds	r26, 0x0161	; 0x800161 <u32PLEDFadeIntStep+0x2>
     8ae:	b0 91 62 01 	lds	r27, 0x0162	; 0x800162 <u32PLEDFadeIntStep+0x3>
     8b2:	28 17       	cp	r18, r24
     8b4:	39 07       	cpc	r19, r25
     8b6:	4a 07       	cpc	r20, r26
     8b8:	5b 07       	cpc	r21, r27
     8ba:	08 f4       	brcc	.+2      	; 0x8be <__vector_9+0xb4>
     8bc:	b9 c0       	rjmp	.+370    	; 0xa30 <__stack+0x131>
			{
				u32PLEDFadeIntCount = 0;
     8be:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <u32PLEDFadeIntCount>
     8c2:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <u32PLEDFadeIntCount+0x1>
     8c6:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <u32PLEDFadeIntCount+0x2>
     8ca:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <u32PLEDFadeIntCount+0x3>
				u16PLEDFadeCurrValue++;
     8ce:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     8d2:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     8dc:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <u16PLEDFadeCurrValue>
				setPWMDuty(u16PLEDFadeCurrValue);
     8e0:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     8e4:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     8e8:	0e 94 df 13 	call	0x27be	; 0x27be <setPWMDuty>
				u8Duty = Map(u16PLEDFadeCurrValue,0,511,0,100);
     8ec:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     8f0:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     8f4:	cc 01       	movw	r24, r24
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	b0 e0       	ldi	r27, 0x00	; 0
     8fa:	1f 92       	push	r1
     8fc:	1f 92       	push	r1
     8fe:	1f 92       	push	r1
     900:	24 e6       	ldi	r18, 0x64	; 100
     902:	2f 93       	push	r18
     904:	a1 2c       	mov	r10, r1
     906:	b1 2c       	mov	r11, r1
     908:	65 01       	movw	r12, r10
     90a:	e1 2c       	mov	r14, r1
     90c:	f1 2c       	mov	r15, r1
     90e:	87 01       	movw	r16, r14
     910:	ea 94       	dec	r14
     912:	f3 94       	inc	r15
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	a9 01       	movw	r20, r18
     91a:	bc 01       	movw	r22, r24
     91c:	cd 01       	movw	r24, r26
     91e:	0e 94 21 15 	call	0x2a42	; 0x2a42 <Map>
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
     92a:	dc 01       	movw	r26, r24
     92c:	cb 01       	movw	r24, r22
     92e:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <u8Duty>

				if(u16PLEDFadeCurrValue>=u16PLEDFadeStopValue)
     932:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     936:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     93a:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <u16PLEDFadeStopValue>
     93e:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <u16PLEDFadeStopValue+0x1>
     942:	28 17       	cp	r18, r24
     944:	39 07       	cpc	r19, r25
     946:	08 f4       	brcc	.+2      	; 0x94a <__stack+0x4b>
     948:	73 c0       	rjmp	.+230    	; 0xa30 <__stack+0x131>
				{
					u8PLEDFadeActive = 0;
     94a:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <u8PLEDFadeActive>
     94e:	70 c0       	rjmp	.+224    	; 0xa30 <__stack+0x131>
				}
			}
		}
		else // fall
		{
			u32PLEDFadeIntCount++;
     950:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <u32PLEDFadeIntCount>
     954:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <u32PLEDFadeIntCount+0x1>
     958:	a0 91 65 01 	lds	r26, 0x0165	; 0x800165 <u32PLEDFadeIntCount+0x2>
     95c:	b0 91 66 01 	lds	r27, 0x0166	; 0x800166 <u32PLEDFadeIntCount+0x3>
     960:	01 96       	adiw	r24, 0x01	; 1
     962:	a1 1d       	adc	r26, r1
     964:	b1 1d       	adc	r27, r1
     966:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <u32PLEDFadeIntCount>
     96a:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <u32PLEDFadeIntCount+0x1>
     96e:	a0 93 65 01 	sts	0x0165, r26	; 0x800165 <u32PLEDFadeIntCount+0x2>
     972:	b0 93 66 01 	sts	0x0166, r27	; 0x800166 <u32PLEDFadeIntCount+0x3>
			if(u32PLEDFadeIntCount>=u32PLEDFadeIntStep)
     976:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <u32PLEDFadeIntCount>
     97a:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <u32PLEDFadeIntCount+0x1>
     97e:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <u32PLEDFadeIntCount+0x2>
     982:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <u32PLEDFadeIntCount+0x3>
     986:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <u32PLEDFadeIntStep>
     98a:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <u32PLEDFadeIntStep+0x1>
     98e:	a0 91 61 01 	lds	r26, 0x0161	; 0x800161 <u32PLEDFadeIntStep+0x2>
     992:	b0 91 62 01 	lds	r27, 0x0162	; 0x800162 <u32PLEDFadeIntStep+0x3>
     996:	28 17       	cp	r18, r24
     998:	39 07       	cpc	r19, r25
     99a:	4a 07       	cpc	r20, r26
     99c:	5b 07       	cpc	r21, r27
     99e:	08 f4       	brcc	.+2      	; 0x9a2 <__stack+0xa3>
     9a0:	47 c0       	rjmp	.+142    	; 0xa30 <__stack+0x131>
			{
				u32PLEDFadeIntCount = 0;
     9a2:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <u32PLEDFadeIntCount>
     9a6:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <u32PLEDFadeIntCount+0x1>
     9aa:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <u32PLEDFadeIntCount+0x2>
     9ae:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <u32PLEDFadeIntCount+0x3>
				u16PLEDFadeCurrValue--;
     9b2:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     9b6:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     9c0:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <u16PLEDFadeCurrValue>
				setPWMDuty(u16PLEDFadeCurrValue);
     9c4:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     9c8:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     9cc:	0e 94 df 13 	call	0x27be	; 0x27be <setPWMDuty>
				u8Duty = Map(u16PLEDFadeCurrValue,0,511,0,100);
     9d0:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     9d4:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     9d8:	cc 01       	movw	r24, r24
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	1f 92       	push	r1
     9e0:	1f 92       	push	r1
     9e2:	1f 92       	push	r1
     9e4:	24 e6       	ldi	r18, 0x64	; 100
     9e6:	2f 93       	push	r18
     9e8:	a1 2c       	mov	r10, r1
     9ea:	b1 2c       	mov	r11, r1
     9ec:	65 01       	movw	r12, r10
     9ee:	e1 2c       	mov	r14, r1
     9f0:	f1 2c       	mov	r15, r1
     9f2:	87 01       	movw	r16, r14
     9f4:	ea 94       	dec	r14
     9f6:	f3 94       	inc	r15
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	a9 01       	movw	r20, r18
     9fe:	bc 01       	movw	r22, r24
     a00:	cd 01       	movw	r24, r26
     a02:	0e 94 21 15 	call	0x2a42	; 0x2a42 <Map>
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	dc 01       	movw	r26, r24
     a10:	cb 01       	movw	r24, r22
     a12:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <u8Duty>

				if(u16PLEDFadeCurrValue<=u16PLEDFadeStopValue)
     a16:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     a1a:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     a1e:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <u16PLEDFadeStopValue>
     a22:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <u16PLEDFadeStopValue+0x1>
     a26:	82 17       	cp	r24, r18
     a28:	93 07       	cpc	r25, r19
     a2a:	10 f0       	brcs	.+4      	; 0xa30 <__stack+0x131>
				{
					u8PLEDFadeActive = 0;
     a2c:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <u8PLEDFadeActive>
				}
			}
		}
	}
	
	if(u8RGBAnimation)
     a30:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u8RGBAnimation>
     a34:	88 23       	and	r24, r24
     a36:	09 f4       	brne	.+2      	; 0xa3a <__stack+0x13b>
     a38:	48 c0       	rjmp	.+144    	; 0xaca <__stack+0x1cb>
	{
		if(u8RGBBounce)
     a3a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8RGBBounce>
     a3e:	88 23       	and	r24, r24
     a40:	71 f1       	breq	.+92     	; 0xa9e <__stack+0x19f>
		{
			if(u8RGBBounceDirection==0) //normal
     a42:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <u8RGBBounceDirection>
     a46:	88 23       	and	r24, r24
     a48:	c1 f4       	brne	.+48     	; 0xa7a <__stack+0x17b>
			{
				u16RGBTimeCounter++;
     a4a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
     a4e:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <u16RGBTimeCounter+0x1>
     a58:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <u16RGBTimeCounter>
				if(u16RGBTimeCounter>=u16RGBTime)
     a5c:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <u16RGBTimeCounter>
     a60:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
     a64:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
     a68:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
     a6c:	28 17       	cp	r18, r24
     a6e:	39 07       	cpc	r19, r25
     a70:	60 f1       	brcs	.+88     	; 0xaca <__stack+0x1cb>
				{
					u8RGBBounceDirection = 1;
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <u8RGBBounceDirection>
     a78:	28 c0       	rjmp	.+80     	; 0xaca <__stack+0x1cb>
					//u16RGBTimeCounter--;
				}
			}
			else //reverse
			{
				u16RGBTimeCounter--;
     a7a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
     a7e:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
     a82:	01 97       	sbiw	r24, 0x01	; 1
     a84:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <u16RGBTimeCounter+0x1>
     a88:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <u16RGBTimeCounter>
				if(u16RGBTimeCounter==0)
     a8c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
     a90:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
     a94:	89 2b       	or	r24, r25
     a96:	c9 f4       	brne	.+50     	; 0xaca <__stack+0x1cb>
				{
					u8RGBBounceDirection = 0;
     a98:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <u8RGBBounceDirection>
     a9c:	16 c0       	rjmp	.+44     	; 0xaca <__stack+0x1cb>
				}
			}
		}
		else
		{
			u16RGBTimeCounter++;
     a9e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
     aa2:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <u16RGBTimeCounter+0x1>
     aac:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <u16RGBTimeCounter>
			if(u16RGBTimeCounter>=u16RGBTime)
     ab0:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <u16RGBTimeCounter>
     ab4:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
     ab8:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
     abc:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
     ac0:	28 17       	cp	r18, r24
     ac2:	39 07       	cpc	r19, r25
     ac4:	10 f0       	brcs	.+4      	; 0xaca <__stack+0x1cb>
			{
				u8RGBAnimation = 0;
     ac6:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <u8RGBAnimation>
		}
		
		
	}
	
	if(u8RGBNewDataReady)
     aca:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8RGBNewDataReady>
     ace:	88 23       	and	r24, r24
     ad0:	41 f0       	breq	.+16     	; 0xae2 <__stack+0x1e3>
	{
		u8RGBNewDataReady = 0;
     ad2:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <u8RGBNewDataReady>
		
		u8RGBByteIdx = 0;
     ad6:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
		u8RGBIdx = 0;
     ada:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <u8RGBIdx>
		INT0_vect();
     ade:	0e 94 46 02 	call	0x48c	; 0x48c <__vector_1>
	}

	#ifdef TX_DEBUG
	PORTD &= ~(1<<PORTD1);
     ae2:	8b e2       	ldi	r24, 0x2B	; 43
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	2b e2       	ldi	r18, 0x2B	; 43
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	f9 01       	movw	r30, r18
     aec:	20 81       	ld	r18, Z
     aee:	2d 7f       	andi	r18, 0xFD	; 253
     af0:	fc 01       	movw	r30, r24
     af2:	20 83       	st	Z, r18
	#endif
}
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	ff 91       	pop	r31
     afa:	ef 91       	pop	r30
     afc:	bf 91       	pop	r27
     afe:	af 91       	pop	r26
     b00:	9f 91       	pop	r25
     b02:	8f 91       	pop	r24
     b04:	7f 91       	pop	r23
     b06:	6f 91       	pop	r22
     b08:	5f 91       	pop	r21
     b0a:	4f 91       	pop	r20
     b0c:	3f 91       	pop	r19
     b0e:	2f 91       	pop	r18
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	ff 90       	pop	r15
     b16:	ef 90       	pop	r14
     b18:	df 90       	pop	r13
     b1a:	cf 90       	pop	r12
     b1c:	bf 90       	pop	r11
     b1e:	af 90       	pop	r10
     b20:	0f 90       	pop	r0
     b22:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b26:	0f 90       	pop	r0
     b28:	1f 90       	pop	r1
     b2a:	18 95       	reti

00000b2c <__vector_19>:


ISR(SPI_STC_vect)
{
     b2c:	1f 92       	push	r1
     b2e:	0f 92       	push	r0
     b30:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b34:	0f 92       	push	r0
     b36:	11 24       	eor	r1, r1
     b38:	2f 93       	push	r18
     b3a:	3f 93       	push	r19
     b3c:	4f 93       	push	r20
     b3e:	5f 93       	push	r21
     b40:	6f 93       	push	r22
     b42:	7f 93       	push	r23
     b44:	8f 93       	push	r24
     b46:	9f 93       	push	r25
     b48:	af 93       	push	r26
     b4a:	bf 93       	push	r27
     b4c:	ef 93       	push	r30
     b4e:	ff 93       	push	r31
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	1f 92       	push	r1
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8spiData = SPDR0;
     b5a:	8e e4       	ldi	r24, 0x4E	; 78
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	fc 01       	movw	r30, r24
     b60:	80 81       	ld	r24, Z
     b62:	89 83       	std	Y+1, r24	; 0x01
	
	#ifdef TX_DEBUG
	PORTD |= (1<<PORTD1);
     b64:	8b e2       	ldi	r24, 0x2B	; 43
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	2b e2       	ldi	r18, 0x2B	; 43
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	f9 01       	movw	r30, r18
     b6e:	20 81       	ld	r18, Z
     b70:	22 60       	ori	r18, 0x02	; 2
     b72:	fc 01       	movw	r30, r24
     b74:	20 83       	st	Z, r18
	#endif
	
	SPDR0 = 0;
     b76:	8e e4       	ldi	r24, 0x4E	; 78
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	fc 01       	movw	r30, r24
     b7c:	10 82       	st	Z, r1

	switch(SPIBUFFER.spiState)
     b7e:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <SPIBUFFER+0x42>
     b82:	88 2f       	mov	r24, r24
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	09 2e       	mov	r0, r25
     b88:	00 0c       	add	r0, r0
     b8a:	aa 0b       	sbc	r26, r26
     b8c:	bb 0b       	sbc	r27, r27
     b8e:	40 e0       	ldi	r20, 0x00	; 0
     b90:	50 e0       	ldi	r21, 0x00	; 0
     b92:	26 e0       	ldi	r18, 0x06	; 6
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	84 1b       	sub	r24, r20
     b98:	95 0b       	sbc	r25, r21
     b9a:	28 17       	cp	r18, r24
     b9c:	39 07       	cpc	r19, r25
     b9e:	08 f4       	brcc	.+2      	; 0xba2 <__vector_19+0x76>
     ba0:	0e c1       	rjmp	.+540    	; 0xdbe <__vector_19+0x292>
     ba2:	82 5c       	subi	r24, 0xC2	; 194
     ba4:	9f 4f       	sbci	r25, 0xFF	; 255
     ba6:	fc 01       	movw	r30, r24
     ba8:	0c 94 42 16 	jmp	0x2c84	; 0x2c84 <__tablejump2__>
	{
		case READY:
			if(u8spiData>=3)
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	83 30       	cpi	r24, 0x03	; 3
     bb0:	90 f0       	brcs	.+36     	; 0xbd6 <__vector_19+0xaa>
			{
				SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
     bb2:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <SPIBUFFER+0x40>
     bb6:	88 2f       	mov	r24, r24
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	82 51       	subi	r24, 0x12	; 18
     bbc:	9e 4f       	sbci	r25, 0xFE	; 254
     bbe:	29 81       	ldd	r18, Y+1	; 0x01
     bc0:	fc 01       	movw	r30, r24
     bc2:	20 83       	st	Z, r18
				SPIBUFFER.u8Count++;
     bc4:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <SPIBUFFER+0x40>
     bc8:	8f 5f       	subi	r24, 0xFF	; 255
     bca:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <SPIBUFFER+0x40>
				SPIBUFFER.spiState = WRITE;
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <SPIBUFFER+0x42>
			}
			else
			{
				SPIBUFFER.spiState = READ;
			}
		break;
     bd4:	f4 c0       	rjmp	.+488    	; 0xdbe <__vector_19+0x292>
				SPIBUFFER.u8Count++;
				SPIBUFFER.spiState = WRITE;
			}
			else
			{
				SPIBUFFER.spiState = READ;
     bd6:	82 e0       	ldi	r24, 0x02	; 2
     bd8:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <SPIBUFFER+0x42>
			}
		break;
     bdc:	f0 c0       	rjmp	.+480    	; 0xdbe <__vector_19+0x292>

		case WRITE:
			SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
     bde:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <SPIBUFFER+0x40>
     be2:	88 2f       	mov	r24, r24
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	82 51       	subi	r24, 0x12	; 18
     be8:	9e 4f       	sbci	r25, 0xFE	; 254
     bea:	29 81       	ldd	r18, Y+1	; 0x01
     bec:	fc 01       	movw	r30, r24
     bee:	20 83       	st	Z, r18
			SPIBUFFER.u8Count++;
     bf0:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <SPIBUFFER+0x40>
     bf4:	8f 5f       	subi	r24, 0xFF	; 255
     bf6:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <SPIBUFFER+0x40>
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
     bfa:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <SPIBUFFER+0x40>
     bfe:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <SPIBUFFER>
     c02:	98 17       	cp	r25, r24
     c04:	20 f0       	brcs	.+8      	; 0xc0e <__vector_19+0xe2>
			{
				SPIBUFFER.spiState = DONE_WRITE;
     c06:	84 e0       	ldi	r24, 0x04	; 4
     c08:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <SPIBUFFER+0x42>
			}
		break;
     c0c:	d8 c0       	rjmp	.+432    	; 0xdbe <__vector_19+0x292>
     c0e:	d7 c0       	rjmp	.+430    	; 0xdbe <__vector_19+0x292>

		case READ:
			SPIBUFFER.u8Count = 0;
     c10:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <SPIBUFFER+0x40>
			
			switch(u8spiData)
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	88 2f       	mov	r24, r24
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	82 3f       	cpi	r24, 0xF2	; 242
     c1c:	91 05       	cpc	r25, r1
     c1e:	79 f1       	breq	.+94     	; 0xc7e <__vector_19+0x152>
     c20:	83 3f       	cpi	r24, 0xF3	; 243
     c22:	91 05       	cpc	r25, r1
     c24:	24 f4       	brge	.+8      	; 0xc2e <__vector_19+0x102>
     c26:	81 3f       	cpi	r24, 0xF1	; 241
     c28:	91 05       	cpc	r25, r1
     c2a:	51 f0       	breq	.+20     	; 0xc40 <__vector_19+0x114>
     c2c:	a6 c0       	rjmp	.+332    	; 0xd7a <__vector_19+0x24e>
     c2e:	83 3f       	cpi	r24, 0xF3	; 243
     c30:	91 05       	cpc	r25, r1
     c32:	09 f4       	brne	.+2      	; 0xc36 <__vector_19+0x10a>
     c34:	43 c0       	rjmp	.+134    	; 0xcbc <__vector_19+0x190>
     c36:	84 3f       	cpi	r24, 0xF4	; 244
     c38:	91 05       	cpc	r25, r1
     c3a:	09 f4       	brne	.+2      	; 0xc3e <__vector_19+0x112>
     c3c:	5e c0       	rjmp	.+188    	; 0xcfa <__vector_19+0x1ce>
     c3e:	9d c0       	rjmp	.+314    	; 0xd7a <__vector_19+0x24e>
			{
				case 0xF1:
					SPDR0 = 0x01;
     c40:	8e e4       	ldi	r24, 0x4E	; 78
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	21 e0       	ldi	r18, 0x01	; 1
     c46:	fc 01       	movw	r30, r24
     c48:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     c4a:	84 e0       	ldi	r24, 0x04	; 4
     c4c:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = u8Status;
     c56:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <u8Status>
     c5a:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     c5e:	63 e0       	ldi	r22, 0x03	; 3
     c60:	8e ee       	ldi	r24, 0xEE	; 238
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	0e 94 98 15 	call	0x2b30	; 0x2b30 <CRC8>
     c68:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     c6c:	84 e0       	ldi	r24, 0x04	; 4
     c6e:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     c72:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     c76:	83 e0       	ldi	r24, 0x03	; 3
     c78:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <SPIBUFFER+0x42>
				break;
     c7c:	82 c0       	rjmp	.+260    	; 0xd82 <__vector_19+0x256>
				
				case 0xF2:
					SPDR0 = 0x01;
     c7e:	8e e4       	ldi	r24, 0x4E	; 78
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	21 e0       	ldi	r18, 0x01	; 1
     c84:	fc 01       	movw	r30, r24
     c86:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     c88:	84 e0       	ldi	r24, 0x04	; 4
     c8a:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = u8Duty;
     c94:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <u8Duty>
     c98:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     c9c:	63 e0       	ldi	r22, 0x03	; 3
     c9e:	8e ee       	ldi	r24, 0xEE	; 238
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	0e 94 98 15 	call	0x2b30	; 0x2b30 <CRC8>
     ca6:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     caa:	84 e0       	ldi	r24, 0x04	; 4
     cac:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     cb0:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <SPIBUFFER+0x42>
				break;
     cba:	63 c0       	rjmp	.+198    	; 0xd82 <__vector_19+0x256>
				
				case 0xF3:
					SPDR0 = 0x01;
     cbc:	8e e4       	ldi	r24, 0x4E	; 78
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	21 e0       	ldi	r18, 0x01	; 1
     cc2:	fc 01       	movw	r30, r24
     cc4:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     cc6:	84 e0       	ldi	r24, 0x04	; 4
     cc8:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = adcGetTemperature();
     cd2:	0e 94 34 14 	call	0x2868	; 0x2868 <adcGetTemperature>
     cd6:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     cda:	63 e0       	ldi	r22, 0x03	; 3
     cdc:	8e ee       	ldi	r24, 0xEE	; 238
     cde:	91 e0       	ldi	r25, 0x01	; 1
     ce0:	0e 94 98 15 	call	0x2b30	; 0x2b30 <CRC8>
     ce4:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     ce8:	84 e0       	ldi	r24, 0x04	; 4
     cea:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     cee:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     cf2:	83 e0       	ldi	r24, 0x03	; 3
     cf4:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <SPIBUFFER+0x42>
				break;
     cf8:	44 c0       	rjmp	.+136    	; 0xd82 <__vector_19+0x256>

				case 0xF4:
					SPDR0 = 0x01;
     cfa:	8e e4       	ldi	r24, 0x4E	; 78
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	21 e0       	ldi	r18, 0x01	; 1
     d00:	fc 01       	movw	r30, r24
     d02:	20 83       	st	Z, r18
					if(u8PLEDFadeActive) // ongoing fade
     d04:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <u8PLEDFadeActive>
     d08:	88 23       	and	r24, r24
     d0a:	09 f1       	breq	.+66     	; 0xd4e <__vector_19+0x222>
					{
						SPIBUFFER.au8Buffer[0] = 7;
     d0c:	87 e0       	ldi	r24, 0x07	; 7
     d0e:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <SPIBUFFER>
						SPIBUFFER.au8Buffer[1] = u8spiData;
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <SPIBUFFER+0x1>
						SPIBUFFER.au8Buffer[2] = u8PLEDFadeStartPercent;
     d18:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <u8PLEDFadeStartPercent>
     d1c:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <SPIBUFFER+0x2>
						SPIBUFFER.au8Buffer[3] = u8PLEDFadeStopPercent;
     d20:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <u8PLEDFadeStopPercent>
     d24:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <SPIBUFFER+0x3>
						SPIBUFFER.au8Buffer[4] = u8PLEDFadeTime;
     d28:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <u8PLEDFadeTime>
     d2c:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <SPIBUFFER+0x4>
						SPIBUFFER.au8Buffer[5] = u8Duty;
     d30:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <u8Duty>
     d34:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <SPIBUFFER+0x5>
						SPIBUFFER.au8Buffer[6] = CRC8(&SPIBUFFER.au8Buffer[0],6);
     d38:	66 e0       	ldi	r22, 0x06	; 6
     d3a:	8e ee       	ldi	r24, 0xEE	; 238
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	0e 94 98 15 	call	0x2b30	; 0x2b30 <CRC8>
     d42:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <SPIBUFFER+0x6>
						SPIBUFFER.u8Count = 7;
     d46:	87 e0       	ldi	r24, 0x07	; 7
     d48:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <SPIBUFFER+0x40>
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__vector_19+0x242>
					}
					else // no ongoing fade
					{
						SPIBUFFER.au8Buffer[0] = 3;
     d4e:	83 e0       	ldi	r24, 0x03	; 3
     d50:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <SPIBUFFER>
						SPIBUFFER.au8Buffer[1] = u8spiData;
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <SPIBUFFER+0x1>
						SPIBUFFER.au8Buffer[2] = CRC8(&SPIBUFFER.au8Buffer[0],2);
     d5a:	62 e0       	ldi	r22, 0x02	; 2
     d5c:	8e ee       	ldi	r24, 0xEE	; 238
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	0e 94 98 15 	call	0x2b30	; 0x2b30 <CRC8>
     d64:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <SPIBUFFER+0x2>
						SPIBUFFER.u8Count = 3;
     d68:	83 e0       	ldi	r24, 0x03	; 3
     d6a:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <SPIBUFFER+0x40>
					}
					SPIBUFFER.u8ReadReturnCount = 0;
     d6e:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     d72:	83 e0       	ldi	r24, 0x03	; 3
     d74:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <SPIBUFFER+0x42>
				break;
     d78:	04 c0       	rjmp	.+8      	; 0xd82 <__vector_19+0x256>
				
				default:
					SPIBUFFER.spiState = IDLE;
     d7a:	86 e0       	ldi	r24, 0x06	; 6
     d7c:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <SPIBUFFER+0x42>
				break;
     d80:	00 00       	nop
			}
		break;
     d82:	1d c0       	rjmp	.+58     	; 0xdbe <__vector_19+0x292>
		
		case READ_RETURN:
			SPDR0 = SPIBUFFER.au8Buffer[SPIBUFFER.u8ReadReturnCount];
     d84:	8e e4       	ldi	r24, 0x4E	; 78
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <SPIBUFFER+0x41>
     d8c:	22 2f       	mov	r18, r18
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	22 51       	subi	r18, 0x12	; 18
     d92:	3e 4f       	sbci	r19, 0xFE	; 254
     d94:	f9 01       	movw	r30, r18
     d96:	20 81       	ld	r18, Z
     d98:	fc 01       	movw	r30, r24
     d9a:	20 83       	st	Z, r18
			SPIBUFFER.u8ReadReturnCount++;
     d9c:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <SPIBUFFER+0x41>
     da0:	8f 5f       	subi	r24, 0xFF	; 255
     da2:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <SPIBUFFER+0x41>
			if(SPIBUFFER.u8Count == SPIBUFFER.u8ReadReturnCount)
     da6:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <SPIBUFFER+0x40>
     daa:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <SPIBUFFER+0x41>
     dae:	98 17       	cp	r25, r24
     db0:	21 f4       	brne	.+8      	; 0xdba <__vector_19+0x28e>
			{
				SPIBUFFER.spiState = DONE_READ;
     db2:	85 e0       	ldi	r24, 0x05	; 5
     db4:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <SPIBUFFER+0x42>
			}
		break;
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <__vector_19+0x292>
     dba:	01 c0       	rjmp	.+2      	; 0xdbe <__vector_19+0x292>
		
		break;

		case IDLE:

		break;
     dbc:	00 00       	nop
	}
	#ifdef TX_DEBUG
	PORTD &= ~(1<<PORTD1);
     dbe:	8b e2       	ldi	r24, 0x2B	; 43
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	2b e2       	ldi	r18, 0x2B	; 43
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	f9 01       	movw	r30, r18
     dc8:	20 81       	ld	r18, Z
     dca:	2d 7f       	andi	r18, 0xFD	; 253
     dcc:	fc 01       	movw	r30, r24
     dce:	20 83       	st	Z, r18
	#endif
}
     dd0:	0f 90       	pop	r0
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	ff 91       	pop	r31
     dd8:	ef 91       	pop	r30
     dda:	bf 91       	pop	r27
     ddc:	af 91       	pop	r26
     dde:	9f 91       	pop	r25
     de0:	8f 91       	pop	r24
     de2:	7f 91       	pop	r23
     de4:	6f 91       	pop	r22
     de6:	5f 91       	pop	r21
     de8:	4f 91       	pop	r20
     dea:	3f 91       	pop	r19
     dec:	2f 91       	pop	r18
     dee:	0f 90       	pop	r0
     df0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     df4:	0f 90       	pop	r0
     df6:	1f 90       	pop	r1
     df8:	18 95       	reti

00000dfa <__vector_5>:

ISR(PCINT1_vect)
{
     dfa:	1f 92       	push	r1
     dfc:	0f 92       	push	r0
     dfe:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e02:	0f 92       	push	r0
     e04:	11 24       	eor	r1, r1
     e06:	af 92       	push	r10
     e08:	bf 92       	push	r11
     e0a:	cf 92       	push	r12
     e0c:	df 92       	push	r13
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	2f 93       	push	r18
     e18:	3f 93       	push	r19
     e1a:	4f 93       	push	r20
     e1c:	5f 93       	push	r21
     e1e:	6f 93       	push	r22
     e20:	7f 93       	push	r23
     e22:	8f 93       	push	r24
     e24:	9f 93       	push	r25
     e26:	af 93       	push	r26
     e28:	bf 93       	push	r27
     e2a:	ef 93       	push	r30
     e2c:	ff 93       	push	r31
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	00 d0       	rcall	.+0      	; 0xe34 <__vector_5+0x3a>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <__vector_5+0x3c>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
	#ifdef TX_DEBUG
	PORTD |= (1<<PORTD1);
     e3a:	8b e2       	ldi	r24, 0x2B	; 43
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	2b e2       	ldi	r18, 0x2B	; 43
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	f9 01       	movw	r30, r18
     e44:	20 81       	ld	r18, Z
     e46:	22 60       	ori	r18, 0x02	; 2
     e48:	fc 01       	movw	r30, r24
     e4a:	20 83       	st	Z, r18
	#endif
	
	SPDR0 = 0;
     e4c:	8e e4       	ldi	r24, 0x4E	; 78
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	fc 01       	movw	r30, r24
     e52:	10 82       	st	Z, r1
	if(PIN_SPI & (1<<SPI_SS)) // SS HIGH
     e54:	83 e2       	ldi	r24, 0x23	; 35
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	fc 01       	movw	r30, r24
     e5a:	80 81       	ld	r24, Z
     e5c:	88 2f       	mov	r24, r24
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	80 71       	andi	r24, 0x10	; 16
     e62:	99 27       	eor	r25, r25
     e64:	89 2b       	or	r24, r25
     e66:	09 f4       	brne	.+2      	; 0xe6a <__vector_5+0x70>
     e68:	a2 c2       	rjmp	.+1348   	; 0x13ae <__vector_5+0x5b4>
	{
		
		if(SPIBUFFER.spiState == DONE_WRITE)
     e6a:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <SPIBUFFER+0x42>
     e6e:	84 30       	cpi	r24, 0x04	; 4
     e70:	09 f0       	breq	.+2      	; 0xe74 <__vector_5+0x7a>
     e72:	a1 c2       	rjmp	.+1346   	; 0x13b6 <__vector_5+0x5bc>
		{
			if(SPIBUFFER.u8Count == SPIBUFFER.au8Buffer[0]) // correct amount of bytes in buffer
     e74:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <SPIBUFFER+0x40>
     e78:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <SPIBUFFER>
     e7c:	98 17       	cp	r25, r24
     e7e:	09 f0       	breq	.+2      	; 0xe82 <__vector_5+0x88>
     e80:	9a c2       	rjmp	.+1332   	; 0x13b6 <__vector_5+0x5bc>
			{
				if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
     e82:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <SPIBUFFER+0x40>
     e86:	68 2f       	mov	r22, r24
     e88:	8e ee       	ldi	r24, 0xEE	; 238
     e8a:	91 e0       	ldi	r25, 0x01	; 1
     e8c:	0e 94 98 15 	call	0x2b30	; 0x2b30 <CRC8>
     e90:	88 23       	and	r24, r24
     e92:	09 f0       	breq	.+2      	; 0xe96 <__vector_5+0x9c>
     e94:	90 c2       	rjmp	.+1312   	; 0x13b6 <__vector_5+0x5bc>
				{
					switch(SPIBUFFER.au8Buffer[1]) // command
     e96:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <SPIBUFFER+0x1>
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	09 2e       	mov	r0, r25
     ea0:	00 0c       	add	r0, r0
     ea2:	aa 0b       	sbc	r26, r26
     ea4:	bb 0b       	sbc	r27, r27
     ea6:	41 e1       	ldi	r20, 0x11	; 17
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	22 e3       	ldi	r18, 0x32	; 50
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	84 1b       	sub	r24, r20
     eb0:	95 0b       	sbc	r25, r21
     eb2:	28 17       	cp	r18, r24
     eb4:	39 07       	cpc	r19, r25
     eb6:	08 f4       	brcc	.+2      	; 0xeba <__vector_5+0xc0>
     eb8:	7e c2       	rjmp	.+1276   	; 0x13b6 <__vector_5+0x5bc>
     eba:	8b 5b       	subi	r24, 0xBB	; 187
     ebc:	9f 4f       	sbci	r25, 0xFF	; 255
     ebe:	fc 01       	movw	r30, r24
     ec0:	0c 94 42 16 	jmp	0x2c84	; 0x2c84 <__tablejump2__>
					{
						case 0x11:
						if(SPIBUFFER.u8Count == 3)
     ec4:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <SPIBUFFER+0x40>
     ec8:	83 30       	cpi	r24, 0x03	; 3
     eca:	41 f4       	brne	.+16     	; 0xedc <__vector_5+0xe2>
						{
							enablePLED();
     ecc:	0e 94 82 12 	call	0x2504	; 0x2504 <enablePLED>
							u8Status |= (1<<STATUS_PLED);
     ed0:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <u8Status>
     ed4:	81 60       	ori	r24, 0x01	; 1
     ed6:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <u8Status>
						}
						break;
     eda:	68 c2       	rjmp	.+1232   	; 0x13ac <__vector_5+0x5b2>
     edc:	67 c2       	rjmp	.+1230   	; 0x13ac <__vector_5+0x5b2>

						case 0x12:
						if(SPIBUFFER.u8Count == 3)
     ede:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <SPIBUFFER+0x40>
     ee2:	83 30       	cpi	r24, 0x03	; 3
     ee4:	41 f4       	brne	.+16     	; 0xef6 <__vector_5+0xfc>
						{
							disablePLED();
     ee6:	0e 94 92 12 	call	0x2524	; 0x2524 <disablePLED>
							u8Status &= ~(1<<STATUS_PLED);
     eea:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <u8Status>
     eee:	8e 7f       	andi	r24, 0xFE	; 254
     ef0:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <u8Status>
						}
						break;
     ef4:	5b c2       	rjmp	.+1206   	; 0x13ac <__vector_5+0x5b2>
     ef6:	5a c2       	rjmp	.+1204   	; 0x13ac <__vector_5+0x5b2>

						case 0x13:
						if(SPIBUFFER.u8Count == 4)
     ef8:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <SPIBUFFER+0x40>
     efc:	84 30       	cpi	r24, 0x04	; 4
     efe:	a9 f4       	brne	.+42     	; 0xf2a <__vector_5+0x130>
						{
							if(u8PLEDFadeActive == 0)
     f00:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <u8PLEDFadeActive>
     f04:	88 23       	and	r24, r24
     f06:	89 f4       	brne	.+34     	; 0xf2a <__vector_5+0x130>
							{
								if(SPIBUFFER.au8Buffer[2]>100)
     f08:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <SPIBUFFER+0x2>
     f0c:	85 36       	cpi	r24, 0x65	; 101
     f0e:	20 f0       	brcs	.+8      	; 0xf18 <__vector_5+0x11e>
								{
									u8Duty = 100;
     f10:	84 e6       	ldi	r24, 0x64	; 100
     f12:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <u8Duty>
     f16:	04 c0       	rjmp	.+8      	; 0xf20 <__vector_5+0x126>
								}
								else
								{
									u8Duty = SPIBUFFER.au8Buffer[2];
     f18:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <SPIBUFFER+0x2>
     f1c:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <u8Duty>
								}
								setPWMDutyPercent(u8Duty);
     f20:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <u8Duty>
     f24:	0e 94 94 13 	call	0x2728	; 0x2728 <setPWMDutyPercent>
							}
						}
						break;
     f28:	41 c2       	rjmp	.+1154   	; 0x13ac <__vector_5+0x5b2>
     f2a:	40 c2       	rjmp	.+1152   	; 0x13ac <__vector_5+0x5b2>
						
						case 0x14:
						u8PLEDFadeActive = 0;
     f2c:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <u8PLEDFadeActive>
						break;
     f30:	3d c2       	rjmp	.+1146   	; 0x13ac <__vector_5+0x5b2>

						case 0x15:
						if(SPIBUFFER.u8Count == 6)
     f32:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <SPIBUFFER+0x40>
     f36:	86 30       	cpi	r24, 0x06	; 6
     f38:	09 f0       	breq	.+2      	; 0xf3c <__vector_5+0x142>
     f3a:	e4 c0       	rjmp	.+456    	; 0x1104 <__vector_5+0x30a>
						{	
							if(SPIBUFFER.au8Buffer[2]>100)
     f3c:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <SPIBUFFER+0x2>
     f40:	85 36       	cpi	r24, 0x65	; 101
     f42:	20 f0       	brcs	.+8      	; 0xf4c <__vector_5+0x152>
							{
								u8PLEDFadeStartPercent=100;
     f44:	84 e6       	ldi	r24, 0x64	; 100
     f46:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <u8PLEDFadeStartPercent>
     f4a:	04 c0       	rjmp	.+8      	; 0xf54 <__vector_5+0x15a>
							}
							else
							{
								u8PLEDFadeStartPercent = SPIBUFFER.au8Buffer[2];
     f4c:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <SPIBUFFER+0x2>
     f50:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <u8PLEDFadeStartPercent>
							}
							
							if(SPIBUFFER.au8Buffer[3]>100)
     f54:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <SPIBUFFER+0x3>
     f58:	85 36       	cpi	r24, 0x65	; 101
     f5a:	20 f0       	brcs	.+8      	; 0xf64 <__vector_5+0x16a>
							{
								u8PLEDFadeStopPercent=100;
     f5c:	84 e6       	ldi	r24, 0x64	; 100
     f5e:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <u8PLEDFadeStopPercent>
     f62:	04 c0       	rjmp	.+8      	; 0xf6c <__vector_5+0x172>
							}
							else
							{
								u8PLEDFadeStopPercent = SPIBUFFER.au8Buffer[3];
     f64:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <SPIBUFFER+0x3>
     f68:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <u8PLEDFadeStopPercent>
							}
							
							u16PLEDFadeStartValue = Map(u8PLEDFadeStartPercent,0,100,0,511);
     f6c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <u8PLEDFadeStartPercent>
     f70:	88 2f       	mov	r24, r24
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	a0 e0       	ldi	r26, 0x00	; 0
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	1f 92       	push	r1
     f7a:	1f 92       	push	r1
     f7c:	21 e0       	ldi	r18, 0x01	; 1
     f7e:	2f 93       	push	r18
     f80:	2f ef       	ldi	r18, 0xFF	; 255
     f82:	2f 93       	push	r18
     f84:	a1 2c       	mov	r10, r1
     f86:	b1 2c       	mov	r11, r1
     f88:	65 01       	movw	r12, r10
     f8a:	14 e6       	ldi	r17, 0x64	; 100
     f8c:	e1 2e       	mov	r14, r17
     f8e:	f1 2c       	mov	r15, r1
     f90:	00 e0       	ldi	r16, 0x00	; 0
     f92:	10 e0       	ldi	r17, 0x00	; 0
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	bc 01       	movw	r22, r24
     f9c:	cd 01       	movw	r24, r26
     f9e:	0e 94 21 15 	call	0x2a42	; 0x2a42 <Map>
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <u16PLEDFadeStartValue+0x1>
     fb2:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <u16PLEDFadeStartValue>
							u16PLEDFadeStopValue = Map(u8PLEDFadeStopPercent,0,100,0,511);
     fb6:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <u8PLEDFadeStopPercent>
     fba:	88 2f       	mov	r24, r24
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	a0 e0       	ldi	r26, 0x00	; 0
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	1f 92       	push	r1
     fc4:	1f 92       	push	r1
     fc6:	21 e0       	ldi	r18, 0x01	; 1
     fc8:	2f 93       	push	r18
     fca:	2f ef       	ldi	r18, 0xFF	; 255
     fcc:	2f 93       	push	r18
     fce:	a1 2c       	mov	r10, r1
     fd0:	b1 2c       	mov	r11, r1
     fd2:	65 01       	movw	r12, r10
     fd4:	14 e6       	ldi	r17, 0x64	; 100
     fd6:	e1 2e       	mov	r14, r17
     fd8:	f1 2c       	mov	r15, r1
     fda:	00 e0       	ldi	r16, 0x00	; 0
     fdc:	10 e0       	ldi	r17, 0x00	; 0
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	a9 01       	movw	r20, r18
     fe4:	bc 01       	movw	r22, r24
     fe6:	cd 01       	movw	r24, r26
     fe8:	0e 94 21 15 	call	0x2a42	; 0x2a42 <Map>
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <u16PLEDFadeStopValue+0x1>
     ffc:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <u16PLEDFadeStopValue>
							u8PLEDFadeTime = SPIBUFFER.au8Buffer[4];
    1000:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <SPIBUFFER+0x4>
    1004:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <u8PLEDFadeTime>
							
							setPWMDuty(u16PLEDFadeStartValue);
    1008:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <u16PLEDFadeStartValue>
    100c:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <u16PLEDFadeStartValue+0x1>
    1010:	0e 94 df 13 	call	0x27be	; 0x27be <setPWMDuty>
							u8Duty = u8PLEDFadeStartPercent;
    1014:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <u8PLEDFadeStartPercent>
    1018:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <u8Duty>
							u16PLEDFadeCurrValue = u16PLEDFadeStartValue;
    101c:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <u16PLEDFadeStartValue>
    1020:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <u16PLEDFadeStartValue+0x1>
    1024:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <u16PLEDFadeCurrValue+0x1>
    1028:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <u16PLEDFadeCurrValue>
							u32PLEDFadeIntCount = 0;
    102c:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <u32PLEDFadeIntCount>
    1030:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <u32PLEDFadeIntCount+0x1>
    1034:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <u32PLEDFadeIntCount+0x2>
    1038:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <u32PLEDFadeIntCount+0x3>
							
							if(u8PLEDFadeStartPercent<u8PLEDFadeStopPercent) // PLED rise
    103c:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <u8PLEDFadeStartPercent>
    1040:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <u8PLEDFadeStopPercent>
    1044:	98 17       	cp	r25, r24
    1046:	58 f5       	brcc	.+86     	; 0x109e <__vector_5+0x2a4>
							{
								u32PLEDFadeIntStep = 6000*u8PLEDFadeTime/(u16PLEDFadeStopValue-u16PLEDFadeStartValue);
    1048:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <u8PLEDFadeTime>
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	80 e7       	ldi	r24, 0x70	; 112
    1052:	97 e1       	ldi	r25, 0x17	; 23
    1054:	28 9f       	mul	r18, r24
    1056:	a0 01       	movw	r20, r0
    1058:	29 9f       	mul	r18, r25
    105a:	50 0d       	add	r21, r0
    105c:	38 9f       	mul	r19, r24
    105e:	50 0d       	add	r21, r0
    1060:	11 24       	eor	r1, r1
    1062:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <u16PLEDFadeStopValue>
    1066:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <u16PLEDFadeStopValue+0x1>
    106a:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <u16PLEDFadeStartValue>
    106e:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <u16PLEDFadeStartValue+0x1>
    1072:	28 1b       	sub	r18, r24
    1074:	39 0b       	sbc	r19, r25
    1076:	ca 01       	movw	r24, r20
    1078:	b9 01       	movw	r22, r18
    107a:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__udivmodhi4>
    107e:	cb 01       	movw	r24, r22
    1080:	cc 01       	movw	r24, r24
    1082:	a0 e0       	ldi	r26, 0x00	; 0
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <u32PLEDFadeIntStep>
    108a:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <u32PLEDFadeIntStep+0x1>
    108e:	a0 93 61 01 	sts	0x0161, r26	; 0x800161 <u32PLEDFadeIntStep+0x2>
    1092:	b0 93 62 01 	sts	0x0162, r27	; 0x800162 <u32PLEDFadeIntStep+0x3>
								u8PLEDFadeDirection = 1;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <u8PLEDFadeDirection>
    109c:	2f c0       	rjmp	.+94     	; 0x10fc <__vector_5+0x302>
							}
							else if(u8PLEDFadeStartPercent>u8PLEDFadeStopPercent) // PLED fall
    109e:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <u8PLEDFadeStartPercent>
    10a2:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <u8PLEDFadeStopPercent>
    10a6:	89 17       	cp	r24, r25
    10a8:	48 f5       	brcc	.+82     	; 0x10fc <__vector_5+0x302>
							{
								u32PLEDFadeIntStep = 6000*u8PLEDFadeTime/(u16PLEDFadeStartValue-u16PLEDFadeStopValue);
    10aa:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <u8PLEDFadeTime>
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	80 e7       	ldi	r24, 0x70	; 112
    10b4:	97 e1       	ldi	r25, 0x17	; 23
    10b6:	28 9f       	mul	r18, r24
    10b8:	a0 01       	movw	r20, r0
    10ba:	29 9f       	mul	r18, r25
    10bc:	50 0d       	add	r21, r0
    10be:	38 9f       	mul	r19, r24
    10c0:	50 0d       	add	r21, r0
    10c2:	11 24       	eor	r1, r1
    10c4:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <u16PLEDFadeStartValue>
    10c8:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <u16PLEDFadeStartValue+0x1>
    10cc:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <u16PLEDFadeStopValue>
    10d0:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <u16PLEDFadeStopValue+0x1>
    10d4:	28 1b       	sub	r18, r24
    10d6:	39 0b       	sbc	r19, r25
    10d8:	ca 01       	movw	r24, r20
    10da:	b9 01       	movw	r22, r18
    10dc:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__udivmodhi4>
    10e0:	cb 01       	movw	r24, r22
    10e2:	cc 01       	movw	r24, r24
    10e4:	a0 e0       	ldi	r26, 0x00	; 0
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <u32PLEDFadeIntStep>
    10ec:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <u32PLEDFadeIntStep+0x1>
    10f0:	a0 93 61 01 	sts	0x0161, r26	; 0x800161 <u32PLEDFadeIntStep+0x2>
    10f4:	b0 93 62 01 	sts	0x0162, r27	; 0x800162 <u32PLEDFadeIntStep+0x3>
								u8PLEDFadeDirection = 0;
    10f8:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <u8PLEDFadeDirection>
							}
							
							u8PLEDFadeActive = 1;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <u8PLEDFadeActive>
						}
						break;
    1102:	54 c1       	rjmp	.+680    	; 0x13ac <__vector_5+0x5b2>
    1104:	53 c1       	rjmp	.+678    	; 0x13ac <__vector_5+0x5b2>
					
						case 0x21:
						if(SPIBUFFER.u8Count == 3)
    1106:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <SPIBUFFER+0x40>
    110a:	83 30       	cpi	r24, 0x03	; 3
    110c:	41 f4       	brne	.+16     	; 0x111e <__vector_5+0x324>
						{
							enableAudio();
    110e:	0e 94 bb 12 	call	0x2576	; 0x2576 <enableAudio>
							u8Status |= (1<<STATUS_AUDIO);
    1112:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <u8Status>
    1116:	82 60       	ori	r24, 0x02	; 2
    1118:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <u8Status>
						}
						break;
    111c:	47 c1       	rjmp	.+654    	; 0x13ac <__vector_5+0x5b2>
    111e:	46 c1       	rjmp	.+652    	; 0x13ac <__vector_5+0x5b2>

						case 0x22:
						if(SPIBUFFER.u8Count == 3)
    1120:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <SPIBUFFER+0x40>
    1124:	83 30       	cpi	r24, 0x03	; 3
    1126:	41 f4       	brne	.+16     	; 0x1138 <__vector_5+0x33e>
						{
							standbyAudio();
    1128:	0e 94 a2 12 	call	0x2544	; 0x2544 <standbyAudio>
							u8Status &= ~(1<<STATUS_AUDIO);
    112c:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <u8Status>
    1130:	8d 7f       	andi	r24, 0xFD	; 253
    1132:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <u8Status>
						}
						break;
    1136:	3a c1       	rjmp	.+628    	; 0x13ac <__vector_5+0x5b2>
    1138:	39 c1       	rjmp	.+626    	; 0x13ac <__vector_5+0x5b2>
					
						case 0x23:
						if(SPIBUFFER.u8Count == 4)
    113a:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <SPIBUFFER+0x40>
    113e:	84 30       	cpi	r24, 0x04	; 4
    1140:	29 f4       	brne	.+10     	; 0x114c <__vector_5+0x352>
						{
							setVolume(SPIBUFFER.au8Buffer[2]);
    1142:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <SPIBUFFER+0x2>
    1146:	0e 94 32 13 	call	0x2664	; 0x2664 <setVolume>
						}
						break;
    114a:	30 c1       	rjmp	.+608    	; 0x13ac <__vector_5+0x5b2>
    114c:	2f c1       	rjmp	.+606    	; 0x13ac <__vector_5+0x5b2>
						
						case 0x31:
						RingBuffer_Insert(&RINGBUFFER,0x31);
    114e:	61 e3       	ldi	r22, 0x31	; 49
    1150:	89 e6       	ldi	r24, 0x69	; 105
    1152:	91 e0       	ldi	r25, 0x01	; 1
    1154:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
						RingBuffer_Insert(&RINGBUFFER,0xFF);						
    1158:	6f ef       	ldi	r22, 0xFF	; 255
    115a:	89 e6       	ldi	r24, 0x69	; 105
    115c:	91 e0       	ldi	r25, 0x01	; 1
    115e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
						break;
    1162:	24 c1       	rjmp	.+584    	; 0x13ac <__vector_5+0x5b2>
						
						case 0x32:
						if(SPIBUFFER.u8Count == 6)
    1164:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <SPIBUFFER+0x40>
    1168:	86 30       	cpi	r24, 0x06	; 6
    116a:	f9 f4       	brne	.+62     	; 0x11aa <__vector_5+0x3b0>
						{
							RingBuffer_Insert(&RINGBUFFER,0x32);
    116c:	62 e3       	ldi	r22, 0x32	; 50
    116e:	89 e6       	ldi	r24, 0x69	; 105
    1170:	91 e0       	ldi	r25, 0x01	; 1
    1172:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[2]);
    1176:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <SPIBUFFER+0x2>
    117a:	68 2f       	mov	r22, r24
    117c:	89 e6       	ldi	r24, 0x69	; 105
    117e:	91 e0       	ldi	r25, 0x01	; 1
    1180:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[3]);
    1184:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <SPIBUFFER+0x3>
    1188:	68 2f       	mov	r22, r24
    118a:	89 e6       	ldi	r24, 0x69	; 105
    118c:	91 e0       	ldi	r25, 0x01	; 1
    118e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[4]);
    1192:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <SPIBUFFER+0x4>
    1196:	68 2f       	mov	r22, r24
    1198:	89 e6       	ldi	r24, 0x69	; 105
    119a:	91 e0       	ldi	r25, 0x01	; 1
    119c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,0xFF);
    11a0:	6f ef       	ldi	r22, 0xFF	; 255
    11a2:	89 e6       	ldi	r24, 0x69	; 105
    11a4:	91 e0       	ldi	r25, 0x01	; 1
    11a6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
						}
						
						case 0x33:
						if(SPIBUFFER.u8Count == 9)
    11aa:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <SPIBUFFER+0x40>
    11ae:	89 30       	cpi	r24, 0x09	; 9
    11b0:	a9 f5       	brne	.+106    	; 0x121c <__vector_5+0x422>
						{
							RingBuffer_Insert(&RINGBUFFER,0x33);
    11b2:	63 e3       	ldi	r22, 0x33	; 51
    11b4:	89 e6       	ldi	r24, 0x69	; 105
    11b6:	91 e0       	ldi	r25, 0x01	; 1
    11b8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[2]);
    11bc:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <SPIBUFFER+0x2>
    11c0:	68 2f       	mov	r22, r24
    11c2:	89 e6       	ldi	r24, 0x69	; 105
    11c4:	91 e0       	ldi	r25, 0x01	; 1
    11c6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[3]);
    11ca:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <SPIBUFFER+0x3>
    11ce:	68 2f       	mov	r22, r24
    11d0:	89 e6       	ldi	r24, 0x69	; 105
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[4]);
    11d8:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <SPIBUFFER+0x4>
    11dc:	68 2f       	mov	r22, r24
    11de:	89 e6       	ldi	r24, 0x69	; 105
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[5]);
    11e6:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <SPIBUFFER+0x5>
    11ea:	68 2f       	mov	r22, r24
    11ec:	89 e6       	ldi	r24, 0x69	; 105
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[6]);
    11f4:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <SPIBUFFER+0x6>
    11f8:	68 2f       	mov	r22, r24
    11fa:	89 e6       	ldi	r24, 0x69	; 105
    11fc:	91 e0       	ldi	r25, 0x01	; 1
    11fe:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[7]);
    1202:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SPIBUFFER+0x7>
    1206:	68 2f       	mov	r22, r24
    1208:	89 e6       	ldi	r24, 0x69	; 105
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,0xFF);
    1210:	6f ef       	ldi	r22, 0xFF	; 255
    1212:	89 e6       	ldi	r24, 0x69	; 105
    1214:	91 e0       	ldi	r25, 0x01	; 1
    1216:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
						}
						break;
    121a:	c8 c0       	rjmp	.+400    	; 0x13ac <__vector_5+0x5b2>
    121c:	c7 c0       	rjmp	.+398    	; 0x13ac <__vector_5+0x5b2>
						
						case 0x41:
						RingBuffer_Insert(&RINGBUFFER,0x41);
    121e:	61 e4       	ldi	r22, 0x41	; 65
    1220:	89 e6       	ldi	r24, 0x69	; 105
    1222:	91 e0       	ldi	r25, 0x01	; 1
    1224:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
						RingBuffer_Insert(&RINGBUFFER,0xFF);
    1228:	6f ef       	ldi	r22, 0xFF	; 255
    122a:	89 e6       	ldi	r24, 0x69	; 105
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
						break;
    1232:	bc c0       	rjmp	.+376    	; 0x13ac <__vector_5+0x5b2>
						
						case 0x42:
						if(SPIBUFFER.u8Count == 11)
    1234:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <SPIBUFFER+0x40>
    1238:	8b 30       	cpi	r24, 0x0B	; 11
    123a:	09 f0       	breq	.+2      	; 0x123e <__vector_5+0x444>
    123c:	43 c0       	rjmp	.+134    	; 0x12c4 <__vector_5+0x4ca>
						{
							RingBuffer_Insert(&RINGBUFFER,0x42);
    123e:	62 e4       	ldi	r22, 0x42	; 66
    1240:	89 e6       	ldi	r24, 0x69	; 105
    1242:	91 e0       	ldi	r25, 0x01	; 1
    1244:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[2]);
    1248:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <SPIBUFFER+0x2>
    124c:	68 2f       	mov	r22, r24
    124e:	89 e6       	ldi	r24, 0x69	; 105
    1250:	91 e0       	ldi	r25, 0x01	; 1
    1252:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[3]);
    1256:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <SPIBUFFER+0x3>
    125a:	68 2f       	mov	r22, r24
    125c:	89 e6       	ldi	r24, 0x69	; 105
    125e:	91 e0       	ldi	r25, 0x01	; 1
    1260:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[4]);
    1264:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <SPIBUFFER+0x4>
    1268:	68 2f       	mov	r22, r24
    126a:	89 e6       	ldi	r24, 0x69	; 105
    126c:	91 e0       	ldi	r25, 0x01	; 1
    126e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[5]);
    1272:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <SPIBUFFER+0x5>
    1276:	68 2f       	mov	r22, r24
    1278:	89 e6       	ldi	r24, 0x69	; 105
    127a:	91 e0       	ldi	r25, 0x01	; 1
    127c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[6]);
    1280:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <SPIBUFFER+0x6>
    1284:	68 2f       	mov	r22, r24
    1286:	89 e6       	ldi	r24, 0x69	; 105
    1288:	91 e0       	ldi	r25, 0x01	; 1
    128a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[7]);
    128e:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SPIBUFFER+0x7>
    1292:	68 2f       	mov	r22, r24
    1294:	89 e6       	ldi	r24, 0x69	; 105
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[8]);
    129c:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x8>
    12a0:	68 2f       	mov	r22, r24
    12a2:	89 e6       	ldi	r24, 0x69	; 105
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[9]);
    12aa:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <SPIBUFFER+0x9>
    12ae:	68 2f       	mov	r22, r24
    12b0:	89 e6       	ldi	r24, 0x69	; 105
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,0xFF);
    12b8:	6f ef       	ldi	r22, 0xFF	; 255
    12ba:	89 e6       	ldi	r24, 0x69	; 105
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
						}
						break;
    12c2:	74 c0       	rjmp	.+232    	; 0x13ac <__vector_5+0x5b2>
    12c4:	73 c0       	rjmp	.+230    	; 0x13ac <__vector_5+0x5b2>

						case 0x43:
						if(SPIBUFFER.u8Count == 17)
    12c6:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <SPIBUFFER+0x40>
    12ca:	81 31       	cpi	r24, 0x11	; 17
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <__vector_5+0x4d6>
    12ce:	6d c0       	rjmp	.+218    	; 0x13aa <__vector_5+0x5b0>
						{
							RingBuffer_Insert(&RINGBUFFER,0x43);
    12d0:	63 e4       	ldi	r22, 0x43	; 67
    12d2:	89 e6       	ldi	r24, 0x69	; 105
    12d4:	91 e0       	ldi	r25, 0x01	; 1
    12d6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[2]);
    12da:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <SPIBUFFER+0x2>
    12de:	68 2f       	mov	r22, r24
    12e0:	89 e6       	ldi	r24, 0x69	; 105
    12e2:	91 e0       	ldi	r25, 0x01	; 1
    12e4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[3]);
    12e8:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <SPIBUFFER+0x3>
    12ec:	68 2f       	mov	r22, r24
    12ee:	89 e6       	ldi	r24, 0x69	; 105
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[4]);
    12f6:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <SPIBUFFER+0x4>
    12fa:	68 2f       	mov	r22, r24
    12fc:	89 e6       	ldi	r24, 0x69	; 105
    12fe:	91 e0       	ldi	r25, 0x01	; 1
    1300:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[5]);
    1304:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <SPIBUFFER+0x5>
    1308:	68 2f       	mov	r22, r24
    130a:	89 e6       	ldi	r24, 0x69	; 105
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[6]);
    1312:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <SPIBUFFER+0x6>
    1316:	68 2f       	mov	r22, r24
    1318:	89 e6       	ldi	r24, 0x69	; 105
    131a:	91 e0       	ldi	r25, 0x01	; 1
    131c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[7]);
    1320:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SPIBUFFER+0x7>
    1324:	68 2f       	mov	r22, r24
    1326:	89 e6       	ldi	r24, 0x69	; 105
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[8]);
    132e:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x8>
    1332:	68 2f       	mov	r22, r24
    1334:	89 e6       	ldi	r24, 0x69	; 105
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[9]);
    133c:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <SPIBUFFER+0x9>
    1340:	68 2f       	mov	r22, r24
    1342:	89 e6       	ldi	r24, 0x69	; 105
    1344:	91 e0       	ldi	r25, 0x01	; 1
    1346:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[10]);
    134a:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <SPIBUFFER+0xa>
    134e:	68 2f       	mov	r22, r24
    1350:	89 e6       	ldi	r24, 0x69	; 105
    1352:	91 e0       	ldi	r25, 0x01	; 1
    1354:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[11]);
    1358:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <SPIBUFFER+0xb>
    135c:	68 2f       	mov	r22, r24
    135e:	89 e6       	ldi	r24, 0x69	; 105
    1360:	91 e0       	ldi	r25, 0x01	; 1
    1362:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[12]);
    1366:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <SPIBUFFER+0xc>
    136a:	68 2f       	mov	r22, r24
    136c:	89 e6       	ldi	r24, 0x69	; 105
    136e:	91 e0       	ldi	r25, 0x01	; 1
    1370:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[13]);
    1374:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <SPIBUFFER+0xd>
    1378:	68 2f       	mov	r22, r24
    137a:	89 e6       	ldi	r24, 0x69	; 105
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[14]);
    1382:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <SPIBUFFER+0xe>
    1386:	68 2f       	mov	r22, r24
    1388:	89 e6       	ldi	r24, 0x69	; 105
    138a:	91 e0       	ldi	r25, 0x01	; 1
    138c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[15]);
    1390:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <SPIBUFFER+0xf>
    1394:	68 2f       	mov	r22, r24
    1396:	89 e6       	ldi	r24, 0x69	; 105
    1398:	91 e0       	ldi	r25, 0x01	; 1
    139a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,0xFF);
    139e:	6f ef       	ldi	r22, 0xFF	; 255
    13a0:	89 e6       	ldi	r24, 0x69	; 105
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
						}
						break;
    13a8:	00 c0       	rjmp	.+0      	; 0x13aa <__vector_5+0x5b0>
    13aa:	00 00       	nop
    13ac:	04 c0       	rjmp	.+8      	; 0x13b6 <__vector_5+0x5bc>
			
		}
	}
	else // SS LOW
	{
		SPIBUFFER.u8Count = 0;
    13ae:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <SPIBUFFER+0x40>
		SPIBUFFER.spiState = READY;
    13b2:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <SPIBUFFER+0x42>
	}
	#ifdef TX_DEBUG
	PORTD &= ~(1<<PORTD1);
    13b6:	8b e2       	ldi	r24, 0x2B	; 43
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	2b e2       	ldi	r18, 0x2B	; 43
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	f9 01       	movw	r30, r18
    13c0:	20 81       	ld	r18, Z
    13c2:	2d 7f       	andi	r18, 0xFD	; 253
    13c4:	fc 01       	movw	r30, r24
    13c6:	20 83       	st	Z, r18
	#endif
}
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	ff 91       	pop	r31
    13d6:	ef 91       	pop	r30
    13d8:	bf 91       	pop	r27
    13da:	af 91       	pop	r26
    13dc:	9f 91       	pop	r25
    13de:	8f 91       	pop	r24
    13e0:	7f 91       	pop	r23
    13e2:	6f 91       	pop	r22
    13e4:	5f 91       	pop	r21
    13e6:	4f 91       	pop	r20
    13e8:	3f 91       	pop	r19
    13ea:	2f 91       	pop	r18
    13ec:	1f 91       	pop	r17
    13ee:	0f 91       	pop	r16
    13f0:	ff 90       	pop	r15
    13f2:	ef 90       	pop	r14
    13f4:	df 90       	pop	r13
    13f6:	cf 90       	pop	r12
    13f8:	bf 90       	pop	r11
    13fa:	af 90       	pop	r10
    13fc:	0f 90       	pop	r0
    13fe:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1402:	0f 90       	pop	r0
    1404:	1f 90       	pop	r1
    1406:	18 95       	reti

00001408 <main>:
// 		
// 	}
// }

int main(void)
{
    1408:	df 92       	push	r13
    140a:	ef 92       	push	r14
    140c:	ff 92       	push	r15
    140e:	0f 93       	push	r16
    1410:	1f 93       	push	r17
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	c6 55       	subi	r28, 0x56	; 86
    141c:	d1 09       	sbc	r29, r1
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
	uint16_t i;
	uint8_t au8Command[8];
	uint8_t u8Temp,u8Count,u8StartTemp,u8StopTemp;
	portInit();
    1428:	0e 94 f5 11 	call	0x23ea	; 0x23ea <portInit>
	adcInit();
    142c:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <adcInit>
	initPWM(0);
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0e 94 55 13 	call	0x26aa	; 0x26aa <initPWM>
	startPWM();
    1438:	0e 94 84 13 	call	0x2708	; 0x2708 <startPWM>
	spiInitBuffer(&SPIBUFFER);
    143c:	8e ee       	ldi	r24, 0xEE	; 238
    143e:	91 e0       	ldi	r25, 0x01	; 1
    1440:	0e 94 86 11 	call	0x230c	; 0x230c <spiInitBuffer>
	spiSlaveInit();
    1444:	0e 94 a5 11 	call	0x234a	; 0x234a <spiSlaveInit>
 	spiPcInt();
    1448:	0e 94 d7 11 	call	0x23ae	; 0x23ae <spiPcInt>
	RingBuffer_InitBuffer(&RINGBUFFER);
    144c:	89 e6       	ldi	r24, 0x69	; 105
    144e:	91 e0       	ldi	r25, 0x01	; 1
    1450:	0e 94 b4 00 	call	0x168	; 0x168 <RingBuffer_InitBuffer>
	initRGBooster();
    1454:	0e 94 40 11 	call	0x2280	; 0x2280 <initRGBooster>
	INT0_Init();
    1458:	0e 94 26 11 	call	0x224c	; 0x224c <INT0_Init>
	INT_5ms_Init();
    145c:	0e 94 9a 14 	call	0x2934	; 0x2934 <INT_5ms_Init>

	wait_1ms(100);
    1460:	84 e6       	ldi	r24, 0x64	; 100
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	0e 94 c6 14 	call	0x298c	; 0x298c <wait_1ms>
	initAudio();
    1468:	0e 94 47 13 	call	0x268e	; 0x268e <initAudio>
	
	#ifdef TX_DEBUG
	DDRD |= (1<<DDRD1);
    146c:	8a e2       	ldi	r24, 0x2A	; 42
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	2a e2       	ldi	r18, 0x2A	; 42
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	f9 01       	movw	r30, r18
    1476:	20 81       	ld	r18, Z
    1478:	22 60       	ori	r18, 0x02	; 2
    147a:	fc 01       	movw	r30, r24
    147c:	20 83       	st	Z, r18
	PORTD &= ~(1<<PORTD1);
    147e:	8b e2       	ldi	r24, 0x2B	; 43
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	2b e2       	ldi	r18, 0x2B	; 43
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	f9 01       	movw	r30, r18
    1488:	20 81       	ld	r18, Z
    148a:	2d 7f       	andi	r18, 0xFD	; 253
    148c:	fc 01       	movw	r30, r24
    148e:	20 83       	st	Z, r18
	#endif

	#ifdef RX_DEBUG
	DDRD |= (1<<DDRD0);
    1490:	8a e2       	ldi	r24, 0x2A	; 42
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	2a e2       	ldi	r18, 0x2A	; 42
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	f9 01       	movw	r30, r18
    149a:	20 81       	ld	r18, Z
    149c:	21 60       	ori	r18, 0x01	; 1
    149e:	fc 01       	movw	r30, r24
    14a0:	20 83       	st	Z, r18
	PORTD &= ~(1<<PORTD0);
    14a2:	8b e2       	ldi	r24, 0x2B	; 43
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	2b e2       	ldi	r18, 0x2B	; 43
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	f9 01       	movw	r30, r18
    14ac:	20 81       	ld	r18, Z
    14ae:	2e 7f       	andi	r18, 0xFE	; 254
    14b0:	fc 01       	movw	r30, r24
    14b2:	20 83       	st	Z, r18
	#endif
		
	sei();
    14b4:	78 94       	sei
	
	u8RGBSingleColor = 0;
    14b6:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <u8RGBSingleColor>
	u8RGBByteIdx = 0;
    14ba:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
	u8RGBIdx = 0;
    14be:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <u8RGBIdx>
	INT0_vect();
    14c2:	0e 94 46 02 	call	0x48c	; 0x48c <__vector_1>
	wait_1ms(100);
    14c6:	84 e6       	ldi	r24, 0x64	; 100
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0e 94 c6 14 	call	0x298c	; 0x298c <wait_1ms>
	
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    14ce:	61 e3       	ldi	r22, 0x31	; 49
    14d0:	89 e6       	ldi	r24, 0x69	; 105
    14d2:	91 e0       	ldi	r25, 0x01	; 1
    14d4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    14d8:	6f ef       	ldi	r22, 0xFF	; 255
    14da:	89 e6       	ldi	r24, 0x69	; 105
    14dc:	91 e0       	ldi	r25, 0x01	; 1
    14de:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    14e2:	62 e3       	ldi	r22, 0x32	; 50
    14e4:	89 e6       	ldi	r24, 0x69	; 105
    14e6:	91 e0       	ldi	r25, 0x01	; 1
    14e8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    14ec:	61 e0       	ldi	r22, 0x01	; 1
    14ee:	89 e6       	ldi	r24, 0x69	; 105
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    14f6:	61 e0       	ldi	r22, 0x01	; 1
    14f8:	89 e6       	ldi	r24, 0x69	; 105
    14fa:	91 e0       	ldi	r25, 0x01	; 1
    14fc:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    1500:	60 e1       	ldi	r22, 0x10	; 16
    1502:	89 e6       	ldi	r24, 0x69	; 105
    1504:	91 e0       	ldi	r25, 0x01	; 1
    1506:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    150a:	6f ef       	ldi	r22, 0xFF	; 255
    150c:	89 e6       	ldi	r24, 0x69	; 105
    150e:	91 e0       	ldi	r25, 0x01	; 1
    1510:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    1514:	61 e3       	ldi	r22, 0x31	; 49
    1516:	89 e6       	ldi	r24, 0x69	; 105
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    151e:	6f ef       	ldi	r22, 0xFF	; 255
    1520:	89 e6       	ldi	r24, 0x69	; 105
    1522:	91 e0       	ldi	r25, 0x01	; 1
    1524:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    1528:	62 e3       	ldi	r22, 0x32	; 50
    152a:	89 e6       	ldi	r24, 0x69	; 105
    152c:	91 e0       	ldi	r25, 0x01	; 1
    152e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    1532:	61 e0       	ldi	r22, 0x01	; 1
    1534:	89 e6       	ldi	r24, 0x69	; 105
    1536:	91 e0       	ldi	r25, 0x01	; 1
    1538:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    153c:	61 e0       	ldi	r22, 0x01	; 1
    153e:	89 e6       	ldi	r24, 0x69	; 105
    1540:	91 e0       	ldi	r25, 0x01	; 1
    1542:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    1546:	60 e1       	ldi	r22, 0x10	; 16
    1548:	89 e6       	ldi	r24, 0x69	; 105
    154a:	91 e0       	ldi	r25, 0x01	; 1
    154c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    1550:	6f ef       	ldi	r22, 0xFF	; 255
    1552:	89 e6       	ldi	r24, 0x69	; 105
    1554:	91 e0       	ldi	r25, 0x01	; 1
    1556:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    155a:	61 e3       	ldi	r22, 0x31	; 49
    155c:	89 e6       	ldi	r24, 0x69	; 105
    155e:	91 e0       	ldi	r25, 0x01	; 1
    1560:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    1564:	6f ef       	ldi	r22, 0xFF	; 255
    1566:	89 e6       	ldi	r24, 0x69	; 105
    1568:	91 e0       	ldi	r25, 0x01	; 1
    156a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    156e:	62 e3       	ldi	r22, 0x32	; 50
    1570:	89 e6       	ldi	r24, 0x69	; 105
    1572:	91 e0       	ldi	r25, 0x01	; 1
    1574:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    1578:	61 e0       	ldi	r22, 0x01	; 1
    157a:	89 e6       	ldi	r24, 0x69	; 105
    157c:	91 e0       	ldi	r25, 0x01	; 1
    157e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    1582:	61 e0       	ldi	r22, 0x01	; 1
    1584:	89 e6       	ldi	r24, 0x69	; 105
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    158c:	60 e1       	ldi	r22, 0x10	; 16
    158e:	89 e6       	ldi	r24, 0x69	; 105
    1590:	91 e0       	ldi	r25, 0x01	; 1
    1592:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    1596:	6f ef       	ldi	r22, 0xFF	; 255
    1598:	89 e6       	ldi	r24, 0x69	; 105
    159a:	91 e0       	ldi	r25, 0x01	; 1
    159c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    15a0:	61 e3       	ldi	r22, 0x31	; 49
    15a2:	89 e6       	ldi	r24, 0x69	; 105
    15a4:	91 e0       	ldi	r25, 0x01	; 1
    15a6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    15aa:	6f ef       	ldi	r22, 0xFF	; 255
    15ac:	89 e6       	ldi	r24, 0x69	; 105
    15ae:	91 e0       	ldi	r25, 0x01	; 1
    15b0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    15b4:	62 e3       	ldi	r22, 0x32	; 50
    15b6:	89 e6       	ldi	r24, 0x69	; 105
    15b8:	91 e0       	ldi	r25, 0x01	; 1
    15ba:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    15be:	61 e0       	ldi	r22, 0x01	; 1
    15c0:	89 e6       	ldi	r24, 0x69	; 105
    15c2:	91 e0       	ldi	r25, 0x01	; 1
    15c4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    15c8:	61 e0       	ldi	r22, 0x01	; 1
    15ca:	89 e6       	ldi	r24, 0x69	; 105
    15cc:	91 e0       	ldi	r25, 0x01	; 1
    15ce:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    15d2:	60 e1       	ldi	r22, 0x10	; 16
    15d4:	89 e6       	ldi	r24, 0x69	; 105
    15d6:	91 e0       	ldi	r25, 0x01	; 1
    15d8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    15dc:	6f ef       	ldi	r22, 0xFF	; 255
    15de:	89 e6       	ldi	r24, 0x69	; 105
    15e0:	91 e0       	ldi	r25, 0x01	; 1
    15e2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    15e6:	61 e3       	ldi	r22, 0x31	; 49
    15e8:	89 e6       	ldi	r24, 0x69	; 105
    15ea:	91 e0       	ldi	r25, 0x01	; 1
    15ec:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    15f0:	6f ef       	ldi	r22, 0xFF	; 255
    15f2:	89 e6       	ldi	r24, 0x69	; 105
    15f4:	91 e0       	ldi	r25, 0x01	; 1
    15f6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    15fa:	62 e3       	ldi	r22, 0x32	; 50
    15fc:	89 e6       	ldi	r24, 0x69	; 105
    15fe:	91 e0       	ldi	r25, 0x01	; 1
    1600:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    1604:	61 e0       	ldi	r22, 0x01	; 1
    1606:	89 e6       	ldi	r24, 0x69	; 105
    1608:	91 e0       	ldi	r25, 0x01	; 1
    160a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    160e:	61 e0       	ldi	r22, 0x01	; 1
    1610:	89 e6       	ldi	r24, 0x69	; 105
    1612:	91 e0       	ldi	r25, 0x01	; 1
    1614:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    1618:	60 e1       	ldi	r22, 0x10	; 16
    161a:	89 e6       	ldi	r24, 0x69	; 105
    161c:	91 e0       	ldi	r25, 0x01	; 1
    161e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    1622:	6f ef       	ldi	r22, 0xFF	; 255
    1624:	89 e6       	ldi	r24, 0x69	; 105
    1626:	91 e0       	ldi	r25, 0x01	; 1
    1628:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <RingBuffer_Insert>
		
	
    while (1) 
    {
		if(u8RGBAnimation)
    162c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u8RGBAnimation>
    1630:	88 23       	and	r24, r24
    1632:	09 f4       	brne	.+2      	; 0x1636 <main+0x22e>
    1634:	87 c3       	rjmp	.+1806   	; 0x1d44 <main+0x93c>
		{
			if(RingBuffer_CountChar(&RINGBUFFER,0xFF))
    1636:	6f ef       	ldi	r22, 0xFF	; 255
    1638:	89 e6       	ldi	r24, 0x69	; 105
    163a:	91 e0       	ldi	r25, 0x01	; 1
    163c:	0e 94 b2 01 	call	0x364	; 0x364 <RingBuffer_CountChar>
    1640:	88 23       	and	r24, r24
    1642:	09 f4       	brne	.+2      	; 0x1646 <main+0x23e>
    1644:	a7 c0       	rjmp	.+334    	; 0x1794 <main+0x38c>
			{
				RingBuffer_RemoveUntilChar(&RINGBUFFER,au8Command,0xFF,0);
    1646:	ce 01       	movw	r24, r28
    1648:	07 96       	adiw	r24, 0x07	; 7
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	4f ef       	ldi	r20, 0xFF	; 255
    164e:	bc 01       	movw	r22, r24
    1650:	89 e6       	ldi	r24, 0x69	; 105
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <RingBuffer_RemoveUntilChar>
				
				switch(au8Command[0])
    1658:	8f 81       	ldd	r24, Y+7	; 0x07
    165a:	88 2f       	mov	r24, r24
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	82 34       	cpi	r24, 0x42	; 66
    1660:	91 05       	cpc	r25, r1
    1662:	59 f0       	breq	.+22     	; 0x167a <main+0x272>
    1664:	83 34       	cpi	r24, 0x43	; 67
    1666:	91 05       	cpc	r25, r1
    1668:	09 f4       	brne	.+2      	; 0x166c <main+0x264>
    166a:	41 c0       	rjmp	.+130    	; 0x16ee <main+0x2e6>
    166c:	81 34       	cpi	r24, 0x41	; 65
    166e:	91 05       	cpc	r25, r1
    1670:	09 f0       	breq	.+2      	; 0x1674 <main+0x26c>
    1672:	90 c0       	rjmp	.+288    	; 0x1794 <main+0x38c>
				{
					case 0x41:
					u8RGBAnimation = 0;
    1674:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <u8RGBAnimation>
					break;
    1678:	8d c0       	rjmp	.+282    	; 0x1794 <main+0x38c>
					
					case 0x42:
					if(strlen(au8Command) == 9)
    167a:	ce 01       	movw	r24, r28
    167c:	07 96       	adiw	r24, 0x07	; 7
    167e:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <strlen>
    1682:	09 97       	sbiw	r24, 0x09	; 9
    1684:	99 f5       	brne	.+102    	; 0x16ec <main+0x2e4>
					{
						u8RGBStartRed = au8Command[1]-1;
    1686:	88 85       	ldd	r24, Y+8	; 0x08
    1688:	81 50       	subi	r24, 0x01	; 1
    168a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8RGBStartRed>
						u8RGBStartGreen = au8Command[2]-1;
    168e:	89 85       	ldd	r24, Y+9	; 0x09
    1690:	81 50       	subi	r24, 0x01	; 1
    1692:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8RGBStartGreen>
						u8RGBStartBlue = au8Command[3]-1;
    1696:	8a 85       	ldd	r24, Y+10	; 0x0a
    1698:	81 50       	subi	r24, 0x01	; 1
    169a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <u8RGBStartBlue>
						u8RGBStopRed = au8Command[4]-1;
    169e:	8b 85       	ldd	r24, Y+11	; 0x0b
    16a0:	81 50       	subi	r24, 0x01	; 1
    16a2:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8RGBStopRed>
						u8RGBStopGreen = au8Command[5]-1;
    16a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    16a8:	81 50       	subi	r24, 0x01	; 1
    16aa:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <u8RGBStopGreen>
						u8RGBStopBlue = au8Command[6]-1;
    16ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b0:	81 50       	subi	r24, 0x01	; 1
    16b2:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <u8RGBStopBlue>
						u16RGBTime = ((uint16_t)au8Command[7])*200;
    16b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	48 ec       	ldi	r20, 0xC8	; 200
    16be:	42 9f       	mul	r20, r18
    16c0:	c0 01       	movw	r24, r0
    16c2:	43 9f       	mul	r20, r19
    16c4:	90 0d       	add	r25, r0
    16c6:	11 24       	eor	r1, r1
    16c8:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <u16RGBTime+0x1>
    16cc:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <u16RGBTime>
						u8RGBBounce = au8Command[8]-1;
    16d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d2:	81 50       	subi	r24, 0x01	; 1
    16d4:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8RGBBounce>
						u8RGBBounceDirection = 0;
    16d8:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <u8RGBBounceDirection>
						u16RGBTimeCounter = 0;
    16dc:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <u16RGBTimeCounter+0x1>
    16e0:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <u16RGBTimeCounter>
						u8RGBAnimation = 1;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <u8RGBAnimation>
					}
					break;
    16ea:	54 c0       	rjmp	.+168    	; 0x1794 <main+0x38c>
    16ec:	53 c0       	rjmp	.+166    	; 0x1794 <main+0x38c>

					case 0x43:
					if(strlen(au8Command) == 15)
    16ee:	ce 01       	movw	r24, r28
    16f0:	07 96       	adiw	r24, 0x07	; 7
    16f2:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <strlen>
    16f6:	0f 97       	sbiw	r24, 0x0f	; 15
    16f8:	09 f0       	breq	.+2      	; 0x16fc <main+0x2f4>
    16fa:	4b c0       	rjmp	.+150    	; 0x1792 <main+0x38a>
					{
						u8RGBStartRed = au8Command[1]-1;
    16fc:	88 85       	ldd	r24, Y+8	; 0x08
    16fe:	81 50       	subi	r24, 0x01	; 1
    1700:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8RGBStartRed>
						u8RGBStartGreen = au8Command[2]-1;
    1704:	89 85       	ldd	r24, Y+9	; 0x09
    1706:	81 50       	subi	r24, 0x01	; 1
    1708:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8RGBStartGreen>
						u8RGBStartBlue = au8Command[3]-1;
    170c:	8a 85       	ldd	r24, Y+10	; 0x0a
    170e:	81 50       	subi	r24, 0x01	; 1
    1710:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <u8RGBStartBlue>
						u8RGBStartMiddleRed = au8Command[4]-1;
    1714:	8b 85       	ldd	r24, Y+11	; 0x0b
    1716:	81 50       	subi	r24, 0x01	; 1
    1718:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <u8RGBStartMiddleRed>
						u8RGBStartMiddleGreen = au8Command[5]-1;
    171c:	8c 85       	ldd	r24, Y+12	; 0x0c
    171e:	81 50       	subi	r24, 0x01	; 1
    1720:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <u8RGBStartMiddleGreen>
						u8RGBStartMiddleBlue = au8Command[6]-1;
    1724:	8d 85       	ldd	r24, Y+13	; 0x0d
    1726:	81 50       	subi	r24, 0x01	; 1
    1728:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8RGBStartMiddleBlue>
						u8RGBStopRed = au8Command[7]-1;
    172c:	8e 85       	ldd	r24, Y+14	; 0x0e
    172e:	81 50       	subi	r24, 0x01	; 1
    1730:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8RGBStopRed>
						u8RGBStopGreen = au8Command[8]-1;
    1734:	8f 85       	ldd	r24, Y+15	; 0x0f
    1736:	81 50       	subi	r24, 0x01	; 1
    1738:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <u8RGBStopGreen>
						u8RGBStopBlue = au8Command[9]-1;
    173c:	88 89       	ldd	r24, Y+16	; 0x10
    173e:	81 50       	subi	r24, 0x01	; 1
    1740:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <u8RGBStopBlue>
						u8RGBStopMiddleRed = au8Command[10]-1;
    1744:	89 89       	ldd	r24, Y+17	; 0x11
    1746:	81 50       	subi	r24, 0x01	; 1
    1748:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <u8RGBStopMiddleRed>
						u8RGBStopMiddleGreen = au8Command[11]-1;
    174c:	8a 89       	ldd	r24, Y+18	; 0x12
    174e:	81 50       	subi	r24, 0x01	; 1
    1750:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <u8RGBStopMiddleGreen>
						u8RGBStopMiddleBlue = au8Command[12]-1;
    1754:	8b 89       	ldd	r24, Y+19	; 0x13
    1756:	81 50       	subi	r24, 0x01	; 1
    1758:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <u8RGBStopMiddleBlue>
						u16RGBTime = ((uint16_t)au8Command[13])*200;
    175c:	8c 89       	ldd	r24, Y+20	; 0x14
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	48 ec       	ldi	r20, 0xC8	; 200
    1764:	42 9f       	mul	r20, r18
    1766:	c0 01       	movw	r24, r0
    1768:	43 9f       	mul	r20, r19
    176a:	90 0d       	add	r25, r0
    176c:	11 24       	eor	r1, r1
    176e:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <u16RGBTime+0x1>
    1772:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <u16RGBTime>
						u8RGBBounce = au8Command[14]-1;
    1776:	8d 89       	ldd	r24, Y+21	; 0x15
    1778:	81 50       	subi	r24, 0x01	; 1
    177a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8RGBBounce>
						u8RGBBounceDirection = 0;
    177e:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <u8RGBBounceDirection>
						u16RGBTimeCounter = 0;
    1782:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <u16RGBTimeCounter+0x1>
    1786:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <u16RGBTimeCounter>
						u8RGBAnimation = 2;
    178a:	82 e0       	ldi	r24, 0x02	; 2
    178c:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <u8RGBAnimation>
					}
					break;
    1790:	00 c0       	rjmp	.+0      	; 0x1792 <main+0x38a>
    1792:	00 00       	nop
				}
			}
			
			if(u8RGBNewDataReady==0)
    1794:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8RGBNewDataReady>
    1798:	88 23       	and	r24, r24
    179a:	09 f0       	breq	.+2      	; 0x179e <main+0x396>
    179c:	56 c5       	rjmp	.+2732   	; 0x224a <main+0xe42>
			{
				#ifdef RX_DEBUG
				PORTD |= (1<<PORTD0);
    179e:	8b e2       	ldi	r24, 0x2B	; 43
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	2b e2       	ldi	r18, 0x2B	; 43
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	f9 01       	movw	r30, r18
    17a8:	20 81       	ld	r18, Z
    17aa:	21 60       	ori	r18, 0x01	; 1
    17ac:	fc 01       	movw	r30, r24
    17ae:	20 83       	st	Z, r18
				#endif
				
				switch(u8RGBAnimation)
    17b0:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u8RGBAnimation>
    17b4:	88 2f       	mov	r24, r24
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	91 05       	cpc	r25, r1
    17bc:	21 f0       	breq	.+8      	; 0x17c6 <main+0x3be>
    17be:	02 97       	sbiw	r24, 0x02	; 2
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <main+0x3bc>
    17c2:	40 c1       	rjmp	.+640    	; 0x1a44 <main+0x63c>
    17c4:	b5 c2       	rjmp	.+1386   	; 0x1d30 <main+0x928>
				{
					case 1:
					if(u8RGBStartRed<u8RGBStopRed)
    17c6:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <u8RGBStartRed>
    17ca:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    17ce:	98 17       	cp	r25, r24
    17d0:	88 f5       	brcc	.+98     	; 0x1834 <main+0x42c>
					{
						u8RGBRed = (uint8_t)(((uint32_t)(u8RGBStopRed-u8RGBStartRed))*u16RGBTimeCounter/u16RGBTime + u8RGBStartRed);
    17d2:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    17de:	88 2f       	mov	r24, r24
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	a9 01       	movw	r20, r18
    17e4:	48 1b       	sub	r20, r24
    17e6:	59 0b       	sbc	r21, r25
    17e8:	ca 01       	movw	r24, r20
    17ea:	9c 01       	movw	r18, r24
    17ec:	99 0f       	add	r25, r25
    17ee:	44 0b       	sbc	r20, r20
    17f0:	55 0b       	sbc	r21, r21
    17f2:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    17f6:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    17fa:	cc 01       	movw	r24, r24
    17fc:	a0 e0       	ldi	r26, 0x00	; 0
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	bc 01       	movw	r22, r24
    1802:	cd 01       	movw	r24, r26
    1804:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsi3>
    1808:	7b 01       	movw	r14, r22
    180a:	8c 01       	movw	r16, r24
    180c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    1810:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    1814:	9c 01       	movw	r18, r24
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	50 e0       	ldi	r21, 0x00	; 0
    181a:	c8 01       	movw	r24, r16
    181c:	b7 01       	movw	r22, r14
    181e:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__udivmodsi4>
    1822:	da 01       	movw	r26, r20
    1824:	c9 01       	movw	r24, r18
    1826:	98 2f       	mov	r25, r24
    1828:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    182c:	89 0f       	add	r24, r25
    182e:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <u8RGBRed>
    1832:	31 c0       	rjmp	.+98     	; 0x1896 <main+0x48e>
					}
					else
					{
						u8RGBRed = (uint8_t)(u8RGBStartRed - ((uint32_t)(u8RGBStartRed-u8RGBStopRed))*u16RGBTimeCounter/u16RGBTime);
    1834:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <u8RGBStartRed>
    1838:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    1844:	88 2f       	mov	r24, r24
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	f9 01       	movw	r30, r18
    184a:	e8 1b       	sub	r30, r24
    184c:	f9 0b       	sbc	r31, r25
    184e:	cf 01       	movw	r24, r30
    1850:	9c 01       	movw	r18, r24
    1852:	99 0f       	add	r25, r25
    1854:	44 0b       	sbc	r20, r20
    1856:	55 0b       	sbc	r21, r21
    1858:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    185c:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    1860:	cc 01       	movw	r24, r24
    1862:	a0 e0       	ldi	r26, 0x00	; 0
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	bc 01       	movw	r22, r24
    1868:	cd 01       	movw	r24, r26
    186a:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsi3>
    186e:	7b 01       	movw	r14, r22
    1870:	8c 01       	movw	r16, r24
    1872:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    1876:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    187a:	9c 01       	movw	r18, r24
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	50 e0       	ldi	r21, 0x00	; 0
    1880:	c8 01       	movw	r24, r16
    1882:	b7 01       	movw	r22, r14
    1884:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__udivmodsi4>
    1888:	da 01       	movw	r26, r20
    188a:	c9 01       	movw	r24, r18
    188c:	fd 2d       	mov	r31, r13
    188e:	f8 1b       	sub	r31, r24
    1890:	8f 2f       	mov	r24, r31
    1892:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <u8RGBRed>
					}
					
					if(u8RGBStartGreen<u8RGBStopGreen)
    1896:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <u8RGBStartGreen>
    189a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    189e:	98 17       	cp	r25, r24
    18a0:	88 f5       	brcc	.+98     	; 0x1904 <main+0x4fc>
					{
						u8RGBGreen = (uint8_t)(((uint32_t)(u8RGBStopGreen-u8RGBStartGreen))*u16RGBTimeCounter/u16RGBTime + u8RGBStartGreen);
    18a2:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    18ae:	88 2f       	mov	r24, r24
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	a9 01       	movw	r20, r18
    18b4:	48 1b       	sub	r20, r24
    18b6:	59 0b       	sbc	r21, r25
    18b8:	ca 01       	movw	r24, r20
    18ba:	9c 01       	movw	r18, r24
    18bc:	99 0f       	add	r25, r25
    18be:	44 0b       	sbc	r20, r20
    18c0:	55 0b       	sbc	r21, r21
    18c2:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    18c6:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    18ca:	cc 01       	movw	r24, r24
    18cc:	a0 e0       	ldi	r26, 0x00	; 0
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	bc 01       	movw	r22, r24
    18d2:	cd 01       	movw	r24, r26
    18d4:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsi3>
    18d8:	7b 01       	movw	r14, r22
    18da:	8c 01       	movw	r16, r24
    18dc:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    18e0:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    18e4:	9c 01       	movw	r18, r24
    18e6:	40 e0       	ldi	r20, 0x00	; 0
    18e8:	50 e0       	ldi	r21, 0x00	; 0
    18ea:	c8 01       	movw	r24, r16
    18ec:	b7 01       	movw	r22, r14
    18ee:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__udivmodsi4>
    18f2:	da 01       	movw	r26, r20
    18f4:	c9 01       	movw	r24, r18
    18f6:	98 2f       	mov	r25, r24
    18f8:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    18fc:	89 0f       	add	r24, r25
    18fe:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u8RGBGreen>
    1902:	31 c0       	rjmp	.+98     	; 0x1966 <main+0x55e>
					}
					else
					{
						u8RGBGreen = (uint8_t)(u8RGBStartGreen - ((uint32_t)(u8RGBStartGreen-u8RGBStopGreen))*u16RGBTimeCounter/u16RGBTime);
    1904:	d0 90 44 01 	lds	r13, 0x0144	; 0x800144 <u8RGBStartGreen>
    1908:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    1914:	88 2f       	mov	r24, r24
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	f9 01       	movw	r30, r18
    191a:	e8 1b       	sub	r30, r24
    191c:	f9 0b       	sbc	r31, r25
    191e:	cf 01       	movw	r24, r30
    1920:	9c 01       	movw	r18, r24
    1922:	99 0f       	add	r25, r25
    1924:	44 0b       	sbc	r20, r20
    1926:	55 0b       	sbc	r21, r21
    1928:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    192c:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    1930:	cc 01       	movw	r24, r24
    1932:	a0 e0       	ldi	r26, 0x00	; 0
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	bc 01       	movw	r22, r24
    1938:	cd 01       	movw	r24, r26
    193a:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsi3>
    193e:	7b 01       	movw	r14, r22
    1940:	8c 01       	movw	r16, r24
    1942:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    1946:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    194a:	9c 01       	movw	r18, r24
    194c:	40 e0       	ldi	r20, 0x00	; 0
    194e:	50 e0       	ldi	r21, 0x00	; 0
    1950:	c8 01       	movw	r24, r16
    1952:	b7 01       	movw	r22, r14
    1954:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__udivmodsi4>
    1958:	da 01       	movw	r26, r20
    195a:	c9 01       	movw	r24, r18
    195c:	fd 2d       	mov	r31, r13
    195e:	f8 1b       	sub	r31, r24
    1960:	8f 2f       	mov	r24, r31
    1962:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u8RGBGreen>
					}
					
					if(u8RGBStartBlue<u8RGBStopBlue)
    1966:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <u8RGBStartBlue>
    196a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    196e:	98 17       	cp	r25, r24
    1970:	88 f5       	brcc	.+98     	; 0x19d4 <main+0x5cc>
					{
						u8RGBBlue = (uint8_t)(((uint32_t)(u8RGBStopBlue-u8RGBStartBlue))*u16RGBTimeCounter/u16RGBTime + u8RGBStartBlue);
    1972:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    197e:	88 2f       	mov	r24, r24
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a9 01       	movw	r20, r18
    1984:	48 1b       	sub	r20, r24
    1986:	59 0b       	sbc	r21, r25
    1988:	ca 01       	movw	r24, r20
    198a:	9c 01       	movw	r18, r24
    198c:	99 0f       	add	r25, r25
    198e:	44 0b       	sbc	r20, r20
    1990:	55 0b       	sbc	r21, r21
    1992:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    1996:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    199a:	cc 01       	movw	r24, r24
    199c:	a0 e0       	ldi	r26, 0x00	; 0
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	bc 01       	movw	r22, r24
    19a2:	cd 01       	movw	r24, r26
    19a4:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsi3>
    19a8:	7b 01       	movw	r14, r22
    19aa:	8c 01       	movw	r16, r24
    19ac:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    19b0:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    19b4:	9c 01       	movw	r18, r24
    19b6:	40 e0       	ldi	r20, 0x00	; 0
    19b8:	50 e0       	ldi	r21, 0x00	; 0
    19ba:	c8 01       	movw	r24, r16
    19bc:	b7 01       	movw	r22, r14
    19be:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__udivmodsi4>
    19c2:	da 01       	movw	r26, r20
    19c4:	c9 01       	movw	r24, r18
    19c6:	98 2f       	mov	r25, r24
    19c8:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    19cc:	89 0f       	add	r24, r25
    19ce:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <u8RGBBlue>
    19d2:	31 c0       	rjmp	.+98     	; 0x1a36 <main+0x62e>
					}
					else
					{
						u8RGBBlue = (uint8_t)(u8RGBStartBlue - ((uint32_t)(u8RGBStartBlue-u8RGBStopBlue))*u16RGBTimeCounter/u16RGBTime);
    19d4:	d0 90 45 01 	lds	r13, 0x0145	; 0x800145 <u8RGBStartBlue>
    19d8:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    19e4:	88 2f       	mov	r24, r24
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	f9 01       	movw	r30, r18
    19ea:	e8 1b       	sub	r30, r24
    19ec:	f9 0b       	sbc	r31, r25
    19ee:	cf 01       	movw	r24, r30
    19f0:	9c 01       	movw	r18, r24
    19f2:	99 0f       	add	r25, r25
    19f4:	44 0b       	sbc	r20, r20
    19f6:	55 0b       	sbc	r21, r21
    19f8:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    19fc:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    1a00:	cc 01       	movw	r24, r24
    1a02:	a0 e0       	ldi	r26, 0x00	; 0
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	bc 01       	movw	r22, r24
    1a08:	cd 01       	movw	r24, r26
    1a0a:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsi3>
    1a0e:	7b 01       	movw	r14, r22
    1a10:	8c 01       	movw	r16, r24
    1a12:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    1a16:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    1a1a:	9c 01       	movw	r18, r24
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	50 e0       	ldi	r21, 0x00	; 0
    1a20:	c8 01       	movw	r24, r16
    1a22:	b7 01       	movw	r22, r14
    1a24:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__udivmodsi4>
    1a28:	da 01       	movw	r26, r20
    1a2a:	c9 01       	movw	r24, r18
    1a2c:	fd 2d       	mov	r31, r13
    1a2e:	f8 1b       	sub	r31, r24
    1a30:	8f 2f       	mov	r24, r31
    1a32:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <u8RGBBlue>
					}
					u8RGBSingleColor = 1;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8RGBSingleColor>
					u8RGBNewDataReady = 1;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBNewDataReady>
					break;
    1a42:	76 c1       	rjmp	.+748    	; 0x1d30 <main+0x928>

					case 2:
					u8Count = LED_COUNT/2;
    1a44:	8a e0       	ldi	r24, 0x0A	; 10
    1a46:	8e 83       	std	Y+6, r24	; 0x06
					for(i=0;i<u8Count;i++)
    1a48:	1a 82       	std	Y+2, r1	; 0x02
    1a4a:	19 82       	std	Y+1, r1	; 0x01
    1a4c:	62 c1       	rjmp	.+708    	; 0x1d12 <main+0x90a>
					{
						if(u8RGBStartRed<u8RGBStartMiddleRed)
    1a4e:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <u8RGBStartRed>
    1a52:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u8RGBStartMiddleRed>
    1a56:	98 17       	cp	r25, r24
    1a58:	78 f5       	brcc	.+94     	; 0x1ab8 <main+0x6b0>
						{
							u8StartTemp = (uint8_t)(((uint32_t)(u8RGBStartMiddleRed-u8RGBStartRed))*i/(u8Count-1)+u8RGBStartRed);
    1a5a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u8RGBStartMiddleRed>
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    1a66:	88 2f       	mov	r24, r24
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	a9 01       	movw	r20, r18
    1a6c:	48 1b       	sub	r20, r24
    1a6e:	59 0b       	sbc	r21, r25
    1a70:	ca 01       	movw	r24, r20
    1a72:	9c 01       	movw	r18, r24
    1a74:	99 0f       	add	r25, r25
    1a76:	44 0b       	sbc	r20, r20
    1a78:	55 0b       	sbc	r21, r21
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7e:	cc 01       	movw	r24, r24
    1a80:	a0 e0       	ldi	r26, 0x00	; 0
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	bc 01       	movw	r22, r24
    1a86:	cd 01       	movw	r24, r26
    1a88:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsi3>
    1a8c:	7b 01       	movw	r14, r22
    1a8e:	8c 01       	movw	r16, r24
    1a90:	8e 81       	ldd	r24, Y+6	; 0x06
    1a92:	88 2f       	mov	r24, r24
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	9c 01       	movw	r18, r24
    1a9a:	99 0f       	add	r25, r25
    1a9c:	44 0b       	sbc	r20, r20
    1a9e:	55 0b       	sbc	r21, r21
    1aa0:	c8 01       	movw	r24, r16
    1aa2:	b7 01       	movw	r22, r14
    1aa4:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__udivmodsi4>
    1aa8:	da 01       	movw	r26, r20
    1aaa:	c9 01       	movw	r24, r18
    1aac:	98 2f       	mov	r25, r24
    1aae:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    1ab2:	89 0f       	add	r24, r25
    1ab4:	8c 83       	std	Y+4, r24	; 0x04
    1ab6:	2f c0       	rjmp	.+94     	; 0x1b16 <main+0x70e>
						}
						else
						{
							u8StartTemp = (uint8_t)(u8RGBStartRed-((uint32_t)(u8RGBStartRed-u8RGBStartMiddleRed))*i/(u8Count-1));
    1ab8:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <u8RGBStartRed>
    1abc:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u8RGBStartMiddleRed>
    1ac8:	88 2f       	mov	r24, r24
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	f9 01       	movw	r30, r18
    1ace:	e8 1b       	sub	r30, r24
    1ad0:	f9 0b       	sbc	r31, r25
    1ad2:	cf 01       	movw	r24, r30
    1ad4:	9c 01       	movw	r18, r24
    1ad6:	99 0f       	add	r25, r25
    1ad8:	44 0b       	sbc	r20, r20
    1ada:	55 0b       	sbc	r21, r21
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	cc 01       	movw	r24, r24
    1ae2:	a0 e0       	ldi	r26, 0x00	; 0
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	bc 01       	movw	r22, r24
    1ae8:	cd 01       	movw	r24, r26
    1aea:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsi3>
    1aee:	7b 01       	movw	r14, r22
    1af0:	8c 01       	movw	r16, r24
    1af2:	8e 81       	ldd	r24, Y+6	; 0x06
    1af4:	88 2f       	mov	r24, r24
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	9c 01       	movw	r18, r24
    1afc:	99 0f       	add	r25, r25
    1afe:	44 0b       	sbc	r20, r20
    1b00:	55 0b       	sbc	r21, r21
    1b02:	c8 01       	movw	r24, r16
    1b04:	b7 01       	movw	r22, r14
    1b06:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__udivmodsi4>
    1b0a:	da 01       	movw	r26, r20
    1b0c:	c9 01       	movw	r24, r18
    1b0e:	fd 2d       	mov	r31, r13
    1b10:	f8 1b       	sub	r31, r24
    1b12:	8f 2f       	mov	r24, r31
    1b14:	8c 83       	std	Y+4, r24	; 0x04
						}

						if(u8RGBStopRed<u8RGBStopMiddleRed)
    1b16:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <u8RGBStopRed>
    1b1a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u8RGBStopMiddleRed>
    1b1e:	98 17       	cp	r25, r24
    1b20:	78 f5       	brcc	.+94     	; 0x1b80 <main+0x778>
						{
							u8StopTemp = (uint8_t)(((uint32_t)(u8RGBStopMiddleRed-u8RGBStopRed))*i/(u8Count-1)+u8RGBStopRed);
    1b22:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u8RGBStopMiddleRed>
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    1b2e:	88 2f       	mov	r24, r24
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	a9 01       	movw	r20, r18
    1b34:	48 1b       	sub	r20, r24
    1b36:	59 0b       	sbc	r21, r25
    1b38:	ca 01       	movw	r24, r20
    1b3a:	9c 01       	movw	r18, r24
    1b3c:	99 0f       	add	r25, r25
    1b3e:	44 0b       	sbc	r20, r20
    1b40:	55 0b       	sbc	r21, r21
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	9a 81       	ldd	r25, Y+2	; 0x02
    1b46:	cc 01       	movw	r24, r24
    1b48:	a0 e0       	ldi	r26, 0x00	; 0
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	bc 01       	movw	r22, r24
    1b4e:	cd 01       	movw	r24, r26
    1b50:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsi3>
    1b54:	7b 01       	movw	r14, r22
    1b56:	8c 01       	movw	r16, r24
    1b58:	8e 81       	ldd	r24, Y+6	; 0x06
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	9c 01       	movw	r18, r24
    1b62:	99 0f       	add	r25, r25
    1b64:	44 0b       	sbc	r20, r20
    1b66:	55 0b       	sbc	r21, r21
    1b68:	c8 01       	movw	r24, r16
    1b6a:	b7 01       	movw	r22, r14
    1b6c:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__udivmodsi4>
    1b70:	da 01       	movw	r26, r20
    1b72:	c9 01       	movw	r24, r18
    1b74:	98 2f       	mov	r25, r24
    1b76:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    1b7a:	89 0f       	add	r24, r25
    1b7c:	8d 83       	std	Y+5, r24	; 0x05
    1b7e:	2f c0       	rjmp	.+94     	; 0x1bde <main+0x7d6>
						}
						else
						{
							u8StopTemp = (uint8_t)(u8RGBStopRed-((uint32_t)(u8RGBStopRed-u8RGBStopMiddleRed))*i/(u8Count-1));
    1b80:	d0 90 49 01 	lds	r13, 0x0149	; 0x800149 <u8RGBStopRed>
    1b84:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u8RGBStopMiddleRed>
    1b90:	88 2f       	mov	r24, r24
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	f9 01       	movw	r30, r18
    1b96:	e8 1b       	sub	r30, r24
    1b98:	f9 0b       	sbc	r31, r25
    1b9a:	cf 01       	movw	r24, r30
    1b9c:	9c 01       	movw	r18, r24
    1b9e:	99 0f       	add	r25, r25
    1ba0:	44 0b       	sbc	r20, r20
    1ba2:	55 0b       	sbc	r21, r21
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba8:	cc 01       	movw	r24, r24
    1baa:	a0 e0       	ldi	r26, 0x00	; 0
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	bc 01       	movw	r22, r24
    1bb0:	cd 01       	movw	r24, r26
    1bb2:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsi3>
    1bb6:	7b 01       	movw	r14, r22
    1bb8:	8c 01       	movw	r16, r24
    1bba:	8e 81       	ldd	r24, Y+6	; 0x06
    1bbc:	88 2f       	mov	r24, r24
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	9c 01       	movw	r18, r24
    1bc4:	99 0f       	add	r25, r25
    1bc6:	44 0b       	sbc	r20, r20
    1bc8:	55 0b       	sbc	r21, r21
    1bca:	c8 01       	movw	r24, r16
    1bcc:	b7 01       	movw	r22, r14
    1bce:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__udivmodsi4>
    1bd2:	da 01       	movw	r26, r20
    1bd4:	c9 01       	movw	r24, r18
    1bd6:	fd 2d       	mov	r31, r13
    1bd8:	f8 1b       	sub	r31, r24
    1bda:	8f 2f       	mov	r24, r31
    1bdc:	8d 83       	std	Y+5, r24	; 0x05
						}

						if(u8StartTemp<u8StopTemp)
    1bde:	9c 81       	ldd	r25, Y+4	; 0x04
    1be0:	8d 81       	ldd	r24, Y+5	; 0x05
    1be2:	98 17       	cp	r25, r24
    1be4:	68 f5       	brcc	.+90     	; 0x1c40 <main+0x838>
						{
							u8Temp = (uint8_t)(((uint32_t)(u8StopTemp-u8StartTemp))*u16RGBTimeCounter/u16RGBTime + u8StartTemp);
    1be6:	8d 81       	ldd	r24, Y+5	; 0x05
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	8c 81       	ldd	r24, Y+4	; 0x04
    1bee:	88 2f       	mov	r24, r24
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a9 01       	movw	r20, r18
    1bf4:	48 1b       	sub	r20, r24
    1bf6:	59 0b       	sbc	r21, r25
    1bf8:	ca 01       	movw	r24, r20
    1bfa:	9c 01       	movw	r18, r24
    1bfc:	99 0f       	add	r25, r25
    1bfe:	44 0b       	sbc	r20, r20
    1c00:	55 0b       	sbc	r21, r21
    1c02:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    1c06:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    1c0a:	cc 01       	movw	r24, r24
    1c0c:	a0 e0       	ldi	r26, 0x00	; 0
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	bc 01       	movw	r22, r24
    1c12:	cd 01       	movw	r24, r26
    1c14:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsi3>
    1c18:	7b 01       	movw	r14, r22
    1c1a:	8c 01       	movw	r16, r24
    1c1c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    1c20:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    1c24:	9c 01       	movw	r18, r24
    1c26:	40 e0       	ldi	r20, 0x00	; 0
    1c28:	50 e0       	ldi	r21, 0x00	; 0
    1c2a:	c8 01       	movw	r24, r16
    1c2c:	b7 01       	movw	r22, r14
    1c2e:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__udivmodsi4>
    1c32:	da 01       	movw	r26, r20
    1c34:	c9 01       	movw	r24, r18
    1c36:	98 2f       	mov	r25, r24
    1c38:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3a:	89 0f       	add	r24, r25
    1c3c:	8b 83       	std	Y+3, r24	; 0x03
    1c3e:	2c c0       	rjmp	.+88     	; 0x1c98 <main+0x890>
						}
						else
						{
							u8Temp = (uint8_t)(u8StartTemp-((uint32_t)(u8StartTemp-u8StopTemp))*u16RGBTimeCounter/u16RGBTime);
    1c40:	8c 81       	ldd	r24, Y+4	; 0x04
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	8d 81       	ldd	r24, Y+5	; 0x05
    1c48:	88 2f       	mov	r24, r24
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	f9 01       	movw	r30, r18
    1c4e:	e8 1b       	sub	r30, r24
    1c50:	f9 0b       	sbc	r31, r25
    1c52:	cf 01       	movw	r24, r30
    1c54:	9c 01       	movw	r18, r24
    1c56:	99 0f       	add	r25, r25
    1c58:	44 0b       	sbc	r20, r20
    1c5a:	55 0b       	sbc	r21, r21
    1c5c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    1c60:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    1c64:	cc 01       	movw	r24, r24
    1c66:	a0 e0       	ldi	r26, 0x00	; 0
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	bc 01       	movw	r22, r24
    1c6c:	cd 01       	movw	r24, r26
    1c6e:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsi3>
    1c72:	7b 01       	movw	r14, r22
    1c74:	8c 01       	movw	r16, r24
    1c76:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    1c7a:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    1c7e:	9c 01       	movw	r18, r24
    1c80:	40 e0       	ldi	r20, 0x00	; 0
    1c82:	50 e0       	ldi	r21, 0x00	; 0
    1c84:	c8 01       	movw	r24, r16
    1c86:	b7 01       	movw	r22, r14
    1c88:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__udivmodsi4>
    1c8c:	da 01       	movw	r26, r20
    1c8e:	c9 01       	movw	r24, r18
    1c90:	98 2f       	mov	r25, r24
    1c92:	8c 81       	ldd	r24, Y+4	; 0x04
    1c94:	89 1b       	sub	r24, r25
    1c96:	8b 83       	std	Y+3, r24	; 0x03
						}
						au8Red[i] = u8Temp;
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9c:	80 50       	subi	r24, 0x00	; 0
    1c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	20 83       	st	Z, r18
						au8Red[LED_COUNT-i-1] = u8Temp;
    1ca6:	23 e1       	ldi	r18, 0x13	; 19
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	9a 81       	ldd	r25, Y+2	; 0x02
    1cae:	a9 01       	movw	r20, r18
    1cb0:	48 1b       	sub	r20, r24
    1cb2:	59 0b       	sbc	r21, r25
    1cb4:	ca 01       	movw	r24, r20
    1cb6:	80 50       	subi	r24, 0x00	; 0
    1cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cba:	2b 81       	ldd	r18, Y+3	; 0x03
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	20 83       	st	Z, r18

						au8Green[i] = 0;
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc4:	8c 5e       	subi	r24, 0xEC	; 236
    1cc6:	9e 4f       	sbci	r25, 0xFE	; 254
    1cc8:	fc 01       	movw	r30, r24
    1cca:	10 82       	st	Z, r1
						au8Green[LED_COUNT-i-1] = 0;
    1ccc:	23 e1       	ldi	r18, 0x13	; 19
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd4:	a9 01       	movw	r20, r18
    1cd6:	48 1b       	sub	r20, r24
    1cd8:	59 0b       	sbc	r21, r25
    1cda:	ca 01       	movw	r24, r20
    1cdc:	8c 5e       	subi	r24, 0xEC	; 236
    1cde:	9e 4f       	sbci	r25, 0xFE	; 254
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	10 82       	st	Z, r1

						au8Blue[i] = 0;
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce8:	88 5d       	subi	r24, 0xD8	; 216
    1cea:	9e 4f       	sbci	r25, 0xFE	; 254
    1cec:	fc 01       	movw	r30, r24
    1cee:	10 82       	st	Z, r1
						au8Blue[LED_COUNT-i-1] = 0;
    1cf0:	23 e1       	ldi	r18, 0x13	; 19
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf8:	a9 01       	movw	r20, r18
    1cfa:	48 1b       	sub	r20, r24
    1cfc:	59 0b       	sbc	r21, r25
    1cfe:	ca 01       	movw	r24, r20
    1d00:	88 5d       	subi	r24, 0xD8	; 216
    1d02:	9e 4f       	sbci	r25, 0xFE	; 254
    1d04:	fc 01       	movw	r30, r24
    1d06:	10 82       	st	Z, r1
					u8RGBNewDataReady = 1;
					break;

					case 2:
					u8Count = LED_COUNT/2;
					for(i=0;i<u8Count;i++)
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0c:	01 96       	adiw	r24, 0x01	; 1
    1d0e:	9a 83       	std	Y+2, r25	; 0x02
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	8e 81       	ldd	r24, Y+6	; 0x06
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1c:	82 17       	cp	r24, r18
    1d1e:	93 07       	cpc	r25, r19
    1d20:	08 f4       	brcc	.+2      	; 0x1d24 <main+0x91c>
    1d22:	95 ce       	rjmp	.-726    	; 0x1a4e <main+0x646>
						au8Green[LED_COUNT-i-1] = 0;

						au8Blue[i] = 0;
						au8Blue[LED_COUNT-i-1] = 0;
					}
					u8RGBSingleColor = 0;
    1d24:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <u8RGBSingleColor>
					u8RGBNewDataReady = 1;
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBNewDataReady>
					break;
    1d2e:	00 00       	nop
				}

				#ifdef RX_DEBUG
				PORTD &= ~(1<<PORTD0);
    1d30:	8b e2       	ldi	r24, 0x2B	; 43
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	2b e2       	ldi	r18, 0x2B	; 43
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	f9 01       	movw	r30, r18
    1d3a:	20 81       	ld	r18, Z
    1d3c:	2e 7f       	andi	r18, 0xFE	; 254
    1d3e:	fc 01       	movw	r30, r24
    1d40:	20 83       	st	Z, r18
    1d42:	74 cc       	rjmp	.-1816   	; 0x162c <main+0x224>
				#endif
			}
		}
		else // no animation active
		{
			if(RingBuffer_CountChar(&RINGBUFFER,0xFF) && (u8RGBNewDataReady==0))
    1d44:	6f ef       	ldi	r22, 0xFF	; 255
    1d46:	89 e6       	ldi	r24, 0x69	; 105
    1d48:	91 e0       	ldi	r25, 0x01	; 1
    1d4a:	0e 94 b2 01 	call	0x364	; 0x364 <RingBuffer_CountChar>
    1d4e:	88 23       	and	r24, r24
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <main+0x94c>
    1d52:	7b c2       	rjmp	.+1270   	; 0x224a <main+0xe42>
    1d54:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8RGBNewDataReady>
    1d58:	88 23       	and	r24, r24
    1d5a:	09 f0       	breq	.+2      	; 0x1d5e <main+0x956>
    1d5c:	76 c2       	rjmp	.+1260   	; 0x224a <main+0xe42>
			{
				RingBuffer_RemoveUntilChar(&RINGBUFFER,au8Command,0xFF,0);
    1d5e:	ce 01       	movw	r24, r28
    1d60:	07 96       	adiw	r24, 0x07	; 7
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	4f ef       	ldi	r20, 0xFF	; 255
    1d66:	bc 01       	movw	r22, r24
    1d68:	89 e6       	ldi	r24, 0x69	; 105
    1d6a:	91 e0       	ldi	r25, 0x01	; 1
    1d6c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <RingBuffer_RemoveUntilChar>
				
				switch(au8Command[0])
    1d70:	8f 81       	ldd	r24, Y+7	; 0x07
    1d72:	88 2f       	mov	r24, r24
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	83 33       	cpi	r24, 0x33	; 51
    1d78:	91 05       	cpc	r25, r1
    1d7a:	c9 f1       	breq	.+114    	; 0x1dee <main+0x9e6>
    1d7c:	84 33       	cpi	r24, 0x34	; 52
    1d7e:	91 05       	cpc	r25, r1
    1d80:	34 f4       	brge	.+12     	; 0x1d8e <main+0x986>
    1d82:	81 33       	cpi	r24, 0x31	; 49
    1d84:	91 05       	cpc	r25, r1
    1d86:	61 f0       	breq	.+24     	; 0x1da0 <main+0x998>
    1d88:	c2 97       	sbiw	r24, 0x32	; 50
    1d8a:	b9 f0       	breq	.+46     	; 0x1dba <main+0x9b2>
    1d8c:	5e c2       	rjmp	.+1212   	; 0x224a <main+0xe42>
    1d8e:	82 34       	cpi	r24, 0x42	; 66
    1d90:	91 05       	cpc	r25, r1
    1d92:	09 f4       	brne	.+2      	; 0x1d96 <main+0x98e>
    1d94:	cd c1       	rjmp	.+922    	; 0x2130 <main+0xd28>
    1d96:	83 34       	cpi	r24, 0x43	; 67
    1d98:	91 05       	cpc	r25, r1
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <main+0x996>
    1d9c:	03 c2       	rjmp	.+1030   	; 0x21a4 <main+0xd9c>
    1d9e:	55 c2       	rjmp	.+1194   	; 0x224a <main+0xe42>
				{
					case 0x31:
					u8RGBRed = 0;
    1da0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <u8RGBRed>
					u8RGBGreen = 0;
    1da4:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <u8RGBGreen>
					u8RGBBlue = 0;
    1da8:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <u8RGBBlue>
					u8RGBSingleColor = 1;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8RGBSingleColor>
					u8RGBNewDataReady = 1;
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBNewDataReady>
					break;
    1db8:	48 c2       	rjmp	.+1168   	; 0x224a <main+0xe42>
					
					case 0x32:
					if(strlen(au8Command) == 4)
    1dba:	ce 01       	movw	r24, r28
    1dbc:	07 96       	adiw	r24, 0x07	; 7
    1dbe:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <strlen>
    1dc2:	04 97       	sbiw	r24, 0x04	; 4
    1dc4:	99 f4       	brne	.+38     	; 0x1dec <main+0x9e4>
					{
						u8RGBRed = au8Command[1]-1;
    1dc6:	88 85       	ldd	r24, Y+8	; 0x08
    1dc8:	81 50       	subi	r24, 0x01	; 1
    1dca:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <u8RGBRed>
						u8RGBGreen = au8Command[2]-1;
    1dce:	89 85       	ldd	r24, Y+9	; 0x09
    1dd0:	81 50       	subi	r24, 0x01	; 1
    1dd2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u8RGBGreen>
						u8RGBBlue = au8Command[3]-1;
    1dd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dd8:	81 50       	subi	r24, 0x01	; 1
    1dda:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <u8RGBBlue>
						u8RGBSingleColor = 1;
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8RGBSingleColor>
						u8RGBNewDataReady = 1;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBNewDataReady>
					}
					break;
    1dea:	2f c2       	rjmp	.+1118   	; 0x224a <main+0xe42>
    1dec:	2e c2       	rjmp	.+1116   	; 0x224a <main+0xe42>
					
					case 0x33:
					if(strlen(au8Command) == 7)
    1dee:	ce 01       	movw	r24, r28
    1df0:	07 96       	adiw	r24, 0x07	; 7
    1df2:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <strlen>
    1df6:	07 97       	sbiw	r24, 0x07	; 7
    1df8:	09 f0       	breq	.+2      	; 0x1dfc <main+0x9f4>
    1dfa:	99 c1       	rjmp	.+818    	; 0x212e <main+0xd26>
					{
						u8RGBStartRed = au8Command[1]-1;
    1dfc:	88 85       	ldd	r24, Y+8	; 0x08
    1dfe:	81 50       	subi	r24, 0x01	; 1
    1e00:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8RGBStartRed>
						u8RGBStartGreen = au8Command[2]-1;
    1e04:	89 85       	ldd	r24, Y+9	; 0x09
    1e06:	81 50       	subi	r24, 0x01	; 1
    1e08:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8RGBStartGreen>
						u8RGBStartBlue = au8Command[3]-1;
    1e0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e0e:	81 50       	subi	r24, 0x01	; 1
    1e10:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <u8RGBStartBlue>
						u8RGBStopRed = au8Command[4]-1;
    1e14:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e16:	81 50       	subi	r24, 0x01	; 1
    1e18:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8RGBStopRed>
						u8RGBStopGreen = au8Command[5]-1;
    1e1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e1e:	81 50       	subi	r24, 0x01	; 1
    1e20:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <u8RGBStopGreen>
						u8RGBStopBlue = au8Command[6]-1;
    1e24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e26:	81 50       	subi	r24, 0x01	; 1
    1e28:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <u8RGBStopBlue>
						
						
						u8Count = LED_COUNT/2;
    1e2c:	8a e0       	ldi	r24, 0x0A	; 10
    1e2e:	8e 83       	std	Y+6, r24	; 0x06
						for(i=0;i<u8Count;i++)
    1e30:	1a 82       	std	Y+2, r1	; 0x02
    1e32:	19 82       	std	Y+1, r1	; 0x01
    1e34:	6d c1       	rjmp	.+730    	; 0x2110 <main+0xd08>
						{
							if(u8RGBStartRed<u8RGBStopRed)
    1e36:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <u8RGBStartRed>
    1e3a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    1e3e:	98 17       	cp	r25, r24
    1e40:	78 f5       	brcc	.+94     	; 0x1ea0 <main+0xa98>
							{
								u8Temp = (uint8_t)(((uint32_t)(u8RGBStopRed-u8RGBStartRed))*i/(u8Count-1) + u8RGBStartRed);
    1e42:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    1e4e:	88 2f       	mov	r24, r24
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	a9 01       	movw	r20, r18
    1e54:	48 1b       	sub	r20, r24
    1e56:	59 0b       	sbc	r21, r25
    1e58:	ca 01       	movw	r24, r20
    1e5a:	9c 01       	movw	r18, r24
    1e5c:	99 0f       	add	r25, r25
    1e5e:	44 0b       	sbc	r20, r20
    1e60:	55 0b       	sbc	r21, r21
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	9a 81       	ldd	r25, Y+2	; 0x02
    1e66:	cc 01       	movw	r24, r24
    1e68:	a0 e0       	ldi	r26, 0x00	; 0
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	bc 01       	movw	r22, r24
    1e6e:	cd 01       	movw	r24, r26
    1e70:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsi3>
    1e74:	7b 01       	movw	r14, r22
    1e76:	8c 01       	movw	r16, r24
    1e78:	8e 81       	ldd	r24, Y+6	; 0x06
    1e7a:	88 2f       	mov	r24, r24
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	9c 01       	movw	r18, r24
    1e82:	99 0f       	add	r25, r25
    1e84:	44 0b       	sbc	r20, r20
    1e86:	55 0b       	sbc	r21, r21
    1e88:	c8 01       	movw	r24, r16
    1e8a:	b7 01       	movw	r22, r14
    1e8c:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__udivmodsi4>
    1e90:	da 01       	movw	r26, r20
    1e92:	c9 01       	movw	r24, r18
    1e94:	98 2f       	mov	r25, r24
    1e96:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    1e9a:	89 0f       	add	r24, r25
    1e9c:	8b 83       	std	Y+3, r24	; 0x03
    1e9e:	2f c0       	rjmp	.+94     	; 0x1efe <main+0xaf6>
							}
							else
							{
								u8Temp = (uint8_t)(u8RGBStartRed - ((uint32_t)(u8RGBStartRed-u8RGBStopRed))*i/(u8Count-1));
    1ea0:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <u8RGBStartRed>
    1ea4:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    1eb0:	88 2f       	mov	r24, r24
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	f9 01       	movw	r30, r18
    1eb6:	e8 1b       	sub	r30, r24
    1eb8:	f9 0b       	sbc	r31, r25
    1eba:	cf 01       	movw	r24, r30
    1ebc:	9c 01       	movw	r18, r24
    1ebe:	99 0f       	add	r25, r25
    1ec0:	44 0b       	sbc	r20, r20
    1ec2:	55 0b       	sbc	r21, r21
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec8:	cc 01       	movw	r24, r24
    1eca:	a0 e0       	ldi	r26, 0x00	; 0
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	bc 01       	movw	r22, r24
    1ed0:	cd 01       	movw	r24, r26
    1ed2:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsi3>
    1ed6:	7b 01       	movw	r14, r22
    1ed8:	8c 01       	movw	r16, r24
    1eda:	8e 81       	ldd	r24, Y+6	; 0x06
    1edc:	88 2f       	mov	r24, r24
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	9c 01       	movw	r18, r24
    1ee4:	99 0f       	add	r25, r25
    1ee6:	44 0b       	sbc	r20, r20
    1ee8:	55 0b       	sbc	r21, r21
    1eea:	c8 01       	movw	r24, r16
    1eec:	b7 01       	movw	r22, r14
    1eee:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__udivmodsi4>
    1ef2:	da 01       	movw	r26, r20
    1ef4:	c9 01       	movw	r24, r18
    1ef6:	fd 2d       	mov	r31, r13
    1ef8:	f8 1b       	sub	r31, r24
    1efa:	8f 2f       	mov	r24, r31
    1efc:	8b 83       	std	Y+3, r24	; 0x03
							}
							au8Red[i] = u8Temp;
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	9a 81       	ldd	r25, Y+2	; 0x02
    1f02:	80 50       	subi	r24, 0x00	; 0
    1f04:	9f 4f       	sbci	r25, 0xFF	; 255
    1f06:	2b 81       	ldd	r18, Y+3	; 0x03
    1f08:	fc 01       	movw	r30, r24
    1f0a:	20 83       	st	Z, r18
							au8Red[LED_COUNT-i-1] = u8Temp;
    1f0c:	23 e1       	ldi	r18, 0x13	; 19
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	9a 81       	ldd	r25, Y+2	; 0x02
    1f14:	a9 01       	movw	r20, r18
    1f16:	48 1b       	sub	r20, r24
    1f18:	59 0b       	sbc	r21, r25
    1f1a:	ca 01       	movw	r24, r20
    1f1c:	80 50       	subi	r24, 0x00	; 0
    1f1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f20:	2b 81       	ldd	r18, Y+3	; 0x03
    1f22:	fc 01       	movw	r30, r24
    1f24:	20 83       	st	Z, r18
							
							if(u8RGBStartGreen<u8RGBStopGreen)
    1f26:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <u8RGBStartGreen>
    1f2a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    1f2e:	98 17       	cp	r25, r24
    1f30:	78 f5       	brcc	.+94     	; 0x1f90 <main+0xb88>
							{
								u8Temp = (uint8_t)(((uint32_t)(u8RGBStopGreen-u8RGBStartGreen))*i/(u8Count-1) + u8RGBStartGreen);
    1f32:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    1f36:	28 2f       	mov	r18, r24
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    1f3e:	88 2f       	mov	r24, r24
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	a9 01       	movw	r20, r18
    1f44:	48 1b       	sub	r20, r24
    1f46:	59 0b       	sbc	r21, r25
    1f48:	ca 01       	movw	r24, r20
    1f4a:	9c 01       	movw	r18, r24
    1f4c:	99 0f       	add	r25, r25
    1f4e:	44 0b       	sbc	r20, r20
    1f50:	55 0b       	sbc	r21, r21
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	9a 81       	ldd	r25, Y+2	; 0x02
    1f56:	cc 01       	movw	r24, r24
    1f58:	a0 e0       	ldi	r26, 0x00	; 0
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	bc 01       	movw	r22, r24
    1f5e:	cd 01       	movw	r24, r26
    1f60:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsi3>
    1f64:	7b 01       	movw	r14, r22
    1f66:	8c 01       	movw	r16, r24
    1f68:	8e 81       	ldd	r24, Y+6	; 0x06
    1f6a:	88 2f       	mov	r24, r24
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	9c 01       	movw	r18, r24
    1f72:	99 0f       	add	r25, r25
    1f74:	44 0b       	sbc	r20, r20
    1f76:	55 0b       	sbc	r21, r21
    1f78:	c8 01       	movw	r24, r16
    1f7a:	b7 01       	movw	r22, r14
    1f7c:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__udivmodsi4>
    1f80:	da 01       	movw	r26, r20
    1f82:	c9 01       	movw	r24, r18
    1f84:	98 2f       	mov	r25, r24
    1f86:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    1f8a:	89 0f       	add	r24, r25
    1f8c:	8b 83       	std	Y+3, r24	; 0x03
    1f8e:	2f c0       	rjmp	.+94     	; 0x1fee <main+0xbe6>
							}
							else
							{
								u8Temp = (uint8_t)(u8RGBStartGreen - ((uint32_t)(u8RGBStartGreen-u8RGBStopGreen))*i/(u8Count-1));
    1f90:	d0 90 44 01 	lds	r13, 0x0144	; 0x800144 <u8RGBStartGreen>
    1f94:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    1f98:	28 2f       	mov	r18, r24
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    1fa0:	88 2f       	mov	r24, r24
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	f9 01       	movw	r30, r18
    1fa6:	e8 1b       	sub	r30, r24
    1fa8:	f9 0b       	sbc	r31, r25
    1faa:	cf 01       	movw	r24, r30
    1fac:	9c 01       	movw	r18, r24
    1fae:	99 0f       	add	r25, r25
    1fb0:	44 0b       	sbc	r20, r20
    1fb2:	55 0b       	sbc	r21, r21
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb8:	cc 01       	movw	r24, r24
    1fba:	a0 e0       	ldi	r26, 0x00	; 0
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	bc 01       	movw	r22, r24
    1fc0:	cd 01       	movw	r24, r26
    1fc2:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsi3>
    1fc6:	7b 01       	movw	r14, r22
    1fc8:	8c 01       	movw	r16, r24
    1fca:	8e 81       	ldd	r24, Y+6	; 0x06
    1fcc:	88 2f       	mov	r24, r24
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	9c 01       	movw	r18, r24
    1fd4:	99 0f       	add	r25, r25
    1fd6:	44 0b       	sbc	r20, r20
    1fd8:	55 0b       	sbc	r21, r21
    1fda:	c8 01       	movw	r24, r16
    1fdc:	b7 01       	movw	r22, r14
    1fde:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__udivmodsi4>
    1fe2:	da 01       	movw	r26, r20
    1fe4:	c9 01       	movw	r24, r18
    1fe6:	fd 2d       	mov	r31, r13
    1fe8:	f8 1b       	sub	r31, r24
    1fea:	8f 2f       	mov	r24, r31
    1fec:	8b 83       	std	Y+3, r24	; 0x03
							}
							au8Green[i] = u8Temp;
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff2:	8c 5e       	subi	r24, 0xEC	; 236
    1ff4:	9e 4f       	sbci	r25, 0xFE	; 254
    1ff6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	20 83       	st	Z, r18
							au8Green[LED_COUNT-i-1] = u8Temp;
    1ffc:	23 e1       	ldi	r18, 0x13	; 19
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	9a 81       	ldd	r25, Y+2	; 0x02
    2004:	a9 01       	movw	r20, r18
    2006:	48 1b       	sub	r20, r24
    2008:	59 0b       	sbc	r21, r25
    200a:	ca 01       	movw	r24, r20
    200c:	8c 5e       	subi	r24, 0xEC	; 236
    200e:	9e 4f       	sbci	r25, 0xFE	; 254
    2010:	2b 81       	ldd	r18, Y+3	; 0x03
    2012:	fc 01       	movw	r30, r24
    2014:	20 83       	st	Z, r18
							
							if(u8RGBStartBlue<u8RGBStopBlue)
    2016:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <u8RGBStartBlue>
    201a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    201e:	98 17       	cp	r25, r24
    2020:	78 f5       	brcc	.+94     	; 0x2080 <main+0xc78>
							{
								u8Temp = (uint8_t)(((uint32_t)(u8RGBStopBlue-u8RGBStartBlue))*i/(u8Count-1) + u8RGBStartBlue);
    2022:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    2026:	28 2f       	mov	r18, r24
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    202e:	88 2f       	mov	r24, r24
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	a9 01       	movw	r20, r18
    2034:	48 1b       	sub	r20, r24
    2036:	59 0b       	sbc	r21, r25
    2038:	ca 01       	movw	r24, r20
    203a:	9c 01       	movw	r18, r24
    203c:	99 0f       	add	r25, r25
    203e:	44 0b       	sbc	r20, r20
    2040:	55 0b       	sbc	r21, r21
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	9a 81       	ldd	r25, Y+2	; 0x02
    2046:	cc 01       	movw	r24, r24
    2048:	a0 e0       	ldi	r26, 0x00	; 0
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsi3>
    2054:	7b 01       	movw	r14, r22
    2056:	8c 01       	movw	r16, r24
    2058:	8e 81       	ldd	r24, Y+6	; 0x06
    205a:	88 2f       	mov	r24, r24
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	9c 01       	movw	r18, r24
    2062:	99 0f       	add	r25, r25
    2064:	44 0b       	sbc	r20, r20
    2066:	55 0b       	sbc	r21, r21
    2068:	c8 01       	movw	r24, r16
    206a:	b7 01       	movw	r22, r14
    206c:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__udivmodsi4>
    2070:	da 01       	movw	r26, r20
    2072:	c9 01       	movw	r24, r18
    2074:	98 2f       	mov	r25, r24
    2076:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    207a:	89 0f       	add	r24, r25
    207c:	8b 83       	std	Y+3, r24	; 0x03
    207e:	2f c0       	rjmp	.+94     	; 0x20de <main+0xcd6>
							}
							else
							{
								u8Temp = (uint8_t)(u8RGBStartBlue - ((uint32_t)(u8RGBStartBlue-u8RGBStopBlue))*i/(u8Count-1));
    2080:	d0 90 45 01 	lds	r13, 0x0145	; 0x800145 <u8RGBStartBlue>
    2084:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    2088:	28 2f       	mov	r18, r24
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    2090:	88 2f       	mov	r24, r24
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	f9 01       	movw	r30, r18
    2096:	e8 1b       	sub	r30, r24
    2098:	f9 0b       	sbc	r31, r25
    209a:	cf 01       	movw	r24, r30
    209c:	9c 01       	movw	r18, r24
    209e:	99 0f       	add	r25, r25
    20a0:	44 0b       	sbc	r20, r20
    20a2:	55 0b       	sbc	r21, r21
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	9a 81       	ldd	r25, Y+2	; 0x02
    20a8:	cc 01       	movw	r24, r24
    20aa:	a0 e0       	ldi	r26, 0x00	; 0
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	bc 01       	movw	r22, r24
    20b0:	cd 01       	movw	r24, r26
    20b2:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsi3>
    20b6:	7b 01       	movw	r14, r22
    20b8:	8c 01       	movw	r16, r24
    20ba:	8e 81       	ldd	r24, Y+6	; 0x06
    20bc:	88 2f       	mov	r24, r24
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	9c 01       	movw	r18, r24
    20c4:	99 0f       	add	r25, r25
    20c6:	44 0b       	sbc	r20, r20
    20c8:	55 0b       	sbc	r21, r21
    20ca:	c8 01       	movw	r24, r16
    20cc:	b7 01       	movw	r22, r14
    20ce:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__udivmodsi4>
    20d2:	da 01       	movw	r26, r20
    20d4:	c9 01       	movw	r24, r18
    20d6:	fd 2d       	mov	r31, r13
    20d8:	f8 1b       	sub	r31, r24
    20da:	8f 2f       	mov	r24, r31
    20dc:	8b 83       	std	Y+3, r24	; 0x03
							}
							au8Blue[i] = u8Temp;
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	9a 81       	ldd	r25, Y+2	; 0x02
    20e2:	88 5d       	subi	r24, 0xD8	; 216
    20e4:	9e 4f       	sbci	r25, 0xFE	; 254
    20e6:	2b 81       	ldd	r18, Y+3	; 0x03
    20e8:	fc 01       	movw	r30, r24
    20ea:	20 83       	st	Z, r18
							au8Blue[LED_COUNT-i-1] = u8Temp;
    20ec:	23 e1       	ldi	r18, 0x13	; 19
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	9a 81       	ldd	r25, Y+2	; 0x02
    20f4:	a9 01       	movw	r20, r18
    20f6:	48 1b       	sub	r20, r24
    20f8:	59 0b       	sbc	r21, r25
    20fa:	ca 01       	movw	r24, r20
    20fc:	88 5d       	subi	r24, 0xD8	; 216
    20fe:	9e 4f       	sbci	r25, 0xFE	; 254
    2100:	2b 81       	ldd	r18, Y+3	; 0x03
    2102:	fc 01       	movw	r30, r24
    2104:	20 83       	st	Z, r18
						u8RGBStopGreen = au8Command[5]-1;
						u8RGBStopBlue = au8Command[6]-1;
						
						
						u8Count = LED_COUNT/2;
						for(i=0;i<u8Count;i++)
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	9a 81       	ldd	r25, Y+2	; 0x02
    210a:	01 96       	adiw	r24, 0x01	; 1
    210c:	9a 83       	std	Y+2, r25	; 0x02
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	8e 81       	ldd	r24, Y+6	; 0x06
    2112:	28 2f       	mov	r18, r24
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	9a 81       	ldd	r25, Y+2	; 0x02
    211a:	82 17       	cp	r24, r18
    211c:	93 07       	cpc	r25, r19
    211e:	08 f4       	brcc	.+2      	; 0x2122 <main+0xd1a>
    2120:	8a ce       	rjmp	.-748    	; 0x1e36 <main+0xa2e>
								u8Temp = (uint8_t)(u8RGBStartBlue - ((uint32_t)(u8RGBStartBlue-u8RGBStopBlue))*i/(u8Count-1));
							}
							au8Blue[i] = u8Temp;
							au8Blue[LED_COUNT-i-1] = u8Temp;
						}
						u8RGBSingleColor = 0;
    2122:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <u8RGBSingleColor>
						u8RGBNewDataReady = 1;
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBNewDataReady>
					}
					break;
    212c:	8e c0       	rjmp	.+284    	; 0x224a <main+0xe42>
    212e:	8d c0       	rjmp	.+282    	; 0x224a <main+0xe42>
					
					case 0x42:
					if(strlen(au8Command) == 9)
    2130:	ce 01       	movw	r24, r28
    2132:	07 96       	adiw	r24, 0x07	; 7
    2134:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <strlen>
    2138:	09 97       	sbiw	r24, 0x09	; 9
    213a:	99 f5       	brne	.+102    	; 0x21a2 <main+0xd9a>
					{
						u8RGBStartRed = au8Command[1]-1;
    213c:	88 85       	ldd	r24, Y+8	; 0x08
    213e:	81 50       	subi	r24, 0x01	; 1
    2140:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8RGBStartRed>
						u8RGBStartGreen = au8Command[2]-1;
    2144:	89 85       	ldd	r24, Y+9	; 0x09
    2146:	81 50       	subi	r24, 0x01	; 1
    2148:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8RGBStartGreen>
						u8RGBStartBlue = au8Command[3]-1;
    214c:	8a 85       	ldd	r24, Y+10	; 0x0a
    214e:	81 50       	subi	r24, 0x01	; 1
    2150:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <u8RGBStartBlue>
						u8RGBStopRed = au8Command[4]-1;
    2154:	8b 85       	ldd	r24, Y+11	; 0x0b
    2156:	81 50       	subi	r24, 0x01	; 1
    2158:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8RGBStopRed>
						u8RGBStopGreen = au8Command[5]-1;
    215c:	8c 85       	ldd	r24, Y+12	; 0x0c
    215e:	81 50       	subi	r24, 0x01	; 1
    2160:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <u8RGBStopGreen>
						u8RGBStopBlue = au8Command[6]-1;
    2164:	8d 85       	ldd	r24, Y+13	; 0x0d
    2166:	81 50       	subi	r24, 0x01	; 1
    2168:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <u8RGBStopBlue>
						u16RGBTime = ((uint16_t)au8Command[7])*200;
    216c:	8e 85       	ldd	r24, Y+14	; 0x0e
    216e:	28 2f       	mov	r18, r24
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	48 ec       	ldi	r20, 0xC8	; 200
    2174:	42 9f       	mul	r20, r18
    2176:	c0 01       	movw	r24, r0
    2178:	43 9f       	mul	r20, r19
    217a:	90 0d       	add	r25, r0
    217c:	11 24       	eor	r1, r1
    217e:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <u16RGBTime+0x1>
    2182:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <u16RGBTime>
						u8RGBBounce = au8Command[8]-1;
    2186:	8f 85       	ldd	r24, Y+15	; 0x0f
    2188:	81 50       	subi	r24, 0x01	; 1
    218a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8RGBBounce>
						u8RGBBounceDirection = 0;
    218e:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <u8RGBBounceDirection>
						u16RGBTimeCounter = 0;
    2192:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <u16RGBTimeCounter+0x1>
    2196:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <u16RGBTimeCounter>
						u8RGBAnimation = 1;
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <u8RGBAnimation>
					}
					break;
    21a0:	54 c0       	rjmp	.+168    	; 0x224a <main+0xe42>
    21a2:	53 c0       	rjmp	.+166    	; 0x224a <main+0xe42>

					case 0x43:
					if(strlen(au8Command) == 15)
    21a4:	ce 01       	movw	r24, r28
    21a6:	07 96       	adiw	r24, 0x07	; 7
    21a8:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <strlen>
    21ac:	0f 97       	sbiw	r24, 0x0f	; 15
    21ae:	09 f0       	breq	.+2      	; 0x21b2 <main+0xdaa>
    21b0:	4b c0       	rjmp	.+150    	; 0x2248 <main+0xe40>
					{
						u8RGBStartRed = au8Command[1]-1;
    21b2:	88 85       	ldd	r24, Y+8	; 0x08
    21b4:	81 50       	subi	r24, 0x01	; 1
    21b6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8RGBStartRed>
						u8RGBStartGreen = au8Command[2]-1;
    21ba:	89 85       	ldd	r24, Y+9	; 0x09
    21bc:	81 50       	subi	r24, 0x01	; 1
    21be:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8RGBStartGreen>
						u8RGBStartBlue = au8Command[3]-1;
    21c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    21c4:	81 50       	subi	r24, 0x01	; 1
    21c6:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <u8RGBStartBlue>
						u8RGBStartMiddleRed = au8Command[4]-1;
    21ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    21cc:	81 50       	subi	r24, 0x01	; 1
    21ce:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <u8RGBStartMiddleRed>
						u8RGBStartMiddleGreen = au8Command[5]-1;
    21d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    21d4:	81 50       	subi	r24, 0x01	; 1
    21d6:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <u8RGBStartMiddleGreen>
						u8RGBStartMiddleBlue = au8Command[6]-1;
    21da:	8d 85       	ldd	r24, Y+13	; 0x0d
    21dc:	81 50       	subi	r24, 0x01	; 1
    21de:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8RGBStartMiddleBlue>
						u8RGBStopRed = au8Command[7]-1;
    21e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    21e4:	81 50       	subi	r24, 0x01	; 1
    21e6:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8RGBStopRed>
						u8RGBStopGreen = au8Command[8]-1;
    21ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ec:	81 50       	subi	r24, 0x01	; 1
    21ee:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <u8RGBStopGreen>
						u8RGBStopBlue = au8Command[9]-1;
    21f2:	88 89       	ldd	r24, Y+16	; 0x10
    21f4:	81 50       	subi	r24, 0x01	; 1
    21f6:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <u8RGBStopBlue>
						u8RGBStopMiddleRed = au8Command[10]-1;
    21fa:	89 89       	ldd	r24, Y+17	; 0x11
    21fc:	81 50       	subi	r24, 0x01	; 1
    21fe:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <u8RGBStopMiddleRed>
						u8RGBStopMiddleGreen = au8Command[11]-1;
    2202:	8a 89       	ldd	r24, Y+18	; 0x12
    2204:	81 50       	subi	r24, 0x01	; 1
    2206:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <u8RGBStopMiddleGreen>
						u8RGBStopMiddleBlue = au8Command[12]-1;
    220a:	8b 89       	ldd	r24, Y+19	; 0x13
    220c:	81 50       	subi	r24, 0x01	; 1
    220e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <u8RGBStopMiddleBlue>
						u16RGBTime = ((uint16_t)au8Command[13])*200;
    2212:	8c 89       	ldd	r24, Y+20	; 0x14
    2214:	28 2f       	mov	r18, r24
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	48 ec       	ldi	r20, 0xC8	; 200
    221a:	42 9f       	mul	r20, r18
    221c:	c0 01       	movw	r24, r0
    221e:	43 9f       	mul	r20, r19
    2220:	90 0d       	add	r25, r0
    2222:	11 24       	eor	r1, r1
    2224:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <u16RGBTime+0x1>
    2228:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <u16RGBTime>
						u8RGBBounce = au8Command[14]-1;
    222c:	8d 89       	ldd	r24, Y+21	; 0x15
    222e:	81 50       	subi	r24, 0x01	; 1
    2230:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8RGBBounce>
						u8RGBBounceDirection = 0;
    2234:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <u8RGBBounceDirection>
						u16RGBTimeCounter = 0;
    2238:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <u16RGBTimeCounter+0x1>
    223c:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <u16RGBTimeCounter>
						u8RGBAnimation = 2;
    2240:	82 e0       	ldi	r24, 0x02	; 2
    2242:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <u8RGBAnimation>
					}
					break;
    2246:	00 c0       	rjmp	.+0      	; 0x2248 <main+0xe40>
    2248:	00 00       	nop
				}
			}
		}
    }
    224a:	f0 c9       	rjmp	.-3104   	; 0x162c <main+0x224>

0000224c <INT0_Init>:
#include "utils.h"
#include "rgbooster.h"


void INT0_Init(void)
{
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
	EICRA |= (1<<ISC01); // interrupt on falling edge
    2254:	89 e6       	ldi	r24, 0x69	; 105
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	29 e6       	ldi	r18, 0x69	; 105
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	f9 01       	movw	r30, r18
    225e:	20 81       	ld	r18, Z
    2260:	22 60       	ori	r18, 0x02	; 2
    2262:	fc 01       	movw	r30, r24
    2264:	20 83       	st	Z, r18
	EIFR  = (1<<INTF0); // clear flag
    2266:	8c e3       	ldi	r24, 0x3C	; 60
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	21 e0       	ldi	r18, 0x01	; 1
    226c:	fc 01       	movw	r30, r24
    226e:	20 83       	st	Z, r18
	EIMSK = (1<<INT0);  // INT1 enable
    2270:	8d e3       	ldi	r24, 0x3D	; 61
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	21 e0       	ldi	r18, 0x01	; 1
    2276:	fc 01       	movw	r30, r24
    2278:	20 83       	st	Z, r18
}
    227a:	df 91       	pop	r29
    227c:	cf 91       	pop	r28
    227e:	08 95       	ret

00002280 <initRGBooster>:

void initRGBooster(void)
{
    2280:	cf 93       	push	r28
    2282:	df 93       	push	r29
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
	DDR_DATA_LOW |= DATA_LOW_BITMASK; //RGB DATA LOWER NIBBLE -> OUTPUT
    2288:	84 e2       	ldi	r24, 0x24	; 36
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	24 e2       	ldi	r18, 0x24	; 36
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	f9 01       	movw	r30, r18
    2292:	20 81       	ld	r18, Z
    2294:	2f 60       	ori	r18, 0x0F	; 15
    2296:	fc 01       	movw	r30, r24
    2298:	20 83       	st	Z, r18
	PORT_DATA_LOW &= ~DATA_LOW_BITMASK; //RGB DATA LOWER NIBBLE -> LOW
    229a:	85 e2       	ldi	r24, 0x25	; 37
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	25 e2       	ldi	r18, 0x25	; 37
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	f9 01       	movw	r30, r18
    22a4:	20 81       	ld	r18, Z
    22a6:	20 7f       	andi	r18, 0xF0	; 240
    22a8:	fc 01       	movw	r30, r24
    22aa:	20 83       	st	Z, r18
	DDR_DATA_HIGH |= DATA_HIGH_BITMASK; //RGB DATA HIGHER NIBBLE -> OUTPUT
    22ac:	81 e2       	ldi	r24, 0x21	; 33
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	21 e2       	ldi	r18, 0x21	; 33
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	f9 01       	movw	r30, r18
    22b6:	20 81       	ld	r18, Z
    22b8:	20 6f       	ori	r18, 0xF0	; 240
    22ba:	fc 01       	movw	r30, r24
    22bc:	20 83       	st	Z, r18
	PORT_DATA_HIGH &= ~DATA_HIGH_BITMASK; //RGB DATA HIGHER NIBBLE -> LOW
    22be:	82 e2       	ldi	r24, 0x22	; 34
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	22 e2       	ldi	r18, 0x22	; 34
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	f9 01       	movw	r30, r18
    22c8:	20 81       	ld	r18, Z
    22ca:	2f 70       	andi	r18, 0x0F	; 15
    22cc:	fc 01       	movw	r30, r24
    22ce:	20 83       	st	Z, r18

	DDR_CONTROL |= (1<<SEND); //SEND PIN -> OUTPUT
    22d0:	8a e2       	ldi	r24, 0x2A	; 42
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	2a e2       	ldi	r18, 0x2A	; 42
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	f9 01       	movw	r30, r18
    22da:	20 81       	ld	r18, Z
    22dc:	28 60       	ori	r18, 0x08	; 8
    22de:	fc 01       	movw	r30, r24
    22e0:	20 83       	st	Z, r18
	PORT_CONTROL &= ~(1<<SEND); //SEND PIN LOW
    22e2:	8b e2       	ldi	r24, 0x2B	; 43
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	2b e2       	ldi	r18, 0x2B	; 43
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	f9 01       	movw	r30, r18
    22ec:	20 81       	ld	r18, Z
    22ee:	27 7f       	andi	r18, 0xF7	; 247
    22f0:	fc 01       	movw	r30, r24
    22f2:	20 83       	st	Z, r18
	DDR_CONTROL &= ~(1<<DONE_BUSY); //DONE BUSY PIN -> INPUT
    22f4:	8a e2       	ldi	r24, 0x2A	; 42
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	2a e2       	ldi	r18, 0x2A	; 42
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	f9 01       	movw	r30, r18
    22fe:	20 81       	ld	r18, Z
    2300:	2b 7f       	andi	r18, 0xFB	; 251
    2302:	fc 01       	movw	r30, r24
    2304:	20 83       	st	Z, r18
    2306:	df 91       	pop	r29
    2308:	cf 91       	pop	r28
    230a:	08 95       	ret

0000230c <spiInitBuffer>:
#include <avr/io.h>
#include "spi.h"


void spiInitBuffer(SpiBuf_t* Buffer)
{
    230c:	cf 93       	push	r28
    230e:	df 93       	push	r29
    2310:	00 d0       	rcall	.+0      	; 0x2312 <spiInitBuffer+0x6>
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	9a 83       	std	Y+2, r25	; 0x02
    2318:	89 83       	std	Y+1, r24	; 0x01
	Buffer->u8Count = 0;
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	9a 81       	ldd	r25, Y+2	; 0x02
    231e:	80 5c       	subi	r24, 0xC0	; 192
    2320:	9f 4f       	sbci	r25, 0xFF	; 255
    2322:	fc 01       	movw	r30, r24
    2324:	10 82       	st	Z, r1
	Buffer->u8ReadReturnCount = 0;
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	9a 81       	ldd	r25, Y+2	; 0x02
    232a:	8f 5b       	subi	r24, 0xBF	; 191
    232c:	9f 4f       	sbci	r25, 0xFF	; 255
    232e:	fc 01       	movw	r30, r24
    2330:	10 82       	st	Z, r1
	Buffer->spiState = IDLE;
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	9a 81       	ldd	r25, Y+2	; 0x02
    2336:	8e 5b       	subi	r24, 0xBE	; 190
    2338:	9f 4f       	sbci	r25, 0xFF	; 255
    233a:	26 e0       	ldi	r18, 0x06	; 6
    233c:	fc 01       	movw	r30, r24
    233e:	20 83       	st	Z, r18
}
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	08 95       	ret

0000234a <spiSlaveInit>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiSlaveInit(void)
{
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	1f 92       	push	r1
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t ucTemp;
	SPSR0 = 0;
    2354:	8d e4       	ldi	r24, 0x4D	; 77
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	fc 01       	movw	r30, r24
    235a:	10 82       	st	Z, r1
	SPCR0 = (1<<SPIE0);
    235c:	8c e4       	ldi	r24, 0x4C	; 76
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	20 e8       	ldi	r18, 0x80	; 128
    2362:	fc 01       	movw	r30, r24
    2364:	20 83       	st	Z, r18
	
	ucTemp = SPSR0;					
    2366:	8d e4       	ldi	r24, 0x4D	; 77
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	fc 01       	movw	r30, r24
    236c:	80 81       	ld	r24, Z
    236e:	89 83       	std	Y+1, r24	; 0x01
	ucTemp = SPDR0;
    2370:	8e e4       	ldi	r24, 0x4E	; 78
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	fc 01       	movw	r30, r24
    2376:	80 81       	ld	r24, Z
    2378:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0;
    237a:	8e e4       	ldi	r24, 0x4E	; 78
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	fc 01       	movw	r30, r24
    2380:	10 82       	st	Z, r1
	
	DDRB |= (1<<PINB6);				// MISO needs to be an output
    2382:	84 e2       	ldi	r24, 0x24	; 36
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	24 e2       	ldi	r18, 0x24	; 36
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	f9 01       	movw	r30, r18
    238c:	20 81       	ld	r18, Z
    238e:	20 64       	ori	r18, 0x40	; 64
    2390:	fc 01       	movw	r30, r24
    2392:	20 83       	st	Z, r18
	
	SPCR0 |= (1<<SPE0);
    2394:	8c e4       	ldi	r24, 0x4C	; 76
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	2c e4       	ldi	r18, 0x4C	; 76
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	f9 01       	movw	r30, r18
    239e:	20 81       	ld	r18, Z
    23a0:	20 64       	ori	r18, 0x40	; 64
    23a2:	fc 01       	movw	r30, r24
    23a4:	20 83       	st	Z, r18
}
    23a6:	0f 90       	pop	r0
    23a8:	df 91       	pop	r29
    23aa:	cf 91       	pop	r28
    23ac:	08 95       	ret

000023ae <spiPcInt>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiPcInt(void)
{
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
	PCICR |= (1<<PCIE1);
    23b6:	88 e6       	ldi	r24, 0x68	; 104
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	28 e6       	ldi	r18, 0x68	; 104
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	f9 01       	movw	r30, r18
    23c0:	20 81       	ld	r18, Z
    23c2:	22 60       	ori	r18, 0x02	; 2
    23c4:	fc 01       	movw	r30, r24
    23c6:	20 83       	st	Z, r18
	PCIFR = (1<<PCIF1);
    23c8:	8b e3       	ldi	r24, 0x3B	; 59
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	22 e0       	ldi	r18, 0x02	; 2
    23ce:	fc 01       	movw	r30, r24
    23d0:	20 83       	st	Z, r18
	PCMSK1 |= (1<<PCINT12);
    23d2:	8c e6       	ldi	r24, 0x6C	; 108
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	2c e6       	ldi	r18, 0x6C	; 108
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	f9 01       	movw	r30, r18
    23dc:	20 81       	ld	r18, Z
    23de:	20 61       	ori	r18, 0x10	; 16
    23e0:	fc 01       	movw	r30, r24
    23e2:	20 83       	st	Z, r18
    23e4:	df 91       	pop	r29
    23e6:	cf 91       	pop	r28
    23e8:	08 95       	ret

000023ea <portInit>:
 * @return 8bit analog value
 *****************************************************************************/
uint8_t adcGetValue(void)
{
	return(ADCH);
}
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
    23f2:	8a e2       	ldi	r24, 0x2A	; 42
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	2a e2       	ldi	r18, 0x2A	; 42
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	f9 01       	movw	r30, r18
    23fc:	20 81       	ld	r18, Z
    23fe:	20 63       	ori	r18, 0x30	; 48
    2400:	fc 01       	movw	r30, r24
    2402:	20 83       	st	Z, r18
    2404:	8b e2       	ldi	r24, 0x2B	; 43
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	2b e2       	ldi	r18, 0x2B	; 43
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	f9 01       	movw	r30, r18
    240e:	20 81       	ld	r18, Z
    2410:	20 62       	ori	r18, 0x20	; 32
    2412:	fc 01       	movw	r30, r24
    2414:	20 83       	st	Z, r18
    2416:	8b e2       	ldi	r24, 0x2B	; 43
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	2b e2       	ldi	r18, 0x2B	; 43
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	f9 01       	movw	r30, r18
    2420:	20 81       	ld	r18, Z
    2422:	2f 7e       	andi	r18, 0xEF	; 239
    2424:	fc 01       	movw	r30, r24
    2426:	20 83       	st	Z, r18
    2428:	8a e2       	ldi	r24, 0x2A	; 42
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	2a e2       	ldi	r18, 0x2A	; 42
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	f9 01       	movw	r30, r18
    2432:	20 81       	ld	r18, Z
    2434:	20 68       	ori	r18, 0x80	; 128
    2436:	fc 01       	movw	r30, r24
    2438:	20 83       	st	Z, r18
    243a:	8b e2       	ldi	r24, 0x2B	; 43
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	2b e2       	ldi	r18, 0x2B	; 43
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	f9 01       	movw	r30, r18
    2444:	20 81       	ld	r18, Z
    2446:	20 68       	ori	r18, 0x80	; 128
    2448:	fc 01       	movw	r30, r24
    244a:	20 83       	st	Z, r18
    244c:	8a e2       	ldi	r24, 0x2A	; 42
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	2a e2       	ldi	r18, 0x2A	; 42
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	f9 01       	movw	r30, r18
    2456:	20 81       	ld	r18, Z
    2458:	2f 7b       	andi	r18, 0xBF	; 191
    245a:	fc 01       	movw	r30, r24
    245c:	20 83       	st	Z, r18
    245e:	8a e2       	ldi	r24, 0x2A	; 42
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	2a e2       	ldi	r18, 0x2A	; 42
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	f9 01       	movw	r30, r18
    2468:	20 81       	ld	r18, Z
    246a:	2c 7f       	andi	r18, 0xFC	; 252
    246c:	fc 01       	movw	r30, r24
    246e:	20 83       	st	Z, r18
    2470:	8b e2       	ldi	r24, 0x2B	; 43
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	2b e2       	ldi	r18, 0x2B	; 43
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	f9 01       	movw	r30, r18
    247a:	20 81       	ld	r18, Z
    247c:	21 60       	ori	r18, 0x01	; 1
    247e:	fc 01       	movw	r30, r24
    2480:	20 83       	st	Z, r18
    2482:	81 e2       	ldi	r24, 0x21	; 33
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	21 e2       	ldi	r18, 0x21	; 33
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	f9 01       	movw	r30, r18
    248c:	20 81       	ld	r18, Z
    248e:	2e 7f       	andi	r18, 0xFE	; 254
    2490:	fc 01       	movw	r30, r24
    2492:	20 83       	st	Z, r18
    2494:	82 e2       	ldi	r24, 0x22	; 34
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	22 e2       	ldi	r18, 0x22	; 34
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	f9 01       	movw	r30, r18
    249e:	20 81       	ld	r18, Z
    24a0:	2e 7f       	andi	r18, 0xFE	; 254
    24a2:	fc 01       	movw	r30, r24
    24a4:	20 83       	st	Z, r18
    24a6:	8e e7       	ldi	r24, 0x7E	; 126
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	2e e7       	ldi	r18, 0x7E	; 126
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	f9 01       	movw	r30, r18
    24b0:	20 81       	ld	r18, Z
    24b2:	21 60       	ori	r18, 0x01	; 1
    24b4:	fc 01       	movw	r30, r24
    24b6:	20 83       	st	Z, r18
    24b8:	81 e2       	ldi	r24, 0x21	; 33
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	21 e2       	ldi	r18, 0x21	; 33
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	f9 01       	movw	r30, r18
    24c2:	20 81       	ld	r18, Z
    24c4:	21 7f       	andi	r18, 0xF1	; 241
    24c6:	fc 01       	movw	r30, r24
    24c8:	20 83       	st	Z, r18
    24ca:	82 e2       	ldi	r24, 0x22	; 34
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	22 e2       	ldi	r18, 0x22	; 34
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	f9 01       	movw	r30, r18
    24d4:	20 81       	ld	r18, Z
    24d6:	2e 60       	ori	r18, 0x0E	; 14
    24d8:	fc 01       	movw	r30, r24
    24da:	20 83       	st	Z, r18
    24dc:	87 e2       	ldi	r24, 0x27	; 39
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	fc 01       	movw	r30, r24
    24e2:	80 81       	ld	r24, Z
    24e4:	87 e2       	ldi	r24, 0x27	; 39
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	fc 01       	movw	r30, r24
    24ea:	10 82       	st	Z, r1
    24ec:	88 e2       	ldi	r24, 0x28	; 40
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	fc 01       	movw	r30, r24
    24f2:	80 81       	ld	r24, Z
    24f4:	88 e2       	ldi	r24, 0x28	; 40
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	2f ef       	ldi	r18, 0xFF	; 255
    24fa:	fc 01       	movw	r30, r24
    24fc:	20 83       	st	Z, r18
    24fe:	df 91       	pop	r29
    2500:	cf 91       	pop	r28
    2502:	08 95       	ret

00002504 <enablePLED>:
    2504:	cf 93       	push	r28
    2506:	df 93       	push	r29
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
    250c:	8b e2       	ldi	r24, 0x2B	; 43
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	2b e2       	ldi	r18, 0x2B	; 43
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	f9 01       	movw	r30, r18
    2516:	20 81       	ld	r18, Z
    2518:	2f 7d       	andi	r18, 0xDF	; 223
    251a:	fc 01       	movw	r30, r24
    251c:	20 83       	st	Z, r18
    251e:	df 91       	pop	r29
    2520:	cf 91       	pop	r28
    2522:	08 95       	ret

00002524 <disablePLED>:
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	8b e2       	ldi	r24, 0x2B	; 43
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	2b e2       	ldi	r18, 0x2B	; 43
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	f9 01       	movw	r30, r18
    2536:	20 81       	ld	r18, Z
    2538:	20 62       	ori	r18, 0x20	; 32
    253a:	fc 01       	movw	r30, r24
    253c:	20 83       	st	Z, r18
    253e:	df 91       	pop	r29
    2540:	cf 91       	pop	r28
    2542:	08 95       	ret

00002544 <standbyAudio>:
    2544:	cf 93       	push	r28
    2546:	df 93       	push	r29
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
    254c:	8b e2       	ldi	r24, 0x2B	; 43
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	2b e2       	ldi	r18, 0x2B	; 43
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	f9 01       	movw	r30, r18
    2556:	20 81       	ld	r18, Z
    2558:	20 68       	ori	r18, 0x80	; 128
    255a:	fc 01       	movw	r30, r24
    255c:	20 83       	st	Z, r18
    255e:	8a e2       	ldi	r24, 0x2A	; 42
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	2a e2       	ldi	r18, 0x2A	; 42
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	f9 01       	movw	r30, r18
    2568:	20 81       	ld	r18, Z
    256a:	20 68       	ori	r18, 0x80	; 128
    256c:	fc 01       	movw	r30, r24
    256e:	20 83       	st	Z, r18
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	08 95       	ret

00002576 <enableAudio>:
    2576:	cf 93       	push	r28
    2578:	df 93       	push	r29
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
    257e:	8b e2       	ldi	r24, 0x2B	; 43
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	2b e2       	ldi	r18, 0x2B	; 43
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	f9 01       	movw	r30, r18
    2588:	20 81       	ld	r18, Z
    258a:	2f 77       	andi	r18, 0x7F	; 127
    258c:	fc 01       	movw	r30, r24
    258e:	20 83       	st	Z, r18
    2590:	8a e2       	ldi	r24, 0x2A	; 42
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	2a e2       	ldi	r18, 0x2A	; 42
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	f9 01       	movw	r30, r18
    259a:	20 81       	ld	r18, Z
    259c:	20 68       	ori	r18, 0x80	; 128
    259e:	fc 01       	movw	r30, r24
    25a0:	20 83       	st	Z, r18
    25a2:	df 91       	pop	r29
    25a4:	cf 91       	pop	r28
    25a6:	08 95       	ret

000025a8 <incVolume>:
    25a8:	cf 93       	push	r28
    25aa:	df 93       	push	r29
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <incVolume+0x6>
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	8a 83       	std	Y+2, r24	; 0x02
    25b4:	8b e2       	ldi	r24, 0x2B	; 43
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	2b e2       	ldi	r18, 0x2B	; 43
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	f9 01       	movw	r30, r18
    25be:	20 81       	ld	r18, Z
    25c0:	20 64       	ori	r18, 0x40	; 64
    25c2:	fc 01       	movw	r30, r24
    25c4:	20 83       	st	Z, r18
    25c6:	19 82       	std	Y+1, r1	; 0x01
    25c8:	15 c0       	rjmp	.+42     	; 0x25f4 <incVolume+0x4c>
    25ca:	8a e2       	ldi	r24, 0x2A	; 42
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	2a e2       	ldi	r18, 0x2A	; 42
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	f9 01       	movw	r30, r18
    25d4:	20 81       	ld	r18, Z
    25d6:	20 64       	ori	r18, 0x40	; 64
    25d8:	fc 01       	movw	r30, r24
    25da:	20 83       	st	Z, r18
    25dc:	8a e2       	ldi	r24, 0x2A	; 42
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	2a e2       	ldi	r18, 0x2A	; 42
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	f9 01       	movw	r30, r18
    25e6:	20 81       	ld	r18, Z
    25e8:	2f 7b       	andi	r18, 0xBF	; 191
    25ea:	fc 01       	movw	r30, r24
    25ec:	20 83       	st	Z, r18
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	8f 5f       	subi	r24, 0xFF	; 255
    25f2:	89 83       	std	Y+1, r24	; 0x01
    25f4:	99 81       	ldd	r25, Y+1	; 0x01
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	98 17       	cp	r25, r24
    25fa:	38 f3       	brcs	.-50     	; 0x25ca <incVolume+0x22>
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	df 91       	pop	r29
    2602:	cf 91       	pop	r28
    2604:	08 95       	ret

00002606 <decVolume>:
    2606:	cf 93       	push	r28
    2608:	df 93       	push	r29
    260a:	00 d0       	rcall	.+0      	; 0x260c <decVolume+0x6>
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
    2610:	8a 83       	std	Y+2, r24	; 0x02
    2612:	8b e2       	ldi	r24, 0x2B	; 43
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	2b e2       	ldi	r18, 0x2B	; 43
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	f9 01       	movw	r30, r18
    261c:	20 81       	ld	r18, Z
    261e:	2f 7b       	andi	r18, 0xBF	; 191
    2620:	fc 01       	movw	r30, r24
    2622:	20 83       	st	Z, r18
    2624:	19 82       	std	Y+1, r1	; 0x01
    2626:	15 c0       	rjmp	.+42     	; 0x2652 <decVolume+0x4c>
    2628:	8a e2       	ldi	r24, 0x2A	; 42
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	2a e2       	ldi	r18, 0x2A	; 42
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	f9 01       	movw	r30, r18
    2632:	20 81       	ld	r18, Z
    2634:	20 64       	ori	r18, 0x40	; 64
    2636:	fc 01       	movw	r30, r24
    2638:	20 83       	st	Z, r18
    263a:	8a e2       	ldi	r24, 0x2A	; 42
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	2a e2       	ldi	r18, 0x2A	; 42
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	f9 01       	movw	r30, r18
    2644:	20 81       	ld	r18, Z
    2646:	2f 7b       	andi	r18, 0xBF	; 191
    2648:	fc 01       	movw	r30, r24
    264a:	20 83       	st	Z, r18
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	8f 5f       	subi	r24, 0xFF	; 255
    2650:	89 83       	std	Y+1, r24	; 0x01
    2652:	99 81       	ldd	r25, Y+1	; 0x01
    2654:	8a 81       	ldd	r24, Y+2	; 0x02
    2656:	98 17       	cp	r25, r24
    2658:	38 f3       	brcs	.-50     	; 0x2628 <decVolume+0x22>
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	08 95       	ret

00002664 <setVolume>:
    2664:	cf 93       	push	r28
    2666:	df 93       	push	r29
    2668:	1f 92       	push	r1
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    266e:	89 83       	std	Y+1, r24	; 0x01
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	81 34       	cpi	r24, 0x41	; 65
    2674:	10 f0       	brcs	.+4      	; 0x267a <setVolume+0x16>
    2676:	80 e4       	ldi	r24, 0x40	; 64
    2678:	89 83       	std	Y+1, r24	; 0x01
    267a:	80 e4       	ldi	r24, 0x40	; 64
    267c:	0e 94 03 13 	call	0x2606	; 0x2606 <decVolume>
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <incVolume>
    2686:	0f 90       	pop	r0
    2688:	df 91       	pop	r29
    268a:	cf 91       	pop	r28
    268c:	08 95       	ret

0000268e <initAudio>:
    268e:	cf 93       	push	r28
    2690:	df 93       	push	r29
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
    2696:	0e 94 bb 12 	call	0x2576	; 0x2576 <enableAudio>
    269a:	80 e4       	ldi	r24, 0x40	; 64
    269c:	0e 94 03 13 	call	0x2606	; 0x2606 <decVolume>
    26a0:	0e 94 a2 12 	call	0x2544	; 0x2544 <standbyAudio>
    26a4:	df 91       	pop	r29
    26a6:	cf 91       	pop	r28
    26a8:	08 95       	ret

000026aa <initPWM>:
    26aa:	cf 93       	push	r28
    26ac:	df 93       	push	r29
    26ae:	00 d0       	rcall	.+0      	; 0x26b0 <initPWM+0x6>
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	9a 83       	std	Y+2, r25	; 0x02
    26b6:	89 83       	std	Y+1, r24	; 0x01
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	9a 81       	ldd	r25, Y+2	; 0x02
    26bc:	81 15       	cp	r24, r1
    26be:	92 40       	sbci	r25, 0x02	; 2
    26c0:	20 f0       	brcs	.+8      	; 0x26ca <initPWM+0x20>
    26c2:	8f ef       	ldi	r24, 0xFF	; 255
    26c4:	91 e0       	ldi	r25, 0x01	; 1
    26c6:	9a 83       	std	Y+2, r25	; 0x02
    26c8:	89 83       	std	Y+1, r24	; 0x01
    26ca:	80 e8       	ldi	r24, 0x80	; 128
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	22 e2       	ldi	r18, 0x22	; 34
    26d0:	fc 01       	movw	r30, r24
    26d2:	20 83       	st	Z, r18
    26d4:	81 e8       	ldi	r24, 0x81	; 129
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	28 e0       	ldi	r18, 0x08	; 8
    26da:	fc 01       	movw	r30, r24
    26dc:	20 83       	st	Z, r18
    26de:	84 e8       	ldi	r24, 0x84	; 132
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	fc 01       	movw	r30, r24
    26e4:	11 82       	std	Z+1, r1	; 0x01
    26e6:	10 82       	st	Z, r1
    26e8:	8a e8       	ldi	r24, 0x8A	; 138
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	29 81       	ldd	r18, Y+1	; 0x01
    26ee:	3a 81       	ldd	r19, Y+2	; 0x02
    26f0:	fc 01       	movw	r30, r24
    26f2:	31 83       	std	Z+1, r19	; 0x01
    26f4:	20 83       	st	Z, r18
    26f6:	8f e6       	ldi	r24, 0x6F	; 111
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	fc 01       	movw	r30, r24
    26fc:	10 82       	st	Z, r1
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	df 91       	pop	r29
    2704:	cf 91       	pop	r28
    2706:	08 95       	ret

00002708 <startPWM>:
    2708:	cf 93       	push	r28
    270a:	df 93       	push	r29
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
    2710:	81 e8       	ldi	r24, 0x81	; 129
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	21 e8       	ldi	r18, 0x81	; 129
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	f9 01       	movw	r30, r18
    271a:	20 81       	ld	r18, Z
    271c:	21 60       	ori	r18, 0x01	; 1
    271e:	fc 01       	movw	r30, r24
    2720:	20 83       	st	Z, r18
    2722:	df 91       	pop	r29
    2724:	cf 91       	pop	r28
    2726:	08 95       	ret

00002728 <setPWMDutyPercent>:
    2728:	8f 92       	push	r8
    272a:	9f 92       	push	r9
    272c:	af 92       	push	r10
    272e:	bf 92       	push	r11
    2730:	cf 92       	push	r12
    2732:	df 92       	push	r13
    2734:	ef 92       	push	r14
    2736:	ff 92       	push	r15
    2738:	0f 93       	push	r16
    273a:	1f 93       	push	r17
    273c:	cf 93       	push	r28
    273e:	df 93       	push	r29
    2740:	1f 92       	push	r1
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
    2746:	89 83       	std	Y+1, r24	; 0x01
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	85 36       	cpi	r24, 0x65	; 101
    274c:	10 f0       	brcs	.+4      	; 0x2752 <setPWMDutyPercent+0x2a>
    274e:	84 e6       	ldi	r24, 0x64	; 100
    2750:	89 83       	std	Y+1, r24	; 0x01
    2752:	0f 2e       	mov	r0, r31
    2754:	fa e8       	ldi	r31, 0x8A	; 138
    2756:	8f 2e       	mov	r8, r31
    2758:	91 2c       	mov	r9, r1
    275a:	f0 2d       	mov	r31, r0
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	88 2f       	mov	r24, r24
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	a0 e0       	ldi	r26, 0x00	; 0
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	1f 92       	push	r1
    2768:	1f 92       	push	r1
    276a:	21 e0       	ldi	r18, 0x01	; 1
    276c:	2f 93       	push	r18
    276e:	2f ef       	ldi	r18, 0xFF	; 255
    2770:	2f 93       	push	r18
    2772:	a1 2c       	mov	r10, r1
    2774:	b1 2c       	mov	r11, r1
    2776:	65 01       	movw	r12, r10
    2778:	14 e6       	ldi	r17, 0x64	; 100
    277a:	e1 2e       	mov	r14, r17
    277c:	f1 2c       	mov	r15, r1
    277e:	00 e0       	ldi	r16, 0x00	; 0
    2780:	10 e0       	ldi	r17, 0x00	; 0
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	a9 01       	movw	r20, r18
    2788:	bc 01       	movw	r22, r24
    278a:	cd 01       	movw	r24, r26
    278c:	0e 94 21 15 	call	0x2a42	; 0x2a42 <Map>
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	f4 01       	movw	r30, r8
    279e:	91 83       	std	Z+1, r25	; 0x01
    27a0:	80 83       	st	Z, r24
    27a2:	0f 90       	pop	r0
    27a4:	df 91       	pop	r29
    27a6:	cf 91       	pop	r28
    27a8:	1f 91       	pop	r17
    27aa:	0f 91       	pop	r16
    27ac:	ff 90       	pop	r15
    27ae:	ef 90       	pop	r14
    27b0:	df 90       	pop	r13
    27b2:	cf 90       	pop	r12
    27b4:	bf 90       	pop	r11
    27b6:	af 90       	pop	r10
    27b8:	9f 90       	pop	r9
    27ba:	8f 90       	pop	r8
    27bc:	08 95       	ret

000027be <setPWMDuty>:
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	00 d0       	rcall	.+0      	; 0x27c4 <setPWMDuty+0x6>
    27c4:	cd b7       	in	r28, 0x3d	; 61
    27c6:	de b7       	in	r29, 0x3e	; 62
    27c8:	9a 83       	std	Y+2, r25	; 0x02
    27ca:	89 83       	std	Y+1, r24	; 0x01
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	81 15       	cp	r24, r1
    27d2:	92 40       	sbci	r25, 0x02	; 2
    27d4:	20 f0       	brcs	.+8      	; 0x27de <setPWMDuty+0x20>
    27d6:	8f ef       	ldi	r24, 0xFF	; 255
    27d8:	91 e0       	ldi	r25, 0x01	; 1
    27da:	9a 83       	std	Y+2, r25	; 0x02
    27dc:	89 83       	std	Y+1, r24	; 0x01
    27de:	8a e8       	ldi	r24, 0x8A	; 138
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	29 81       	ldd	r18, Y+1	; 0x01
    27e4:	3a 81       	ldd	r19, Y+2	; 0x02
    27e6:	fc 01       	movw	r30, r24
    27e8:	31 83       	std	Z+1, r19	; 0x01
    27ea:	20 83       	st	Z, r18
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	df 91       	pop	r29
    27f2:	cf 91       	pop	r28
    27f4:	08 95       	ret

000027f6 <adcInit>:
    27f6:	cf 93       	push	r28
    27f8:	df 93       	push	r29
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
    27fe:	81 e2       	ldi	r24, 0x21	; 33
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	21 e2       	ldi	r18, 0x21	; 33
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	f9 01       	movw	r30, r18
    2808:	20 81       	ld	r18, Z
    280a:	2e 7f       	andi	r18, 0xFE	; 254
    280c:	fc 01       	movw	r30, r24
    280e:	20 83       	st	Z, r18
    2810:	8e e7       	ldi	r24, 0x7E	; 126
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	2e e7       	ldi	r18, 0x7E	; 126
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	f9 01       	movw	r30, r18
    281a:	20 81       	ld	r18, Z
    281c:	21 60       	ori	r18, 0x01	; 1
    281e:	fc 01       	movw	r30, r24
    2820:	20 83       	st	Z, r18
    2822:	8c e7       	ldi	r24, 0x7C	; 124
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	20 e6       	ldi	r18, 0x60	; 96
    2828:	fc 01       	movw	r30, r24
    282a:	20 83       	st	Z, r18
    282c:	8a e7       	ldi	r24, 0x7A	; 122
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	27 e3       	ldi	r18, 0x37	; 55
    2832:	fc 01       	movw	r30, r24
    2834:	20 83       	st	Z, r18
    2836:	8b e7       	ldi	r24, 0x7B	; 123
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	fc 01       	movw	r30, r24
    283c:	10 82       	st	Z, r1
    283e:	8a e7       	ldi	r24, 0x7A	; 122
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	2a e7       	ldi	r18, 0x7A	; 122
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	f9 01       	movw	r30, r18
    2848:	20 81       	ld	r18, Z
    284a:	20 68       	ori	r18, 0x80	; 128
    284c:	fc 01       	movw	r30, r24
    284e:	20 83       	st	Z, r18
    2850:	8a e7       	ldi	r24, 0x7A	; 122
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	2a e7       	ldi	r18, 0x7A	; 122
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	f9 01       	movw	r30, r18
    285a:	20 81       	ld	r18, Z
    285c:	20 64       	ori	r18, 0x40	; 64
    285e:	fc 01       	movw	r30, r24
    2860:	20 83       	st	Z, r18
    2862:	df 91       	pop	r29
    2864:	cf 91       	pop	r28
    2866:	08 95       	ret

00002868 <adcGetTemperature>:

uint8_t adcGetTemperature(void)
{
    2868:	af 92       	push	r10
    286a:	bf 92       	push	r11
    286c:	cf 92       	push	r12
    286e:	df 92       	push	r13
    2870:	ef 92       	push	r14
    2872:	ff 92       	push	r15
    2874:	0f 93       	push	r16
    2876:	1f 93       	push	r17
    2878:	cf 93       	push	r28
    287a:	df 93       	push	r29
    287c:	00 d0       	rcall	.+0      	; 0x287e <adcGetTemperature+0x16>
    287e:	00 d0       	rcall	.+0      	; 0x2880 <adcGetTemperature+0x18>
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
	int32_t s32Temp;
	
	s32Temp = Map((int32_t)ADCH,0,255,-50,450);
    2884:	89 e7       	ldi	r24, 0x79	; 121
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	fc 01       	movw	r30, r24
    288a:	80 81       	ld	r24, Z
    288c:	88 2f       	mov	r24, r24
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	a0 e0       	ldi	r26, 0x00	; 0
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	1f 92       	push	r1
    2896:	1f 92       	push	r1
    2898:	21 e0       	ldi	r18, 0x01	; 1
    289a:	2f 93       	push	r18
    289c:	22 ec       	ldi	r18, 0xC2	; 194
    289e:	2f 93       	push	r18
    28a0:	0f 2e       	mov	r0, r31
    28a2:	fe ec       	ldi	r31, 0xCE	; 206
    28a4:	af 2e       	mov	r10, r31
    28a6:	bb 24       	eor	r11, r11
    28a8:	ba 94       	dec	r11
    28aa:	cb 2c       	mov	r12, r11
    28ac:	db 2c       	mov	r13, r11
    28ae:	f0 2d       	mov	r31, r0
    28b0:	e1 2c       	mov	r14, r1
    28b2:	f1 2c       	mov	r15, r1
    28b4:	87 01       	movw	r16, r14
    28b6:	ea 94       	dec	r14
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	a9 01       	movw	r20, r18
    28be:	bc 01       	movw	r22, r24
    28c0:	cd 01       	movw	r24, r26
    28c2:	0e 94 21 15 	call	0x2a42	; 0x2a42 <Map>
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	89 83       	std	Y+1, r24	; 0x01
    28d4:	9a 83       	std	Y+2, r25	; 0x02
    28d6:	ab 83       	std	Y+3, r26	; 0x03
    28d8:	bc 83       	std	Y+4, r27	; 0x04
	if(s32Temp<0)
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	9a 81       	ldd	r25, Y+2	; 0x02
    28de:	ab 81       	ldd	r26, Y+3	; 0x03
    28e0:	bc 81       	ldd	r27, Y+4	; 0x04
    28e2:	bb 23       	and	r27, r27
    28e4:	2c f4       	brge	.+10     	; 0x28f0 <adcGetTemperature+0x88>
	{
		s32Temp = 0;
    28e6:	19 82       	std	Y+1, r1	; 0x01
    28e8:	1a 82       	std	Y+2, r1	; 0x02
    28ea:	1b 82       	std	Y+3, r1	; 0x03
    28ec:	1c 82       	std	Y+4, r1	; 0x04
    28ee:	12 c0       	rjmp	.+36     	; 0x2914 <adcGetTemperature+0xac>
	}
	else if(s32Temp>255)
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	9a 81       	ldd	r25, Y+2	; 0x02
    28f4:	ab 81       	ldd	r26, Y+3	; 0x03
    28f6:	bc 81       	ldd	r27, Y+4	; 0x04
    28f8:	8f 3f       	cpi	r24, 0xFF	; 255
    28fa:	91 05       	cpc	r25, r1
    28fc:	a1 05       	cpc	r26, r1
    28fe:	b1 05       	cpc	r27, r1
    2900:	49 f0       	breq	.+18     	; 0x2914 <adcGetTemperature+0xac>
    2902:	44 f0       	brlt	.+16     	; 0x2914 <adcGetTemperature+0xac>
	{
		s32Temp = 255;
    2904:	8f ef       	ldi	r24, 0xFF	; 255
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	a0 e0       	ldi	r26, 0x00	; 0
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	89 83       	std	Y+1, r24	; 0x01
    290e:	9a 83       	std	Y+2, r25	; 0x02
    2910:	ab 83       	std	Y+3, r26	; 0x03
    2912:	bc 83       	std	Y+4, r27	; 0x04
	}
	return (uint8_t)s32Temp;
    2914:	89 81       	ldd	r24, Y+1	; 0x01
}
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	df 91       	pop	r29
    2920:	cf 91       	pop	r28
    2922:	1f 91       	pop	r17
    2924:	0f 91       	pop	r16
    2926:	ff 90       	pop	r15
    2928:	ef 90       	pop	r14
    292a:	df 90       	pop	r13
    292c:	cf 90       	pop	r12
    292e:	bf 90       	pop	r11
    2930:	af 90       	pop	r10
    2932:	08 95       	ret

00002934 <INT_5ms_Init>:

///////////////////////////////////////////////////////////////////////////////
// UTILITIES
///////////////////////////////////////////////////////////////////////////////
void INT_5ms_Init(void)
{
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
	TCCR2A = (1<<WGM21);	// mode: CTC
    293c:	80 eb       	ldi	r24, 0xB0	; 176
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	22 e0       	ldi	r18, 0x02	; 2
    2942:	fc 01       	movw	r30, r24
    2944:	20 83       	st	Z, r18
	TCCR2B = 0;				// mode: CTC, clock off
    2946:	81 eb       	ldi	r24, 0xB1	; 177
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	fc 01       	movw	r30, r24
    294c:	10 82       	st	Z, r1
	TCNT2 = 0;
    294e:	82 eb       	ldi	r24, 0xB2	; 178
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	fc 01       	movw	r30, r24
    2954:	10 82       	st	Z, r1
	OCR2A = 96;
    2956:	83 eb       	ldi	r24, 0xB3	; 179
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	20 e6       	ldi	r18, 0x60	; 96
    295c:	fc 01       	movw	r30, r24
    295e:	20 83       	st	Z, r18
	TIMSK2 = (1<<OCIE2A);
    2960:	80 e7       	ldi	r24, 0x70	; 112
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	22 e0       	ldi	r18, 0x02	; 2
    2966:	fc 01       	movw	r30, r24
    2968:	20 83       	st	Z, r18
	TIFR2 = (1<<OCF2A);
    296a:	87 e3       	ldi	r24, 0x37	; 55
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	22 e0       	ldi	r18, 0x02	; 2
    2970:	fc 01       	movw	r30, r24
    2972:	20 83       	st	Z, r18

	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);
    2974:	81 eb       	ldi	r24, 0xB1	; 177
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	21 eb       	ldi	r18, 0xB1	; 177
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	f9 01       	movw	r30, r18
    297e:	20 81       	ld	r18, Z
    2980:	27 60       	ori	r18, 0x07	; 7
    2982:	fc 01       	movw	r30, r24
    2984:	20 83       	st	Z, r18
}
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	08 95       	ret

0000298c <wait_1ms>:
 *
 * @param [in] uiFactor: 1ms multiplier
 * @return no return value
 *****************************************************************************/
void wait_1ms(uint16_t uiFactor)
{
    298c:	cf 93       	push	r28
    298e:	df 93       	push	r29
    2990:	00 d0       	rcall	.+0      	; 0x2992 <wait_1ms+0x6>
    2992:	00 d0       	rcall	.+0      	; 0x2994 <wait_1ms+0x8>
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	9c 83       	std	Y+4, r25	; 0x04
    299a:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t i;
	TCCR0A = (1<<WGM01);	// mode: CTC
    299c:	84 e4       	ldi	r24, 0x44	; 68
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	22 e0       	ldi	r18, 0x02	; 2
    29a2:	fc 01       	movw	r30, r24
    29a4:	20 83       	st	Z, r18
	TCCR0B = 0;				// mode: CTC
    29a6:	85 e4       	ldi	r24, 0x45	; 69
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	fc 01       	movw	r30, r24
    29ac:	10 82       	st	Z, r1
	TIFR0 =  (1<<OCF0A);	// only OCFA flag needs to be cleared
    29ae:	85 e3       	ldi	r24, 0x35	; 53
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	22 e0       	ldi	r18, 0x02	; 2
    29b4:	fc 01       	movw	r30, r24
    29b6:	20 83       	st	Z, r18
	TIMSK0 = 0;				// no interrupts
    29b8:	8e e6       	ldi	r24, 0x6E	; 110
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	fc 01       	movw	r30, r24
    29be:	10 82       	st	Z, r1
	TCNT0 = 0;
    29c0:	86 e4       	ldi	r24, 0x46	; 70
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	fc 01       	movw	r30, r24
    29c6:	10 82       	st	Z, r1
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
    29c8:	87 e4       	ldi	r24, 0x47	; 71
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	2d e4       	ldi	r18, 0x4D	; 77
    29ce:	fc 01       	movw	r30, r24
    29d0:	20 83       	st	Z, r18
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
    29d2:	85 e4       	ldi	r24, 0x45	; 69
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	25 e4       	ldi	r18, 0x45	; 69
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	f9 01       	movw	r30, r18
    29dc:	20 81       	ld	r18, Z
    29de:	24 60       	ori	r18, 0x04	; 4
    29e0:	fc 01       	movw	r30, r24
    29e2:	20 83       	st	Z, r18
	
	for(i=0;i<uiFactor;i++)
    29e4:	1a 82       	std	Y+2, r1	; 0x02
    29e6:	19 82       	std	Y+1, r1	; 0x01
    29e8:	15 c0       	rjmp	.+42     	; 0x2a14 <wait_1ms+0x88>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
    29ea:	00 00       	nop
    29ec:	85 e3       	ldi	r24, 0x35	; 53
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	fc 01       	movw	r30, r24
    29f2:	80 81       	ld	r24, Z
    29f4:	88 2f       	mov	r24, r24
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	82 70       	andi	r24, 0x02	; 2
    29fa:	99 27       	eor	r25, r25
    29fc:	89 2b       	or	r24, r25
    29fe:	b1 f3       	breq	.-20     	; 0x29ec <wait_1ms+0x60>
		TIFR0 =  (1<<OCF0A);		// clear flag
    2a00:	85 e3       	ldi	r24, 0x35	; 53
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	22 e0       	ldi	r18, 0x02	; 2
    2a06:	fc 01       	movw	r30, r24
    2a08:	20 83       	st	Z, r18
	TCNT0 = 0;
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
	
	for(i=0;i<uiFactor;i++)
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
    2a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0e:	01 96       	adiw	r24, 0x01	; 1
    2a10:	9a 83       	std	Y+2, r25	; 0x02
    2a12:	89 83       	std	Y+1, r24	; 0x01
    2a14:	29 81       	ldd	r18, Y+1	; 0x01
    2a16:	3a 81       	ldd	r19, Y+2	; 0x02
    2a18:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1c:	28 17       	cp	r18, r24
    2a1e:	39 07       	cpc	r19, r25
    2a20:	20 f3       	brcs	.-56     	; 0x29ea <wait_1ms+0x5e>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
		TIFR0 =  (1<<OCF0A);		// clear flag
	}
	TCCR0B &= ~(0x07);	// set prescaler to 0 (stop timer)
    2a22:	85 e4       	ldi	r24, 0x45	; 69
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	25 e4       	ldi	r18, 0x45	; 69
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	f9 01       	movw	r30, r18
    2a2c:	20 81       	ld	r18, Z
    2a2e:	28 7f       	andi	r18, 0xF8	; 248
    2a30:	fc 01       	movw	r30, r24
    2a32:	20 83       	st	Z, r18
}
    2a34:	0f 90       	pop	r0
    2a36:	0f 90       	pop	r0
    2a38:	0f 90       	pop	r0
    2a3a:	0f 90       	pop	r0
    2a3c:	df 91       	pop	r29
    2a3e:	cf 91       	pop	r28
    2a40:	08 95       	ret

00002a42 <Map>:
 * @param [in] s32OutMin: minimal value of output range
 * @param [in] s32OutMax: maximal value of output range
 * @return data in new number range
 *****************************************************************************/
int32_t Map(int32_t s32Data, int32_t s32InMin, int32_t s32InMax, int32_t s32OutMin, int32_t s32OutMax)
{
    2a42:	af 92       	push	r10
    2a44:	bf 92       	push	r11
    2a46:	cf 92       	push	r12
    2a48:	df 92       	push	r13
    2a4a:	ef 92       	push	r14
    2a4c:	ff 92       	push	r15
    2a4e:	0f 93       	push	r16
    2a50:	1f 93       	push	r17
    2a52:	cf 93       	push	r28
    2a54:	df 93       	push	r29
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
    2a5a:	64 97       	sbiw	r28, 0x14	; 20
    2a5c:	0f b6       	in	r0, 0x3f	; 63
    2a5e:	f8 94       	cli
    2a60:	de bf       	out	0x3e, r29	; 62
    2a62:	0f be       	out	0x3f, r0	; 63
    2a64:	cd bf       	out	0x3d, r28	; 61
    2a66:	69 83       	std	Y+1, r22	; 0x01
    2a68:	7a 83       	std	Y+2, r23	; 0x02
    2a6a:	8b 83       	std	Y+3, r24	; 0x03
    2a6c:	9c 83       	std	Y+4, r25	; 0x04
    2a6e:	2d 83       	std	Y+5, r18	; 0x05
    2a70:	3e 83       	std	Y+6, r19	; 0x06
    2a72:	4f 83       	std	Y+7, r20	; 0x07
    2a74:	58 87       	std	Y+8, r21	; 0x08
    2a76:	e9 86       	std	Y+9, r14	; 0x09
    2a78:	fa 86       	std	Y+10, r15	; 0x0a
    2a7a:	0b 87       	std	Y+11, r16	; 0x0b
    2a7c:	1c 87       	std	Y+12, r17	; 0x0c
    2a7e:	ad 86       	std	Y+13, r10	; 0x0d
    2a80:	be 86       	std	Y+14, r11	; 0x0e
    2a82:	cf 86       	std	Y+15, r12	; 0x0f
    2a84:	d8 8a       	std	Y+16, r13	; 0x10
	return((s32Data-s32InMin)*(s32OutMax-s32OutMin)/(s32InMax-s32InMin)+s32OutMin);
    2a86:	29 81       	ldd	r18, Y+1	; 0x01
    2a88:	3a 81       	ldd	r19, Y+2	; 0x02
    2a8a:	4b 81       	ldd	r20, Y+3	; 0x03
    2a8c:	5c 81       	ldd	r21, Y+4	; 0x04
    2a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a90:	9e 81       	ldd	r25, Y+6	; 0x06
    2a92:	af 81       	ldd	r26, Y+7	; 0x07
    2a94:	b8 85       	ldd	r27, Y+8	; 0x08
    2a96:	79 01       	movw	r14, r18
    2a98:	8a 01       	movw	r16, r20
    2a9a:	e8 1a       	sub	r14, r24
    2a9c:	f9 0a       	sbc	r15, r25
    2a9e:	0a 0b       	sbc	r16, r26
    2aa0:	1b 0b       	sbc	r17, r27
    2aa2:	29 a1       	ldd	r18, Y+33	; 0x21
    2aa4:	3a a1       	ldd	r19, Y+34	; 0x22
    2aa6:	4b a1       	ldd	r20, Y+35	; 0x23
    2aa8:	5c a1       	ldd	r21, Y+36	; 0x24
    2aaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aae:	af 85       	ldd	r26, Y+15	; 0x0f
    2ab0:	b8 89       	ldd	r27, Y+16	; 0x10
    2ab2:	59 01       	movw	r10, r18
    2ab4:	6a 01       	movw	r12, r20
    2ab6:	a8 1a       	sub	r10, r24
    2ab8:	b9 0a       	sbc	r11, r25
    2aba:	ca 0a       	sbc	r12, r26
    2abc:	db 0a       	sbc	r13, r27
    2abe:	d6 01       	movw	r26, r12
    2ac0:	c5 01       	movw	r24, r10
    2ac2:	a8 01       	movw	r20, r16
    2ac4:	97 01       	movw	r18, r14
    2ac6:	bc 01       	movw	r22, r24
    2ac8:	cd 01       	movw	r24, r26
    2aca:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__mulsi3>
    2ace:	7b 01       	movw	r14, r22
    2ad0:	8c 01       	movw	r16, r24
    2ad2:	29 85       	ldd	r18, Y+9	; 0x09
    2ad4:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ad6:	4b 85       	ldd	r20, Y+11	; 0x0b
    2ad8:	5c 85       	ldd	r21, Y+12	; 0x0c
    2ada:	8d 81       	ldd	r24, Y+5	; 0x05
    2adc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ade:	af 81       	ldd	r26, Y+7	; 0x07
    2ae0:	b8 85       	ldd	r27, Y+8	; 0x08
    2ae2:	28 1b       	sub	r18, r24
    2ae4:	39 0b       	sbc	r19, r25
    2ae6:	4a 0b       	sbc	r20, r26
    2ae8:	5b 0b       	sbc	r21, r27
    2aea:	c8 01       	movw	r24, r16
    2aec:	b7 01       	movw	r22, r14
    2aee:	0e 94 23 16 	call	0x2c46	; 0x2c46 <__divmodsi4>
    2af2:	da 01       	movw	r26, r20
    2af4:	c9 01       	movw	r24, r18
    2af6:	9c 01       	movw	r18, r24
    2af8:	ad 01       	movw	r20, r26
    2afa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2afc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2afe:	af 85       	ldd	r26, Y+15	; 0x0f
    2b00:	b8 89       	ldd	r27, Y+16	; 0x10
    2b02:	82 0f       	add	r24, r18
    2b04:	93 1f       	adc	r25, r19
    2b06:	a4 1f       	adc	r26, r20
    2b08:	b5 1f       	adc	r27, r21
}
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	64 96       	adiw	r28, 0x14	; 20
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	f8 94       	cli
    2b14:	de bf       	out	0x3e, r29	; 62
    2b16:	0f be       	out	0x3f, r0	; 63
    2b18:	cd bf       	out	0x3d, r28	; 61
    2b1a:	df 91       	pop	r29
    2b1c:	cf 91       	pop	r28
    2b1e:	1f 91       	pop	r17
    2b20:	0f 91       	pop	r16
    2b22:	ff 90       	pop	r15
    2b24:	ef 90       	pop	r14
    2b26:	df 90       	pop	r13
    2b28:	cf 90       	pop	r12
    2b2a:	bf 90       	pop	r11
    2b2c:	af 90       	pop	r10
    2b2e:	08 95       	ret

00002b30 <CRC8>:

uint8_t CRC8(uint8_t* au8Data, uint8_t u8Length)
{
    2b30:	cf 93       	push	r28
    2b32:	df 93       	push	r29
    2b34:	cd b7       	in	r28, 0x3d	; 61
    2b36:	de b7       	in	r29, 0x3e	; 62
    2b38:	28 97       	sbiw	r28, 0x08	; 8
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	f8 94       	cli
    2b3e:	de bf       	out	0x3e, r29	; 62
    2b40:	0f be       	out	0x3f, r0	; 63
    2b42:	cd bf       	out	0x3d, r28	; 61
    2b44:	9f 83       	std	Y+7, r25	; 0x07
    2b46:	8e 83       	std	Y+6, r24	; 0x06
    2b48:	68 87       	std	Y+8, r22	; 0x08
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;
    2b4a:	19 82       	std	Y+1, r1	; 0x01

	for(i=0;i<u8Length;i++)
    2b4c:	1a 82       	std	Y+2, r1	; 0x02
    2b4e:	27 c0       	rjmp	.+78     	; 0x2b9e <CRC8+0x6e>
	{
		u8InByte = au8Data[i];
    2b50:	8a 81       	ldd	r24, Y+2	; 0x02
    2b52:	88 2f       	mov	r24, r24
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	2e 81       	ldd	r18, Y+6	; 0x06
    2b58:	3f 81       	ldd	r19, Y+7	; 0x07
    2b5a:	82 0f       	add	r24, r18
    2b5c:	93 1f       	adc	r25, r19
    2b5e:	fc 01       	movw	r30, r24
    2b60:	80 81       	ld	r24, Z
    2b62:	8c 83       	std	Y+4, r24	; 0x04
		for(j=0;j<8;j++)
    2b64:	1b 82       	std	Y+3, r1	; 0x03
    2b66:	15 c0       	rjmp	.+42     	; 0x2b92 <CRC8+0x62>
		{
			u8Temp = (u8CRC^u8InByte)&0x80;
    2b68:	99 81       	ldd	r25, Y+1	; 0x01
    2b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6c:	89 27       	eor	r24, r25
    2b6e:	80 78       	andi	r24, 0x80	; 128
    2b70:	8d 83       	std	Y+5, r24	; 0x05
			u8CRC <<= 1;
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
    2b74:	88 0f       	add	r24, r24
    2b76:	89 83       	std	Y+1, r24	; 0x01
			if(u8Temp!=0)
    2b78:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7a:	88 23       	and	r24, r24
    2b7c:	21 f0       	breq	.+8      	; 0x2b86 <CRC8+0x56>
			{
				u8CRC ^= 0x07;
    2b7e:	99 81       	ldd	r25, Y+1	; 0x01
    2b80:	87 e0       	ldi	r24, 0x07	; 7
    2b82:	89 27       	eor	r24, r25
    2b84:	89 83       	std	Y+1, r24	; 0x01
			}
			u8InByte<<=1;
    2b86:	8c 81       	ldd	r24, Y+4	; 0x04
    2b88:	88 0f       	add	r24, r24
    2b8a:	8c 83       	std	Y+4, r24	; 0x04
	u8CRC = 0;

	for(i=0;i<u8Length;i++)
	{
		u8InByte = au8Data[i];
		for(j=0;j<8;j++)
    2b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8e:	8f 5f       	subi	r24, 0xFF	; 255
    2b90:	8b 83       	std	Y+3, r24	; 0x03
    2b92:	8b 81       	ldd	r24, Y+3	; 0x03
    2b94:	88 30       	cpi	r24, 0x08	; 8
    2b96:	40 f3       	brcs	.-48     	; 0x2b68 <CRC8+0x38>
{
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;

	for(i=0;i<u8Length;i++)
    2b98:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9a:	8f 5f       	subi	r24, 0xFF	; 255
    2b9c:	8a 83       	std	Y+2, r24	; 0x02
    2b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba0:	88 85       	ldd	r24, Y+8	; 0x08
    2ba2:	98 17       	cp	r25, r24
    2ba4:	a8 f2       	brcs	.-86     	; 0x2b50 <CRC8+0x20>
			}
			u8InByte<<=1;
		}
	}

	return u8CRC;
    2ba6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ba8:	28 96       	adiw	r28, 0x08	; 8
    2baa:	0f b6       	in	r0, 0x3f	; 63
    2bac:	f8 94       	cli
    2bae:	de bf       	out	0x3e, r29	; 62
    2bb0:	0f be       	out	0x3f, r0	; 63
    2bb2:	cd bf       	out	0x3d, r28	; 61
    2bb4:	df 91       	pop	r29
    2bb6:	cf 91       	pop	r28
    2bb8:	08 95       	ret

00002bba <__mulsi3>:
    2bba:	db 01       	movw	r26, r22
    2bbc:	8f 93       	push	r24
    2bbe:	9f 93       	push	r25
    2bc0:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__muluhisi3>
    2bc4:	bf 91       	pop	r27
    2bc6:	af 91       	pop	r26
    2bc8:	a2 9f       	mul	r26, r18
    2bca:	80 0d       	add	r24, r0
    2bcc:	91 1d       	adc	r25, r1
    2bce:	a3 9f       	mul	r26, r19
    2bd0:	90 0d       	add	r25, r0
    2bd2:	b2 9f       	mul	r27, r18
    2bd4:	90 0d       	add	r25, r0
    2bd6:	11 24       	eor	r1, r1
    2bd8:	08 95       	ret

00002bda <__udivmodhi4>:
    2bda:	aa 1b       	sub	r26, r26
    2bdc:	bb 1b       	sub	r27, r27
    2bde:	51 e1       	ldi	r21, 0x11	; 17
    2be0:	07 c0       	rjmp	.+14     	; 0x2bf0 <__udivmodhi4_ep>

00002be2 <__udivmodhi4_loop>:
    2be2:	aa 1f       	adc	r26, r26
    2be4:	bb 1f       	adc	r27, r27
    2be6:	a6 17       	cp	r26, r22
    2be8:	b7 07       	cpc	r27, r23
    2bea:	10 f0       	brcs	.+4      	; 0x2bf0 <__udivmodhi4_ep>
    2bec:	a6 1b       	sub	r26, r22
    2bee:	b7 0b       	sbc	r27, r23

00002bf0 <__udivmodhi4_ep>:
    2bf0:	88 1f       	adc	r24, r24
    2bf2:	99 1f       	adc	r25, r25
    2bf4:	5a 95       	dec	r21
    2bf6:	a9 f7       	brne	.-22     	; 0x2be2 <__udivmodhi4_loop>
    2bf8:	80 95       	com	r24
    2bfa:	90 95       	com	r25
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	08 95       	ret

00002c02 <__udivmodsi4>:
    2c02:	a1 e2       	ldi	r26, 0x21	; 33
    2c04:	1a 2e       	mov	r1, r26
    2c06:	aa 1b       	sub	r26, r26
    2c08:	bb 1b       	sub	r27, r27
    2c0a:	fd 01       	movw	r30, r26
    2c0c:	0d c0       	rjmp	.+26     	; 0x2c28 <__udivmodsi4_ep>

00002c0e <__udivmodsi4_loop>:
    2c0e:	aa 1f       	adc	r26, r26
    2c10:	bb 1f       	adc	r27, r27
    2c12:	ee 1f       	adc	r30, r30
    2c14:	ff 1f       	adc	r31, r31
    2c16:	a2 17       	cp	r26, r18
    2c18:	b3 07       	cpc	r27, r19
    2c1a:	e4 07       	cpc	r30, r20
    2c1c:	f5 07       	cpc	r31, r21
    2c1e:	20 f0       	brcs	.+8      	; 0x2c28 <__udivmodsi4_ep>
    2c20:	a2 1b       	sub	r26, r18
    2c22:	b3 0b       	sbc	r27, r19
    2c24:	e4 0b       	sbc	r30, r20
    2c26:	f5 0b       	sbc	r31, r21

00002c28 <__udivmodsi4_ep>:
    2c28:	66 1f       	adc	r22, r22
    2c2a:	77 1f       	adc	r23, r23
    2c2c:	88 1f       	adc	r24, r24
    2c2e:	99 1f       	adc	r25, r25
    2c30:	1a 94       	dec	r1
    2c32:	69 f7       	brne	.-38     	; 0x2c0e <__udivmodsi4_loop>
    2c34:	60 95       	com	r22
    2c36:	70 95       	com	r23
    2c38:	80 95       	com	r24
    2c3a:	90 95       	com	r25
    2c3c:	9b 01       	movw	r18, r22
    2c3e:	ac 01       	movw	r20, r24
    2c40:	bd 01       	movw	r22, r26
    2c42:	cf 01       	movw	r24, r30
    2c44:	08 95       	ret

00002c46 <__divmodsi4>:
    2c46:	05 2e       	mov	r0, r21
    2c48:	97 fb       	bst	r25, 7
    2c4a:	1e f4       	brtc	.+6      	; 0x2c52 <__divmodsi4+0xc>
    2c4c:	00 94       	com	r0
    2c4e:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__negsi2>
    2c52:	57 fd       	sbrc	r21, 7
    2c54:	07 d0       	rcall	.+14     	; 0x2c64 <__divmodsi4_neg2>
    2c56:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__udivmodsi4>
    2c5a:	07 fc       	sbrc	r0, 7
    2c5c:	03 d0       	rcall	.+6      	; 0x2c64 <__divmodsi4_neg2>
    2c5e:	4e f4       	brtc	.+18     	; 0x2c72 <__divmodsi4_exit>
    2c60:	0c 94 3a 16 	jmp	0x2c74	; 0x2c74 <__negsi2>

00002c64 <__divmodsi4_neg2>:
    2c64:	50 95       	com	r21
    2c66:	40 95       	com	r20
    2c68:	30 95       	com	r19
    2c6a:	21 95       	neg	r18
    2c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c6e:	4f 4f       	sbci	r20, 0xFF	; 255
    2c70:	5f 4f       	sbci	r21, 0xFF	; 255

00002c72 <__divmodsi4_exit>:
    2c72:	08 95       	ret

00002c74 <__negsi2>:
    2c74:	90 95       	com	r25
    2c76:	80 95       	com	r24
    2c78:	70 95       	com	r23
    2c7a:	61 95       	neg	r22
    2c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c7e:	8f 4f       	sbci	r24, 0xFF	; 255
    2c80:	9f 4f       	sbci	r25, 0xFF	; 255
    2c82:	08 95       	ret

00002c84 <__tablejump2__>:
    2c84:	ee 0f       	add	r30, r30
    2c86:	ff 1f       	adc	r31, r31
    2c88:	05 90       	lpm	r0, Z+
    2c8a:	f4 91       	lpm	r31, Z
    2c8c:	e0 2d       	mov	r30, r0
    2c8e:	09 94       	ijmp

00002c90 <__muluhisi3>:
    2c90:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__umulhisi3>
    2c94:	a5 9f       	mul	r26, r21
    2c96:	90 0d       	add	r25, r0
    2c98:	b4 9f       	mul	r27, r20
    2c9a:	90 0d       	add	r25, r0
    2c9c:	a4 9f       	mul	r26, r20
    2c9e:	80 0d       	add	r24, r0
    2ca0:	91 1d       	adc	r25, r1
    2ca2:	11 24       	eor	r1, r1
    2ca4:	08 95       	ret

00002ca6 <__umulhisi3>:
    2ca6:	a2 9f       	mul	r26, r18
    2ca8:	b0 01       	movw	r22, r0
    2caa:	b3 9f       	mul	r27, r19
    2cac:	c0 01       	movw	r24, r0
    2cae:	a3 9f       	mul	r26, r19
    2cb0:	70 0d       	add	r23, r0
    2cb2:	81 1d       	adc	r24, r1
    2cb4:	11 24       	eor	r1, r1
    2cb6:	91 1d       	adc	r25, r1
    2cb8:	b2 9f       	mul	r27, r18
    2cba:	70 0d       	add	r23, r0
    2cbc:	81 1d       	adc	r24, r1
    2cbe:	11 24       	eor	r1, r1
    2cc0:	91 1d       	adc	r25, r1
    2cc2:	08 95       	ret

00002cc4 <strlen>:
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	01 90       	ld	r0, Z+
    2cc8:	00 20       	and	r0, r0
    2cca:	e9 f7       	brne	.-6      	; 0x2cc6 <strlen+0x2>
    2ccc:	80 95       	com	r24
    2cce:	90 95       	com	r25
    2cd0:	8e 0f       	add	r24, r30
    2cd2:	9f 1f       	adc	r25, r31
    2cd4:	08 95       	ret

00002cd6 <_exit>:
    2cd6:	f8 94       	cli

00002cd8 <__stop_program>:
    2cd8:	ff cf       	rjmp	.-2      	; 0x2cd8 <__stop_program>
