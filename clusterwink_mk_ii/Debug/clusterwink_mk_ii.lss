
clusterwink_mk_ii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000011a2  00001236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  0080010a  0080010a  00001240  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f7a  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6f  00000000  00000000  00002372  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cb6  00000000  00000000  00002de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000560  00000000  00000000  00003a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065b  00000000  00000000  00003ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b0b  00000000  00000000  00004653  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000515e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
       4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_1>
       8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
       c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      10:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      14:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_5>
      18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      4c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__vector_19>
      50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      54:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      58:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      5c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      60:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      68:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      6c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      70:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      74:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      7c:	ad 01       	movw	r20, r26
      7e:	c6 01       	movw	r24, r12
      80:	df 01       	movw	r26, r30
      82:	51 02       	muls	r21, r17
      84:	6c 02       	muls	r22, r28
      86:	6c 02       	muls	r22, r28
      88:	6c 02       	muls	r22, r28

0000008a <__ctors_end>:
      8a:	11 24       	eor	r1, r1
      8c:	1f be       	out	0x3f, r1	; 63
      8e:	cf ef       	ldi	r28, 0xFF	; 255
      90:	d8 e0       	ldi	r29, 0x08	; 8
      92:	de bf       	out	0x3e, r29	; 62
      94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
      96:	11 e0       	ldi	r17, 0x01	; 1
      98:	a0 e0       	ldi	r26, 0x00	; 0
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	e2 ea       	ldi	r30, 0xA2	; 162
      9e:	f1 e1       	ldi	r31, 0x11	; 17
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
      a2:	05 90       	lpm	r0, Z+
      a4:	0d 92       	st	X+, r0
      a6:	aa 30       	cpi	r26, 0x0A	; 10
      a8:	b1 07       	cpc	r27, r17
      aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
      ac:	21 e0       	ldi	r18, 0x01	; 1
      ae:	aa e0       	ldi	r26, 0x0A	; 10
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	a0 35       	cpi	r26, 0x50	; 80
      b8:	b2 07       	cpc	r27, r18
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	0e 94 6e 03 	call	0x6dc	; 0x6dc <main>
      c0:	0c 94 cf 08 	jmp	0x119e	; 0x119e <_exit>

000000c4 <__bad_interrupt>:
      c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <__vector_1>:
volatile uint8_t u8Status = 0x00;
volatile uint8_t u8Duty = 0;


ISR(INT0_vect)	// external interrupt (handshake from RGBooster board)
{				// start RGBooster send sequence: reset "ucRGBIdx" and "ucByteIdx" to zero. then start with calling the ISR directly "INT1_vect();"
      c8:	1f 92       	push	r1
      ca:	0f 92       	push	r0
      cc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	2f 93       	push	r18
      d6:	3f 93       	push	r19
      d8:	4f 93       	push	r20
      da:	8f 93       	push	r24
      dc:	9f 93       	push	r25
      de:	ef 93       	push	r30
      e0:	ff 93       	push	r31
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	cd b7       	in	r28, 0x3d	; 61
      e8:	de b7       	in	r29, 0x3e	; 62
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
      ea:	8b e2       	ldi	r24, 0x2B	; 43
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	2b e2       	ldi	r18, 0x2B	; 43
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	f9 01       	movw	r30, r18
      f4:	20 81       	ld	r18, Z
      f6:	22 60       	ori	r18, 0x02	; 2
      f8:	fc 01       	movw	r30, r24
      fa:	20 83       	st	Z, r18
	#endif
	
	if(ucRGBIdx<(LED_COUNT))
      fc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ucRGBIdx>
     100:	83 30       	cpi	r24, 0x03	; 3
     102:	08 f0       	brcs	.+2      	; 0x106 <__vector_1+0x3e>
     104:	d1 c0       	rjmp	.+418    	; 0x2a8 <__vector_1+0x1e0>
	{
		switch(ucByteIdx) // red green and blue are sent in 3 separate bytes. this variable remembers the next color to be sent
     106:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     10a:	88 2f       	mov	r24, r24
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	81 30       	cpi	r24, 0x01	; 1
     110:	91 05       	cpc	r25, r1
     112:	09 f4       	brne	.+2      	; 0x116 <__vector_1+0x4e>
     114:	47 c0       	rjmp	.+142    	; 0x1a4 <__vector_1+0xdc>
     116:	82 30       	cpi	r24, 0x02	; 2
     118:	91 05       	cpc	r25, r1
     11a:	09 f4       	brne	.+2      	; 0x11e <__vector_1+0x56>
     11c:	83 c0       	rjmp	.+262    	; 0x224 <__vector_1+0x15c>
     11e:	89 2b       	or	r24, r25
     120:	09 f0       	breq	.+2      	; 0x124 <__vector_1+0x5c>
     122:	c2 c0       	rjmp	.+388    	; 0x2a8 <__vector_1+0x1e0>
		{
			case 0:
			PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (aucGreen[ucRGBIdx] & DATA_HIGH_BITMASK);
     124:	82 e2       	ldi	r24, 0x22	; 34
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	22 e2       	ldi	r18, 0x22	; 34
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	f9 01       	movw	r30, r18
     12e:	20 81       	ld	r18, Z
     130:	42 2f       	mov	r20, r18
     132:	4f 70       	andi	r20, 0x0F	; 15
     134:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <ucRGBIdx>
     138:	22 2f       	mov	r18, r18
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	2d 5f       	subi	r18, 0xFD	; 253
     13e:	3e 4f       	sbci	r19, 0xFE	; 254
     140:	f9 01       	movw	r30, r18
     142:	20 81       	ld	r18, Z
     144:	20 7f       	andi	r18, 0xF0	; 240
     146:	24 2b       	or	r18, r20
     148:	fc 01       	movw	r30, r24
     14a:	20 83       	st	Z, r18
			PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (aucGreen[ucRGBIdx] & DATA_LOW_BITMASK);
     14c:	85 e2       	ldi	r24, 0x25	; 37
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	25 e2       	ldi	r18, 0x25	; 37
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	f9 01       	movw	r30, r18
     156:	20 81       	ld	r18, Z
     158:	42 2f       	mov	r20, r18
     15a:	40 7f       	andi	r20, 0xF0	; 240
     15c:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <ucRGBIdx>
     160:	22 2f       	mov	r18, r18
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	2d 5f       	subi	r18, 0xFD	; 253
     166:	3e 4f       	sbci	r19, 0xFE	; 254
     168:	f9 01       	movw	r30, r18
     16a:	20 81       	ld	r18, Z
     16c:	2f 70       	andi	r18, 0x0F	; 15
     16e:	24 2b       	or	r18, r20
     170:	fc 01       	movw	r30, r24
     172:	20 83       	st	Z, r18
			PORT_CONTROL |= (1<<SEND); // generate send impulse
     174:	8b e2       	ldi	r24, 0x2B	; 43
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	2b e2       	ldi	r18, 0x2B	; 43
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	f9 01       	movw	r30, r18
     17e:	20 81       	ld	r18, Z
     180:	28 60       	ori	r18, 0x08	; 8
     182:	fc 01       	movw	r30, r24
     184:	20 83       	st	Z, r18
			PORT_CONTROL &= ~(1<<SEND);
     186:	8b e2       	ldi	r24, 0x2B	; 43
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	2b e2       	ldi	r18, 0x2B	; 43
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	f9 01       	movw	r30, r18
     190:	20 81       	ld	r18, Z
     192:	27 7f       	andi	r18, 0xF7	; 247
     194:	fc 01       	movw	r30, r24
     196:	20 83       	st	Z, r18
			ucByteIdx++;
     198:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     19c:	8f 5f       	subi	r24, 0xFF	; 255
     19e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
			break;
     1a2:	82 c0       	rjmp	.+260    	; 0x2a8 <__vector_1+0x1e0>

			case 1:
			PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (aucRed[ucRGBIdx] & DATA_HIGH_BITMASK);
     1a4:	82 e2       	ldi	r24, 0x22	; 34
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	22 e2       	ldi	r18, 0x22	; 34
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	f9 01       	movw	r30, r18
     1ae:	20 81       	ld	r18, Z
     1b0:	42 2f       	mov	r20, r18
     1b2:	4f 70       	andi	r20, 0x0F	; 15
     1b4:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <ucRGBIdx>
     1b8:	22 2f       	mov	r18, r18
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	20 50       	subi	r18, 0x00	; 0
     1be:	3f 4f       	sbci	r19, 0xFF	; 255
     1c0:	f9 01       	movw	r30, r18
     1c2:	20 81       	ld	r18, Z
     1c4:	20 7f       	andi	r18, 0xF0	; 240
     1c6:	24 2b       	or	r18, r20
     1c8:	fc 01       	movw	r30, r24
     1ca:	20 83       	st	Z, r18
			PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (aucRed[ucRGBIdx] & DATA_LOW_BITMASK);
     1cc:	85 e2       	ldi	r24, 0x25	; 37
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	25 e2       	ldi	r18, 0x25	; 37
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	f9 01       	movw	r30, r18
     1d6:	20 81       	ld	r18, Z
     1d8:	42 2f       	mov	r20, r18
     1da:	40 7f       	andi	r20, 0xF0	; 240
     1dc:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <ucRGBIdx>
     1e0:	22 2f       	mov	r18, r18
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	20 50       	subi	r18, 0x00	; 0
     1e6:	3f 4f       	sbci	r19, 0xFF	; 255
     1e8:	f9 01       	movw	r30, r18
     1ea:	20 81       	ld	r18, Z
     1ec:	2f 70       	andi	r18, 0x0F	; 15
     1ee:	24 2b       	or	r18, r20
     1f0:	fc 01       	movw	r30, r24
     1f2:	20 83       	st	Z, r18
			PORT_CONTROL |= (1<<SEND); // generate send impulse
     1f4:	8b e2       	ldi	r24, 0x2B	; 43
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	2b e2       	ldi	r18, 0x2B	; 43
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	f9 01       	movw	r30, r18
     1fe:	20 81       	ld	r18, Z
     200:	28 60       	ori	r18, 0x08	; 8
     202:	fc 01       	movw	r30, r24
     204:	20 83       	st	Z, r18
			PORT_CONTROL &= ~(1<<SEND);
     206:	8b e2       	ldi	r24, 0x2B	; 43
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	2b e2       	ldi	r18, 0x2B	; 43
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	f9 01       	movw	r30, r18
     210:	20 81       	ld	r18, Z
     212:	27 7f       	andi	r18, 0xF7	; 247
     214:	fc 01       	movw	r30, r24
     216:	20 83       	st	Z, r18
			ucByteIdx++;
     218:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     21c:	8f 5f       	subi	r24, 0xFF	; 255
     21e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
			break;
     222:	42 c0       	rjmp	.+132    	; 0x2a8 <__vector_1+0x1e0>

			case 2:
			PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (aucBlue[ucRGBIdx] & DATA_HIGH_BITMASK);
     224:	82 e2       	ldi	r24, 0x22	; 34
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	22 e2       	ldi	r18, 0x22	; 34
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	f9 01       	movw	r30, r18
     22e:	20 81       	ld	r18, Z
     230:	42 2f       	mov	r20, r18
     232:	4f 70       	andi	r20, 0x0F	; 15
     234:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <ucRGBIdx>
     238:	22 2f       	mov	r18, r18
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	2a 5f       	subi	r18, 0xFA	; 250
     23e:	3e 4f       	sbci	r19, 0xFE	; 254
     240:	f9 01       	movw	r30, r18
     242:	20 81       	ld	r18, Z
     244:	20 7f       	andi	r18, 0xF0	; 240
     246:	24 2b       	or	r18, r20
     248:	fc 01       	movw	r30, r24
     24a:	20 83       	st	Z, r18
			PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (aucBlue[ucRGBIdx] & DATA_LOW_BITMASK);
     24c:	85 e2       	ldi	r24, 0x25	; 37
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	25 e2       	ldi	r18, 0x25	; 37
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	f9 01       	movw	r30, r18
     256:	20 81       	ld	r18, Z
     258:	42 2f       	mov	r20, r18
     25a:	40 7f       	andi	r20, 0xF0	; 240
     25c:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <ucRGBIdx>
     260:	22 2f       	mov	r18, r18
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	2a 5f       	subi	r18, 0xFA	; 250
     266:	3e 4f       	sbci	r19, 0xFE	; 254
     268:	f9 01       	movw	r30, r18
     26a:	20 81       	ld	r18, Z
     26c:	2f 70       	andi	r18, 0x0F	; 15
     26e:	24 2b       	or	r18, r20
     270:	fc 01       	movw	r30, r24
     272:	20 83       	st	Z, r18
			PORT_CONTROL |= (1<<SEND); // generate send impulse
     274:	8b e2       	ldi	r24, 0x2B	; 43
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	2b e2       	ldi	r18, 0x2B	; 43
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	f9 01       	movw	r30, r18
     27e:	20 81       	ld	r18, Z
     280:	28 60       	ori	r18, 0x08	; 8
     282:	fc 01       	movw	r30, r24
     284:	20 83       	st	Z, r18
			PORT_CONTROL &= ~(1<<SEND);
     286:	8b e2       	ldi	r24, 0x2B	; 43
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	2b e2       	ldi	r18, 0x2B	; 43
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	f9 01       	movw	r30, r18
     290:	20 81       	ld	r18, Z
     292:	27 7f       	andi	r18, 0xF7	; 247
     294:	fc 01       	movw	r30, r24
     296:	20 83       	st	Z, r18
			ucByteIdx=0;
     298:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
			ucRGBIdx++;
     29c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ucRGBIdx>
     2a0:	8f 5f       	subi	r24, 0xFF	; 255
     2a2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ucRGBIdx>
			break;
     2a6:	00 00       	nop
		}
	}
	
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
     2a8:	8b e2       	ldi	r24, 0x2B	; 43
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	2b e2       	ldi	r18, 0x2B	; 43
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	f9 01       	movw	r30, r18
     2b2:	20 81       	ld	r18, Z
     2b4:	2d 7f       	andi	r18, 0xFD	; 253
     2b6:	fc 01       	movw	r30, r24
     2b8:	20 83       	st	Z, r18
	#endif
}
     2ba:	00 00       	nop
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	ff 91       	pop	r31
     2c2:	ef 91       	pop	r30
     2c4:	9f 91       	pop	r25
     2c6:	8f 91       	pop	r24
     2c8:	4f 91       	pop	r20
     2ca:	3f 91       	pop	r19
     2cc:	2f 91       	pop	r18
     2ce:	0f 90       	pop	r0
     2d0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     2d4:	0f 90       	pop	r0
     2d6:	1f 90       	pop	r1
     2d8:	18 95       	reti

000002da <__vector_19>:


ISR(SPI_STC_vect)
{
     2da:	1f 92       	push	r1
     2dc:	0f 92       	push	r0
     2de:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     2e2:	0f 92       	push	r0
     2e4:	11 24       	eor	r1, r1
     2e6:	2f 93       	push	r18
     2e8:	3f 93       	push	r19
     2ea:	4f 93       	push	r20
     2ec:	5f 93       	push	r21
     2ee:	6f 93       	push	r22
     2f0:	7f 93       	push	r23
     2f2:	8f 93       	push	r24
     2f4:	9f 93       	push	r25
     2f6:	af 93       	push	r26
     2f8:	bf 93       	push	r27
     2fa:	ef 93       	push	r30
     2fc:	ff 93       	push	r31
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	1f 92       	push	r1
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8spiData = SPDR0;
     308:	8e e4       	ldi	r24, 0x4E	; 78
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	fc 01       	movw	r30, r24
     30e:	80 81       	ld	r24, Z
     310:	89 83       	std	Y+1, r24	; 0x01
	
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
     312:	8b e2       	ldi	r24, 0x2B	; 43
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	2b e2       	ldi	r18, 0x2B	; 43
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	f9 01       	movw	r30, r18
     31c:	20 81       	ld	r18, Z
     31e:	22 60       	ori	r18, 0x02	; 2
     320:	fc 01       	movw	r30, r24
     322:	20 83       	st	Z, r18
	#endif
	
	SPDR0 = 0;
     324:	8e e4       	ldi	r24, 0x4E	; 78
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	fc 01       	movw	r30, r24
     32a:	10 82       	st	Z, r1

	switch(SPIBUFFER.spiState)
     32c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <SPIBUFFER+0x42>
     330:	88 2f       	mov	r24, r24
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	09 2e       	mov	r0, r25
     336:	00 0c       	add	r0, r0
     338:	aa 0b       	sbc	r26, r26
     33a:	bb 0b       	sbc	r27, r27
     33c:	40 e0       	ldi	r20, 0x00	; 0
     33e:	50 e0       	ldi	r21, 0x00	; 0
     340:	26 e0       	ldi	r18, 0x06	; 6
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	84 1b       	sub	r24, r20
     346:	95 0b       	sbc	r25, r21
     348:	28 17       	cp	r18, r24
     34a:	39 07       	cpc	r19, r25
     34c:	08 f4       	brcc	.+2      	; 0x350 <__vector_19+0x76>
     34e:	c9 c0       	rjmp	.+402    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     350:	82 5c       	subi	r24, 0xC2	; 194
     352:	9f 4f       	sbci	r25, 0xFF	; 255
     354:	fc 01       	movw	r30, r24
     356:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__tablejump2__>
	{
		case READY:
			if(u8spiData>=3)
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	83 30       	cpi	r24, 0x03	; 3
     35e:	90 f0       	brcs	.+36     	; 0x384 <__vector_19+0xaa>
			{
				SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
     360:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <SPIBUFFER+0x40>
     364:	88 2f       	mov	r24, r24
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	85 5f       	subi	r24, 0xF5	; 245
     36a:	9e 4f       	sbci	r25, 0xFE	; 254
     36c:	29 81       	ldd	r18, Y+1	; 0x01
     36e:	fc 01       	movw	r30, r24
     370:	20 83       	st	Z, r18
				SPIBUFFER.u8Count++;
     372:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <SPIBUFFER+0x40>
     376:	8f 5f       	subi	r24, 0xFF	; 255
     378:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <SPIBUFFER+0x40>
				SPIBUFFER.spiState = WRITE;
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <SPIBUFFER+0x42>
			}
			else
			{
				SPIBUFFER.spiState = READ;
			}
		break;
     382:	af c0       	rjmp	.+350    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
				SPIBUFFER.u8Count++;
				SPIBUFFER.spiState = WRITE;
			}
			else
			{
				SPIBUFFER.spiState = READ;
     384:	82 e0       	ldi	r24, 0x02	; 2
     386:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <SPIBUFFER+0x42>
			}
		break;
     38a:	ab c0       	rjmp	.+342    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>

		case WRITE:
			SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
     38c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <SPIBUFFER+0x40>
     390:	88 2f       	mov	r24, r24
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	85 5f       	subi	r24, 0xF5	; 245
     396:	9e 4f       	sbci	r25, 0xFE	; 254
     398:	29 81       	ldd	r18, Y+1	; 0x01
     39a:	fc 01       	movw	r30, r24
     39c:	20 83       	st	Z, r18
			SPIBUFFER.u8Count++;
     39e:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <SPIBUFFER+0x40>
     3a2:	8f 5f       	subi	r24, 0xFF	; 255
     3a4:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <SPIBUFFER+0x40>
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
     3a8:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <SPIBUFFER+0x40>
     3ac:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <SPIBUFFER>
     3b0:	98 17       	cp	r25, r24
     3b2:	08 f4       	brcc	.+2      	; 0x3b6 <__vector_19+0xdc>
     3b4:	93 c0       	rjmp	.+294    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
			{
				SPIBUFFER.spiState = DONE_WRITE;
     3b6:	84 e0       	ldi	r24, 0x04	; 4
     3b8:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <SPIBUFFER+0x42>
			}
		break;
     3bc:	8f c0       	rjmp	.+286    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>

		case READ:
			SPIBUFFER.u8Count = 0;
     3be:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <SPIBUFFER+0x40>
			
			switch(u8spiData)
     3c2:	89 81       	ldd	r24, Y+1	; 0x01
     3c4:	88 2f       	mov	r24, r24
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	82 3c       	cpi	r24, 0xC2	; 194
     3ca:	91 05       	cpc	r25, r1
     3cc:	39 f1       	breq	.+78     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     3ce:	83 3c       	cpi	r24, 0xC3	; 195
     3d0:	91 05       	cpc	r25, r1
     3d2:	09 f4       	brne	.+2      	; 0x3d6 <__vector_19+0xfc>
     3d4:	42 c0       	rjmp	.+132    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     3d6:	81 3c       	cpi	r24, 0xC1	; 193
     3d8:	91 05       	cpc	r25, r1
     3da:	09 f0       	breq	.+2      	; 0x3de <__vector_19+0x104>
     3dc:	5d c0       	rjmp	.+186    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
			{
				case 0xC1:
					SPDR0 = 0x01;
     3de:	8e e4       	ldi	r24, 0x4E	; 78
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	21 e0       	ldi	r18, 0x01	; 1
     3e4:	fc 01       	movw	r30, r24
     3e6:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     3e8:	84 e0       	ldi	r24, 0x04	; 4
     3ea:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     3ee:	89 81       	ldd	r24, Y+1	; 0x01
     3f0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = u8Status;
     3f4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <u8Status>
     3f8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     3fc:	63 e0       	ldi	r22, 0x03	; 3
     3fe:	8b e0       	ldi	r24, 0x0B	; 11
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	0e 94 19 08 	call	0x1032	; 0x1032 <CRC8>
     406:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     40a:	84 e0       	ldi	r24, 0x04	; 4
     40c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     410:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     414:	83 e0       	ldi	r24, 0x03	; 3
     416:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <SPIBUFFER+0x42>
				break;
     41a:	42 c0       	rjmp	.+132    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
				
				case 0xC2:
					SPDR0 = 0x01;
     41c:	8e e4       	ldi	r24, 0x4E	; 78
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	21 e0       	ldi	r18, 0x01	; 1
     422:	fc 01       	movw	r30, r24
     424:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     426:	84 e0       	ldi	r24, 0x04	; 4
     428:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = u8Duty;
     432:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8Duty>
     436:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     43a:	63 e0       	ldi	r22, 0x03	; 3
     43c:	8b e0       	ldi	r24, 0x0B	; 11
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	0e 94 19 08 	call	0x1032	; 0x1032 <CRC8>
     444:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     448:	84 e0       	ldi	r24, 0x04	; 4
     44a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     44e:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     452:	83 e0       	ldi	r24, 0x03	; 3
     454:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <SPIBUFFER+0x42>
				break;
     458:	23 c0       	rjmp	.+70     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
				
				case 0xC3:
					SPDR0 = 0x01;
     45a:	8e e4       	ldi	r24, 0x4E	; 78
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	21 e0       	ldi	r18, 0x01	; 1
     460:	fc 01       	movw	r30, r24
     462:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     464:	84 e0       	ldi	r24, 0x04	; 4
     466:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = adcGetTemperature();
     470:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <adcGetTemperature>
     474:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     478:	63 e0       	ldi	r22, 0x03	; 3
     47a:	8b e0       	ldi	r24, 0x0B	; 11
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 19 08 	call	0x1032	; 0x1032 <CRC8>
     482:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     486:	84 e0       	ldi	r24, 0x04	; 4
     488:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     48c:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     490:	83 e0       	ldi	r24, 0x03	; 3
     492:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <SPIBUFFER+0x42>
				break;
     496:	04 c0       	rjmp	.+8      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
				
				default:
					SPIBUFFER.spiState = IDLE;
     498:	86 e0       	ldi	r24, 0x06	; 6
     49a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <SPIBUFFER+0x42>
				break;
     49e:	00 00       	nop
			}
		break;
     4a0:	20 c0       	rjmp	.+64     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
		
		case READ_RETURN:
			SPDR0 = SPIBUFFER.au8Buffer[SPIBUFFER.u8ReadReturnCount];
     4a2:	8e e4       	ldi	r24, 0x4E	; 78
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <SPIBUFFER+0x41>
     4aa:	22 2f       	mov	r18, r18
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	25 5f       	subi	r18, 0xF5	; 245
     4b0:	3e 4f       	sbci	r19, 0xFE	; 254
     4b2:	f9 01       	movw	r30, r18
     4b4:	20 81       	ld	r18, Z
     4b6:	fc 01       	movw	r30, r24
     4b8:	20 83       	st	Z, r18
			SPIBUFFER.u8ReadReturnCount++;
     4ba:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SPIBUFFER+0x41>
     4be:	8f 5f       	subi	r24, 0xFF	; 255
     4c0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <SPIBUFFER+0x41>
			if(SPIBUFFER.u8Count == SPIBUFFER.u8ReadReturnCount)
     4c4:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <SPIBUFFER+0x40>
     4c8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SPIBUFFER+0x41>
     4cc:	98 17       	cp	r25, r24
     4ce:	41 f4       	brne	.+16     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			{
				SPIBUFFER.spiState = DONE_READ;
     4d0:	85 e0       	ldi	r24, 0x05	; 5
     4d2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <SPIBUFFER+0x42>
			}
		break;
     4d6:	04 c0       	rjmp	.+8      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
		
		break;

		case IDLE:

		break;
     4d8:	00 00       	nop
     4da:	03 c0       	rjmp	.+6      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
			SPIBUFFER.u8Count++;
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
			{
				SPIBUFFER.spiState = DONE_WRITE;
			}
		break;
     4dc:	00 00       	nop
     4de:	01 c0       	rjmp	.+2      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
			SPIBUFFER.u8ReadReturnCount++;
			if(SPIBUFFER.u8Count == SPIBUFFER.u8ReadReturnCount)
			{
				SPIBUFFER.spiState = DONE_READ;
			}
		break;
     4e0:	00 00       	nop
		case IDLE:

		break;
	}
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
     4e2:	8b e2       	ldi	r24, 0x2B	; 43
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	2b e2       	ldi	r18, 0x2B	; 43
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	f9 01       	movw	r30, r18
     4ec:	20 81       	ld	r18, Z
     4ee:	2d 7f       	andi	r18, 0xFD	; 253
     4f0:	fc 01       	movw	r30, r24
     4f2:	20 83       	st	Z, r18
	#endif
}
     4f4:	00 00       	nop
     4f6:	0f 90       	pop	r0
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	ff 91       	pop	r31
     4fe:	ef 91       	pop	r30
     500:	bf 91       	pop	r27
     502:	af 91       	pop	r26
     504:	9f 91       	pop	r25
     506:	8f 91       	pop	r24
     508:	7f 91       	pop	r23
     50a:	6f 91       	pop	r22
     50c:	5f 91       	pop	r21
     50e:	4f 91       	pop	r20
     510:	3f 91       	pop	r19
     512:	2f 91       	pop	r18
     514:	0f 90       	pop	r0
     516:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     51a:	0f 90       	pop	r0
     51c:	1f 90       	pop	r1
     51e:	18 95       	reti

00000520 <__vector_5>:

ISR(PCINT1_vect)
{
     520:	1f 92       	push	r1
     522:	0f 92       	push	r0
     524:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     528:	0f 92       	push	r0
     52a:	11 24       	eor	r1, r1
     52c:	2f 93       	push	r18
     52e:	3f 93       	push	r19
     530:	4f 93       	push	r20
     532:	5f 93       	push	r21
     534:	6f 93       	push	r22
     536:	7f 93       	push	r23
     538:	8f 93       	push	r24
     53a:	9f 93       	push	r25
     53c:	af 93       	push	r26
     53e:	bf 93       	push	r27
     540:	ef 93       	push	r30
     542:	ff 93       	push	r31
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	cd b7       	in	r28, 0x3d	; 61
     54a:	de b7       	in	r29, 0x3e	; 62
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
     54c:	8b e2       	ldi	r24, 0x2B	; 43
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	2b e2       	ldi	r18, 0x2B	; 43
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	f9 01       	movw	r30, r18
     556:	20 81       	ld	r18, Z
     558:	22 60       	ori	r18, 0x02	; 2
     55a:	fc 01       	movw	r30, r24
     55c:	20 83       	st	Z, r18
	#endif
	
	SPDR0 = 0;
     55e:	8e e4       	ldi	r24, 0x4E	; 78
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	fc 01       	movw	r30, r24
     564:	10 82       	st	Z, r1
	if(PIN_SPI & (1<<SPI_SS)) // SS HIGH
     566:	83 e2       	ldi	r24, 0x23	; 35
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	fc 01       	movw	r30, r24
     56c:	80 81       	ld	r24, Z
     56e:	88 2f       	mov	r24, r24
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	80 71       	andi	r24, 0x10	; 16
     574:	99 27       	eor	r25, r25
     576:	89 2b       	or	r24, r25
     578:	09 f4       	brne	.+2      	; 0x57c <__vector_5+0x5c>
     57a:	82 c0       	rjmp	.+260    	; 0x680 <__vector_5+0x160>
	{
		
		if(SPIBUFFER.spiState == DONE_WRITE)
     57c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <SPIBUFFER+0x42>
     580:	84 30       	cpi	r24, 0x04	; 4
     582:	09 f0       	breq	.+2      	; 0x586 <__vector_5+0x66>
     584:	8d c0       	rjmp	.+282    	; 0x6a0 <__vector_5+0x180>
		{
			if(SPIBUFFER.u8Count == SPIBUFFER.au8Buffer[0]) // correct amount of bytes in buffer
     586:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <SPIBUFFER+0x40>
     58a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <SPIBUFFER>
     58e:	98 17       	cp	r25, r24
     590:	09 f0       	breq	.+2      	; 0x594 <__vector_5+0x74>
     592:	86 c0       	rjmp	.+268    	; 0x6a0 <__vector_5+0x180>
			{
				if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
     594:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <SPIBUFFER+0x40>
     598:	68 2f       	mov	r22, r24
     59a:	8b e0       	ldi	r24, 0x0B	; 11
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	0e 94 19 08 	call	0x1032	; 0x1032 <CRC8>
     5a2:	88 23       	and	r24, r24
     5a4:	09 f0       	breq	.+2      	; 0x5a8 <__vector_5+0x88>
     5a6:	7c c0       	rjmp	.+248    	; 0x6a0 <__vector_5+0x180>
				{
					switch(SPIBUFFER.au8Buffer[1]) // command
     5a8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <SPIBUFFER+0x1>
     5ac:	88 2f       	mov	r24, r24
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	83 30       	cpi	r24, 0x03	; 3
     5b2:	91 05       	cpc	r25, r1
     5b4:	71 f1       	breq	.+92     	; 0x612 <__vector_5+0xf2>
     5b6:	84 30       	cpi	r24, 0x04	; 4
     5b8:	91 05       	cpc	r25, r1
     5ba:	34 f4       	brge	.+12     	; 0x5c8 <__vector_5+0xa8>
     5bc:	81 30       	cpi	r24, 0x01	; 1
     5be:	91 05       	cpc	r25, r1
     5c0:	71 f0       	breq	.+28     	; 0x5de <__vector_5+0xbe>
     5c2:	02 97       	sbiw	r24, 0x02	; 2
     5c4:	c9 f0       	breq	.+50     	; 0x5f8 <__vector_5+0xd8>
     5c6:	6c c0       	rjmp	.+216    	; 0x6a0 <__vector_5+0x180>
     5c8:	85 30       	cpi	r24, 0x05	; 5
     5ca:	91 05       	cpc	r25, r1
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <__vector_5+0xb0>
     5ce:	42 c0       	rjmp	.+132    	; 0x654 <__vector_5+0x134>
     5d0:	85 30       	cpi	r24, 0x05	; 5
     5d2:	91 05       	cpc	r25, r1
     5d4:	9c f1       	brlt	.+102    	; 0x63c <__vector_5+0x11c>
     5d6:	06 97       	sbiw	r24, 0x06	; 6
     5d8:	09 f4       	brne	.+2      	; 0x5dc <__vector_5+0xbc>
     5da:	48 c0       	rjmp	.+144    	; 0x66c <__vector_5+0x14c>
     5dc:	61 c0       	rjmp	.+194    	; 0x6a0 <__vector_5+0x180>
					{
						case 0x01:
						if(SPIBUFFER.u8Count == 3)
     5de:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <SPIBUFFER+0x40>
     5e2:	83 30       	cpi	r24, 0x03	; 3
     5e4:	09 f0       	breq	.+2      	; 0x5e8 <__vector_5+0xc8>
     5e6:	51 c0       	rjmp	.+162    	; 0x68a <__vector_5+0x16a>
						{
							enablePLED();
     5e8:	0e 94 0f 05 	call	0xa1e	; 0xa1e <enablePLED>
							u8Status |= (1<<STATUS_PLED);
     5ec:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <u8Status>
     5f0:	81 60       	ori	r24, 0x01	; 1
     5f2:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <u8Status>
						}
						break;
     5f6:	49 c0       	rjmp	.+146    	; 0x68a <__vector_5+0x16a>

						case 0x02:
						if(SPIBUFFER.u8Count == 3)
     5f8:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <SPIBUFFER+0x40>
     5fc:	83 30       	cpi	r24, 0x03	; 3
     5fe:	09 f0       	breq	.+2      	; 0x602 <__vector_5+0xe2>
     600:	46 c0       	rjmp	.+140    	; 0x68e <__vector_5+0x16e>
						{
							disablePLED();
     602:	0e 94 20 05 	call	0xa40	; 0xa40 <disablePLED>
							u8Status &= ~(1<<STATUS_PLED);
     606:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <u8Status>
     60a:	8e 7f       	andi	r24, 0xFE	; 254
     60c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <u8Status>
						}
						break;
     610:	3e c0       	rjmp	.+124    	; 0x68e <__vector_5+0x16e>

						case 0x03:
						if(SPIBUFFER.u8Count == 4)
     612:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <SPIBUFFER+0x40>
     616:	84 30       	cpi	r24, 0x04	; 4
     618:	e1 f5       	brne	.+120    	; 0x692 <__vector_5+0x172>
						{
							if(SPIBUFFER.au8Buffer[2]>100)
     61a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <SPIBUFFER+0x2>
     61e:	85 36       	cpi	r24, 0x65	; 101
     620:	20 f0       	brcs	.+8      	; 0x62a <__vector_5+0x10a>
							{
								u8Duty = 100;
     622:	84 e6       	ldi	r24, 0x64	; 100
     624:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8Duty>
     628:	04 c0       	rjmp	.+8      	; 0x632 <__vector_5+0x112>
							}
							else
							{
								u8Duty = SPIBUFFER.au8Buffer[2];
     62a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <SPIBUFFER+0x2>
     62e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8Duty>
							}
							setDuty(u8Duty);
     632:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8Duty>
     636:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <setDuty>
						}
						break;
     63a:	2b c0       	rjmp	.+86     	; 0x692 <__vector_5+0x172>
					
						case 0x04:
						if(SPIBUFFER.u8Count == 3)
     63c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <SPIBUFFER+0x40>
     640:	83 30       	cpi	r24, 0x03	; 3
     642:	49 f5       	brne	.+82     	; 0x696 <__vector_5+0x176>
						{
							enableAudio();
     644:	0e 94 4b 05 	call	0xa96	; 0xa96 <enableAudio>
							u8Status |= (1<<STATUS_AUDIO);
     648:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <u8Status>
     64c:	82 60       	ori	r24, 0x02	; 2
     64e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <u8Status>
						}
						break;
     652:	21 c0       	rjmp	.+66     	; 0x696 <__vector_5+0x176>

						case 0x05:
						if(SPIBUFFER.u8Count == 3)
     654:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <SPIBUFFER+0x40>
     658:	83 30       	cpi	r24, 0x03	; 3
     65a:	f9 f4       	brne	.+62     	; 0x69a <__vector_5+0x17a>
						{
							standbyAudio();
     65c:	0e 94 31 05 	call	0xa62	; 0xa62 <standbyAudio>
							u8Status &= ~(1<<STATUS_AUDIO);
     660:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <u8Status>
     664:	8d 7f       	andi	r24, 0xFD	; 253
     666:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <u8Status>
						}
						break;
     66a:	17 c0       	rjmp	.+46     	; 0x69a <__vector_5+0x17a>
					
						case 0x06:
						if(SPIBUFFER.u8Count == 4)
     66c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <SPIBUFFER+0x40>
     670:	84 30       	cpi	r24, 0x04	; 4
     672:	a9 f4       	brne	.+42     	; 0x69e <__vector_5+0x17e>
						{
							setVolume(SPIBUFFER.au8Buffer[2]);
     674:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <SPIBUFFER+0x2>
     678:	0e 94 c5 05 	call	0xb8a	; 0xb8a <setVolume>
						}
						break;
     67c:	00 00       	nop
     67e:	0f c0       	rjmp	.+30     	; 0x69e <__vector_5+0x17e>
			
		}
	}
	else // SS LOW
	{
		SPIBUFFER.u8Count = 0;
     680:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <SPIBUFFER+0x40>
		SPIBUFFER.spiState = READY;
     684:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <SPIBUFFER+0x42>
     688:	0b c0       	rjmp	.+22     	; 0x6a0 <__vector_5+0x180>
						if(SPIBUFFER.u8Count == 3)
						{
							enablePLED();
							u8Status |= (1<<STATUS_PLED);
						}
						break;
     68a:	00 00       	nop
     68c:	09 c0       	rjmp	.+18     	; 0x6a0 <__vector_5+0x180>
						if(SPIBUFFER.u8Count == 3)
						{
							disablePLED();
							u8Status &= ~(1<<STATUS_PLED);
						}
						break;
     68e:	00 00       	nop
     690:	07 c0       	rjmp	.+14     	; 0x6a0 <__vector_5+0x180>
							{
								u8Duty = SPIBUFFER.au8Buffer[2];
							}
							setDuty(u8Duty);
						}
						break;
     692:	00 00       	nop
     694:	05 c0       	rjmp	.+10     	; 0x6a0 <__vector_5+0x180>
						if(SPIBUFFER.u8Count == 3)
						{
							enableAudio();
							u8Status |= (1<<STATUS_AUDIO);
						}
						break;
     696:	00 00       	nop
     698:	03 c0       	rjmp	.+6      	; 0x6a0 <__vector_5+0x180>
						if(SPIBUFFER.u8Count == 3)
						{
							standbyAudio();
							u8Status &= ~(1<<STATUS_AUDIO);
						}
						break;
     69a:	00 00       	nop
     69c:	01 c0       	rjmp	.+2      	; 0x6a0 <__vector_5+0x180>
						case 0x06:
						if(SPIBUFFER.u8Count == 4)
						{
							setVolume(SPIBUFFER.au8Buffer[2]);
						}
						break;
     69e:	00 00       	nop
	{
		SPIBUFFER.u8Count = 0;
		SPIBUFFER.spiState = READY;
	}
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
     6a0:	8b e2       	ldi	r24, 0x2B	; 43
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	2b e2       	ldi	r18, 0x2B	; 43
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	f9 01       	movw	r30, r18
     6aa:	20 81       	ld	r18, Z
     6ac:	2d 7f       	andi	r18, 0xFD	; 253
     6ae:	fc 01       	movw	r30, r24
     6b0:	20 83       	st	Z, r18
	#endif
}
     6b2:	00 00       	nop
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	ff 91       	pop	r31
     6ba:	ef 91       	pop	r30
     6bc:	bf 91       	pop	r27
     6be:	af 91       	pop	r26
     6c0:	9f 91       	pop	r25
     6c2:	8f 91       	pop	r24
     6c4:	7f 91       	pop	r23
     6c6:	6f 91       	pop	r22
     6c8:	5f 91       	pop	r21
     6ca:	4f 91       	pop	r20
     6cc:	3f 91       	pop	r19
     6ce:	2f 91       	pop	r18
     6d0:	0f 90       	pop	r0
     6d2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     6d6:	0f 90       	pop	r0
     6d8:	1f 90       	pop	r1
     6da:	18 95       	reti

000006dc <main>:



int main(void)
{
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	1f 92       	push	r1
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
    uint8_t u8Duty = 0;
     6e6:	19 82       	std	Y+1, r1	; 0x01
	uint16_t i;
	
	portInit();
     6e8:	0e 94 81 04 	call	0x902	; 0x902 <portInit>
	adcInit();
     6ec:	0e 94 a6 06 	call	0xd4c	; 0xd4c <adcInit>
	initPWM(u8Duty);
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <initPWM>
	startPWM();
     6f6:	0e 94 49 06 	call	0xc92	; 0xc92 <startPWM>
	spiInitBuffer(&SPIBUFFER);
     6fa:	8b e0       	ldi	r24, 0x0B	; 11
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	0e 94 0f 04 	call	0x81e	; 0x81e <spiInitBuffer>
	spiSlaveInit();
     702:	0e 94 2f 04 	call	0x85e	; 0x85e <spiSlaveInit>
 	spiPcInt();
     706:	0e 94 62 04 	call	0x8c4	; 0x8c4 <spiPcInt>
	initRGBooster();
     70a:	0e 94 c8 03 	call	0x790	; 0x790 <initRGBooster>
	INT0_Init();
     70e:	0e 94 ad 03 	call	0x75a	; 0x75a <INT0_Init>

	wait_1ms(100);
     712:	84 e6       	ldi	r24, 0x64	; 100
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 46 07 	call	0xe8c	; 0xe8c <wait_1ms>
	initAudio();
     71a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <initAudio>

	#ifdef INT_OUT
	DDRD |= (1<<DDRD1);
     71e:	8a e2       	ldi	r24, 0x2A	; 42
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	2a e2       	ldi	r18, 0x2A	; 42
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	f9 01       	movw	r30, r18
     728:	20 81       	ld	r18, Z
     72a:	22 60       	ori	r18, 0x02	; 2
     72c:	fc 01       	movw	r30, r24
     72e:	20 83       	st	Z, r18
	PORTD &= ~(1<<PORTD1);
     730:	8b e2       	ldi	r24, 0x2B	; 43
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	2b e2       	ldi	r18, 0x2B	; 43
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	f9 01       	movw	r30, r18
     73a:	20 81       	ld	r18, Z
     73c:	2d 7f       	andi	r18, 0xFD	; 253
     73e:	fc 01       	movw	r30, r24
     740:	20 83       	st	Z, r18
	#endif
		
	sei();
     742:	78 94       	sei
// 	}
	
	
    while (1) 
    {
		wait_1ms(1000);
     744:	88 ee       	ldi	r24, 0xE8	; 232
     746:	93 e0       	ldi	r25, 0x03	; 3
     748:	0e 94 46 07 	call	0xe8c	; 0xe8c <wait_1ms>
		ucByteIdx = 0;
     74c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
		ucRGBIdx = 0;
     750:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ucRGBIdx>
		INT0_vect();
     754:	0e 94 64 00 	call	0xc8	; 0xc8 <__vector_1>
    }
     758:	f5 cf       	rjmp	.-22     	; 0x744 <main+0x68>

0000075a <INT0_Init>:
#include "utils.h"
#include "rgbooster.h"


void INT0_Init(void)
{
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
	EICRA |= (1<<ISC01); // interrupt on falling edge
     762:	89 e6       	ldi	r24, 0x69	; 105
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	29 e6       	ldi	r18, 0x69	; 105
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	f9 01       	movw	r30, r18
     76c:	20 81       	ld	r18, Z
     76e:	22 60       	ori	r18, 0x02	; 2
     770:	fc 01       	movw	r30, r24
     772:	20 83       	st	Z, r18
	EIFR  = (1<<INTF0); // clear flag
     774:	8c e3       	ldi	r24, 0x3C	; 60
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	21 e0       	ldi	r18, 0x01	; 1
     77a:	fc 01       	movw	r30, r24
     77c:	20 83       	st	Z, r18
	EIMSK = (1<<INT0);  // INT1 enable
     77e:	8d e3       	ldi	r24, 0x3D	; 61
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	21 e0       	ldi	r18, 0x01	; 1
     784:	fc 01       	movw	r30, r24
     786:	20 83       	st	Z, r18
}
     788:	00 00       	nop
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	08 95       	ret

00000790 <initRGBooster>:

void initRGBooster(void)
{
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
	DDR_DATA_LOW |= DATA_LOW_BITMASK; //RGB DATA LOWER NIBBLE -> OUTPUT
     798:	84 e2       	ldi	r24, 0x24	; 36
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	24 e2       	ldi	r18, 0x24	; 36
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	f9 01       	movw	r30, r18
     7a2:	20 81       	ld	r18, Z
     7a4:	2f 60       	ori	r18, 0x0F	; 15
     7a6:	fc 01       	movw	r30, r24
     7a8:	20 83       	st	Z, r18
	PORT_DATA_LOW &= ~DATA_LOW_BITMASK; //RGB DATA LOWER NIBBLE -> LOW
     7aa:	85 e2       	ldi	r24, 0x25	; 37
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	25 e2       	ldi	r18, 0x25	; 37
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	f9 01       	movw	r30, r18
     7b4:	20 81       	ld	r18, Z
     7b6:	20 7f       	andi	r18, 0xF0	; 240
     7b8:	fc 01       	movw	r30, r24
     7ba:	20 83       	st	Z, r18
	DDR_DATA_HIGH |= DATA_HIGH_BITMASK; //RGB DATA HIGHER NIBBLE -> OUTPUT
     7bc:	81 e2       	ldi	r24, 0x21	; 33
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	21 e2       	ldi	r18, 0x21	; 33
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	f9 01       	movw	r30, r18
     7c6:	20 81       	ld	r18, Z
     7c8:	20 6f       	ori	r18, 0xF0	; 240
     7ca:	fc 01       	movw	r30, r24
     7cc:	20 83       	st	Z, r18
	PORT_DATA_HIGH &= ~DATA_HIGH_BITMASK; //RGB DATA HIGHER NIBBLE -> LOW
     7ce:	82 e2       	ldi	r24, 0x22	; 34
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	22 e2       	ldi	r18, 0x22	; 34
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	f9 01       	movw	r30, r18
     7d8:	20 81       	ld	r18, Z
     7da:	2f 70       	andi	r18, 0x0F	; 15
     7dc:	fc 01       	movw	r30, r24
     7de:	20 83       	st	Z, r18

	DDR_CONTROL |= (1<<SEND); //SEND PIN -> OUTPUT
     7e0:	8a e2       	ldi	r24, 0x2A	; 42
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	2a e2       	ldi	r18, 0x2A	; 42
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	f9 01       	movw	r30, r18
     7ea:	20 81       	ld	r18, Z
     7ec:	28 60       	ori	r18, 0x08	; 8
     7ee:	fc 01       	movw	r30, r24
     7f0:	20 83       	st	Z, r18
	PORT_CONTROL &= ~(1<<SEND); //SEND PIN LOW
     7f2:	8b e2       	ldi	r24, 0x2B	; 43
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	2b e2       	ldi	r18, 0x2B	; 43
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	f9 01       	movw	r30, r18
     7fc:	20 81       	ld	r18, Z
     7fe:	27 7f       	andi	r18, 0xF7	; 247
     800:	fc 01       	movw	r30, r24
     802:	20 83       	st	Z, r18
	DDR_CONTROL &= ~(1<<DONE_BUSY); //DONE BUSY PIN -> INPUT
     804:	8a e2       	ldi	r24, 0x2A	; 42
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	2a e2       	ldi	r18, 0x2A	; 42
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	f9 01       	movw	r30, r18
     80e:	20 81       	ld	r18, Z
     810:	2b 7f       	andi	r18, 0xFB	; 251
     812:	fc 01       	movw	r30, r24
     814:	20 83       	st	Z, r18
     816:	00 00       	nop
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	08 95       	ret

0000081e <spiInitBuffer>:
#include <avr/io.h>
#include "spi.h"


void spiInitBuffer(SpiBuf_t* Buffer)
{
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	00 d0       	rcall	.+0      	; 0x824 <spiInitBuffer+0x6>
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	9a 83       	std	Y+2, r25	; 0x02
     82a:	89 83       	std	Y+1, r24	; 0x01
	Buffer->u8Count = 0;
     82c:	89 81       	ldd	r24, Y+1	; 0x01
     82e:	9a 81       	ldd	r25, Y+2	; 0x02
     830:	80 5c       	subi	r24, 0xC0	; 192
     832:	9f 4f       	sbci	r25, 0xFF	; 255
     834:	fc 01       	movw	r30, r24
     836:	10 82       	st	Z, r1
	Buffer->u8ReadReturnCount = 0;
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	9a 81       	ldd	r25, Y+2	; 0x02
     83c:	8f 5b       	subi	r24, 0xBF	; 191
     83e:	9f 4f       	sbci	r25, 0xFF	; 255
     840:	fc 01       	movw	r30, r24
     842:	10 82       	st	Z, r1
	Buffer->spiState = IDLE;
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	9a 81       	ldd	r25, Y+2	; 0x02
     848:	8e 5b       	subi	r24, 0xBE	; 190
     84a:	9f 4f       	sbci	r25, 0xFF	; 255
     84c:	26 e0       	ldi	r18, 0x06	; 6
     84e:	fc 01       	movw	r30, r24
     850:	20 83       	st	Z, r18
}
     852:	00 00       	nop
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <spiSlaveInit>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiSlaveInit(void)
{
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	1f 92       	push	r1
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t ucTemp;
	SPSR0 = 0;
     868:	8d e4       	ldi	r24, 0x4D	; 77
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	fc 01       	movw	r30, r24
     86e:	10 82       	st	Z, r1
	SPCR0 = (1<<SPIE0);
     870:	8c e4       	ldi	r24, 0x4C	; 76
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	20 e8       	ldi	r18, 0x80	; 128
     876:	fc 01       	movw	r30, r24
     878:	20 83       	st	Z, r18
	
	ucTemp = SPSR0;					
     87a:	8d e4       	ldi	r24, 0x4D	; 77
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	fc 01       	movw	r30, r24
     880:	80 81       	ld	r24, Z
     882:	89 83       	std	Y+1, r24	; 0x01
	ucTemp = SPDR0;
     884:	8e e4       	ldi	r24, 0x4E	; 78
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	fc 01       	movw	r30, r24
     88a:	80 81       	ld	r24, Z
     88c:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0;
     88e:	8e e4       	ldi	r24, 0x4E	; 78
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	fc 01       	movw	r30, r24
     894:	10 82       	st	Z, r1
	
	DDRB |= (1<<PINB6);				// MISO needs to be an output
     896:	84 e2       	ldi	r24, 0x24	; 36
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	24 e2       	ldi	r18, 0x24	; 36
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	f9 01       	movw	r30, r18
     8a0:	20 81       	ld	r18, Z
     8a2:	20 64       	ori	r18, 0x40	; 64
     8a4:	fc 01       	movw	r30, r24
     8a6:	20 83       	st	Z, r18
	
	SPCR0 |= (1<<SPE0);
     8a8:	8c e4       	ldi	r24, 0x4C	; 76
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	2c e4       	ldi	r18, 0x4C	; 76
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	f9 01       	movw	r30, r18
     8b2:	20 81       	ld	r18, Z
     8b4:	20 64       	ori	r18, 0x40	; 64
     8b6:	fc 01       	movw	r30, r24
     8b8:	20 83       	st	Z, r18
}
     8ba:	00 00       	nop
     8bc:	0f 90       	pop	r0
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	08 95       	ret

000008c4 <spiPcInt>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiPcInt(void)
{
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
	PCICR |= (1<<PCIE1);
     8cc:	88 e6       	ldi	r24, 0x68	; 104
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	28 e6       	ldi	r18, 0x68	; 104
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	f9 01       	movw	r30, r18
     8d6:	20 81       	ld	r18, Z
     8d8:	22 60       	ori	r18, 0x02	; 2
     8da:	fc 01       	movw	r30, r24
     8dc:	20 83       	st	Z, r18
	PCIFR = (1<<PCIF1);
     8de:	8b e3       	ldi	r24, 0x3B	; 59
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	22 e0       	ldi	r18, 0x02	; 2
     8e4:	fc 01       	movw	r30, r24
     8e6:	20 83       	st	Z, r18
	PCMSK1 |= (1<<PCINT12);
     8e8:	8c e6       	ldi	r24, 0x6C	; 108
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	2c e6       	ldi	r18, 0x6C	; 108
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	f9 01       	movw	r30, r18
     8f2:	20 81       	ld	r18, Z
     8f4:	20 61       	ori	r18, 0x10	; 16
     8f6:	fc 01       	movw	r30, r24
     8f8:	20 83       	st	Z, r18
     8fa:	00 00       	nop
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	08 95       	ret

00000902 <portInit>:
 * @return 8bit analog value
 *****************************************************************************/
uint8_t adcGetValue(void)
{
	return(ADCH);
}
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62
     90a:	8a e2       	ldi	r24, 0x2A	; 42
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	2a e2       	ldi	r18, 0x2A	; 42
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	f9 01       	movw	r30, r18
     914:	20 81       	ld	r18, Z
     916:	20 63       	ori	r18, 0x30	; 48
     918:	fc 01       	movw	r30, r24
     91a:	20 83       	st	Z, r18
     91c:	8b e2       	ldi	r24, 0x2B	; 43
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	2b e2       	ldi	r18, 0x2B	; 43
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	f9 01       	movw	r30, r18
     926:	20 81       	ld	r18, Z
     928:	20 62       	ori	r18, 0x20	; 32
     92a:	fc 01       	movw	r30, r24
     92c:	20 83       	st	Z, r18
     92e:	8b e2       	ldi	r24, 0x2B	; 43
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	2b e2       	ldi	r18, 0x2B	; 43
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	f9 01       	movw	r30, r18
     938:	20 81       	ld	r18, Z
     93a:	2f 7e       	andi	r18, 0xEF	; 239
     93c:	fc 01       	movw	r30, r24
     93e:	20 83       	st	Z, r18
     940:	8a e2       	ldi	r24, 0x2A	; 42
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	2a e2       	ldi	r18, 0x2A	; 42
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	f9 01       	movw	r30, r18
     94a:	20 81       	ld	r18, Z
     94c:	20 68       	ori	r18, 0x80	; 128
     94e:	fc 01       	movw	r30, r24
     950:	20 83       	st	Z, r18
     952:	8b e2       	ldi	r24, 0x2B	; 43
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	2b e2       	ldi	r18, 0x2B	; 43
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	f9 01       	movw	r30, r18
     95c:	20 81       	ld	r18, Z
     95e:	20 68       	ori	r18, 0x80	; 128
     960:	fc 01       	movw	r30, r24
     962:	20 83       	st	Z, r18
     964:	8a e2       	ldi	r24, 0x2A	; 42
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	2a e2       	ldi	r18, 0x2A	; 42
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	f9 01       	movw	r30, r18
     96e:	20 81       	ld	r18, Z
     970:	2f 7b       	andi	r18, 0xBF	; 191
     972:	fc 01       	movw	r30, r24
     974:	20 83       	st	Z, r18
     976:	8a e2       	ldi	r24, 0x2A	; 42
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	2a e2       	ldi	r18, 0x2A	; 42
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	f9 01       	movw	r30, r18
     980:	20 81       	ld	r18, Z
     982:	2c 7f       	andi	r18, 0xFC	; 252
     984:	fc 01       	movw	r30, r24
     986:	20 83       	st	Z, r18
     988:	8b e2       	ldi	r24, 0x2B	; 43
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	2b e2       	ldi	r18, 0x2B	; 43
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	f9 01       	movw	r30, r18
     992:	20 81       	ld	r18, Z
     994:	21 60       	ori	r18, 0x01	; 1
     996:	fc 01       	movw	r30, r24
     998:	20 83       	st	Z, r18
     99a:	81 e2       	ldi	r24, 0x21	; 33
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	21 e2       	ldi	r18, 0x21	; 33
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	f9 01       	movw	r30, r18
     9a4:	20 81       	ld	r18, Z
     9a6:	2e 7f       	andi	r18, 0xFE	; 254
     9a8:	fc 01       	movw	r30, r24
     9aa:	20 83       	st	Z, r18
     9ac:	82 e2       	ldi	r24, 0x22	; 34
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	22 e2       	ldi	r18, 0x22	; 34
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	f9 01       	movw	r30, r18
     9b6:	20 81       	ld	r18, Z
     9b8:	2e 7f       	andi	r18, 0xFE	; 254
     9ba:	fc 01       	movw	r30, r24
     9bc:	20 83       	st	Z, r18
     9be:	8e e7       	ldi	r24, 0x7E	; 126
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	2e e7       	ldi	r18, 0x7E	; 126
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	f9 01       	movw	r30, r18
     9c8:	20 81       	ld	r18, Z
     9ca:	21 60       	ori	r18, 0x01	; 1
     9cc:	fc 01       	movw	r30, r24
     9ce:	20 83       	st	Z, r18
     9d0:	81 e2       	ldi	r24, 0x21	; 33
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	21 e2       	ldi	r18, 0x21	; 33
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	f9 01       	movw	r30, r18
     9da:	20 81       	ld	r18, Z
     9dc:	21 7f       	andi	r18, 0xF1	; 241
     9de:	fc 01       	movw	r30, r24
     9e0:	20 83       	st	Z, r18
     9e2:	82 e2       	ldi	r24, 0x22	; 34
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	22 e2       	ldi	r18, 0x22	; 34
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	f9 01       	movw	r30, r18
     9ec:	20 81       	ld	r18, Z
     9ee:	2e 60       	ori	r18, 0x0E	; 14
     9f0:	fc 01       	movw	r30, r24
     9f2:	20 83       	st	Z, r18
     9f4:	87 e2       	ldi	r24, 0x27	; 39
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	fc 01       	movw	r30, r24
     9fa:	80 81       	ld	r24, Z
     9fc:	87 e2       	ldi	r24, 0x27	; 39
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	fc 01       	movw	r30, r24
     a02:	10 82       	st	Z, r1
     a04:	88 e2       	ldi	r24, 0x28	; 40
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	fc 01       	movw	r30, r24
     a0a:	80 81       	ld	r24, Z
     a0c:	88 e2       	ldi	r24, 0x28	; 40
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	2f ef       	ldi	r18, 0xFF	; 255
     a12:	fc 01       	movw	r30, r24
     a14:	20 83       	st	Z, r18
     a16:	00 00       	nop
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	08 95       	ret

00000a1e <enablePLED>:
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
     a26:	8b e2       	ldi	r24, 0x2B	; 43
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	2b e2       	ldi	r18, 0x2B	; 43
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	f9 01       	movw	r30, r18
     a30:	20 81       	ld	r18, Z
     a32:	2f 7d       	andi	r18, 0xDF	; 223
     a34:	fc 01       	movw	r30, r24
     a36:	20 83       	st	Z, r18
     a38:	00 00       	nop
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	08 95       	ret

00000a40 <disablePLED>:
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	cd b7       	in	r28, 0x3d	; 61
     a46:	de b7       	in	r29, 0x3e	; 62
     a48:	8b e2       	ldi	r24, 0x2B	; 43
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	2b e2       	ldi	r18, 0x2B	; 43
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	f9 01       	movw	r30, r18
     a52:	20 81       	ld	r18, Z
     a54:	20 62       	ori	r18, 0x20	; 32
     a56:	fc 01       	movw	r30, r24
     a58:	20 83       	st	Z, r18
     a5a:	00 00       	nop
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <standbyAudio>:
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
     a6a:	8b e2       	ldi	r24, 0x2B	; 43
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	2b e2       	ldi	r18, 0x2B	; 43
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	f9 01       	movw	r30, r18
     a74:	20 81       	ld	r18, Z
     a76:	20 68       	ori	r18, 0x80	; 128
     a78:	fc 01       	movw	r30, r24
     a7a:	20 83       	st	Z, r18
     a7c:	8a e2       	ldi	r24, 0x2A	; 42
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	2a e2       	ldi	r18, 0x2A	; 42
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	f9 01       	movw	r30, r18
     a86:	20 81       	ld	r18, Z
     a88:	20 68       	ori	r18, 0x80	; 128
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 83       	st	Z, r18
     a8e:	00 00       	nop
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	08 95       	ret

00000a96 <enableAudio>:
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	cd b7       	in	r28, 0x3d	; 61
     a9c:	de b7       	in	r29, 0x3e	; 62
     a9e:	8b e2       	ldi	r24, 0x2B	; 43
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	2b e2       	ldi	r18, 0x2B	; 43
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	f9 01       	movw	r30, r18
     aa8:	20 81       	ld	r18, Z
     aaa:	2f 77       	andi	r18, 0x7F	; 127
     aac:	fc 01       	movw	r30, r24
     aae:	20 83       	st	Z, r18
     ab0:	8a e2       	ldi	r24, 0x2A	; 42
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	2a e2       	ldi	r18, 0x2A	; 42
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	f9 01       	movw	r30, r18
     aba:	20 81       	ld	r18, Z
     abc:	20 68       	ori	r18, 0x80	; 128
     abe:	fc 01       	movw	r30, r24
     ac0:	20 83       	st	Z, r18
     ac2:	00 00       	nop
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	08 95       	ret

00000aca <incVolume>:
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	00 d0       	rcall	.+0      	; 0xad0 <incVolume+0x6>
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
     ad4:	8a 83       	std	Y+2, r24	; 0x02
     ad6:	8b e2       	ldi	r24, 0x2B	; 43
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	2b e2       	ldi	r18, 0x2B	; 43
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	f9 01       	movw	r30, r18
     ae0:	20 81       	ld	r18, Z
     ae2:	20 64       	ori	r18, 0x40	; 64
     ae4:	fc 01       	movw	r30, r24
     ae6:	20 83       	st	Z, r18
     ae8:	19 82       	std	Y+1, r1	; 0x01
     aea:	15 c0       	rjmp	.+42     	; 0xb16 <incVolume+0x4c>
     aec:	8a e2       	ldi	r24, 0x2A	; 42
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	2a e2       	ldi	r18, 0x2A	; 42
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	f9 01       	movw	r30, r18
     af6:	20 81       	ld	r18, Z
     af8:	20 64       	ori	r18, 0x40	; 64
     afa:	fc 01       	movw	r30, r24
     afc:	20 83       	st	Z, r18
     afe:	8a e2       	ldi	r24, 0x2A	; 42
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	2a e2       	ldi	r18, 0x2A	; 42
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	f9 01       	movw	r30, r18
     b08:	20 81       	ld	r18, Z
     b0a:	2f 7b       	andi	r18, 0xBF	; 191
     b0c:	fc 01       	movw	r30, r24
     b0e:	20 83       	st	Z, r18
     b10:	89 81       	ldd	r24, Y+1	; 0x01
     b12:	8f 5f       	subi	r24, 0xFF	; 255
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	99 81       	ldd	r25, Y+1	; 0x01
     b18:	8a 81       	ldd	r24, Y+2	; 0x02
     b1a:	98 17       	cp	r25, r24
     b1c:	38 f3       	brcs	.-50     	; 0xaec <incVolume+0x22>
     b1e:	00 00       	nop
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	08 95       	ret

00000b2a <decVolume>:
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	00 d0       	rcall	.+0      	; 0xb30 <decVolume+0x6>
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
     b34:	8a 83       	std	Y+2, r24	; 0x02
     b36:	8b e2       	ldi	r24, 0x2B	; 43
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	2b e2       	ldi	r18, 0x2B	; 43
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	f9 01       	movw	r30, r18
     b40:	20 81       	ld	r18, Z
     b42:	2f 7b       	andi	r18, 0xBF	; 191
     b44:	fc 01       	movw	r30, r24
     b46:	20 83       	st	Z, r18
     b48:	19 82       	std	Y+1, r1	; 0x01
     b4a:	15 c0       	rjmp	.+42     	; 0xb76 <decVolume+0x4c>
     b4c:	8a e2       	ldi	r24, 0x2A	; 42
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	2a e2       	ldi	r18, 0x2A	; 42
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	f9 01       	movw	r30, r18
     b56:	20 81       	ld	r18, Z
     b58:	20 64       	ori	r18, 0x40	; 64
     b5a:	fc 01       	movw	r30, r24
     b5c:	20 83       	st	Z, r18
     b5e:	8a e2       	ldi	r24, 0x2A	; 42
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	2a e2       	ldi	r18, 0x2A	; 42
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	f9 01       	movw	r30, r18
     b68:	20 81       	ld	r18, Z
     b6a:	2f 7b       	andi	r18, 0xBF	; 191
     b6c:	fc 01       	movw	r30, r24
     b6e:	20 83       	st	Z, r18
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	8f 5f       	subi	r24, 0xFF	; 255
     b74:	89 83       	std	Y+1, r24	; 0x01
     b76:	99 81       	ldd	r25, Y+1	; 0x01
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
     b7a:	98 17       	cp	r25, r24
     b7c:	38 f3       	brcs	.-50     	; 0xb4c <decVolume+0x22>
     b7e:	00 00       	nop
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	08 95       	ret

00000b8a <setVolume>:
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	1f 92       	push	r1
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	89 83       	std	Y+1, r24	; 0x01
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	81 34       	cpi	r24, 0x41	; 65
     b9a:	10 f0       	brcs	.+4      	; 0xba0 <setVolume+0x16>
     b9c:	80 e4       	ldi	r24, 0x40	; 64
     b9e:	89 83       	std	Y+1, r24	; 0x01
     ba0:	80 e4       	ldi	r24, 0x40	; 64
     ba2:	0e 94 95 05 	call	0xb2a	; 0xb2a <decVolume>
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	0e 94 65 05 	call	0xaca	; 0xaca <incVolume>
     bac:	00 00       	nop
     bae:	0f 90       	pop	r0
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	08 95       	ret

00000bb6 <initAudio>:
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	0e 94 4b 05 	call	0xa96	; 0xa96 <enableAudio>
     bc2:	80 e4       	ldi	r24, 0x40	; 64
     bc4:	0e 94 95 05 	call	0xb2a	; 0xb2a <decVolume>
     bc8:	0e 94 31 05 	call	0xa62	; 0xa62 <standbyAudio>
     bcc:	00 00       	nop
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	08 95       	ret

00000bd4 <initPWM>:
     bd4:	8f 92       	push	r8
     bd6:	9f 92       	push	r9
     bd8:	af 92       	push	r10
     bda:	bf 92       	push	r11
     bdc:	cf 92       	push	r12
     bde:	df 92       	push	r13
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	1f 92       	push	r1
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
     bf2:	89 83       	std	Y+1, r24	; 0x01
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	85 36       	cpi	r24, 0x65	; 101
     bf8:	10 f0       	brcs	.+4      	; 0xbfe <initPWM+0x2a>
     bfa:	84 e6       	ldi	r24, 0x64	; 100
     bfc:	89 83       	std	Y+1, r24	; 0x01
     bfe:	80 e8       	ldi	r24, 0x80	; 128
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	22 e2       	ldi	r18, 0x22	; 34
     c04:	fc 01       	movw	r30, r24
     c06:	20 83       	st	Z, r18
     c08:	81 e8       	ldi	r24, 0x81	; 129
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	28 e0       	ldi	r18, 0x08	; 8
     c0e:	fc 01       	movw	r30, r24
     c10:	20 83       	st	Z, r18
     c12:	84 e8       	ldi	r24, 0x84	; 132
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	fc 01       	movw	r30, r24
     c18:	11 82       	std	Z+1, r1	; 0x01
     c1a:	10 82       	st	Z, r1
     c1c:	0f 2e       	mov	r0, r31
     c1e:	fa e8       	ldi	r31, 0x8A	; 138
     c20:	8f 2e       	mov	r8, r31
     c22:	91 2c       	mov	r9, r1
     c24:	f0 2d       	mov	r31, r0
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	88 2f       	mov	r24, r24
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	1f 92       	push	r1
     c32:	1f 92       	push	r1
     c34:	21 e0       	ldi	r18, 0x01	; 1
     c36:	2f 93       	push	r18
     c38:	2f ef       	ldi	r18, 0xFF	; 255
     c3a:	2f 93       	push	r18
     c3c:	a1 2c       	mov	r10, r1
     c3e:	b1 2c       	mov	r11, r1
     c40:	65 01       	movw	r12, r10
     c42:	14 e6       	ldi	r17, 0x64	; 100
     c44:	e1 2e       	mov	r14, r17
     c46:	f1 2c       	mov	r15, r1
     c48:	00 e0       	ldi	r16, 0x00	; 0
     c4a:	10 e0       	ldi	r17, 0x00	; 0
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	a9 01       	movw	r20, r18
     c52:	bc 01       	movw	r22, r24
     c54:	cd 01       	movw	r24, r26
     c56:	0e 94 a2 07 	call	0xf44	; 0xf44 <Map>
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	f4 01       	movw	r30, r8
     c68:	91 83       	std	Z+1, r25	; 0x01
     c6a:	80 83       	st	Z, r24
     c6c:	8f e6       	ldi	r24, 0x6F	; 111
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	fc 01       	movw	r30, r24
     c72:	10 82       	st	Z, r1
     c74:	00 00       	nop
     c76:	0f 90       	pop	r0
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	df 90       	pop	r13
     c86:	cf 90       	pop	r12
     c88:	bf 90       	pop	r11
     c8a:	af 90       	pop	r10
     c8c:	9f 90       	pop	r9
     c8e:	8f 90       	pop	r8
     c90:	08 95       	ret

00000c92 <startPWM>:
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	81 e8       	ldi	r24, 0x81	; 129
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	21 e8       	ldi	r18, 0x81	; 129
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	f9 01       	movw	r30, r18
     ca4:	20 81       	ld	r18, Z
     ca6:	21 60       	ori	r18, 0x01	; 1
     ca8:	fc 01       	movw	r30, r24
     caa:	20 83       	st	Z, r18
     cac:	00 00       	nop
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	08 95       	ret

00000cb4 <setDuty>:
     cb4:	8f 92       	push	r8
     cb6:	9f 92       	push	r9
     cb8:	af 92       	push	r10
     cba:	bf 92       	push	r11
     cbc:	cf 92       	push	r12
     cbe:	df 92       	push	r13
     cc0:	ef 92       	push	r14
     cc2:	ff 92       	push	r15
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	1f 92       	push	r1
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	89 83       	std	Y+1, r24	; 0x01
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	85 36       	cpi	r24, 0x65	; 101
     cd8:	10 f0       	brcs	.+4      	; 0xcde <setDuty+0x2a>
     cda:	84 e6       	ldi	r24, 0x64	; 100
     cdc:	89 83       	std	Y+1, r24	; 0x01
     cde:	0f 2e       	mov	r0, r31
     ce0:	fa e8       	ldi	r31, 0x8A	; 138
     ce2:	8f 2e       	mov	r8, r31
     ce4:	91 2c       	mov	r9, r1
     ce6:	f0 2d       	mov	r31, r0
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	88 2f       	mov	r24, r24
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	a0 e0       	ldi	r26, 0x00	; 0
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	1f 92       	push	r1
     cf4:	1f 92       	push	r1
     cf6:	21 e0       	ldi	r18, 0x01	; 1
     cf8:	2f 93       	push	r18
     cfa:	2f ef       	ldi	r18, 0xFF	; 255
     cfc:	2f 93       	push	r18
     cfe:	a1 2c       	mov	r10, r1
     d00:	b1 2c       	mov	r11, r1
     d02:	65 01       	movw	r12, r10
     d04:	14 e6       	ldi	r17, 0x64	; 100
     d06:	e1 2e       	mov	r14, r17
     d08:	f1 2c       	mov	r15, r1
     d0a:	00 e0       	ldi	r16, 0x00	; 0
     d0c:	10 e0       	ldi	r17, 0x00	; 0
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	a9 01       	movw	r20, r18
     d14:	bc 01       	movw	r22, r24
     d16:	cd 01       	movw	r24, r26
     d18:	0e 94 a2 07 	call	0xf44	; 0xf44 <Map>
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	f4 01       	movw	r30, r8
     d2a:	91 83       	std	Z+1, r25	; 0x01
     d2c:	80 83       	st	Z, r24
     d2e:	00 00       	nop
     d30:	0f 90       	pop	r0
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	df 90       	pop	r13
     d40:	cf 90       	pop	r12
     d42:	bf 90       	pop	r11
     d44:	af 90       	pop	r10
     d46:	9f 90       	pop	r9
     d48:	8f 90       	pop	r8
     d4a:	08 95       	ret

00000d4c <adcInit>:
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	81 e2       	ldi	r24, 0x21	; 33
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	21 e2       	ldi	r18, 0x21	; 33
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	f9 01       	movw	r30, r18
     d5e:	20 81       	ld	r18, Z
     d60:	2e 7f       	andi	r18, 0xFE	; 254
     d62:	fc 01       	movw	r30, r24
     d64:	20 83       	st	Z, r18
     d66:	8e e7       	ldi	r24, 0x7E	; 126
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	2e e7       	ldi	r18, 0x7E	; 126
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	f9 01       	movw	r30, r18
     d70:	20 81       	ld	r18, Z
     d72:	21 60       	ori	r18, 0x01	; 1
     d74:	fc 01       	movw	r30, r24
     d76:	20 83       	st	Z, r18
     d78:	8c e7       	ldi	r24, 0x7C	; 124
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	20 e6       	ldi	r18, 0x60	; 96
     d7e:	fc 01       	movw	r30, r24
     d80:	20 83       	st	Z, r18
     d82:	8a e7       	ldi	r24, 0x7A	; 122
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	27 e3       	ldi	r18, 0x37	; 55
     d88:	fc 01       	movw	r30, r24
     d8a:	20 83       	st	Z, r18
     d8c:	8b e7       	ldi	r24, 0x7B	; 123
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	fc 01       	movw	r30, r24
     d92:	10 82       	st	Z, r1
     d94:	8a e7       	ldi	r24, 0x7A	; 122
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	2a e7       	ldi	r18, 0x7A	; 122
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	f9 01       	movw	r30, r18
     d9e:	20 81       	ld	r18, Z
     da0:	20 68       	ori	r18, 0x80	; 128
     da2:	fc 01       	movw	r30, r24
     da4:	20 83       	st	Z, r18
     da6:	8a e7       	ldi	r24, 0x7A	; 122
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	2a e7       	ldi	r18, 0x7A	; 122
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	f9 01       	movw	r30, r18
     db0:	20 81       	ld	r18, Z
     db2:	20 64       	ori	r18, 0x40	; 64
     db4:	fc 01       	movw	r30, r24
     db6:	20 83       	st	Z, r18
     db8:	00 00       	nop
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	08 95       	ret

00000dc0 <adcGetTemperature>:

uint8_t adcGetTemperature(void)
{
     dc0:	af 92       	push	r10
     dc2:	bf 92       	push	r11
     dc4:	cf 92       	push	r12
     dc6:	df 92       	push	r13
     dc8:	ef 92       	push	r14
     dca:	ff 92       	push	r15
     dcc:	0f 93       	push	r16
     dce:	1f 93       	push	r17
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <adcGetTemperature+0x16>
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <adcGetTemperature+0x18>
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
	int32_t s32Temp;
	
	s32Temp = Map((int32_t)ADCH,0,255,-50,450);
     ddc:	89 e7       	ldi	r24, 0x79	; 121
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	fc 01       	movw	r30, r24
     de2:	80 81       	ld	r24, Z
     de4:	88 2f       	mov	r24, r24
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	a0 e0       	ldi	r26, 0x00	; 0
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	1f 92       	push	r1
     dee:	1f 92       	push	r1
     df0:	21 e0       	ldi	r18, 0x01	; 1
     df2:	2f 93       	push	r18
     df4:	22 ec       	ldi	r18, 0xC2	; 194
     df6:	2f 93       	push	r18
     df8:	0f 2e       	mov	r0, r31
     dfa:	fe ec       	ldi	r31, 0xCE	; 206
     dfc:	af 2e       	mov	r10, r31
     dfe:	bb 24       	eor	r11, r11
     e00:	ba 94       	dec	r11
     e02:	cb 2c       	mov	r12, r11
     e04:	db 2c       	mov	r13, r11
     e06:	f0 2d       	mov	r31, r0
     e08:	e1 2c       	mov	r14, r1
     e0a:	f1 2c       	mov	r15, r1
     e0c:	87 01       	movw	r16, r14
     e0e:	ea 94       	dec	r14
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	a9 01       	movw	r20, r18
     e16:	bc 01       	movw	r22, r24
     e18:	cd 01       	movw	r24, r26
     e1a:	0e 94 a2 07 	call	0xf44	; 0xf44 <Map>
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	89 83       	std	Y+1, r24	; 0x01
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	ab 83       	std	Y+3, r26	; 0x03
     e30:	bc 83       	std	Y+4, r27	; 0x04
	if(s32Temp<0)
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	9a 81       	ldd	r25, Y+2	; 0x02
     e36:	ab 81       	ldd	r26, Y+3	; 0x03
     e38:	bc 81       	ldd	r27, Y+4	; 0x04
     e3a:	bb 23       	and	r27, r27
     e3c:	2c f4       	brge	.+10     	; 0xe48 <adcGetTemperature+0x88>
	{
		s32Temp = 0;
     e3e:	19 82       	std	Y+1, r1	; 0x01
     e40:	1a 82       	std	Y+2, r1	; 0x02
     e42:	1b 82       	std	Y+3, r1	; 0x03
     e44:	1c 82       	std	Y+4, r1	; 0x04
     e46:	12 c0       	rjmp	.+36     	; 0xe6c <adcGetTemperature+0xac>
	}
	else if(s32Temp>255)
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	9a 81       	ldd	r25, Y+2	; 0x02
     e4c:	ab 81       	ldd	r26, Y+3	; 0x03
     e4e:	bc 81       	ldd	r27, Y+4	; 0x04
     e50:	8f 3f       	cpi	r24, 0xFF	; 255
     e52:	91 05       	cpc	r25, r1
     e54:	a1 05       	cpc	r26, r1
     e56:	b1 05       	cpc	r27, r1
     e58:	49 f0       	breq	.+18     	; 0xe6c <adcGetTemperature+0xac>
     e5a:	44 f0       	brlt	.+16     	; 0xe6c <adcGetTemperature+0xac>
	{
		s32Temp = 255;
     e5c:	8f ef       	ldi	r24, 0xFF	; 255
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	a0 e0       	ldi	r26, 0x00	; 0
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	89 83       	std	Y+1, r24	; 0x01
     e66:	9a 83       	std	Y+2, r25	; 0x02
     e68:	ab 83       	std	Y+3, r26	; 0x03
     e6a:	bc 83       	std	Y+4, r27	; 0x04
	}
	return (uint8_t)s32Temp;
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	0f 91       	pop	r16
     e7e:	ff 90       	pop	r15
     e80:	ef 90       	pop	r14
     e82:	df 90       	pop	r13
     e84:	cf 90       	pop	r12
     e86:	bf 90       	pop	r11
     e88:	af 90       	pop	r10
     e8a:	08 95       	ret

00000e8c <wait_1ms>:
 *
 * @param [in] uiFactor: 1ms multiplier
 * @return no return value
 *****************************************************************************/
void wait_1ms(uint16_t uiFactor)
{
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	00 d0       	rcall	.+0      	; 0xe92 <wait_1ms+0x6>
     e92:	00 d0       	rcall	.+0      	; 0xe94 <wait_1ms+0x8>
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t i;
	TCCR0A = (1<<WGM01);	// mode: CTC
     e9c:	84 e4       	ldi	r24, 0x44	; 68
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	22 e0       	ldi	r18, 0x02	; 2
     ea2:	fc 01       	movw	r30, r24
     ea4:	20 83       	st	Z, r18
	TCCR0B = 0;				// mode: CTC
     ea6:	85 e4       	ldi	r24, 0x45	; 69
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	fc 01       	movw	r30, r24
     eac:	10 82       	st	Z, r1
	TIFR0 =  (1<<OCF0A);	// only OCFA flag needs to be cleared
     eae:	85 e3       	ldi	r24, 0x35	; 53
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	22 e0       	ldi	r18, 0x02	; 2
     eb4:	fc 01       	movw	r30, r24
     eb6:	20 83       	st	Z, r18
	TIMSK0 = 0;				// no interrupts
     eb8:	8e e6       	ldi	r24, 0x6E	; 110
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	fc 01       	movw	r30, r24
     ebe:	10 82       	st	Z, r1
	TCNT0 = 0;
     ec0:	86 e4       	ldi	r24, 0x46	; 70
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	fc 01       	movw	r30, r24
     ec6:	10 82       	st	Z, r1
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
     ec8:	87 e4       	ldi	r24, 0x47	; 71
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	2d e4       	ldi	r18, 0x4D	; 77
     ece:	fc 01       	movw	r30, r24
     ed0:	20 83       	st	Z, r18
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
     ed2:	85 e4       	ldi	r24, 0x45	; 69
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	25 e4       	ldi	r18, 0x45	; 69
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	f9 01       	movw	r30, r18
     edc:	20 81       	ld	r18, Z
     ede:	24 60       	ori	r18, 0x04	; 4
     ee0:	fc 01       	movw	r30, r24
     ee2:	20 83       	st	Z, r18
	
	for(i=0;i<uiFactor;i++)
     ee4:	1a 82       	std	Y+2, r1	; 0x02
     ee6:	19 82       	std	Y+1, r1	; 0x01
     ee8:	15 c0       	rjmp	.+42     	; 0xf14 <wait_1ms+0x88>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
     eea:	00 00       	nop
     eec:	85 e3       	ldi	r24, 0x35	; 53
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	fc 01       	movw	r30, r24
     ef2:	80 81       	ld	r24, Z
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	82 70       	andi	r24, 0x02	; 2
     efa:	99 27       	eor	r25, r25
     efc:	89 2b       	or	r24, r25
     efe:	b1 f3       	breq	.-20     	; 0xeec <wait_1ms+0x60>
		TIFR0 =  (1<<OCF0A);		// clear flag
     f00:	85 e3       	ldi	r24, 0x35	; 53
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	22 e0       	ldi	r18, 0x02	; 2
     f06:	fc 01       	movw	r30, r24
     f08:	20 83       	st	Z, r18
	TCNT0 = 0;
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
	
	for(i=0;i<uiFactor;i++)
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	9a 83       	std	Y+2, r25	; 0x02
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	29 81       	ldd	r18, Y+1	; 0x01
     f16:	3a 81       	ldd	r19, Y+2	; 0x02
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	9c 81       	ldd	r25, Y+4	; 0x04
     f1c:	28 17       	cp	r18, r24
     f1e:	39 07       	cpc	r19, r25
     f20:	20 f3       	brcs	.-56     	; 0xeea <wait_1ms+0x5e>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
		TIFR0 =  (1<<OCF0A);		// clear flag
	}
	TCCR0B &= ~(0x07);	// set prescaler to 0 (stop timer)
     f22:	85 e4       	ldi	r24, 0x45	; 69
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	25 e4       	ldi	r18, 0x45	; 69
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	f9 01       	movw	r30, r18
     f2c:	20 81       	ld	r18, Z
     f2e:	28 7f       	andi	r18, 0xF8	; 248
     f30:	fc 01       	movw	r30, r24
     f32:	20 83       	st	Z, r18
}
     f34:	00 00       	nop
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <Map>:
 * @param [in] s32OutMin: minimal value of output range
 * @param [in] s32OutMax: maximal value of output range
 * @return data in new number range
 *****************************************************************************/
int32_t Map(int32_t s32Data, int32_t s32InMin, int32_t s32InMax, int32_t s32OutMin, int32_t s32OutMax)
{
     f44:	af 92       	push	r10
     f46:	bf 92       	push	r11
     f48:	cf 92       	push	r12
     f4a:	df 92       	push	r13
     f4c:	ef 92       	push	r14
     f4e:	ff 92       	push	r15
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	60 97       	sbiw	r28, 0x10	; 16
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	69 83       	std	Y+1, r22	; 0x01
     f6a:	7a 83       	std	Y+2, r23	; 0x02
     f6c:	8b 83       	std	Y+3, r24	; 0x03
     f6e:	9c 83       	std	Y+4, r25	; 0x04
     f70:	2d 83       	std	Y+5, r18	; 0x05
     f72:	3e 83       	std	Y+6, r19	; 0x06
     f74:	4f 83       	std	Y+7, r20	; 0x07
     f76:	58 87       	std	Y+8, r21	; 0x08
     f78:	e9 86       	std	Y+9, r14	; 0x09
     f7a:	fa 86       	std	Y+10, r15	; 0x0a
     f7c:	0b 87       	std	Y+11, r16	; 0x0b
     f7e:	1c 87       	std	Y+12, r17	; 0x0c
     f80:	ad 86       	std	Y+13, r10	; 0x0d
     f82:	be 86       	std	Y+14, r11	; 0x0e
     f84:	cf 86       	std	Y+15, r12	; 0x0f
     f86:	d8 8a       	std	Y+16, r13	; 0x10
	return((s32Data-s32InMin)*(s32OutMax-s32OutMin)/(s32InMax-s32InMin)+s32OutMin);
     f88:	29 81       	ldd	r18, Y+1	; 0x01
     f8a:	3a 81       	ldd	r19, Y+2	; 0x02
     f8c:	4b 81       	ldd	r20, Y+3	; 0x03
     f8e:	5c 81       	ldd	r21, Y+4	; 0x04
     f90:	8d 81       	ldd	r24, Y+5	; 0x05
     f92:	9e 81       	ldd	r25, Y+6	; 0x06
     f94:	af 81       	ldd	r26, Y+7	; 0x07
     f96:	b8 85       	ldd	r27, Y+8	; 0x08
     f98:	79 01       	movw	r14, r18
     f9a:	8a 01       	movw	r16, r20
     f9c:	e8 1a       	sub	r14, r24
     f9e:	f9 0a       	sbc	r15, r25
     fa0:	0a 0b       	sbc	r16, r26
     fa2:	1b 0b       	sbc	r17, r27
     fa4:	2d 8d       	ldd	r18, Y+29	; 0x1d
     fa6:	3e 8d       	ldd	r19, Y+30	; 0x1e
     fa8:	4f 8d       	ldd	r20, Y+31	; 0x1f
     faa:	58 a1       	ldd	r21, Y+32	; 0x20
     fac:	8d 85       	ldd	r24, Y+13	; 0x0d
     fae:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb0:	af 85       	ldd	r26, Y+15	; 0x0f
     fb2:	b8 89       	ldd	r27, Y+16	; 0x10
     fb4:	59 01       	movw	r10, r18
     fb6:	6a 01       	movw	r12, r20
     fb8:	a8 1a       	sub	r10, r24
     fba:	b9 0a       	sbc	r11, r25
     fbc:	ca 0a       	sbc	r12, r26
     fbe:	db 0a       	sbc	r13, r27
     fc0:	d6 01       	movw	r26, r12
     fc2:	c5 01       	movw	r24, r10
     fc4:	a8 01       	movw	r20, r16
     fc6:	97 01       	movw	r18, r14
     fc8:	bc 01       	movw	r22, r24
     fca:	cd 01       	movw	r24, r26
     fcc:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__mulsi3>
     fd0:	7b 01       	movw	r14, r22
     fd2:	8c 01       	movw	r16, r24
     fd4:	29 85       	ldd	r18, Y+9	; 0x09
     fd6:	3a 85       	ldd	r19, Y+10	; 0x0a
     fd8:	4b 85       	ldd	r20, Y+11	; 0x0b
     fda:	5c 85       	ldd	r21, Y+12	; 0x0c
     fdc:	8d 81       	ldd	r24, Y+5	; 0x05
     fde:	9e 81       	ldd	r25, Y+6	; 0x06
     fe0:	af 81       	ldd	r26, Y+7	; 0x07
     fe2:	b8 85       	ldd	r27, Y+8	; 0x08
     fe4:	28 1b       	sub	r18, r24
     fe6:	39 0b       	sbc	r19, r25
     fe8:	4a 0b       	sbc	r20, r26
     fea:	5b 0b       	sbc	r21, r27
     fec:	c8 01       	movw	r24, r16
     fee:	b7 01       	movw	r22, r14
     ff0:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__divmodsi4>
     ff4:	da 01       	movw	r26, r20
     ff6:	c9 01       	movw	r24, r18
     ff8:	9c 01       	movw	r18, r24
     ffa:	ad 01       	movw	r20, r26
     ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1000:	af 85       	ldd	r26, Y+15	; 0x0f
    1002:	b8 89       	ldd	r27, Y+16	; 0x10
    1004:	82 0f       	add	r24, r18
    1006:	93 1f       	adc	r25, r19
    1008:	a4 1f       	adc	r26, r20
    100a:	b5 1f       	adc	r27, r21
}
    100c:	bc 01       	movw	r22, r24
    100e:	cd 01       	movw	r24, r26
    1010:	60 96       	adiw	r28, 0x10	; 16
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	df 90       	pop	r13
    102a:	cf 90       	pop	r12
    102c:	bf 90       	pop	r11
    102e:	af 90       	pop	r10
    1030:	08 95       	ret

00001032 <CRC8>:

uint8_t CRC8(uint8_t* au8Data, uint8_t u8Length)
{
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	28 97       	sbiw	r28, 0x08	; 8
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	9f 83       	std	Y+7, r25	; 0x07
    1048:	8e 83       	std	Y+6, r24	; 0x06
    104a:	68 87       	std	Y+8, r22	; 0x08
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;
    104c:	19 82       	std	Y+1, r1	; 0x01

	for(i=0;i<u8Length;i++)
    104e:	1a 82       	std	Y+2, r1	; 0x02
    1050:	27 c0       	rjmp	.+78     	; 0x10a0 <CRC8+0x6e>
	{
		u8InByte = au8Data[i];
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	2e 81       	ldd	r18, Y+6	; 0x06
    105a:	3f 81       	ldd	r19, Y+7	; 0x07
    105c:	82 0f       	add	r24, r18
    105e:	93 1f       	adc	r25, r19
    1060:	fc 01       	movw	r30, r24
    1062:	80 81       	ld	r24, Z
    1064:	8c 83       	std	Y+4, r24	; 0x04
		for(j=0;j<8;j++)
    1066:	1b 82       	std	Y+3, r1	; 0x03
    1068:	15 c0       	rjmp	.+42     	; 0x1094 <CRC8+0x62>
		{
			u8Temp = (u8CRC^u8InByte)&0x80;
    106a:	99 81       	ldd	r25, Y+1	; 0x01
    106c:	8c 81       	ldd	r24, Y+4	; 0x04
    106e:	89 27       	eor	r24, r25
    1070:	80 78       	andi	r24, 0x80	; 128
    1072:	8d 83       	std	Y+5, r24	; 0x05
			u8CRC <<= 1;
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	88 0f       	add	r24, r24
    1078:	89 83       	std	Y+1, r24	; 0x01
			if(u8Temp!=0)
    107a:	8d 81       	ldd	r24, Y+5	; 0x05
    107c:	88 23       	and	r24, r24
    107e:	21 f0       	breq	.+8      	; 0x1088 <CRC8+0x56>
			{
				u8CRC ^= 0x07;
    1080:	99 81       	ldd	r25, Y+1	; 0x01
    1082:	87 e0       	ldi	r24, 0x07	; 7
    1084:	89 27       	eor	r24, r25
    1086:	89 83       	std	Y+1, r24	; 0x01
			}
			u8InByte<<=1;
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	88 0f       	add	r24, r24
    108c:	8c 83       	std	Y+4, r24	; 0x04
	u8CRC = 0;

	for(i=0;i<u8Length;i++)
	{
		u8InByte = au8Data[i];
		for(j=0;j<8;j++)
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	8f 5f       	subi	r24, 0xFF	; 255
    1092:	8b 83       	std	Y+3, r24	; 0x03
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	88 30       	cpi	r24, 0x08	; 8
    1098:	40 f3       	brcs	.-48     	; 0x106a <CRC8+0x38>
{
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;

	for(i=0;i<u8Length;i++)
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	8f 5f       	subi	r24, 0xFF	; 255
    109e:	8a 83       	std	Y+2, r24	; 0x02
    10a0:	9a 81       	ldd	r25, Y+2	; 0x02
    10a2:	88 85       	ldd	r24, Y+8	; 0x08
    10a4:	98 17       	cp	r25, r24
    10a6:	a8 f2       	brcs	.-86     	; 0x1052 <CRC8+0x20>
			}
			u8InByte<<=1;
		}
	}

	return u8CRC;
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10aa:	28 96       	adiw	r28, 0x08	; 8
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	08 95       	ret

000010bc <__mulsi3>:
    10bc:	db 01       	movw	r26, r22
    10be:	8f 93       	push	r24
    10c0:	9f 93       	push	r25
    10c2:	0e 94 93 08 	call	0x1126	; 0x1126 <__muluhisi3>
    10c6:	bf 91       	pop	r27
    10c8:	af 91       	pop	r26
    10ca:	a2 9f       	mul	r26, r18
    10cc:	80 0d       	add	r24, r0
    10ce:	91 1d       	adc	r25, r1
    10d0:	a3 9f       	mul	r26, r19
    10d2:	90 0d       	add	r25, r0
    10d4:	b2 9f       	mul	r27, r18
    10d6:	90 0d       	add	r25, r0
    10d8:	11 24       	eor	r1, r1
    10da:	08 95       	ret

000010dc <__divmodsi4>:
    10dc:	05 2e       	mov	r0, r21
    10de:	97 fb       	bst	r25, 7
    10e0:	1e f4       	brtc	.+6      	; 0x10e8 <__divmodsi4+0xc>
    10e2:	00 94       	com	r0
    10e4:	0e 94 85 08 	call	0x110a	; 0x110a <__negsi2>
    10e8:	57 fd       	sbrc	r21, 7
    10ea:	07 d0       	rcall	.+14     	; 0x10fa <__divmodsi4_neg2>
    10ec:	0e 94 9e 08 	call	0x113c	; 0x113c <__udivmodsi4>
    10f0:	07 fc       	sbrc	r0, 7
    10f2:	03 d0       	rcall	.+6      	; 0x10fa <__divmodsi4_neg2>
    10f4:	4e f4       	brtc	.+18     	; 0x1108 <__divmodsi4_exit>
    10f6:	0c 94 85 08 	jmp	0x110a	; 0x110a <__negsi2>

000010fa <__divmodsi4_neg2>:
    10fa:	50 95       	com	r21
    10fc:	40 95       	com	r20
    10fe:	30 95       	com	r19
    1100:	21 95       	neg	r18
    1102:	3f 4f       	sbci	r19, 0xFF	; 255
    1104:	4f 4f       	sbci	r20, 0xFF	; 255
    1106:	5f 4f       	sbci	r21, 0xFF	; 255

00001108 <__divmodsi4_exit>:
    1108:	08 95       	ret

0000110a <__negsi2>:
    110a:	90 95       	com	r25
    110c:	80 95       	com	r24
    110e:	70 95       	com	r23
    1110:	61 95       	neg	r22
    1112:	7f 4f       	sbci	r23, 0xFF	; 255
    1114:	8f 4f       	sbci	r24, 0xFF	; 255
    1116:	9f 4f       	sbci	r25, 0xFF	; 255
    1118:	08 95       	ret

0000111a <__tablejump2__>:
    111a:	ee 0f       	add	r30, r30
    111c:	ff 1f       	adc	r31, r31
    111e:	05 90       	lpm	r0, Z+
    1120:	f4 91       	lpm	r31, Z
    1122:	e0 2d       	mov	r30, r0
    1124:	09 94       	ijmp

00001126 <__muluhisi3>:
    1126:	0e 94 c0 08 	call	0x1180	; 0x1180 <__umulhisi3>
    112a:	a5 9f       	mul	r26, r21
    112c:	90 0d       	add	r25, r0
    112e:	b4 9f       	mul	r27, r20
    1130:	90 0d       	add	r25, r0
    1132:	a4 9f       	mul	r26, r20
    1134:	80 0d       	add	r24, r0
    1136:	91 1d       	adc	r25, r1
    1138:	11 24       	eor	r1, r1
    113a:	08 95       	ret

0000113c <__udivmodsi4>:
    113c:	a1 e2       	ldi	r26, 0x21	; 33
    113e:	1a 2e       	mov	r1, r26
    1140:	aa 1b       	sub	r26, r26
    1142:	bb 1b       	sub	r27, r27
    1144:	fd 01       	movw	r30, r26
    1146:	0d c0       	rjmp	.+26     	; 0x1162 <__udivmodsi4_ep>

00001148 <__udivmodsi4_loop>:
    1148:	aa 1f       	adc	r26, r26
    114a:	bb 1f       	adc	r27, r27
    114c:	ee 1f       	adc	r30, r30
    114e:	ff 1f       	adc	r31, r31
    1150:	a2 17       	cp	r26, r18
    1152:	b3 07       	cpc	r27, r19
    1154:	e4 07       	cpc	r30, r20
    1156:	f5 07       	cpc	r31, r21
    1158:	20 f0       	brcs	.+8      	; 0x1162 <__udivmodsi4_ep>
    115a:	a2 1b       	sub	r26, r18
    115c:	b3 0b       	sbc	r27, r19
    115e:	e4 0b       	sbc	r30, r20
    1160:	f5 0b       	sbc	r31, r21

00001162 <__udivmodsi4_ep>:
    1162:	66 1f       	adc	r22, r22
    1164:	77 1f       	adc	r23, r23
    1166:	88 1f       	adc	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	1a 94       	dec	r1
    116c:	69 f7       	brne	.-38     	; 0x1148 <__udivmodsi4_loop>
    116e:	60 95       	com	r22
    1170:	70 95       	com	r23
    1172:	80 95       	com	r24
    1174:	90 95       	com	r25
    1176:	9b 01       	movw	r18, r22
    1178:	ac 01       	movw	r20, r24
    117a:	bd 01       	movw	r22, r26
    117c:	cf 01       	movw	r24, r30
    117e:	08 95       	ret

00001180 <__umulhisi3>:
    1180:	a2 9f       	mul	r26, r18
    1182:	b0 01       	movw	r22, r0
    1184:	b3 9f       	mul	r27, r19
    1186:	c0 01       	movw	r24, r0
    1188:	a3 9f       	mul	r26, r19
    118a:	70 0d       	add	r23, r0
    118c:	81 1d       	adc	r24, r1
    118e:	11 24       	eor	r1, r1
    1190:	91 1d       	adc	r25, r1
    1192:	b2 9f       	mul	r27, r18
    1194:	70 0d       	add	r23, r0
    1196:	81 1d       	adc	r24, r1
    1198:	11 24       	eor	r1, r1
    119a:	91 1d       	adc	r25, r1
    119c:	08 95       	ret

0000119e <_exit>:
    119e:	f8 94       	cli

000011a0 <__stop_program>:
    11a0:	ff cf       	rjmp	.-2      	; 0x11a0 <__stop_program>
