
clusterwink_mk_ii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000cee  00000d82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000044  00800102  00800102  00000d84  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000db4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e42  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d0  00000000  00000000  00001d46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a88  00000000  00000000  00002716  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000478  00000000  00000000  000031a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e2  00000000  00000000  00003618  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000935  00000000  00000000  00003bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000452f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  10:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  14:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__vector_5>
  18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_19>
  50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  54:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  58:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  5c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  60:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  68:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  6c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  70:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  74:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  7c:	9b 00       	.word	0x009b	; ????
  7e:	b4 00       	.word	0x00b4	; ????
  80:	cd 00       	.word	0x00cd	; ????
  82:	3f 01       	movw	r6, r30
  84:	5a 01       	movw	r10, r20
  86:	5a 01       	movw	r10, r20
  88:	5a 01       	movw	r10, r20

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
  96:	11 e0       	ldi	r17, 0x01	; 1
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	ee ee       	ldi	r30, 0xEE	; 238
  9e:	fc e0       	ldi	r31, 0x0C	; 12
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
  a2:	05 90       	lpm	r0, Z+
  a4:	0d 92       	st	X+, r0
  a6:	a2 30       	cpi	r26, 0x02	; 2
  a8:	b1 07       	cpc	r27, r17
  aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	a2 e0       	ldi	r26, 0x02	; 2
  b0:	b1 e0       	ldi	r27, 0x01	; 1
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
  b6:	a6 34       	cpi	r26, 0x46	; 70
  b8:	b2 07       	cpc	r27, r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
  bc:	0e 94 26 02 	call	0x44c	; 0x44c <main>
  c0:	0c 94 75 06 	jmp	0xcea	; 0xcea <_exit>

000000c4 <__bad_interrupt>:
  c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <__vector_19>:
volatile uint8_t u8Status = 0x11;
volatile uint8_t u8Duty = 0;
volatile uint8_t u8Temperature = 0x33;

ISR(SPI_STC_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	3f 93       	push	r19
  d8:	4f 93       	push	r20
  da:	5f 93       	push	r21
  dc:	6f 93       	push	r22
  de:	7f 93       	push	r23
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	af 93       	push	r26
  e6:	bf 93       	push	r27
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	1f 92       	push	r1
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8spiData = SPDR0;
  f6:	8e e4       	ldi	r24, 0x4E	; 78
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	fc 01       	movw	r30, r24
  fc:	80 81       	ld	r24, Z
  fe:	89 83       	std	Y+1, r24	; 0x01
	
	//PORTB |= (1<<PINB1);
	
	SPDR0 = 0;
 100:	8e e4       	ldi	r24, 0x4E	; 78
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	fc 01       	movw	r30, r24
 106:	10 82       	st	Z, r1

	switch(SPIBUFFER.spiState)
 108:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end+0x42>
 10c:	88 2f       	mov	r24, r24
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	09 2e       	mov	r0, r25
 112:	00 0c       	add	r0, r0
 114:	aa 0b       	sbc	r26, r26
 116:	bb 0b       	sbc	r27, r27
 118:	40 e0       	ldi	r20, 0x00	; 0
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	26 e0       	ldi	r18, 0x06	; 6
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	84 1b       	sub	r24, r20
 122:	95 0b       	sbc	r25, r21
 124:	28 17       	cp	r18, r24
 126:	39 07       	cpc	r19, r25
 128:	08 f4       	brcc	.+2      	; 0x12c <__vector_19+0x64>
 12a:	c9 c0       	rjmp	.+402    	; 0x2be <__vector_19+0x1f6>
 12c:	82 5c       	subi	r24, 0xC2	; 194
 12e:	9f 4f       	sbci	r25, 0xFF	; 255
 130:	fc 01       	movw	r30, r24
 132:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__tablejump2__>
	{
		case READY:
			if(u8spiData>=3)
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	90 f0       	brcs	.+36     	; 0x160 <__vector_19+0x98>
			{
				SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
 13c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 140:	88 2f       	mov	r24, r24
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	8e 5f       	subi	r24, 0xFE	; 254
 146:	9e 4f       	sbci	r25, 0xFE	; 254
 148:	29 81       	ldd	r18, Y+1	; 0x01
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
				SPIBUFFER.u8Count++;
 14e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 152:	8f 5f       	subi	r24, 0xFF	; 255
 154:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end+0x40>
				SPIBUFFER.spiState = WRITE;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end+0x42>
			}
			else
			{
				SPIBUFFER.spiState = READ;
			}
		break;
 15e:	af c0       	rjmp	.+350    	; 0x2be <__vector_19+0x1f6>
				SPIBUFFER.u8Count++;
				SPIBUFFER.spiState = WRITE;
			}
			else
			{
				SPIBUFFER.spiState = READ;
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end+0x42>
			}
		break;
 166:	ab c0       	rjmp	.+342    	; 0x2be <__vector_19+0x1f6>

		case WRITE:
			SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
 168:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 16c:	88 2f       	mov	r24, r24
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	8e 5f       	subi	r24, 0xFE	; 254
 172:	9e 4f       	sbci	r25, 0xFE	; 254
 174:	29 81       	ldd	r18, Y+1	; 0x01
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
			SPIBUFFER.u8Count++;
 17a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 17e:	8f 5f       	subi	r24, 0xFF	; 255
 180:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end+0x40>
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
 184:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__data_end+0x40>
 188:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 18c:	98 17       	cp	r25, r24
 18e:	08 f4       	brcc	.+2      	; 0x192 <__vector_19+0xca>
 190:	93 c0       	rjmp	.+294    	; 0x2b8 <__vector_19+0x1f0>
			{
				SPIBUFFER.spiState = DONE_WRITE;
 192:	84 e0       	ldi	r24, 0x04	; 4
 194:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end+0x42>
			}
		break;
 198:	8f c0       	rjmp	.+286    	; 0x2b8 <__vector_19+0x1f0>

		case READ:
			SPIBUFFER.u8Count = 0;
 19a:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end+0x40>
			
			switch(u8spiData)
 19e:	89 81       	ldd	r24, Y+1	; 0x01
 1a0:	88 2f       	mov	r24, r24
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	82 3c       	cpi	r24, 0xC2	; 194
 1a6:	91 05       	cpc	r25, r1
 1a8:	39 f1       	breq	.+78     	; 0x1f8 <__vector_19+0x130>
 1aa:	83 3c       	cpi	r24, 0xC3	; 195
 1ac:	91 05       	cpc	r25, r1
 1ae:	09 f4       	brne	.+2      	; 0x1b2 <__vector_19+0xea>
 1b0:	42 c0       	rjmp	.+132    	; 0x236 <__vector_19+0x16e>
 1b2:	81 3c       	cpi	r24, 0xC1	; 193
 1b4:	91 05       	cpc	r25, r1
 1b6:	09 f0       	breq	.+2      	; 0x1ba <__vector_19+0xf2>
 1b8:	5d c0       	rjmp	.+186    	; 0x274 <__vector_19+0x1ac>
			{
				case 0xC1:
					SPDR0 = 0x01;
 1ba:	8e e4       	ldi	r24, 0x4E	; 78
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	21 e0       	ldi	r18, 0x01	; 1
 1c0:	fc 01       	movw	r30, r24
 1c2:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
 1c4:	84 e0       	ldi	r24, 0x04	; 4
 1c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
					SPIBUFFER.au8Buffer[1] = u8spiData;
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__data_end+0x1>
					SPIBUFFER.au8Buffer[2] = u8Status;
 1d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1d4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
 1d8:	63 e0       	ldi	r22, 0x03	; 3
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	0e 94 bf 05 	call	0xb7e	; 0xb7e <CRC8>
 1e2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__data_end+0x3>
					SPIBUFFER.u8Count = 4;
 1e6:	84 e0       	ldi	r24, 0x04	; 4
 1e8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
 1ec:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <__data_end+0x41>
					SPIBUFFER.spiState = READ_RETURN;
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end+0x42>
				break;
 1f6:	42 c0       	rjmp	.+132    	; 0x27c <__vector_19+0x1b4>
				
				case 0xC2:
					SPDR0 = 0x01;
 1f8:	8e e4       	ldi	r24, 0x4E	; 78
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
 202:	84 e0       	ldi	r24, 0x04	; 4
 204:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
					SPIBUFFER.au8Buffer[1] = u8spiData;
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__data_end+0x1>
					SPIBUFFER.au8Buffer[2] = u8Duty;
 20e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8Duty>
 212:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
 216:	63 e0       	ldi	r22, 0x03	; 3
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <CRC8>
 220:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__data_end+0x3>
					SPIBUFFER.u8Count = 4;
 224:	84 e0       	ldi	r24, 0x04	; 4
 226:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
 22a:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <__data_end+0x41>
					SPIBUFFER.spiState = READ_RETURN;
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end+0x42>
				break;
 234:	23 c0       	rjmp	.+70     	; 0x27c <__vector_19+0x1b4>
				
				case 0xC3:
					SPDR0 = 0x01;
 236:	8e e4       	ldi	r24, 0x4E	; 78
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	21 e0       	ldi	r18, 0x01	; 1
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
 240:	84 e0       	ldi	r24, 0x04	; 4
 242:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
					SPIBUFFER.au8Buffer[1] = u8spiData;
 246:	89 81       	ldd	r24, Y+1	; 0x01
 248:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__data_end+0x1>
					SPIBUFFER.au8Buffer[2] = u8Temperature;
 24c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <u8Temperature>
 250:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
 254:	63 e0       	ldi	r22, 0x03	; 3
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <CRC8>
 25e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__data_end+0x3>
					SPIBUFFER.u8Count = 4;
 262:	84 e0       	ldi	r24, 0x04	; 4
 264:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
 268:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <__data_end+0x41>
					SPIBUFFER.spiState = READ_RETURN;
 26c:	83 e0       	ldi	r24, 0x03	; 3
 26e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end+0x42>
				break;
 272:	04 c0       	rjmp	.+8      	; 0x27c <__vector_19+0x1b4>
				
				default:
					SPIBUFFER.spiState = IDLE;
 274:	86 e0       	ldi	r24, 0x06	; 6
 276:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end+0x42>
				break;
 27a:	00 00       	nop
			}
		break;
 27c:	20 c0       	rjmp	.+64     	; 0x2be <__vector_19+0x1f6>
		
		case READ_RETURN:
			SPDR0 = SPIBUFFER.au8Buffer[SPIBUFFER.u8ReadReturnCount];
 27e:	8e e4       	ldi	r24, 0x4E	; 78
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <__data_end+0x41>
 286:	22 2f       	mov	r18, r18
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	2e 5f       	subi	r18, 0xFE	; 254
 28c:	3e 4f       	sbci	r19, 0xFE	; 254
 28e:	f9 01       	movw	r30, r18
 290:	20 81       	ld	r18, Z
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18
			SPIBUFFER.u8ReadReturnCount++;
 296:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__data_end+0x41>
 29a:	8f 5f       	subi	r24, 0xFF	; 255
 29c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__data_end+0x41>
			if(SPIBUFFER.u8Count == SPIBUFFER.u8ReadReturnCount)
 2a0:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__data_end+0x40>
 2a4:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__data_end+0x41>
 2a8:	98 17       	cp	r25, r24
 2aa:	41 f4       	brne	.+16     	; 0x2bc <__vector_19+0x1f4>
			{
				SPIBUFFER.spiState = DONE_READ;
 2ac:	85 e0       	ldi	r24, 0x05	; 5
 2ae:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end+0x42>
			}
		break;
 2b2:	04 c0       	rjmp	.+8      	; 0x2bc <__vector_19+0x1f4>
		
		break;

		case IDLE:

		break;
 2b4:	00 00       	nop
 2b6:	03 c0       	rjmp	.+6      	; 0x2be <__vector_19+0x1f6>
			SPIBUFFER.u8Count++;
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
			{
				SPIBUFFER.spiState = DONE_WRITE;
			}
		break;
 2b8:	00 00       	nop
 2ba:	01 c0       	rjmp	.+2      	; 0x2be <__vector_19+0x1f6>
			SPIBUFFER.u8ReadReturnCount++;
			if(SPIBUFFER.u8Count == SPIBUFFER.u8ReadReturnCount)
			{
				SPIBUFFER.spiState = DONE_READ;
			}
		break;
 2bc:	00 00       	nop
		case IDLE:

		break;
	}
	//PORTB &= ~(1<<PINB1);
}
 2be:	00 00       	nop
 2c0:	0f 90       	pop	r0
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	ff 91       	pop	r31
 2c8:	ef 91       	pop	r30
 2ca:	bf 91       	pop	r27
 2cc:	af 91       	pop	r26
 2ce:	9f 91       	pop	r25
 2d0:	8f 91       	pop	r24
 2d2:	7f 91       	pop	r23
 2d4:	6f 91       	pop	r22
 2d6:	5f 91       	pop	r21
 2d8:	4f 91       	pop	r20
 2da:	3f 91       	pop	r19
 2dc:	2f 91       	pop	r18
 2de:	0f 90       	pop	r0
 2e0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <__vector_5>:

ISR(PCINT1_vect)
{
 2ea:	1f 92       	push	r1
 2ec:	0f 92       	push	r0
 2ee:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	2f 93       	push	r18
 2f8:	3f 93       	push	r19
 2fa:	4f 93       	push	r20
 2fc:	5f 93       	push	r21
 2fe:	6f 93       	push	r22
 300:	7f 93       	push	r23
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	af 93       	push	r26
 308:	bf 93       	push	r27
 30a:	ef 93       	push	r30
 30c:	ff 93       	push	r31
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
	//PORTB |= (1<<PINB1);
	
	uint8_t u8CRC;
	
	if(PIN_SPI & (1<<SPI_SS)) // SS HIGH
 316:	83 e2       	ldi	r24, 0x23	; 35
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	fc 01       	movw	r30, r24
 31c:	80 81       	ld	r24, Z
 31e:	88 2f       	mov	r24, r24
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	80 71       	andi	r24, 0x10	; 16
 324:	99 27       	eor	r25, r25
 326:	89 2b       	or	r24, r25
 328:	09 f4       	brne	.+2      	; 0x32c <__vector_5+0x42>
 32a:	6b c0       	rjmp	.+214    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{
		if(SPIBUFFER.spiState == DONE_WRITE)
 32c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end+0x42>
 330:	84 30       	cpi	r24, 0x04	; 4
 332:	09 f0       	breq	.+2      	; 0x336 <__vector_5+0x4c>
 334:	76 c0       	rjmp	.+236    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		{
			if(SPIBUFFER.u8Count == SPIBUFFER.au8Buffer[0]) // correct amount of bytes in buffer
 336:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__data_end+0x40>
 33a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 33e:	98 17       	cp	r25, r24
 340:	09 f0       	breq	.+2      	; 0x344 <__vector_5+0x5a>
 342:	6f c0       	rjmp	.+222    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			{
				if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
 344:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 348:	68 2f       	mov	r22, r24
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	0e 94 bf 05 	call	0xb7e	; 0xb7e <CRC8>
 352:	88 23       	and	r24, r24
 354:	09 f0       	breq	.+2      	; 0x358 <__vector_5+0x6e>
 356:	65 c0       	rjmp	.+202    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
				{
					switch(SPIBUFFER.au8Buffer[1]) // command
 358:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_end+0x1>
 35c:	88 2f       	mov	r24, r24
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	83 30       	cpi	r24, 0x03	; 3
 362:	91 05       	cpc	r25, r1
 364:	09 f1       	breq	.+66     	; 0x3a8 <__vector_5+0xbe>
 366:	84 30       	cpi	r24, 0x04	; 4
 368:	91 05       	cpc	r25, r1
 36a:	34 f4       	brge	.+12     	; 0x378 <__vector_5+0x8e>
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	91 05       	cpc	r25, r1
 370:	61 f0       	breq	.+24     	; 0x38a <__vector_5+0xa0>
 372:	02 97       	sbiw	r24, 0x02	; 2
 374:	91 f0       	breq	.+36     	; 0x39a <__vector_5+0xb0>
	{
		SPIBUFFER.u8Count = 0;
		SPIBUFFER.spiState = READY;
	}
	//PORTB &= ~(1<<PINB1);
}
 376:	55 c0       	rjmp	.+170    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		{
			if(SPIBUFFER.u8Count == SPIBUFFER.au8Buffer[0]) // correct amount of bytes in buffer
			{
				if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
				{
					switch(SPIBUFFER.au8Buffer[1]) // command
 378:	85 30       	cpi	r24, 0x05	; 5
 37a:	91 05       	cpc	r25, r1
 37c:	89 f1       	breq	.+98     	; 0x3e0 <__vector_5+0xf6>
 37e:	85 30       	cpi	r24, 0x05	; 5
 380:	91 05       	cpc	r25, r1
 382:	3c f1       	brlt	.+78     	; 0x3d2 <__vector_5+0xe8>
 384:	06 97       	sbiw	r24, 0x06	; 6
 386:	99 f1       	breq	.+102    	; 0x3ee <__vector_5+0x104>
	{
		SPIBUFFER.u8Count = 0;
		SPIBUFFER.spiState = READY;
	}
	//PORTB &= ~(1<<PINB1);
}
 388:	4c c0       	rjmp	.+152    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
				if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
				{
					switch(SPIBUFFER.au8Buffer[1]) // command
					{
						case 0x01:
						if(SPIBUFFER.u8Count == 3)
 38a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 38e:	83 30       	cpi	r24, 0x03	; 3
 390:	09 f0       	breq	.+2      	; 0x394 <__vector_5+0xaa>
 392:	3c c0       	rjmp	.+120    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
						{
							enablePLED();
 394:	0e 94 55 03 	call	0x6aa	; 0x6aa <enablePLED>
						}
						break;
 398:	39 c0       	rjmp	.+114    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>

						case 0x02:
						if(SPIBUFFER.u8Count == 3)
 39a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 39e:	83 30       	cpi	r24, 0x03	; 3
 3a0:	b9 f5       	brne	.+110    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
						{
							disablePLED();
 3a2:	0e 94 66 03 	call	0x6cc	; 0x6cc <disablePLED>
						}
						break;
 3a6:	34 c0       	rjmp	.+104    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>

						case 0x03:
						if(SPIBUFFER.u8Count == 4)
 3a8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 3ac:	84 30       	cpi	r24, 0x04	; 4
 3ae:	91 f5       	brne	.+100    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
						{
							if(SPIBUFFER.au8Buffer[2]>100)
 3b0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end+0x2>
 3b4:	85 36       	cpi	r24, 0x65	; 101
 3b6:	20 f0       	brcs	.+8      	; 0x3c0 <__vector_5+0xd6>
							{
								u8Duty = 100;
 3b8:	84 e6       	ldi	r24, 0x64	; 100
 3ba:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <u8Duty>
 3be:	04 c0       	rjmp	.+8      	; 0x3c8 <__vector_5+0xde>
							}
							else
							{
								u8Duty = SPIBUFFER.au8Buffer[2];
 3c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end+0x2>
 3c4:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <u8Duty>
							}
						
							setDuty(u8Duty);
 3c8:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8Duty>
 3cc:	0e 94 a0 04 	call	0x940	; 0x940 <setDuty>
						}
						break;
 3d0:	21 c0       	rjmp	.+66     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
					
						case 0x04:
						if(SPIBUFFER.u8Count == 3)
 3d2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 3d6:	83 30       	cpi	r24, 0x03	; 3
 3d8:	f9 f4       	brne	.+62     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
						{
							enableAudio();
 3da:	0e 94 91 03 	call	0x722	; 0x722 <enableAudio>
						}
						break;
 3de:	1c c0       	rjmp	.+56     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>

						case 0x05:
						if(SPIBUFFER.u8Count == 3)
 3e0:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 3e4:	83 30       	cpi	r24, 0x03	; 3
 3e6:	d1 f4       	brne	.+52     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
						{
							standbyAudio();
 3e8:	0e 94 77 03 	call	0x6ee	; 0x6ee <standbyAudio>
						}
						break;
 3ec:	17 c0       	rjmp	.+46     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
					
						case 0x06:
						if(SPIBUFFER.u8Count == 4)
 3ee:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 3f2:	84 30       	cpi	r24, 0x04	; 4
 3f4:	a9 f4       	brne	.+42     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
						{
							setVolume(SPIBUFFER.au8Buffer[2]);
 3f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end+0x2>
 3fa:	0e 94 0b 04 	call	0x816	; 0x816 <setVolume>
						}
						break;
 3fe:	00 00       	nop
 400:	0f c0       	rjmp	.+30     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			
		}
	}
	else // SS LOW
	{
		SPIBUFFER.u8Count = 0;
 402:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end+0x40>
		SPIBUFFER.spiState = READY;
 406:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end+0x42>
	}
	//PORTB &= ~(1<<PINB1);
}
 40a:	0b c0       	rjmp	.+22     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
						case 0x01:
						if(SPIBUFFER.u8Count == 3)
						{
							enablePLED();
						}
						break;
 40c:	00 00       	nop
 40e:	09 c0       	rjmp	.+18     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
						case 0x02:
						if(SPIBUFFER.u8Count == 3)
						{
							disablePLED();
						}
						break;
 410:	00 00       	nop
 412:	07 c0       	rjmp	.+14     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
								u8Duty = SPIBUFFER.au8Buffer[2];
							}
						
							setDuty(u8Duty);
						}
						break;
 414:	00 00       	nop
 416:	05 c0       	rjmp	.+10     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
						case 0x04:
						if(SPIBUFFER.u8Count == 3)
						{
							enableAudio();
						}
						break;
 418:	00 00       	nop
 41a:	03 c0       	rjmp	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
						case 0x05:
						if(SPIBUFFER.u8Count == 3)
						{
							standbyAudio();
						}
						break;
 41c:	00 00       	nop
 41e:	01 c0       	rjmp	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
						case 0x06:
						if(SPIBUFFER.u8Count == 4)
						{
							setVolume(SPIBUFFER.au8Buffer[2]);
						}
						break;
 420:	00 00       	nop
	{
		SPIBUFFER.u8Count = 0;
		SPIBUFFER.spiState = READY;
	}
	//PORTB &= ~(1<<PINB1);
}
 422:	00 00       	nop
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	ff 91       	pop	r31
 42a:	ef 91       	pop	r30
 42c:	bf 91       	pop	r27
 42e:	af 91       	pop	r26
 430:	9f 91       	pop	r25
 432:	8f 91       	pop	r24
 434:	7f 91       	pop	r23
 436:	6f 91       	pop	r22
 438:	5f 91       	pop	r21
 43a:	4f 91       	pop	r20
 43c:	3f 91       	pop	r19
 43e:	2f 91       	pop	r18
 440:	0f 90       	pop	r0
 442:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 446:	0f 90       	pop	r0
 448:	1f 90       	pop	r1
 44a:	18 95       	reti

0000044c <main>:



int main(void)
{
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	1f 92       	push	r1
 452:	cd b7       	in	r28, 0x3d	; 61
 454:	de b7       	in	r29, 0x3e	; 62
    uint8_t u8Duty = 0;
 456:	19 82       	std	Y+1, r1	; 0x01
	uint16_t i;
	
	portInit();
 458:	0e 94 c7 02 	call	0x58e	; 0x58e <portInit>
	initPWM(u8Duty);
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	0e 94 30 04 	call	0x860	; 0x860 <initPWM>
	startPWM();
 462:	0e 94 8f 04 	call	0x91e	; 0x91e <startPWM>
	spiInitBuffer(&SPIBUFFER);
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	0e 94 55 02 	call	0x4aa	; 0x4aa <spiInitBuffer>
	spiSlaveInit();
 46e:	0e 94 75 02 	call	0x4ea	; 0x4ea <spiSlaveInit>
	spiPcInt();
 472:	0e 94 a8 02 	call	0x550	; 0x550 <spiPcInt>

	wait_1ms(100);
 476:	84 e6       	ldi	r24, 0x64	; 100
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <wait_1ms>
	initAudio();
 47e:	0e 94 21 04 	call	0x842	; 0x842 <initAudio>

	DDRB |= (1<<PINB1);
 482:	84 e2       	ldi	r24, 0x24	; 36
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	24 e2       	ldi	r18, 0x24	; 36
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	f9 01       	movw	r30, r18
 48c:	20 81       	ld	r18, Z
 48e:	22 60       	ori	r18, 0x02	; 2
 490:	fc 01       	movw	r30, r24
 492:	20 83       	st	Z, r18
	PORTB &= ~(1<<PINB1);
 494:	85 e2       	ldi	r24, 0x25	; 37
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	25 e2       	ldi	r18, 0x25	; 37
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	f9 01       	movw	r30, r18
 49e:	20 81       	ld	r18, Z
 4a0:	2d 7f       	andi	r18, 0xFD	; 253
 4a2:	fc 01       	movw	r30, r24
 4a4:	20 83       	st	Z, r18
	
	sei();
 4a6:	78 94       	sei
	
	
    while (1) 
    {

    }
 4a8:	ff cf       	rjmp	.-2      	; 0x4a8 <main+0x5c>

000004aa <spiInitBuffer>:
#include <avr/io.h>
#include "spi.h"


void spiInitBuffer(SpiBuf_t* Buffer)
{
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	00 d0       	rcall	.+0      	; 0x4b0 <spiInitBuffer+0x6>
 4b0:	cd b7       	in	r28, 0x3d	; 61
 4b2:	de b7       	in	r29, 0x3e	; 62
 4b4:	9a 83       	std	Y+2, r25	; 0x02
 4b6:	89 83       	std	Y+1, r24	; 0x01
	Buffer->u8Count = 0;
 4b8:	89 81       	ldd	r24, Y+1	; 0x01
 4ba:	9a 81       	ldd	r25, Y+2	; 0x02
 4bc:	80 5c       	subi	r24, 0xC0	; 192
 4be:	9f 4f       	sbci	r25, 0xFF	; 255
 4c0:	fc 01       	movw	r30, r24
 4c2:	10 82       	st	Z, r1
	Buffer->u8ReadReturnCount = 0;
 4c4:	89 81       	ldd	r24, Y+1	; 0x01
 4c6:	9a 81       	ldd	r25, Y+2	; 0x02
 4c8:	8f 5b       	subi	r24, 0xBF	; 191
 4ca:	9f 4f       	sbci	r25, 0xFF	; 255
 4cc:	fc 01       	movw	r30, r24
 4ce:	10 82       	st	Z, r1
	Buffer->spiState = IDLE;
 4d0:	89 81       	ldd	r24, Y+1	; 0x01
 4d2:	9a 81       	ldd	r25, Y+2	; 0x02
 4d4:	8e 5b       	subi	r24, 0xBE	; 190
 4d6:	9f 4f       	sbci	r25, 0xFF	; 255
 4d8:	26 e0       	ldi	r18, 0x06	; 6
 4da:	fc 01       	movw	r30, r24
 4dc:	20 83       	st	Z, r18
}
 4de:	00 00       	nop
 4e0:	0f 90       	pop	r0
 4e2:	0f 90       	pop	r0
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	08 95       	ret

000004ea <spiSlaveInit>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiSlaveInit(void)
{
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	1f 92       	push	r1
 4f0:	cd b7       	in	r28, 0x3d	; 61
 4f2:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t ucTemp;
	SPSR0 = 0;
 4f4:	8d e4       	ldi	r24, 0x4D	; 77
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	fc 01       	movw	r30, r24
 4fa:	10 82       	st	Z, r1
	SPCR0 = (1<<SPIE0);
 4fc:	8c e4       	ldi	r24, 0x4C	; 76
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	20 e8       	ldi	r18, 0x80	; 128
 502:	fc 01       	movw	r30, r24
 504:	20 83       	st	Z, r18
	
	ucTemp = SPSR0;					
 506:	8d e4       	ldi	r24, 0x4D	; 77
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	fc 01       	movw	r30, r24
 50c:	80 81       	ld	r24, Z
 50e:	89 83       	std	Y+1, r24	; 0x01
	ucTemp = SPDR0;
 510:	8e e4       	ldi	r24, 0x4E	; 78
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	fc 01       	movw	r30, r24
 516:	80 81       	ld	r24, Z
 518:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0;
 51a:	8e e4       	ldi	r24, 0x4E	; 78
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	fc 01       	movw	r30, r24
 520:	10 82       	st	Z, r1
	
	DDRB |= (1<<PINB6);				// MISO needs to be an output
 522:	84 e2       	ldi	r24, 0x24	; 36
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	24 e2       	ldi	r18, 0x24	; 36
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	f9 01       	movw	r30, r18
 52c:	20 81       	ld	r18, Z
 52e:	20 64       	ori	r18, 0x40	; 64
 530:	fc 01       	movw	r30, r24
 532:	20 83       	st	Z, r18
	
	SPCR0 |= (1<<SPE0);
 534:	8c e4       	ldi	r24, 0x4C	; 76
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	2c e4       	ldi	r18, 0x4C	; 76
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	f9 01       	movw	r30, r18
 53e:	20 81       	ld	r18, Z
 540:	20 64       	ori	r18, 0x40	; 64
 542:	fc 01       	movw	r30, r24
 544:	20 83       	st	Z, r18
}
 546:	00 00       	nop
 548:	0f 90       	pop	r0
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	08 95       	ret

00000550 <spiPcInt>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiPcInt(void)
{
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	cd b7       	in	r28, 0x3d	; 61
 556:	de b7       	in	r29, 0x3e	; 62
	PCICR |= (1<<PCIE1);
 558:	88 e6       	ldi	r24, 0x68	; 104
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	28 e6       	ldi	r18, 0x68	; 104
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	f9 01       	movw	r30, r18
 562:	20 81       	ld	r18, Z
 564:	22 60       	ori	r18, 0x02	; 2
 566:	fc 01       	movw	r30, r24
 568:	20 83       	st	Z, r18
	PCIFR = (1<<PCIF1);
 56a:	8b e3       	ldi	r24, 0x3B	; 59
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	22 e0       	ldi	r18, 0x02	; 2
 570:	fc 01       	movw	r30, r24
 572:	20 83       	st	Z, r18
	PCMSK1 |= (1<<PCINT12);
 574:	8c e6       	ldi	r24, 0x6C	; 108
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	2c e6       	ldi	r18, 0x6C	; 108
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	f9 01       	movw	r30, r18
 57e:	20 81       	ld	r18, Z
 580:	20 61       	ori	r18, 0x10	; 16
 582:	fc 01       	movw	r30, r24
 584:	20 83       	st	Z, r18
 586:	00 00       	nop
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	08 95       	ret

0000058e <portInit>:
 * @return 8bit analog value
 *****************************************************************************/
uint8_t adcGetValue(void)
{
	return(ADCH);
}
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	cd b7       	in	r28, 0x3d	; 61
 594:	de b7       	in	r29, 0x3e	; 62
 596:	8a e2       	ldi	r24, 0x2A	; 42
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	2a e2       	ldi	r18, 0x2A	; 42
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	f9 01       	movw	r30, r18
 5a0:	20 81       	ld	r18, Z
 5a2:	20 63       	ori	r18, 0x30	; 48
 5a4:	fc 01       	movw	r30, r24
 5a6:	20 83       	st	Z, r18
 5a8:	8b e2       	ldi	r24, 0x2B	; 43
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	2b e2       	ldi	r18, 0x2B	; 43
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	f9 01       	movw	r30, r18
 5b2:	20 81       	ld	r18, Z
 5b4:	20 62       	ori	r18, 0x20	; 32
 5b6:	fc 01       	movw	r30, r24
 5b8:	20 83       	st	Z, r18
 5ba:	8b e2       	ldi	r24, 0x2B	; 43
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	2b e2       	ldi	r18, 0x2B	; 43
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	f9 01       	movw	r30, r18
 5c4:	20 81       	ld	r18, Z
 5c6:	2f 7e       	andi	r18, 0xEF	; 239
 5c8:	fc 01       	movw	r30, r24
 5ca:	20 83       	st	Z, r18
 5cc:	8a e2       	ldi	r24, 0x2A	; 42
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	2a e2       	ldi	r18, 0x2A	; 42
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	f9 01       	movw	r30, r18
 5d6:	20 81       	ld	r18, Z
 5d8:	20 68       	ori	r18, 0x80	; 128
 5da:	fc 01       	movw	r30, r24
 5dc:	20 83       	st	Z, r18
 5de:	8b e2       	ldi	r24, 0x2B	; 43
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	2b e2       	ldi	r18, 0x2B	; 43
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	f9 01       	movw	r30, r18
 5e8:	20 81       	ld	r18, Z
 5ea:	20 68       	ori	r18, 0x80	; 128
 5ec:	fc 01       	movw	r30, r24
 5ee:	20 83       	st	Z, r18
 5f0:	8a e2       	ldi	r24, 0x2A	; 42
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	2a e2       	ldi	r18, 0x2A	; 42
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	f9 01       	movw	r30, r18
 5fa:	20 81       	ld	r18, Z
 5fc:	2f 7b       	andi	r18, 0xBF	; 191
 5fe:	fc 01       	movw	r30, r24
 600:	20 83       	st	Z, r18
 602:	8a e2       	ldi	r24, 0x2A	; 42
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	2a e2       	ldi	r18, 0x2A	; 42
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	f9 01       	movw	r30, r18
 60c:	20 81       	ld	r18, Z
 60e:	2c 7f       	andi	r18, 0xFC	; 252
 610:	fc 01       	movw	r30, r24
 612:	20 83       	st	Z, r18
 614:	8b e2       	ldi	r24, 0x2B	; 43
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	2b e2       	ldi	r18, 0x2B	; 43
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	f9 01       	movw	r30, r18
 61e:	20 81       	ld	r18, Z
 620:	21 60       	ori	r18, 0x01	; 1
 622:	fc 01       	movw	r30, r24
 624:	20 83       	st	Z, r18
 626:	81 e2       	ldi	r24, 0x21	; 33
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	21 e2       	ldi	r18, 0x21	; 33
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	f9 01       	movw	r30, r18
 630:	20 81       	ld	r18, Z
 632:	2e 7f       	andi	r18, 0xFE	; 254
 634:	fc 01       	movw	r30, r24
 636:	20 83       	st	Z, r18
 638:	82 e2       	ldi	r24, 0x22	; 34
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	22 e2       	ldi	r18, 0x22	; 34
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	f9 01       	movw	r30, r18
 642:	20 81       	ld	r18, Z
 644:	2e 7f       	andi	r18, 0xFE	; 254
 646:	fc 01       	movw	r30, r24
 648:	20 83       	st	Z, r18
 64a:	8e e7       	ldi	r24, 0x7E	; 126
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	2e e7       	ldi	r18, 0x7E	; 126
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	f9 01       	movw	r30, r18
 654:	20 81       	ld	r18, Z
 656:	21 60       	ori	r18, 0x01	; 1
 658:	fc 01       	movw	r30, r24
 65a:	20 83       	st	Z, r18
 65c:	81 e2       	ldi	r24, 0x21	; 33
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	21 e2       	ldi	r18, 0x21	; 33
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	f9 01       	movw	r30, r18
 666:	20 81       	ld	r18, Z
 668:	21 7f       	andi	r18, 0xF1	; 241
 66a:	fc 01       	movw	r30, r24
 66c:	20 83       	st	Z, r18
 66e:	82 e2       	ldi	r24, 0x22	; 34
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	22 e2       	ldi	r18, 0x22	; 34
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	f9 01       	movw	r30, r18
 678:	20 81       	ld	r18, Z
 67a:	2e 60       	ori	r18, 0x0E	; 14
 67c:	fc 01       	movw	r30, r24
 67e:	20 83       	st	Z, r18
 680:	87 e2       	ldi	r24, 0x27	; 39
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	fc 01       	movw	r30, r24
 686:	80 81       	ld	r24, Z
 688:	87 e2       	ldi	r24, 0x27	; 39
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	fc 01       	movw	r30, r24
 68e:	10 82       	st	Z, r1
 690:	88 e2       	ldi	r24, 0x28	; 40
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	fc 01       	movw	r30, r24
 696:	80 81       	ld	r24, Z
 698:	88 e2       	ldi	r24, 0x28	; 40
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	2f ef       	ldi	r18, 0xFF	; 255
 69e:	fc 01       	movw	r30, r24
 6a0:	20 83       	st	Z, r18
 6a2:	00 00       	nop
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	08 95       	ret

000006aa <enablePLED>:
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
 6ae:	cd b7       	in	r28, 0x3d	; 61
 6b0:	de b7       	in	r29, 0x3e	; 62
 6b2:	8b e2       	ldi	r24, 0x2B	; 43
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	2b e2       	ldi	r18, 0x2B	; 43
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	f9 01       	movw	r30, r18
 6bc:	20 81       	ld	r18, Z
 6be:	2f 7d       	andi	r18, 0xDF	; 223
 6c0:	fc 01       	movw	r30, r24
 6c2:	20 83       	st	Z, r18
 6c4:	00 00       	nop
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	08 95       	ret

000006cc <disablePLED>:
 6cc:	cf 93       	push	r28
 6ce:	df 93       	push	r29
 6d0:	cd b7       	in	r28, 0x3d	; 61
 6d2:	de b7       	in	r29, 0x3e	; 62
 6d4:	8b e2       	ldi	r24, 0x2B	; 43
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	2b e2       	ldi	r18, 0x2B	; 43
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	f9 01       	movw	r30, r18
 6de:	20 81       	ld	r18, Z
 6e0:	20 62       	ori	r18, 0x20	; 32
 6e2:	fc 01       	movw	r30, r24
 6e4:	20 83       	st	Z, r18
 6e6:	00 00       	nop
 6e8:	df 91       	pop	r29
 6ea:	cf 91       	pop	r28
 6ec:	08 95       	ret

000006ee <standbyAudio>:
 6ee:	cf 93       	push	r28
 6f0:	df 93       	push	r29
 6f2:	cd b7       	in	r28, 0x3d	; 61
 6f4:	de b7       	in	r29, 0x3e	; 62
 6f6:	8b e2       	ldi	r24, 0x2B	; 43
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	2b e2       	ldi	r18, 0x2B	; 43
 6fc:	30 e0       	ldi	r19, 0x00	; 0
 6fe:	f9 01       	movw	r30, r18
 700:	20 81       	ld	r18, Z
 702:	20 68       	ori	r18, 0x80	; 128
 704:	fc 01       	movw	r30, r24
 706:	20 83       	st	Z, r18
 708:	8a e2       	ldi	r24, 0x2A	; 42
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	2a e2       	ldi	r18, 0x2A	; 42
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	f9 01       	movw	r30, r18
 712:	20 81       	ld	r18, Z
 714:	27 60       	ori	r18, 0x07	; 7
 716:	fc 01       	movw	r30, r24
 718:	20 83       	st	Z, r18
 71a:	00 00       	nop
 71c:	df 91       	pop	r29
 71e:	cf 91       	pop	r28
 720:	08 95       	ret

00000722 <enableAudio>:
 722:	cf 93       	push	r28
 724:	df 93       	push	r29
 726:	cd b7       	in	r28, 0x3d	; 61
 728:	de b7       	in	r29, 0x3e	; 62
 72a:	8b e2       	ldi	r24, 0x2B	; 43
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	2b e2       	ldi	r18, 0x2B	; 43
 730:	30 e0       	ldi	r19, 0x00	; 0
 732:	f9 01       	movw	r30, r18
 734:	20 81       	ld	r18, Z
 736:	2f 77       	andi	r18, 0x7F	; 127
 738:	fc 01       	movw	r30, r24
 73a:	20 83       	st	Z, r18
 73c:	8a e2       	ldi	r24, 0x2A	; 42
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	2a e2       	ldi	r18, 0x2A	; 42
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	f9 01       	movw	r30, r18
 746:	20 81       	ld	r18, Z
 748:	27 60       	ori	r18, 0x07	; 7
 74a:	fc 01       	movw	r30, r24
 74c:	20 83       	st	Z, r18
 74e:	00 00       	nop
 750:	df 91       	pop	r29
 752:	cf 91       	pop	r28
 754:	08 95       	ret

00000756 <incVolume>:
 756:	cf 93       	push	r28
 758:	df 93       	push	r29
 75a:	00 d0       	rcall	.+0      	; 0x75c <incVolume+0x6>
 75c:	cd b7       	in	r28, 0x3d	; 61
 75e:	de b7       	in	r29, 0x3e	; 62
 760:	8a 83       	std	Y+2, r24	; 0x02
 762:	8b e2       	ldi	r24, 0x2B	; 43
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	2b e2       	ldi	r18, 0x2B	; 43
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	f9 01       	movw	r30, r18
 76c:	20 81       	ld	r18, Z
 76e:	20 64       	ori	r18, 0x40	; 64
 770:	fc 01       	movw	r30, r24
 772:	20 83       	st	Z, r18
 774:	19 82       	std	Y+1, r1	; 0x01
 776:	15 c0       	rjmp	.+42     	; 0x7a2 <incVolume+0x4c>
 778:	8a e2       	ldi	r24, 0x2A	; 42
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	2a e2       	ldi	r18, 0x2A	; 42
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	f9 01       	movw	r30, r18
 782:	20 81       	ld	r18, Z
 784:	20 64       	ori	r18, 0x40	; 64
 786:	fc 01       	movw	r30, r24
 788:	20 83       	st	Z, r18
 78a:	8a e2       	ldi	r24, 0x2A	; 42
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	2a e2       	ldi	r18, 0x2A	; 42
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	f9 01       	movw	r30, r18
 794:	20 81       	ld	r18, Z
 796:	2f 7b       	andi	r18, 0xBF	; 191
 798:	fc 01       	movw	r30, r24
 79a:	20 83       	st	Z, r18
 79c:	89 81       	ldd	r24, Y+1	; 0x01
 79e:	8f 5f       	subi	r24, 0xFF	; 255
 7a0:	89 83       	std	Y+1, r24	; 0x01
 7a2:	99 81       	ldd	r25, Y+1	; 0x01
 7a4:	8a 81       	ldd	r24, Y+2	; 0x02
 7a6:	98 17       	cp	r25, r24
 7a8:	38 f3       	brcs	.-50     	; 0x778 <incVolume+0x22>
 7aa:	00 00       	nop
 7ac:	0f 90       	pop	r0
 7ae:	0f 90       	pop	r0
 7b0:	df 91       	pop	r29
 7b2:	cf 91       	pop	r28
 7b4:	08 95       	ret

000007b6 <decVolume>:
 7b6:	cf 93       	push	r28
 7b8:	df 93       	push	r29
 7ba:	00 d0       	rcall	.+0      	; 0x7bc <decVolume+0x6>
 7bc:	cd b7       	in	r28, 0x3d	; 61
 7be:	de b7       	in	r29, 0x3e	; 62
 7c0:	8a 83       	std	Y+2, r24	; 0x02
 7c2:	8b e2       	ldi	r24, 0x2B	; 43
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	2b e2       	ldi	r18, 0x2B	; 43
 7c8:	30 e0       	ldi	r19, 0x00	; 0
 7ca:	f9 01       	movw	r30, r18
 7cc:	20 81       	ld	r18, Z
 7ce:	2f 7b       	andi	r18, 0xBF	; 191
 7d0:	fc 01       	movw	r30, r24
 7d2:	20 83       	st	Z, r18
 7d4:	19 82       	std	Y+1, r1	; 0x01
 7d6:	15 c0       	rjmp	.+42     	; 0x802 <decVolume+0x4c>
 7d8:	8a e2       	ldi	r24, 0x2A	; 42
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	2a e2       	ldi	r18, 0x2A	; 42
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	f9 01       	movw	r30, r18
 7e2:	20 81       	ld	r18, Z
 7e4:	20 64       	ori	r18, 0x40	; 64
 7e6:	fc 01       	movw	r30, r24
 7e8:	20 83       	st	Z, r18
 7ea:	8a e2       	ldi	r24, 0x2A	; 42
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	2a e2       	ldi	r18, 0x2A	; 42
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	f9 01       	movw	r30, r18
 7f4:	20 81       	ld	r18, Z
 7f6:	2f 7b       	andi	r18, 0xBF	; 191
 7f8:	fc 01       	movw	r30, r24
 7fa:	20 83       	st	Z, r18
 7fc:	89 81       	ldd	r24, Y+1	; 0x01
 7fe:	8f 5f       	subi	r24, 0xFF	; 255
 800:	89 83       	std	Y+1, r24	; 0x01
 802:	99 81       	ldd	r25, Y+1	; 0x01
 804:	8a 81       	ldd	r24, Y+2	; 0x02
 806:	98 17       	cp	r25, r24
 808:	38 f3       	brcs	.-50     	; 0x7d8 <decVolume+0x22>
 80a:	00 00       	nop
 80c:	0f 90       	pop	r0
 80e:	0f 90       	pop	r0
 810:	df 91       	pop	r29
 812:	cf 91       	pop	r28
 814:	08 95       	ret

00000816 <setVolume>:
 816:	cf 93       	push	r28
 818:	df 93       	push	r29
 81a:	1f 92       	push	r1
 81c:	cd b7       	in	r28, 0x3d	; 61
 81e:	de b7       	in	r29, 0x3e	; 62
 820:	89 83       	std	Y+1, r24	; 0x01
 822:	89 81       	ldd	r24, Y+1	; 0x01
 824:	81 34       	cpi	r24, 0x41	; 65
 826:	10 f0       	brcs	.+4      	; 0x82c <setVolume+0x16>
 828:	80 e4       	ldi	r24, 0x40	; 64
 82a:	89 83       	std	Y+1, r24	; 0x01
 82c:	80 e4       	ldi	r24, 0x40	; 64
 82e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <decVolume>
 832:	89 81       	ldd	r24, Y+1	; 0x01
 834:	0e 94 ab 03 	call	0x756	; 0x756 <incVolume>
 838:	00 00       	nop
 83a:	0f 90       	pop	r0
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	08 95       	ret

00000842 <initAudio>:
 842:	cf 93       	push	r28
 844:	df 93       	push	r29
 846:	cd b7       	in	r28, 0x3d	; 61
 848:	de b7       	in	r29, 0x3e	; 62
 84a:	0e 94 91 03 	call	0x722	; 0x722 <enableAudio>
 84e:	80 e4       	ldi	r24, 0x40	; 64
 850:	0e 94 db 03 	call	0x7b6	; 0x7b6 <decVolume>
 854:	0e 94 77 03 	call	0x6ee	; 0x6ee <standbyAudio>
 858:	00 00       	nop
 85a:	df 91       	pop	r29
 85c:	cf 91       	pop	r28
 85e:	08 95       	ret

00000860 <initPWM>:
 860:	8f 92       	push	r8
 862:	9f 92       	push	r9
 864:	af 92       	push	r10
 866:	bf 92       	push	r11
 868:	cf 92       	push	r12
 86a:	df 92       	push	r13
 86c:	ef 92       	push	r14
 86e:	ff 92       	push	r15
 870:	0f 93       	push	r16
 872:	1f 93       	push	r17
 874:	cf 93       	push	r28
 876:	df 93       	push	r29
 878:	1f 92       	push	r1
 87a:	cd b7       	in	r28, 0x3d	; 61
 87c:	de b7       	in	r29, 0x3e	; 62
 87e:	89 83       	std	Y+1, r24	; 0x01
 880:	89 81       	ldd	r24, Y+1	; 0x01
 882:	85 36       	cpi	r24, 0x65	; 101
 884:	10 f0       	brcs	.+4      	; 0x88a <initPWM+0x2a>
 886:	84 e6       	ldi	r24, 0x64	; 100
 888:	89 83       	std	Y+1, r24	; 0x01
 88a:	80 e8       	ldi	r24, 0x80	; 128
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	22 e2       	ldi	r18, 0x22	; 34
 890:	fc 01       	movw	r30, r24
 892:	20 83       	st	Z, r18
 894:	81 e8       	ldi	r24, 0x81	; 129
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	28 e0       	ldi	r18, 0x08	; 8
 89a:	fc 01       	movw	r30, r24
 89c:	20 83       	st	Z, r18
 89e:	84 e8       	ldi	r24, 0x84	; 132
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	fc 01       	movw	r30, r24
 8a4:	11 82       	std	Z+1, r1	; 0x01
 8a6:	10 82       	st	Z, r1
 8a8:	0f 2e       	mov	r0, r31
 8aa:	fa e8       	ldi	r31, 0x8A	; 138
 8ac:	8f 2e       	mov	r8, r31
 8ae:	91 2c       	mov	r9, r1
 8b0:	f0 2d       	mov	r31, r0
 8b2:	89 81       	ldd	r24, Y+1	; 0x01
 8b4:	88 2f       	mov	r24, r24
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	a0 e0       	ldi	r26, 0x00	; 0
 8ba:	b0 e0       	ldi	r27, 0x00	; 0
 8bc:	1f 92       	push	r1
 8be:	1f 92       	push	r1
 8c0:	21 e0       	ldi	r18, 0x01	; 1
 8c2:	2f 93       	push	r18
 8c4:	2f ef       	ldi	r18, 0xFF	; 255
 8c6:	2f 93       	push	r18
 8c8:	a1 2c       	mov	r10, r1
 8ca:	b1 2c       	mov	r11, r1
 8cc:	65 01       	movw	r12, r10
 8ce:	14 e6       	ldi	r17, 0x64	; 100
 8d0:	e1 2e       	mov	r14, r17
 8d2:	f1 2c       	mov	r15, r1
 8d4:	00 e0       	ldi	r16, 0x00	; 0
 8d6:	10 e0       	ldi	r17, 0x00	; 0
 8d8:	20 e0       	ldi	r18, 0x00	; 0
 8da:	30 e0       	ldi	r19, 0x00	; 0
 8dc:	a9 01       	movw	r20, r18
 8de:	bc 01       	movw	r22, r24
 8e0:	cd 01       	movw	r24, r26
 8e2:	0e 94 48 05 	call	0xa90	; 0xa90 <Map>
 8e6:	0f 90       	pop	r0
 8e8:	0f 90       	pop	r0
 8ea:	0f 90       	pop	r0
 8ec:	0f 90       	pop	r0
 8ee:	dc 01       	movw	r26, r24
 8f0:	cb 01       	movw	r24, r22
 8f2:	f4 01       	movw	r30, r8
 8f4:	91 83       	std	Z+1, r25	; 0x01
 8f6:	80 83       	st	Z, r24
 8f8:	8f e6       	ldi	r24, 0x6F	; 111
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	fc 01       	movw	r30, r24
 8fe:	10 82       	st	Z, r1
 900:	00 00       	nop
 902:	0f 90       	pop	r0
 904:	df 91       	pop	r29
 906:	cf 91       	pop	r28
 908:	1f 91       	pop	r17
 90a:	0f 91       	pop	r16
 90c:	ff 90       	pop	r15
 90e:	ef 90       	pop	r14
 910:	df 90       	pop	r13
 912:	cf 90       	pop	r12
 914:	bf 90       	pop	r11
 916:	af 90       	pop	r10
 918:	9f 90       	pop	r9
 91a:	8f 90       	pop	r8
 91c:	08 95       	ret

0000091e <startPWM>:
 91e:	cf 93       	push	r28
 920:	df 93       	push	r29
 922:	cd b7       	in	r28, 0x3d	; 61
 924:	de b7       	in	r29, 0x3e	; 62
 926:	81 e8       	ldi	r24, 0x81	; 129
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	21 e8       	ldi	r18, 0x81	; 129
 92c:	30 e0       	ldi	r19, 0x00	; 0
 92e:	f9 01       	movw	r30, r18
 930:	20 81       	ld	r18, Z
 932:	21 60       	ori	r18, 0x01	; 1
 934:	fc 01       	movw	r30, r24
 936:	20 83       	st	Z, r18
 938:	00 00       	nop
 93a:	df 91       	pop	r29
 93c:	cf 91       	pop	r28
 93e:	08 95       	ret

00000940 <setDuty>:
 940:	8f 92       	push	r8
 942:	9f 92       	push	r9
 944:	af 92       	push	r10
 946:	bf 92       	push	r11
 948:	cf 92       	push	r12
 94a:	df 92       	push	r13
 94c:	ef 92       	push	r14
 94e:	ff 92       	push	r15
 950:	0f 93       	push	r16
 952:	1f 93       	push	r17
 954:	cf 93       	push	r28
 956:	df 93       	push	r29
 958:	1f 92       	push	r1
 95a:	cd b7       	in	r28, 0x3d	; 61
 95c:	de b7       	in	r29, 0x3e	; 62
 95e:	89 83       	std	Y+1, r24	; 0x01
 960:	89 81       	ldd	r24, Y+1	; 0x01
 962:	85 36       	cpi	r24, 0x65	; 101
 964:	10 f0       	brcs	.+4      	; 0x96a <setDuty+0x2a>
 966:	84 e6       	ldi	r24, 0x64	; 100
 968:	89 83       	std	Y+1, r24	; 0x01
 96a:	0f 2e       	mov	r0, r31
 96c:	fa e8       	ldi	r31, 0x8A	; 138
 96e:	8f 2e       	mov	r8, r31
 970:	91 2c       	mov	r9, r1
 972:	f0 2d       	mov	r31, r0
 974:	89 81       	ldd	r24, Y+1	; 0x01
 976:	88 2f       	mov	r24, r24
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	a0 e0       	ldi	r26, 0x00	; 0
 97c:	b0 e0       	ldi	r27, 0x00	; 0
 97e:	1f 92       	push	r1
 980:	1f 92       	push	r1
 982:	21 e0       	ldi	r18, 0x01	; 1
 984:	2f 93       	push	r18
 986:	2f ef       	ldi	r18, 0xFF	; 255
 988:	2f 93       	push	r18
 98a:	a1 2c       	mov	r10, r1
 98c:	b1 2c       	mov	r11, r1
 98e:	65 01       	movw	r12, r10
 990:	14 e6       	ldi	r17, 0x64	; 100
 992:	e1 2e       	mov	r14, r17
 994:	f1 2c       	mov	r15, r1
 996:	00 e0       	ldi	r16, 0x00	; 0
 998:	10 e0       	ldi	r17, 0x00	; 0
 99a:	20 e0       	ldi	r18, 0x00	; 0
 99c:	30 e0       	ldi	r19, 0x00	; 0
 99e:	a9 01       	movw	r20, r18
 9a0:	bc 01       	movw	r22, r24
 9a2:	cd 01       	movw	r24, r26
 9a4:	0e 94 48 05 	call	0xa90	; 0xa90 <Map>
 9a8:	0f 90       	pop	r0
 9aa:	0f 90       	pop	r0
 9ac:	0f 90       	pop	r0
 9ae:	0f 90       	pop	r0
 9b0:	dc 01       	movw	r26, r24
 9b2:	cb 01       	movw	r24, r22
 9b4:	f4 01       	movw	r30, r8
 9b6:	91 83       	std	Z+1, r25	; 0x01
 9b8:	80 83       	st	Z, r24
 9ba:	00 00       	nop
 9bc:	0f 90       	pop	r0
 9be:	df 91       	pop	r29
 9c0:	cf 91       	pop	r28
 9c2:	1f 91       	pop	r17
 9c4:	0f 91       	pop	r16
 9c6:	ff 90       	pop	r15
 9c8:	ef 90       	pop	r14
 9ca:	df 90       	pop	r13
 9cc:	cf 90       	pop	r12
 9ce:	bf 90       	pop	r11
 9d0:	af 90       	pop	r10
 9d2:	9f 90       	pop	r9
 9d4:	8f 90       	pop	r8
 9d6:	08 95       	ret

000009d8 <wait_1ms>:
 *
 * @param [in] uiFactor: 1ms multiplier
 * @return no return value
 *****************************************************************************/
void wait_1ms(uint16_t uiFactor)
{
 9d8:	cf 93       	push	r28
 9da:	df 93       	push	r29
 9dc:	00 d0       	rcall	.+0      	; 0x9de <wait_1ms+0x6>
 9de:	00 d0       	rcall	.+0      	; 0x9e0 <wait_1ms+0x8>
 9e0:	cd b7       	in	r28, 0x3d	; 61
 9e2:	de b7       	in	r29, 0x3e	; 62
 9e4:	9c 83       	std	Y+4, r25	; 0x04
 9e6:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t i;
	TCCR0A = (1<<WGM01);	// mode: CTC
 9e8:	84 e4       	ldi	r24, 0x44	; 68
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	22 e0       	ldi	r18, 0x02	; 2
 9ee:	fc 01       	movw	r30, r24
 9f0:	20 83       	st	Z, r18
	TCCR0B = 0;				// mode: CTC
 9f2:	85 e4       	ldi	r24, 0x45	; 69
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	fc 01       	movw	r30, r24
 9f8:	10 82       	st	Z, r1
	TIFR0 =  (1<<OCF0A);	// only OCFA flag needs to be cleared
 9fa:	85 e3       	ldi	r24, 0x35	; 53
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	22 e0       	ldi	r18, 0x02	; 2
 a00:	fc 01       	movw	r30, r24
 a02:	20 83       	st	Z, r18
	TIMSK0 = 0;				// no interrupts
 a04:	8e e6       	ldi	r24, 0x6E	; 110
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	fc 01       	movw	r30, r24
 a0a:	10 82       	st	Z, r1
	TCNT0 = 0;
 a0c:	86 e4       	ldi	r24, 0x46	; 70
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	fc 01       	movw	r30, r24
 a12:	10 82       	st	Z, r1
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
 a14:	87 e4       	ldi	r24, 0x47	; 71
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	2d e4       	ldi	r18, 0x4D	; 77
 a1a:	fc 01       	movw	r30, r24
 a1c:	20 83       	st	Z, r18
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
 a1e:	85 e4       	ldi	r24, 0x45	; 69
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	25 e4       	ldi	r18, 0x45	; 69
 a24:	30 e0       	ldi	r19, 0x00	; 0
 a26:	f9 01       	movw	r30, r18
 a28:	20 81       	ld	r18, Z
 a2a:	24 60       	ori	r18, 0x04	; 4
 a2c:	fc 01       	movw	r30, r24
 a2e:	20 83       	st	Z, r18
	
	for(i=0;i<uiFactor;i++)
 a30:	1a 82       	std	Y+2, r1	; 0x02
 a32:	19 82       	std	Y+1, r1	; 0x01
 a34:	15 c0       	rjmp	.+42     	; 0xa60 <wait_1ms+0x88>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
 a36:	00 00       	nop
 a38:	85 e3       	ldi	r24, 0x35	; 53
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	fc 01       	movw	r30, r24
 a3e:	80 81       	ld	r24, Z
 a40:	88 2f       	mov	r24, r24
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	82 70       	andi	r24, 0x02	; 2
 a46:	99 27       	eor	r25, r25
 a48:	89 2b       	or	r24, r25
 a4a:	b1 f3       	breq	.-20     	; 0xa38 <wait_1ms+0x60>
		TIFR0 =  (1<<OCF0A);		// clear flag
 a4c:	85 e3       	ldi	r24, 0x35	; 53
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	22 e0       	ldi	r18, 0x02	; 2
 a52:	fc 01       	movw	r30, r24
 a54:	20 83       	st	Z, r18
	TCNT0 = 0;
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
	
	for(i=0;i<uiFactor;i++)
 a56:	89 81       	ldd	r24, Y+1	; 0x01
 a58:	9a 81       	ldd	r25, Y+2	; 0x02
 a5a:	01 96       	adiw	r24, 0x01	; 1
 a5c:	9a 83       	std	Y+2, r25	; 0x02
 a5e:	89 83       	std	Y+1, r24	; 0x01
 a60:	29 81       	ldd	r18, Y+1	; 0x01
 a62:	3a 81       	ldd	r19, Y+2	; 0x02
 a64:	8b 81       	ldd	r24, Y+3	; 0x03
 a66:	9c 81       	ldd	r25, Y+4	; 0x04
 a68:	28 17       	cp	r18, r24
 a6a:	39 07       	cpc	r19, r25
 a6c:	20 f3       	brcs	.-56     	; 0xa36 <wait_1ms+0x5e>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
		TIFR0 =  (1<<OCF0A);		// clear flag
	}
	TCCR0B &= ~(0x07);	// set prescaler to 0 (stop timer)
 a6e:	85 e4       	ldi	r24, 0x45	; 69
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	25 e4       	ldi	r18, 0x45	; 69
 a74:	30 e0       	ldi	r19, 0x00	; 0
 a76:	f9 01       	movw	r30, r18
 a78:	20 81       	ld	r18, Z
 a7a:	28 7f       	andi	r18, 0xF8	; 248
 a7c:	fc 01       	movw	r30, r24
 a7e:	20 83       	st	Z, r18
}
 a80:	00 00       	nop
 a82:	0f 90       	pop	r0
 a84:	0f 90       	pop	r0
 a86:	0f 90       	pop	r0
 a88:	0f 90       	pop	r0
 a8a:	df 91       	pop	r29
 a8c:	cf 91       	pop	r28
 a8e:	08 95       	ret

00000a90 <Map>:
 * @param [in] OutMin: minimal value of output range
 * @param [in] OutMax: maximal value of output range
 * @return data in new number range
 *****************************************************************************/
int32_t Map(int32_t lData, int32_t InMin, int32_t InMax, int32_t OutMin, int32_t OutMax)
{
 a90:	af 92       	push	r10
 a92:	bf 92       	push	r11
 a94:	cf 92       	push	r12
 a96:	df 92       	push	r13
 a98:	ef 92       	push	r14
 a9a:	ff 92       	push	r15
 a9c:	0f 93       	push	r16
 a9e:	1f 93       	push	r17
 aa0:	cf 93       	push	r28
 aa2:	df 93       	push	r29
 aa4:	cd b7       	in	r28, 0x3d	; 61
 aa6:	de b7       	in	r29, 0x3e	; 62
 aa8:	60 97       	sbiw	r28, 0x10	; 16
 aaa:	0f b6       	in	r0, 0x3f	; 63
 aac:	f8 94       	cli
 aae:	de bf       	out	0x3e, r29	; 62
 ab0:	0f be       	out	0x3f, r0	; 63
 ab2:	cd bf       	out	0x3d, r28	; 61
 ab4:	69 83       	std	Y+1, r22	; 0x01
 ab6:	7a 83       	std	Y+2, r23	; 0x02
 ab8:	8b 83       	std	Y+3, r24	; 0x03
 aba:	9c 83       	std	Y+4, r25	; 0x04
 abc:	2d 83       	std	Y+5, r18	; 0x05
 abe:	3e 83       	std	Y+6, r19	; 0x06
 ac0:	4f 83       	std	Y+7, r20	; 0x07
 ac2:	58 87       	std	Y+8, r21	; 0x08
 ac4:	e9 86       	std	Y+9, r14	; 0x09
 ac6:	fa 86       	std	Y+10, r15	; 0x0a
 ac8:	0b 87       	std	Y+11, r16	; 0x0b
 aca:	1c 87       	std	Y+12, r17	; 0x0c
 acc:	ad 86       	std	Y+13, r10	; 0x0d
 ace:	be 86       	std	Y+14, r11	; 0x0e
 ad0:	cf 86       	std	Y+15, r12	; 0x0f
 ad2:	d8 8a       	std	Y+16, r13	; 0x10
	return((lData-InMin)*(OutMax-OutMin)/(InMax-InMin)+OutMin);
 ad4:	29 81       	ldd	r18, Y+1	; 0x01
 ad6:	3a 81       	ldd	r19, Y+2	; 0x02
 ad8:	4b 81       	ldd	r20, Y+3	; 0x03
 ada:	5c 81       	ldd	r21, Y+4	; 0x04
 adc:	8d 81       	ldd	r24, Y+5	; 0x05
 ade:	9e 81       	ldd	r25, Y+6	; 0x06
 ae0:	af 81       	ldd	r26, Y+7	; 0x07
 ae2:	b8 85       	ldd	r27, Y+8	; 0x08
 ae4:	79 01       	movw	r14, r18
 ae6:	8a 01       	movw	r16, r20
 ae8:	e8 1a       	sub	r14, r24
 aea:	f9 0a       	sbc	r15, r25
 aec:	0a 0b       	sbc	r16, r26
 aee:	1b 0b       	sbc	r17, r27
 af0:	2d 8d       	ldd	r18, Y+29	; 0x1d
 af2:	3e 8d       	ldd	r19, Y+30	; 0x1e
 af4:	4f 8d       	ldd	r20, Y+31	; 0x1f
 af6:	58 a1       	ldd	r21, Y+32	; 0x20
 af8:	8d 85       	ldd	r24, Y+13	; 0x0d
 afa:	9e 85       	ldd	r25, Y+14	; 0x0e
 afc:	af 85       	ldd	r26, Y+15	; 0x0f
 afe:	b8 89       	ldd	r27, Y+16	; 0x10
 b00:	59 01       	movw	r10, r18
 b02:	6a 01       	movw	r12, r20
 b04:	a8 1a       	sub	r10, r24
 b06:	b9 0a       	sbc	r11, r25
 b08:	ca 0a       	sbc	r12, r26
 b0a:	db 0a       	sbc	r13, r27
 b0c:	d6 01       	movw	r26, r12
 b0e:	c5 01       	movw	r24, r10
 b10:	a8 01       	movw	r20, r16
 b12:	97 01       	movw	r18, r14
 b14:	bc 01       	movw	r22, r24
 b16:	cd 01       	movw	r24, r26
 b18:	0e 94 04 06 	call	0xc08	; 0xc08 <__mulsi3>
 b1c:	7b 01       	movw	r14, r22
 b1e:	8c 01       	movw	r16, r24
 b20:	29 85       	ldd	r18, Y+9	; 0x09
 b22:	3a 85       	ldd	r19, Y+10	; 0x0a
 b24:	4b 85       	ldd	r20, Y+11	; 0x0b
 b26:	5c 85       	ldd	r21, Y+12	; 0x0c
 b28:	8d 81       	ldd	r24, Y+5	; 0x05
 b2a:	9e 81       	ldd	r25, Y+6	; 0x06
 b2c:	af 81       	ldd	r26, Y+7	; 0x07
 b2e:	b8 85       	ldd	r27, Y+8	; 0x08
 b30:	28 1b       	sub	r18, r24
 b32:	39 0b       	sbc	r19, r25
 b34:	4a 0b       	sbc	r20, r26
 b36:	5b 0b       	sbc	r21, r27
 b38:	c8 01       	movw	r24, r16
 b3a:	b7 01       	movw	r22, r14
 b3c:	0e 94 14 06 	call	0xc28	; 0xc28 <__divmodsi4>
 b40:	da 01       	movw	r26, r20
 b42:	c9 01       	movw	r24, r18
 b44:	9c 01       	movw	r18, r24
 b46:	ad 01       	movw	r20, r26
 b48:	8d 85       	ldd	r24, Y+13	; 0x0d
 b4a:	9e 85       	ldd	r25, Y+14	; 0x0e
 b4c:	af 85       	ldd	r26, Y+15	; 0x0f
 b4e:	b8 89       	ldd	r27, Y+16	; 0x10
 b50:	82 0f       	add	r24, r18
 b52:	93 1f       	adc	r25, r19
 b54:	a4 1f       	adc	r26, r20
 b56:	b5 1f       	adc	r27, r21
}
 b58:	bc 01       	movw	r22, r24
 b5a:	cd 01       	movw	r24, r26
 b5c:	60 96       	adiw	r28, 0x10	; 16
 b5e:	0f b6       	in	r0, 0x3f	; 63
 b60:	f8 94       	cli
 b62:	de bf       	out	0x3e, r29	; 62
 b64:	0f be       	out	0x3f, r0	; 63
 b66:	cd bf       	out	0x3d, r28	; 61
 b68:	df 91       	pop	r29
 b6a:	cf 91       	pop	r28
 b6c:	1f 91       	pop	r17
 b6e:	0f 91       	pop	r16
 b70:	ff 90       	pop	r15
 b72:	ef 90       	pop	r14
 b74:	df 90       	pop	r13
 b76:	cf 90       	pop	r12
 b78:	bf 90       	pop	r11
 b7a:	af 90       	pop	r10
 b7c:	08 95       	ret

00000b7e <CRC8>:

uint8_t CRC8(uint8_t* au8Data, uint8_t u8Length)
{
 b7e:	cf 93       	push	r28
 b80:	df 93       	push	r29
 b82:	cd b7       	in	r28, 0x3d	; 61
 b84:	de b7       	in	r29, 0x3e	; 62
 b86:	28 97       	sbiw	r28, 0x08	; 8
 b88:	0f b6       	in	r0, 0x3f	; 63
 b8a:	f8 94       	cli
 b8c:	de bf       	out	0x3e, r29	; 62
 b8e:	0f be       	out	0x3f, r0	; 63
 b90:	cd bf       	out	0x3d, r28	; 61
 b92:	9f 83       	std	Y+7, r25	; 0x07
 b94:	8e 83       	std	Y+6, r24	; 0x06
 b96:	68 87       	std	Y+8, r22	; 0x08
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;
 b98:	19 82       	std	Y+1, r1	; 0x01

	for(i=0;i<u8Length;i++)
 b9a:	1a 82       	std	Y+2, r1	; 0x02
 b9c:	27 c0       	rjmp	.+78     	; 0xbec <CRC8+0x6e>
	{
		u8InByte = au8Data[i];
 b9e:	8a 81       	ldd	r24, Y+2	; 0x02
 ba0:	88 2f       	mov	r24, r24
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	2e 81       	ldd	r18, Y+6	; 0x06
 ba6:	3f 81       	ldd	r19, Y+7	; 0x07
 ba8:	82 0f       	add	r24, r18
 baa:	93 1f       	adc	r25, r19
 bac:	fc 01       	movw	r30, r24
 bae:	80 81       	ld	r24, Z
 bb0:	8c 83       	std	Y+4, r24	; 0x04
		for(j=0;j<8;j++)
 bb2:	1b 82       	std	Y+3, r1	; 0x03
 bb4:	15 c0       	rjmp	.+42     	; 0xbe0 <CRC8+0x62>
		{
			u8Temp = (u8CRC^u8InByte)&0x80;
 bb6:	99 81       	ldd	r25, Y+1	; 0x01
 bb8:	8c 81       	ldd	r24, Y+4	; 0x04
 bba:	89 27       	eor	r24, r25
 bbc:	80 78       	andi	r24, 0x80	; 128
 bbe:	8d 83       	std	Y+5, r24	; 0x05
			u8CRC <<= 1;
 bc0:	89 81       	ldd	r24, Y+1	; 0x01
 bc2:	88 0f       	add	r24, r24
 bc4:	89 83       	std	Y+1, r24	; 0x01
			if(u8Temp!=0)
 bc6:	8d 81       	ldd	r24, Y+5	; 0x05
 bc8:	88 23       	and	r24, r24
 bca:	21 f0       	breq	.+8      	; 0xbd4 <CRC8+0x56>
			{
				u8CRC ^= 0x07;
 bcc:	99 81       	ldd	r25, Y+1	; 0x01
 bce:	87 e0       	ldi	r24, 0x07	; 7
 bd0:	89 27       	eor	r24, r25
 bd2:	89 83       	std	Y+1, r24	; 0x01
			}
			u8InByte<<=1;
 bd4:	8c 81       	ldd	r24, Y+4	; 0x04
 bd6:	88 0f       	add	r24, r24
 bd8:	8c 83       	std	Y+4, r24	; 0x04
	u8CRC = 0;

	for(i=0;i<u8Length;i++)
	{
		u8InByte = au8Data[i];
		for(j=0;j<8;j++)
 bda:	8b 81       	ldd	r24, Y+3	; 0x03
 bdc:	8f 5f       	subi	r24, 0xFF	; 255
 bde:	8b 83       	std	Y+3, r24	; 0x03
 be0:	8b 81       	ldd	r24, Y+3	; 0x03
 be2:	88 30       	cpi	r24, 0x08	; 8
 be4:	40 f3       	brcs	.-48     	; 0xbb6 <CRC8+0x38>
{
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;

	for(i=0;i<u8Length;i++)
 be6:	8a 81       	ldd	r24, Y+2	; 0x02
 be8:	8f 5f       	subi	r24, 0xFF	; 255
 bea:	8a 83       	std	Y+2, r24	; 0x02
 bec:	9a 81       	ldd	r25, Y+2	; 0x02
 bee:	88 85       	ldd	r24, Y+8	; 0x08
 bf0:	98 17       	cp	r25, r24
 bf2:	a8 f2       	brcs	.-86     	; 0xb9e <CRC8+0x20>
			}
			u8InByte<<=1;
		}
	}

	return u8CRC;
 bf4:	89 81       	ldd	r24, Y+1	; 0x01
}
 bf6:	28 96       	adiw	r28, 0x08	; 8
 bf8:	0f b6       	in	r0, 0x3f	; 63
 bfa:	f8 94       	cli
 bfc:	de bf       	out	0x3e, r29	; 62
 bfe:	0f be       	out	0x3f, r0	; 63
 c00:	cd bf       	out	0x3d, r28	; 61
 c02:	df 91       	pop	r29
 c04:	cf 91       	pop	r28
 c06:	08 95       	ret

00000c08 <__mulsi3>:
 c08:	db 01       	movw	r26, r22
 c0a:	8f 93       	push	r24
 c0c:	9f 93       	push	r25
 c0e:	0e 94 39 06 	call	0xc72	; 0xc72 <__muluhisi3>
 c12:	bf 91       	pop	r27
 c14:	af 91       	pop	r26
 c16:	a2 9f       	mul	r26, r18
 c18:	80 0d       	add	r24, r0
 c1a:	91 1d       	adc	r25, r1
 c1c:	a3 9f       	mul	r26, r19
 c1e:	90 0d       	add	r25, r0
 c20:	b2 9f       	mul	r27, r18
 c22:	90 0d       	add	r25, r0
 c24:	11 24       	eor	r1, r1
 c26:	08 95       	ret

00000c28 <__divmodsi4>:
 c28:	05 2e       	mov	r0, r21
 c2a:	97 fb       	bst	r25, 7
 c2c:	1e f4       	brtc	.+6      	; 0xc34 <__divmodsi4+0xc>
 c2e:	00 94       	com	r0
 c30:	0e 94 2b 06 	call	0xc56	; 0xc56 <__negsi2>
 c34:	57 fd       	sbrc	r21, 7
 c36:	07 d0       	rcall	.+14     	; 0xc46 <__divmodsi4_neg2>
 c38:	0e 94 44 06 	call	0xc88	; 0xc88 <__udivmodsi4>
 c3c:	07 fc       	sbrc	r0, 7
 c3e:	03 d0       	rcall	.+6      	; 0xc46 <__divmodsi4_neg2>
 c40:	4e f4       	brtc	.+18     	; 0xc54 <__divmodsi4_exit>
 c42:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__negsi2>

00000c46 <__divmodsi4_neg2>:
 c46:	50 95       	com	r21
 c48:	40 95       	com	r20
 c4a:	30 95       	com	r19
 c4c:	21 95       	neg	r18
 c4e:	3f 4f       	sbci	r19, 0xFF	; 255
 c50:	4f 4f       	sbci	r20, 0xFF	; 255
 c52:	5f 4f       	sbci	r21, 0xFF	; 255

00000c54 <__divmodsi4_exit>:
 c54:	08 95       	ret

00000c56 <__negsi2>:
 c56:	90 95       	com	r25
 c58:	80 95       	com	r24
 c5a:	70 95       	com	r23
 c5c:	61 95       	neg	r22
 c5e:	7f 4f       	sbci	r23, 0xFF	; 255
 c60:	8f 4f       	sbci	r24, 0xFF	; 255
 c62:	9f 4f       	sbci	r25, 0xFF	; 255
 c64:	08 95       	ret

00000c66 <__tablejump2__>:
 c66:	ee 0f       	add	r30, r30
 c68:	ff 1f       	adc	r31, r31
 c6a:	05 90       	lpm	r0, Z+
 c6c:	f4 91       	lpm	r31, Z
 c6e:	e0 2d       	mov	r30, r0
 c70:	09 94       	ijmp

00000c72 <__muluhisi3>:
 c72:	0e 94 66 06 	call	0xccc	; 0xccc <__umulhisi3>
 c76:	a5 9f       	mul	r26, r21
 c78:	90 0d       	add	r25, r0
 c7a:	b4 9f       	mul	r27, r20
 c7c:	90 0d       	add	r25, r0
 c7e:	a4 9f       	mul	r26, r20
 c80:	80 0d       	add	r24, r0
 c82:	91 1d       	adc	r25, r1
 c84:	11 24       	eor	r1, r1
 c86:	08 95       	ret

00000c88 <__udivmodsi4>:
 c88:	a1 e2       	ldi	r26, 0x21	; 33
 c8a:	1a 2e       	mov	r1, r26
 c8c:	aa 1b       	sub	r26, r26
 c8e:	bb 1b       	sub	r27, r27
 c90:	fd 01       	movw	r30, r26
 c92:	0d c0       	rjmp	.+26     	; 0xcae <__udivmodsi4_ep>

00000c94 <__udivmodsi4_loop>:
 c94:	aa 1f       	adc	r26, r26
 c96:	bb 1f       	adc	r27, r27
 c98:	ee 1f       	adc	r30, r30
 c9a:	ff 1f       	adc	r31, r31
 c9c:	a2 17       	cp	r26, r18
 c9e:	b3 07       	cpc	r27, r19
 ca0:	e4 07       	cpc	r30, r20
 ca2:	f5 07       	cpc	r31, r21
 ca4:	20 f0       	brcs	.+8      	; 0xcae <__udivmodsi4_ep>
 ca6:	a2 1b       	sub	r26, r18
 ca8:	b3 0b       	sbc	r27, r19
 caa:	e4 0b       	sbc	r30, r20
 cac:	f5 0b       	sbc	r31, r21

00000cae <__udivmodsi4_ep>:
 cae:	66 1f       	adc	r22, r22
 cb0:	77 1f       	adc	r23, r23
 cb2:	88 1f       	adc	r24, r24
 cb4:	99 1f       	adc	r25, r25
 cb6:	1a 94       	dec	r1
 cb8:	69 f7       	brne	.-38     	; 0xc94 <__udivmodsi4_loop>
 cba:	60 95       	com	r22
 cbc:	70 95       	com	r23
 cbe:	80 95       	com	r24
 cc0:	90 95       	com	r25
 cc2:	9b 01       	movw	r18, r22
 cc4:	ac 01       	movw	r20, r24
 cc6:	bd 01       	movw	r22, r26
 cc8:	cf 01       	movw	r24, r30
 cca:	08 95       	ret

00000ccc <__umulhisi3>:
 ccc:	a2 9f       	mul	r26, r18
 cce:	b0 01       	movw	r22, r0
 cd0:	b3 9f       	mul	r27, r19
 cd2:	c0 01       	movw	r24, r0
 cd4:	a3 9f       	mul	r26, r19
 cd6:	70 0d       	add	r23, r0
 cd8:	81 1d       	adc	r24, r1
 cda:	11 24       	eor	r1, r1
 cdc:	91 1d       	adc	r25, r1
 cde:	b2 9f       	mul	r27, r18
 ce0:	70 0d       	add	r23, r0
 ce2:	81 1d       	adc	r24, r1
 ce4:	11 24       	eor	r1, r1
 ce6:	91 1d       	adc	r25, r1
 ce8:	08 95       	ret

00000cea <_exit>:
 cea:	f8 94       	cli

00000cec <__stop_program>:
 cec:	ff cf       	rjmp	.-2      	; 0xcec <__stop_program>
