
clusterwink_mk_ii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000be2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b6e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  00800100  00800100  00000be2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000be2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dda  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fb  00000000  00000000  00001b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009af  00000000  00000000  00002539  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000454  00000000  00000000  00002ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ac  00000000  00000000  0000333c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008da  00000000  00000000  000038e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000041c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 bb 00 	jmp	0x176	; 0x176 <__vector_5>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_19>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a3 34       	cpi	r26, 0x43	; 67
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <main>
  9c:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <__vector_19>:
static RingBuff_t RINGBUFFER;
static SpiBuf_t SPIBUFFER;


ISR(SPI_STC_vect)
{
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	1f 92       	push	r1
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8spiData = SPDR0;
  c4:	8e e4       	ldi	r24, 0x4E	; 78
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	fc 01       	movw	r30, r24
  ca:	80 81       	ld	r24, Z
  cc:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0;
  ce:	8e e4       	ldi	r24, 0x4E	; 78
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	fc 01       	movw	r30, r24
  d4:	10 82       	st	Z, r1

	switch(SPIBUFFER.spiState)
  d6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <_edata+0x41>
  da:	88 2f       	mov	r24, r24
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 05       	cpc	r25, r1
  e2:	f9 f0       	breq	.+62     	; 0x122 <__vector_19+0x7e>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	91 05       	cpc	r25, r1
  e8:	a4 f5       	brge	.+104    	; 0x152 <__vector_19+0xae>
  ea:	89 2b       	or	r24, r25
  ec:	09 f0       	breq	.+2      	; 0xf0 <__vector_19+0x4c>
		case IDLE:

		break;
	}

}
  ee:	34 c0       	rjmp	.+104    	; 0x158 <__vector_19+0xb4>
	SPDR0 = 0;

	switch(SPIBUFFER.spiState)
	{
		case READY:
			if(u8spiData>=3)
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	83 30       	cpi	r24, 0x03	; 3
  f4:	90 f0       	brcs	.+36     	; 0x11a <__vector_19+0x76>
			{
				SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
  f6:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
  fa:	88 2f       	mov	r24, r24
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	80 50       	subi	r24, 0x00	; 0
 100:	9f 4f       	sbci	r25, 0xFF	; 255
 102:	29 81       	ldd	r18, Y+1	; 0x01
 104:	fc 01       	movw	r30, r24
 106:	20 83       	st	Z, r18
				SPIBUFFER.u8Count++;
 108:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 10c:	8f 5f       	subi	r24, 0xFF	; 255
 10e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <_edata+0x40>
				SPIBUFFER.spiState = WRITE;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_edata+0x41>
			}
			else
			{
				SPIBUFFER.spiState = READ;
			}
		break;
 118:	1f c0       	rjmp	.+62     	; 0x158 <__vector_19+0xb4>
				SPIBUFFER.u8Count++;
				SPIBUFFER.spiState = WRITE;
			}
			else
			{
				SPIBUFFER.spiState = READ;
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_edata+0x41>
			}
		break;
 120:	1b c0       	rjmp	.+54     	; 0x158 <__vector_19+0xb4>

		case WRITE:
			SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
 122:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 126:	88 2f       	mov	r24, r24
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	80 50       	subi	r24, 0x00	; 0
 12c:	9f 4f       	sbci	r25, 0xFF	; 255
 12e:	29 81       	ldd	r18, Y+1	; 0x01
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
			SPIBUFFER.u8Count++;
 134:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 138:	8f 5f       	subi	r24, 0xFF	; 255
 13a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <_edata+0x40>
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
 13e:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <_edata+0x40>
 142:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 146:	98 17       	cp	r25, r24
 148:	30 f0       	brcs	.+12     	; 0x156 <__vector_19+0xb2>
			{
				SPIBUFFER.spiState = IDLE;
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_edata+0x41>
			}
		break;
 150:	02 c0       	rjmp	.+4      	; 0x156 <__vector_19+0xb2>

		case READ:

		break;
 152:	00 00       	nop
 154:	01 c0       	rjmp	.+2      	; 0x158 <__vector_19+0xb4>
			SPIBUFFER.u8Count++;
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
			{
				SPIBUFFER.spiState = IDLE;
			}
		break;
 156:	00 00       	nop
		case IDLE:

		break;
	}

}
 158:	00 00       	nop
 15a:	0f 90       	pop	r0
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	ff 91       	pop	r31
 162:	ef 91       	pop	r30
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <__vector_5>:

ISR(PCINT1_vect)
{
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	2f 93       	push	r18
 184:	3f 93       	push	r19
 186:	4f 93       	push	r20
 188:	5f 93       	push	r21
 18a:	6f 93       	push	r22
 18c:	7f 93       	push	r23
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
 192:	af 93       	push	r26
 194:	bf 93       	push	r27
 196:	ef 93       	push	r30
 198:	ff 93       	push	r31
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8CRC;
	
	if(PIN_SPI & (1<<SPI_SS)) // SS HIGH
 1a2:	83 e2       	ldi	r24, 0x23	; 35
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	fc 01       	movw	r30, r24
 1a8:	80 81       	ld	r24, Z
 1aa:	88 2f       	mov	r24, r24
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	80 71       	andi	r24, 0x10	; 16
 1b0:	99 27       	eor	r25, r25
 1b2:	89 2b       	or	r24, r25
 1b4:	09 f4       	brne	.+2      	; 0x1b8 <__vector_5+0x42>
 1b6:	59 c0       	rjmp	.+178    	; 0x26a <__vector_5+0xf4>
	{
		if(SPIBUFFER.u8Count == SPIBUFFER.au8Buffer[0]) // correct amount of bytes in buffer
 1b8:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <_edata+0x40>
 1bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1c0:	98 17       	cp	r25, r24
 1c2:	09 f0       	breq	.+2      	; 0x1c6 <__vector_5+0x50>
 1c4:	62 c0       	rjmp	.+196    	; 0x28a <__vector_5+0x114>
		{
			if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
 1c6:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 1ca:	68 2f       	mov	r22, r24
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 05 05 	call	0xa0a	; 0xa0a <CRC8>
 1d4:	88 23       	and	r24, r24
 1d6:	09 f0       	breq	.+2      	; 0x1da <__vector_5+0x64>
 1d8:	58 c0       	rjmp	.+176    	; 0x28a <__vector_5+0x114>
			{
				switch(SPIBUFFER.au8Buffer[1]) // command
 1da:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
 1de:	88 2f       	mov	r24, r24
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	91 05       	cpc	r25, r1
 1e6:	01 f1       	breq	.+64     	; 0x228 <__vector_5+0xb2>
 1e8:	84 30       	cpi	r24, 0x04	; 4
 1ea:	91 05       	cpc	r25, r1
 1ec:	34 f4       	brge	.+12     	; 0x1fa <__vector_5+0x84>
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	91 05       	cpc	r25, r1
 1f2:	61 f0       	breq	.+24     	; 0x20c <__vector_5+0x96>
 1f4:	02 97       	sbiw	r24, 0x02	; 2
 1f6:	89 f0       	breq	.+34     	; 0x21a <__vector_5+0xa4>
	{
		SPIBUFFER.u8Count = 0;
		SPIBUFFER.spiState = READY;
	}
	
}
 1f8:	48 c0       	rjmp	.+144    	; 0x28a <__vector_5+0x114>
	{
		if(SPIBUFFER.u8Count == SPIBUFFER.au8Buffer[0]) // correct amount of bytes in buffer
		{
			if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
			{
				switch(SPIBUFFER.au8Buffer[1]) // command
 1fa:	85 30       	cpi	r24, 0x05	; 5
 1fc:	91 05       	cpc	r25, r1
 1fe:	21 f1       	breq	.+72     	; 0x248 <__vector_5+0xd2>
 200:	85 30       	cpi	r24, 0x05	; 5
 202:	91 05       	cpc	r25, r1
 204:	d4 f0       	brlt	.+52     	; 0x23a <__vector_5+0xc4>
 206:	06 97       	sbiw	r24, 0x06	; 6
 208:	31 f1       	breq	.+76     	; 0x256 <__vector_5+0xe0>
	{
		SPIBUFFER.u8Count = 0;
		SPIBUFFER.spiState = READY;
	}
	
}
 20a:	3f c0       	rjmp	.+126    	; 0x28a <__vector_5+0x114>
			if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
			{
				switch(SPIBUFFER.au8Buffer[1]) // command
				{
					case 0x01:
					if(SPIBUFFER.u8Count == 3)
 20c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 210:	83 30       	cpi	r24, 0x03	; 3
 212:	81 f5       	brne	.+96     	; 0x274 <__vector_5+0xfe>
					{
						enablePLED();
 214:	0e 94 71 02 	call	0x4e2	; 0x4e2 <enablePLED>
					}
					break;
 218:	2d c0       	rjmp	.+90     	; 0x274 <__vector_5+0xfe>

					case 0x02:
					if(SPIBUFFER.u8Count == 3)
 21a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 21e:	83 30       	cpi	r24, 0x03	; 3
 220:	59 f5       	brne	.+86     	; 0x278 <__vector_5+0x102>
					{
						disablePLED();
 222:	0e 94 82 02 	call	0x504	; 0x504 <disablePLED>
					}
					break;
 226:	28 c0       	rjmp	.+80     	; 0x278 <__vector_5+0x102>

					case 0x03:
					if(SPIBUFFER.u8Count == 4)
 228:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 22c:	84 30       	cpi	r24, 0x04	; 4
 22e:	31 f5       	brne	.+76     	; 0x27c <__vector_5+0x106>
					{
						setDuty(SPIBUFFER.au8Buffer[2]);
 230:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 234:	0e 94 e6 03 	call	0x7cc	; 0x7cc <setDuty>
					}
					break;
 238:	21 c0       	rjmp	.+66     	; 0x27c <__vector_5+0x106>
					
					case 0x04:
					if(SPIBUFFER.u8Count == 3)
 23a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 23e:	83 30       	cpi	r24, 0x03	; 3
 240:	f9 f4       	brne	.+62     	; 0x280 <__vector_5+0x10a>
					{
						enableAudio();
 242:	0e 94 ad 02 	call	0x55a	; 0x55a <enableAudio>
					}
					break;
 246:	1c c0       	rjmp	.+56     	; 0x280 <__vector_5+0x10a>

					case 0x05:
					if(SPIBUFFER.u8Count == 3)
 248:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 24c:	83 30       	cpi	r24, 0x03	; 3
 24e:	d1 f4       	brne	.+52     	; 0x284 <__vector_5+0x10e>
					{
						standbyAudio();
 250:	0e 94 93 02 	call	0x526	; 0x526 <standbyAudio>
					}
					break;
 254:	17 c0       	rjmp	.+46     	; 0x284 <__vector_5+0x10e>
					
					case 0x06:
					if(SPIBUFFER.u8Count == 4)
 256:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 25a:	84 30       	cpi	r24, 0x04	; 4
 25c:	a9 f4       	brne	.+42     	; 0x288 <__vector_5+0x112>
					{
						setVolume(SPIBUFFER.au8Buffer[2]);
 25e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 262:	0e 94 4f 03 	call	0x69e	; 0x69e <setVolume>
					}
					break;
 266:	00 00       	nop
 268:	0f c0       	rjmp	.+30     	; 0x288 <__vector_5+0x112>
			
		}
	}
	else // SS LOW
	{
		SPIBUFFER.u8Count = 0;
 26a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <_edata+0x40>
		SPIBUFFER.spiState = READY;
 26e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <_edata+0x41>
	}
	
}
 272:	0b c0       	rjmp	.+22     	; 0x28a <__vector_5+0x114>
					case 0x01:
					if(SPIBUFFER.u8Count == 3)
					{
						enablePLED();
					}
					break;
 274:	00 00       	nop
 276:	09 c0       	rjmp	.+18     	; 0x28a <__vector_5+0x114>
					case 0x02:
					if(SPIBUFFER.u8Count == 3)
					{
						disablePLED();
					}
					break;
 278:	00 00       	nop
 27a:	07 c0       	rjmp	.+14     	; 0x28a <__vector_5+0x114>
					case 0x03:
					if(SPIBUFFER.u8Count == 4)
					{
						setDuty(SPIBUFFER.au8Buffer[2]);
					}
					break;
 27c:	00 00       	nop
 27e:	05 c0       	rjmp	.+10     	; 0x28a <__vector_5+0x114>
					case 0x04:
					if(SPIBUFFER.u8Count == 3)
					{
						enableAudio();
					}
					break;
 280:	00 00       	nop
 282:	03 c0       	rjmp	.+6      	; 0x28a <__vector_5+0x114>
					case 0x05:
					if(SPIBUFFER.u8Count == 3)
					{
						standbyAudio();
					}
					break;
 284:	00 00       	nop
 286:	01 c0       	rjmp	.+2      	; 0x28a <__vector_5+0x114>
					case 0x06:
					if(SPIBUFFER.u8Count == 4)
					{
						setVolume(SPIBUFFER.au8Buffer[2]);
					}
					break;
 288:	00 00       	nop
	{
		SPIBUFFER.u8Count = 0;
		SPIBUFFER.spiState = READY;
	}
	
}
 28a:	00 00       	nop
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	ff 91       	pop	r31
 292:	ef 91       	pop	r30
 294:	bf 91       	pop	r27
 296:	af 91       	pop	r26
 298:	9f 91       	pop	r25
 29a:	8f 91       	pop	r24
 29c:	7f 91       	pop	r23
 29e:	6f 91       	pop	r22
 2a0:	5f 91       	pop	r21
 2a2:	4f 91       	pop	r20
 2a4:	3f 91       	pop	r19
 2a6:	2f 91       	pop	r18
 2a8:	0f 90       	pop	r0
 2aa:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <main>:



int main(void)
{
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	1f 92       	push	r1
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
    uint8_t u8Duty = 0;
 2be:	19 82       	std	Y+1, r1	; 0x01
	uint16_t i;
	
	portInit();
 2c0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <portInit>
	initPWM(1);
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0e 94 76 03 	call	0x6ec	; 0x6ec <initPWM>
	startPWM();
 2ca:	0e 94 d5 03 	call	0x7aa	; 0x7aa <startPWM>
	spiInitBuffer(&SPIBUFFER);
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 77 01 	call	0x2ee	; 0x2ee <spiInitBuffer>
	spiSlaveInit();
 2d6:	0e 94 91 01 	call	0x322	; 0x322 <spiSlaveInit>
	spiPcInt();
 2da:	0e 94 c4 01 	call	0x388	; 0x388 <spiPcInt>

	wait_1ms(100);
 2de:	84 e6       	ldi	r24, 0x64	; 100
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 32 04 	call	0x864	; 0x864 <wait_1ms>
	initAudio();
 2e6:	0e 94 65 03 	call	0x6ca	; 0x6ca <initAudio>

	
	
	sei();
 2ea:	78 94       	sei
	
	
    while (1) 
    {

    }
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <main+0x38>

000002ee <spiInitBuffer>:
#include <avr/io.h>
#include "spi.h"


void spiInitBuffer(SpiBuf_t* Buffer)
{
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	00 d0       	rcall	.+0      	; 0x2f4 <spiInitBuffer+0x6>
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
 2f8:	9a 83       	std	Y+2, r25	; 0x02
 2fa:	89 83       	std	Y+1, r24	; 0x01
	Buffer->u8Count = 0;
 2fc:	89 81       	ldd	r24, Y+1	; 0x01
 2fe:	9a 81       	ldd	r25, Y+2	; 0x02
 300:	80 5c       	subi	r24, 0xC0	; 192
 302:	9f 4f       	sbci	r25, 0xFF	; 255
 304:	fc 01       	movw	r30, r24
 306:	10 82       	st	Z, r1
	Buffer->spiState = IDLE;
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	9a 81       	ldd	r25, Y+2	; 0x02
 30c:	8f 5b       	subi	r24, 0xBF	; 191
 30e:	9f 4f       	sbci	r25, 0xFF	; 255
 310:	23 e0       	ldi	r18, 0x03	; 3
 312:	fc 01       	movw	r30, r24
 314:	20 83       	st	Z, r18
}
 316:	00 00       	nop
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	08 95       	ret

00000322 <spiSlaveInit>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiSlaveInit(void)
{
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	1f 92       	push	r1
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t ucTemp;
	SPSR0 = 0;
 32c:	8d e4       	ldi	r24, 0x4D	; 77
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	fc 01       	movw	r30, r24
 332:	10 82       	st	Z, r1
	SPCR0 = (1<<SPIE0);
 334:	8c e4       	ldi	r24, 0x4C	; 76
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	20 e8       	ldi	r18, 0x80	; 128
 33a:	fc 01       	movw	r30, r24
 33c:	20 83       	st	Z, r18
	
	ucTemp = SPSR0;					
 33e:	8d e4       	ldi	r24, 0x4D	; 77
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	fc 01       	movw	r30, r24
 344:	80 81       	ld	r24, Z
 346:	89 83       	std	Y+1, r24	; 0x01
	ucTemp = SPDR0;
 348:	8e e4       	ldi	r24, 0x4E	; 78
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	fc 01       	movw	r30, r24
 34e:	80 81       	ld	r24, Z
 350:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0;
 352:	8e e4       	ldi	r24, 0x4E	; 78
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	fc 01       	movw	r30, r24
 358:	10 82       	st	Z, r1
	
	DDRB |= (1<<PINB6);				// MISO needs to be an output
 35a:	84 e2       	ldi	r24, 0x24	; 36
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	24 e2       	ldi	r18, 0x24	; 36
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	f9 01       	movw	r30, r18
 364:	20 81       	ld	r18, Z
 366:	20 64       	ori	r18, 0x40	; 64
 368:	fc 01       	movw	r30, r24
 36a:	20 83       	st	Z, r18
	
	SPCR0 |= (1<<SPE0);
 36c:	8c e4       	ldi	r24, 0x4C	; 76
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	2c e4       	ldi	r18, 0x4C	; 76
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	f9 01       	movw	r30, r18
 376:	20 81       	ld	r18, Z
 378:	20 64       	ori	r18, 0x40	; 64
 37a:	fc 01       	movw	r30, r24
 37c:	20 83       	st	Z, r18
}
 37e:	00 00       	nop
 380:	0f 90       	pop	r0
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <spiPcInt>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiPcInt(void)
{
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
	PCICR |= (1<<PCIE1);
 390:	88 e6       	ldi	r24, 0x68	; 104
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	28 e6       	ldi	r18, 0x68	; 104
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	f9 01       	movw	r30, r18
 39a:	20 81       	ld	r18, Z
 39c:	22 60       	ori	r18, 0x02	; 2
 39e:	fc 01       	movw	r30, r24
 3a0:	20 83       	st	Z, r18
	PCIFR = (1<<PCIF1);
 3a2:	8b e3       	ldi	r24, 0x3B	; 59
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	22 e0       	ldi	r18, 0x02	; 2
 3a8:	fc 01       	movw	r30, r24
 3aa:	20 83       	st	Z, r18
	PCMSK1 |= (1<<PCINT12);
 3ac:	8c e6       	ldi	r24, 0x6C	; 108
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	2c e6       	ldi	r18, 0x6C	; 108
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	f9 01       	movw	r30, r18
 3b6:	20 81       	ld	r18, Z
 3b8:	20 61       	ori	r18, 0x10	; 16
 3ba:	fc 01       	movw	r30, r24
 3bc:	20 83       	st	Z, r18
 3be:	00 00       	nop
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <portInit>:
 * @return 8bit analog value
 *****************************************************************************/
uint8_t adcGetValue(void)
{
	return(ADCH);
}
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	8a e2       	ldi	r24, 0x2A	; 42
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	2a e2       	ldi	r18, 0x2A	; 42
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	f9 01       	movw	r30, r18
 3d8:	20 81       	ld	r18, Z
 3da:	20 63       	ori	r18, 0x30	; 48
 3dc:	fc 01       	movw	r30, r24
 3de:	20 83       	st	Z, r18
 3e0:	8b e2       	ldi	r24, 0x2B	; 43
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	2b e2       	ldi	r18, 0x2B	; 43
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	f9 01       	movw	r30, r18
 3ea:	20 81       	ld	r18, Z
 3ec:	20 62       	ori	r18, 0x20	; 32
 3ee:	fc 01       	movw	r30, r24
 3f0:	20 83       	st	Z, r18
 3f2:	8b e2       	ldi	r24, 0x2B	; 43
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	2b e2       	ldi	r18, 0x2B	; 43
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	f9 01       	movw	r30, r18
 3fc:	20 81       	ld	r18, Z
 3fe:	2f 7e       	andi	r18, 0xEF	; 239
 400:	fc 01       	movw	r30, r24
 402:	20 83       	st	Z, r18
 404:	8a e2       	ldi	r24, 0x2A	; 42
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	2a e2       	ldi	r18, 0x2A	; 42
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	f9 01       	movw	r30, r18
 40e:	20 81       	ld	r18, Z
 410:	20 68       	ori	r18, 0x80	; 128
 412:	fc 01       	movw	r30, r24
 414:	20 83       	st	Z, r18
 416:	8b e2       	ldi	r24, 0x2B	; 43
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	2b e2       	ldi	r18, 0x2B	; 43
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	f9 01       	movw	r30, r18
 420:	20 81       	ld	r18, Z
 422:	20 68       	ori	r18, 0x80	; 128
 424:	fc 01       	movw	r30, r24
 426:	20 83       	st	Z, r18
 428:	8a e2       	ldi	r24, 0x2A	; 42
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	2a e2       	ldi	r18, 0x2A	; 42
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	f9 01       	movw	r30, r18
 432:	20 81       	ld	r18, Z
 434:	2f 7b       	andi	r18, 0xBF	; 191
 436:	fc 01       	movw	r30, r24
 438:	20 83       	st	Z, r18
 43a:	8a e2       	ldi	r24, 0x2A	; 42
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	2a e2       	ldi	r18, 0x2A	; 42
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	f9 01       	movw	r30, r18
 444:	20 81       	ld	r18, Z
 446:	2c 7f       	andi	r18, 0xFC	; 252
 448:	fc 01       	movw	r30, r24
 44a:	20 83       	st	Z, r18
 44c:	8b e2       	ldi	r24, 0x2B	; 43
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	2b e2       	ldi	r18, 0x2B	; 43
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	f9 01       	movw	r30, r18
 456:	20 81       	ld	r18, Z
 458:	21 60       	ori	r18, 0x01	; 1
 45a:	fc 01       	movw	r30, r24
 45c:	20 83       	st	Z, r18
 45e:	81 e2       	ldi	r24, 0x21	; 33
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	21 e2       	ldi	r18, 0x21	; 33
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	f9 01       	movw	r30, r18
 468:	20 81       	ld	r18, Z
 46a:	2e 7f       	andi	r18, 0xFE	; 254
 46c:	fc 01       	movw	r30, r24
 46e:	20 83       	st	Z, r18
 470:	82 e2       	ldi	r24, 0x22	; 34
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	22 e2       	ldi	r18, 0x22	; 34
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	f9 01       	movw	r30, r18
 47a:	20 81       	ld	r18, Z
 47c:	2e 7f       	andi	r18, 0xFE	; 254
 47e:	fc 01       	movw	r30, r24
 480:	20 83       	st	Z, r18
 482:	8e e7       	ldi	r24, 0x7E	; 126
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	2e e7       	ldi	r18, 0x7E	; 126
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	f9 01       	movw	r30, r18
 48c:	20 81       	ld	r18, Z
 48e:	21 60       	ori	r18, 0x01	; 1
 490:	fc 01       	movw	r30, r24
 492:	20 83       	st	Z, r18
 494:	81 e2       	ldi	r24, 0x21	; 33
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	21 e2       	ldi	r18, 0x21	; 33
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	f9 01       	movw	r30, r18
 49e:	20 81       	ld	r18, Z
 4a0:	21 7f       	andi	r18, 0xF1	; 241
 4a2:	fc 01       	movw	r30, r24
 4a4:	20 83       	st	Z, r18
 4a6:	82 e2       	ldi	r24, 0x22	; 34
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	22 e2       	ldi	r18, 0x22	; 34
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	f9 01       	movw	r30, r18
 4b0:	20 81       	ld	r18, Z
 4b2:	2e 60       	ori	r18, 0x0E	; 14
 4b4:	fc 01       	movw	r30, r24
 4b6:	20 83       	st	Z, r18
 4b8:	87 e2       	ldi	r24, 0x27	; 39
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	fc 01       	movw	r30, r24
 4be:	80 81       	ld	r24, Z
 4c0:	87 e2       	ldi	r24, 0x27	; 39
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	fc 01       	movw	r30, r24
 4c6:	10 82       	st	Z, r1
 4c8:	88 e2       	ldi	r24, 0x28	; 40
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	fc 01       	movw	r30, r24
 4ce:	80 81       	ld	r24, Z
 4d0:	88 e2       	ldi	r24, 0x28	; 40
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	2f ef       	ldi	r18, 0xFF	; 255
 4d6:	fc 01       	movw	r30, r24
 4d8:	20 83       	st	Z, r18
 4da:	00 00       	nop
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	08 95       	ret

000004e2 <enablePLED>:
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	cd b7       	in	r28, 0x3d	; 61
 4e8:	de b7       	in	r29, 0x3e	; 62
 4ea:	8b e2       	ldi	r24, 0x2B	; 43
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	2b e2       	ldi	r18, 0x2B	; 43
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	f9 01       	movw	r30, r18
 4f4:	20 81       	ld	r18, Z
 4f6:	2f 7d       	andi	r18, 0xDF	; 223
 4f8:	fc 01       	movw	r30, r24
 4fa:	20 83       	st	Z, r18
 4fc:	00 00       	nop
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <disablePLED>:
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	cd b7       	in	r28, 0x3d	; 61
 50a:	de b7       	in	r29, 0x3e	; 62
 50c:	8b e2       	ldi	r24, 0x2B	; 43
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	2b e2       	ldi	r18, 0x2B	; 43
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	f9 01       	movw	r30, r18
 516:	20 81       	ld	r18, Z
 518:	20 62       	ori	r18, 0x20	; 32
 51a:	fc 01       	movw	r30, r24
 51c:	20 83       	st	Z, r18
 51e:	00 00       	nop
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	08 95       	ret

00000526 <standbyAudio>:
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	cd b7       	in	r28, 0x3d	; 61
 52c:	de b7       	in	r29, 0x3e	; 62
 52e:	8b e2       	ldi	r24, 0x2B	; 43
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	2b e2       	ldi	r18, 0x2B	; 43
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	f9 01       	movw	r30, r18
 538:	20 81       	ld	r18, Z
 53a:	20 68       	ori	r18, 0x80	; 128
 53c:	fc 01       	movw	r30, r24
 53e:	20 83       	st	Z, r18
 540:	8a e2       	ldi	r24, 0x2A	; 42
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	2a e2       	ldi	r18, 0x2A	; 42
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	f9 01       	movw	r30, r18
 54a:	20 81       	ld	r18, Z
 54c:	27 60       	ori	r18, 0x07	; 7
 54e:	fc 01       	movw	r30, r24
 550:	20 83       	st	Z, r18
 552:	00 00       	nop
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	08 95       	ret

0000055a <enableAudio>:
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
 55e:	cd b7       	in	r28, 0x3d	; 61
 560:	de b7       	in	r29, 0x3e	; 62
 562:	8b e2       	ldi	r24, 0x2B	; 43
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	2b e2       	ldi	r18, 0x2B	; 43
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	f9 01       	movw	r30, r18
 56c:	20 81       	ld	r18, Z
 56e:	2f 77       	andi	r18, 0x7F	; 127
 570:	fc 01       	movw	r30, r24
 572:	20 83       	st	Z, r18
 574:	8a e2       	ldi	r24, 0x2A	; 42
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	2a e2       	ldi	r18, 0x2A	; 42
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	f9 01       	movw	r30, r18
 57e:	20 81       	ld	r18, Z
 580:	27 60       	ori	r18, 0x07	; 7
 582:	fc 01       	movw	r30, r24
 584:	20 83       	st	Z, r18
 586:	00 00       	nop
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	08 95       	ret

0000058e <incVolume>:
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	00 d0       	rcall	.+0      	; 0x594 <incVolume+0x6>
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
 598:	8a 83       	std	Y+2, r24	; 0x02
 59a:	8b e2       	ldi	r24, 0x2B	; 43
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	2b e2       	ldi	r18, 0x2B	; 43
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	f9 01       	movw	r30, r18
 5a4:	20 81       	ld	r18, Z
 5a6:	20 64       	ori	r18, 0x40	; 64
 5a8:	fc 01       	movw	r30, r24
 5aa:	20 83       	st	Z, r18
 5ac:	19 82       	std	Y+1, r1	; 0x01
 5ae:	15 c0       	rjmp	.+42     	; 0x5da <incVolume+0x4c>
 5b0:	8a e2       	ldi	r24, 0x2A	; 42
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	2a e2       	ldi	r18, 0x2A	; 42
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	f9 01       	movw	r30, r18
 5ba:	20 81       	ld	r18, Z
 5bc:	20 64       	ori	r18, 0x40	; 64
 5be:	fc 01       	movw	r30, r24
 5c0:	20 83       	st	Z, r18
 5c2:	8a e2       	ldi	r24, 0x2A	; 42
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	2a e2       	ldi	r18, 0x2A	; 42
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	f9 01       	movw	r30, r18
 5cc:	20 81       	ld	r18, Z
 5ce:	2f 7b       	andi	r18, 0xBF	; 191
 5d0:	fc 01       	movw	r30, r24
 5d2:	20 83       	st	Z, r18
 5d4:	89 81       	ldd	r24, Y+1	; 0x01
 5d6:	8f 5f       	subi	r24, 0xFF	; 255
 5d8:	89 83       	std	Y+1, r24	; 0x01
 5da:	99 81       	ldd	r25, Y+1	; 0x01
 5dc:	8a 81       	ldd	r24, Y+2	; 0x02
 5de:	98 17       	cp	r25, r24
 5e0:	38 f3       	brcs	.-50     	; 0x5b0 <incVolume+0x22>
 5e2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <u8volume>
 5e6:	88 2f       	mov	r24, r24
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	20 e4       	ldi	r18, 0x40	; 64
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	28 1b       	sub	r18, r24
 5f0:	39 0b       	sbc	r19, r25
 5f2:	8a 81       	ldd	r24, Y+2	; 0x02
 5f4:	88 2f       	mov	r24, r24
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	28 17       	cp	r18, r24
 5fa:	39 07       	cpc	r19, r25
 5fc:	24 f4       	brge	.+8      	; 0x606 <incVolume+0x78>
 5fe:	80 e4       	ldi	r24, 0x40	; 64
 600:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u8volume>
 604:	06 c0       	rjmp	.+12     	; 0x612 <incVolume+0x84>
 606:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <u8volume>
 60a:	8a 81       	ldd	r24, Y+2	; 0x02
 60c:	89 0f       	add	r24, r25
 60e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u8volume>
 612:	00 00       	nop
 614:	0f 90       	pop	r0
 616:	0f 90       	pop	r0
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	08 95       	ret

0000061e <decVolume>:
 61e:	cf 93       	push	r28
 620:	df 93       	push	r29
 622:	00 d0       	rcall	.+0      	; 0x624 <decVolume+0x6>
 624:	cd b7       	in	r28, 0x3d	; 61
 626:	de b7       	in	r29, 0x3e	; 62
 628:	8a 83       	std	Y+2, r24	; 0x02
 62a:	8b e2       	ldi	r24, 0x2B	; 43
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	2b e2       	ldi	r18, 0x2B	; 43
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	f9 01       	movw	r30, r18
 634:	20 81       	ld	r18, Z
 636:	2f 7b       	andi	r18, 0xBF	; 191
 638:	fc 01       	movw	r30, r24
 63a:	20 83       	st	Z, r18
 63c:	19 82       	std	Y+1, r1	; 0x01
 63e:	15 c0       	rjmp	.+42     	; 0x66a <decVolume+0x4c>
 640:	8a e2       	ldi	r24, 0x2A	; 42
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	2a e2       	ldi	r18, 0x2A	; 42
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	f9 01       	movw	r30, r18
 64a:	20 81       	ld	r18, Z
 64c:	20 64       	ori	r18, 0x40	; 64
 64e:	fc 01       	movw	r30, r24
 650:	20 83       	st	Z, r18
 652:	8a e2       	ldi	r24, 0x2A	; 42
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	2a e2       	ldi	r18, 0x2A	; 42
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	f9 01       	movw	r30, r18
 65c:	20 81       	ld	r18, Z
 65e:	2f 7b       	andi	r18, 0xBF	; 191
 660:	fc 01       	movw	r30, r24
 662:	20 83       	st	Z, r18
 664:	89 81       	ldd	r24, Y+1	; 0x01
 666:	8f 5f       	subi	r24, 0xFF	; 255
 668:	89 83       	std	Y+1, r24	; 0x01
 66a:	99 81       	ldd	r25, Y+1	; 0x01
 66c:	8a 81       	ldd	r24, Y+2	; 0x02
 66e:	98 17       	cp	r25, r24
 670:	38 f3       	brcs	.-50     	; 0x640 <decVolume+0x22>
 672:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <u8volume>
 676:	8a 81       	ldd	r24, Y+2	; 0x02
 678:	98 17       	cp	r25, r24
 67a:	18 f4       	brcc	.+6      	; 0x682 <decVolume+0x64>
 67c:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <u8volume>
 680:	08 c0       	rjmp	.+16     	; 0x692 <decVolume+0x74>
 682:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <u8volume>
 686:	8a 81       	ldd	r24, Y+2	; 0x02
 688:	f9 2f       	mov	r31, r25
 68a:	f8 1b       	sub	r31, r24
 68c:	8f 2f       	mov	r24, r31
 68e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u8volume>
 692:	00 00       	nop
 694:	0f 90       	pop	r0
 696:	0f 90       	pop	r0
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	08 95       	ret

0000069e <setVolume>:
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	1f 92       	push	r1
 6a4:	cd b7       	in	r28, 0x3d	; 61
 6a6:	de b7       	in	r29, 0x3e	; 62
 6a8:	89 83       	std	Y+1, r24	; 0x01
 6aa:	89 81       	ldd	r24, Y+1	; 0x01
 6ac:	81 34       	cpi	r24, 0x41	; 65
 6ae:	10 f0       	brcs	.+4      	; 0x6b4 <setVolume+0x16>
 6b0:	80 e4       	ldi	r24, 0x40	; 64
 6b2:	89 83       	std	Y+1, r24	; 0x01
 6b4:	80 e4       	ldi	r24, 0x40	; 64
 6b6:	0e 94 0f 03 	call	0x61e	; 0x61e <decVolume>
 6ba:	89 81       	ldd	r24, Y+1	; 0x01
 6bc:	0e 94 c7 02 	call	0x58e	; 0x58e <incVolume>
 6c0:	00 00       	nop
 6c2:	0f 90       	pop	r0
 6c4:	df 91       	pop	r29
 6c6:	cf 91       	pop	r28
 6c8:	08 95       	ret

000006ca <initAudio>:
 6ca:	cf 93       	push	r28
 6cc:	df 93       	push	r29
 6ce:	cd b7       	in	r28, 0x3d	; 61
 6d0:	de b7       	in	r29, 0x3e	; 62
 6d2:	0e 94 ad 02 	call	0x55a	; 0x55a <enableAudio>
 6d6:	80 e4       	ldi	r24, 0x40	; 64
 6d8:	0e 94 0f 03 	call	0x61e	; 0x61e <decVolume>
 6dc:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <u8volume>
 6e0:	0e 94 93 02 	call	0x526	; 0x526 <standbyAudio>
 6e4:	00 00       	nop
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	08 95       	ret

000006ec <initPWM>:
 6ec:	8f 92       	push	r8
 6ee:	9f 92       	push	r9
 6f0:	af 92       	push	r10
 6f2:	bf 92       	push	r11
 6f4:	cf 92       	push	r12
 6f6:	df 92       	push	r13
 6f8:	ef 92       	push	r14
 6fa:	ff 92       	push	r15
 6fc:	0f 93       	push	r16
 6fe:	1f 93       	push	r17
 700:	cf 93       	push	r28
 702:	df 93       	push	r29
 704:	1f 92       	push	r1
 706:	cd b7       	in	r28, 0x3d	; 61
 708:	de b7       	in	r29, 0x3e	; 62
 70a:	89 83       	std	Y+1, r24	; 0x01
 70c:	89 81       	ldd	r24, Y+1	; 0x01
 70e:	85 36       	cpi	r24, 0x65	; 101
 710:	10 f0       	brcs	.+4      	; 0x716 <initPWM+0x2a>
 712:	84 e6       	ldi	r24, 0x64	; 100
 714:	89 83       	std	Y+1, r24	; 0x01
 716:	80 e8       	ldi	r24, 0x80	; 128
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	22 e2       	ldi	r18, 0x22	; 34
 71c:	fc 01       	movw	r30, r24
 71e:	20 83       	st	Z, r18
 720:	81 e8       	ldi	r24, 0x81	; 129
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	28 e0       	ldi	r18, 0x08	; 8
 726:	fc 01       	movw	r30, r24
 728:	20 83       	st	Z, r18
 72a:	84 e8       	ldi	r24, 0x84	; 132
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	fc 01       	movw	r30, r24
 730:	11 82       	std	Z+1, r1	; 0x01
 732:	10 82       	st	Z, r1
 734:	0f 2e       	mov	r0, r31
 736:	fa e8       	ldi	r31, 0x8A	; 138
 738:	8f 2e       	mov	r8, r31
 73a:	91 2c       	mov	r9, r1
 73c:	f0 2d       	mov	r31, r0
 73e:	89 81       	ldd	r24, Y+1	; 0x01
 740:	88 2f       	mov	r24, r24
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	a0 e0       	ldi	r26, 0x00	; 0
 746:	b0 e0       	ldi	r27, 0x00	; 0
 748:	1f 92       	push	r1
 74a:	1f 92       	push	r1
 74c:	21 e0       	ldi	r18, 0x01	; 1
 74e:	2f 93       	push	r18
 750:	2f ef       	ldi	r18, 0xFF	; 255
 752:	2f 93       	push	r18
 754:	a1 2c       	mov	r10, r1
 756:	b1 2c       	mov	r11, r1
 758:	65 01       	movw	r12, r10
 75a:	14 e6       	ldi	r17, 0x64	; 100
 75c:	e1 2e       	mov	r14, r17
 75e:	f1 2c       	mov	r15, r1
 760:	00 e0       	ldi	r16, 0x00	; 0
 762:	10 e0       	ldi	r17, 0x00	; 0
 764:	20 e0       	ldi	r18, 0x00	; 0
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	a9 01       	movw	r20, r18
 76a:	bc 01       	movw	r22, r24
 76c:	cd 01       	movw	r24, r26
 76e:	0e 94 8e 04 	call	0x91c	; 0x91c <Map>
 772:	0f 90       	pop	r0
 774:	0f 90       	pop	r0
 776:	0f 90       	pop	r0
 778:	0f 90       	pop	r0
 77a:	dc 01       	movw	r26, r24
 77c:	cb 01       	movw	r24, r22
 77e:	f4 01       	movw	r30, r8
 780:	91 83       	std	Z+1, r25	; 0x01
 782:	80 83       	st	Z, r24
 784:	8f e6       	ldi	r24, 0x6F	; 111
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	fc 01       	movw	r30, r24
 78a:	10 82       	st	Z, r1
 78c:	00 00       	nop
 78e:	0f 90       	pop	r0
 790:	df 91       	pop	r29
 792:	cf 91       	pop	r28
 794:	1f 91       	pop	r17
 796:	0f 91       	pop	r16
 798:	ff 90       	pop	r15
 79a:	ef 90       	pop	r14
 79c:	df 90       	pop	r13
 79e:	cf 90       	pop	r12
 7a0:	bf 90       	pop	r11
 7a2:	af 90       	pop	r10
 7a4:	9f 90       	pop	r9
 7a6:	8f 90       	pop	r8
 7a8:	08 95       	ret

000007aa <startPWM>:
 7aa:	cf 93       	push	r28
 7ac:	df 93       	push	r29
 7ae:	cd b7       	in	r28, 0x3d	; 61
 7b0:	de b7       	in	r29, 0x3e	; 62
 7b2:	81 e8       	ldi	r24, 0x81	; 129
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	21 e8       	ldi	r18, 0x81	; 129
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	f9 01       	movw	r30, r18
 7bc:	20 81       	ld	r18, Z
 7be:	21 60       	ori	r18, 0x01	; 1
 7c0:	fc 01       	movw	r30, r24
 7c2:	20 83       	st	Z, r18
 7c4:	00 00       	nop
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	08 95       	ret

000007cc <setDuty>:
 7cc:	8f 92       	push	r8
 7ce:	9f 92       	push	r9
 7d0:	af 92       	push	r10
 7d2:	bf 92       	push	r11
 7d4:	cf 92       	push	r12
 7d6:	df 92       	push	r13
 7d8:	ef 92       	push	r14
 7da:	ff 92       	push	r15
 7dc:	0f 93       	push	r16
 7de:	1f 93       	push	r17
 7e0:	cf 93       	push	r28
 7e2:	df 93       	push	r29
 7e4:	1f 92       	push	r1
 7e6:	cd b7       	in	r28, 0x3d	; 61
 7e8:	de b7       	in	r29, 0x3e	; 62
 7ea:	89 83       	std	Y+1, r24	; 0x01
 7ec:	89 81       	ldd	r24, Y+1	; 0x01
 7ee:	85 36       	cpi	r24, 0x65	; 101
 7f0:	10 f0       	brcs	.+4      	; 0x7f6 <setDuty+0x2a>
 7f2:	84 e6       	ldi	r24, 0x64	; 100
 7f4:	89 83       	std	Y+1, r24	; 0x01
 7f6:	0f 2e       	mov	r0, r31
 7f8:	fa e8       	ldi	r31, 0x8A	; 138
 7fa:	8f 2e       	mov	r8, r31
 7fc:	91 2c       	mov	r9, r1
 7fe:	f0 2d       	mov	r31, r0
 800:	89 81       	ldd	r24, Y+1	; 0x01
 802:	88 2f       	mov	r24, r24
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	a0 e0       	ldi	r26, 0x00	; 0
 808:	b0 e0       	ldi	r27, 0x00	; 0
 80a:	1f 92       	push	r1
 80c:	1f 92       	push	r1
 80e:	21 e0       	ldi	r18, 0x01	; 1
 810:	2f 93       	push	r18
 812:	2f ef       	ldi	r18, 0xFF	; 255
 814:	2f 93       	push	r18
 816:	a1 2c       	mov	r10, r1
 818:	b1 2c       	mov	r11, r1
 81a:	65 01       	movw	r12, r10
 81c:	14 e6       	ldi	r17, 0x64	; 100
 81e:	e1 2e       	mov	r14, r17
 820:	f1 2c       	mov	r15, r1
 822:	00 e0       	ldi	r16, 0x00	; 0
 824:	10 e0       	ldi	r17, 0x00	; 0
 826:	20 e0       	ldi	r18, 0x00	; 0
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	a9 01       	movw	r20, r18
 82c:	bc 01       	movw	r22, r24
 82e:	cd 01       	movw	r24, r26
 830:	0e 94 8e 04 	call	0x91c	; 0x91c <Map>
 834:	0f 90       	pop	r0
 836:	0f 90       	pop	r0
 838:	0f 90       	pop	r0
 83a:	0f 90       	pop	r0
 83c:	dc 01       	movw	r26, r24
 83e:	cb 01       	movw	r24, r22
 840:	f4 01       	movw	r30, r8
 842:	91 83       	std	Z+1, r25	; 0x01
 844:	80 83       	st	Z, r24
 846:	00 00       	nop
 848:	0f 90       	pop	r0
 84a:	df 91       	pop	r29
 84c:	cf 91       	pop	r28
 84e:	1f 91       	pop	r17
 850:	0f 91       	pop	r16
 852:	ff 90       	pop	r15
 854:	ef 90       	pop	r14
 856:	df 90       	pop	r13
 858:	cf 90       	pop	r12
 85a:	bf 90       	pop	r11
 85c:	af 90       	pop	r10
 85e:	9f 90       	pop	r9
 860:	8f 90       	pop	r8
 862:	08 95       	ret

00000864 <wait_1ms>:
 *
 * @param [in] uiFactor: 1ms multiplier
 * @return no return value
 *****************************************************************************/
void wait_1ms(uint16_t uiFactor)
{
 864:	cf 93       	push	r28
 866:	df 93       	push	r29
 868:	00 d0       	rcall	.+0      	; 0x86a <wait_1ms+0x6>
 86a:	00 d0       	rcall	.+0      	; 0x86c <wait_1ms+0x8>
 86c:	cd b7       	in	r28, 0x3d	; 61
 86e:	de b7       	in	r29, 0x3e	; 62
 870:	9c 83       	std	Y+4, r25	; 0x04
 872:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t i;
	TCCR0A = (1<<WGM01);	// mode: CTC
 874:	84 e4       	ldi	r24, 0x44	; 68
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	22 e0       	ldi	r18, 0x02	; 2
 87a:	fc 01       	movw	r30, r24
 87c:	20 83       	st	Z, r18
	TCCR0B = 0;				// mode: CTC
 87e:	85 e4       	ldi	r24, 0x45	; 69
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	fc 01       	movw	r30, r24
 884:	10 82       	st	Z, r1
	TIFR0 =  (1<<OCF0A);	// only OCFA flag needs to be cleared
 886:	85 e3       	ldi	r24, 0x35	; 53
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	22 e0       	ldi	r18, 0x02	; 2
 88c:	fc 01       	movw	r30, r24
 88e:	20 83       	st	Z, r18
	TIMSK0 = 0;				// no interrupts
 890:	8e e6       	ldi	r24, 0x6E	; 110
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	fc 01       	movw	r30, r24
 896:	10 82       	st	Z, r1
	TCNT0 = 0;
 898:	86 e4       	ldi	r24, 0x46	; 70
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	fc 01       	movw	r30, r24
 89e:	10 82       	st	Z, r1
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
 8a0:	87 e4       	ldi	r24, 0x47	; 71
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	2d e4       	ldi	r18, 0x4D	; 77
 8a6:	fc 01       	movw	r30, r24
 8a8:	20 83       	st	Z, r18
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
 8aa:	85 e4       	ldi	r24, 0x45	; 69
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	25 e4       	ldi	r18, 0x45	; 69
 8b0:	30 e0       	ldi	r19, 0x00	; 0
 8b2:	f9 01       	movw	r30, r18
 8b4:	20 81       	ld	r18, Z
 8b6:	24 60       	ori	r18, 0x04	; 4
 8b8:	fc 01       	movw	r30, r24
 8ba:	20 83       	st	Z, r18
	
	for(i=0;i<uiFactor;i++)
 8bc:	1a 82       	std	Y+2, r1	; 0x02
 8be:	19 82       	std	Y+1, r1	; 0x01
 8c0:	15 c0       	rjmp	.+42     	; 0x8ec <wait_1ms+0x88>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
 8c2:	00 00       	nop
 8c4:	85 e3       	ldi	r24, 0x35	; 53
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	fc 01       	movw	r30, r24
 8ca:	80 81       	ld	r24, Z
 8cc:	88 2f       	mov	r24, r24
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	82 70       	andi	r24, 0x02	; 2
 8d2:	99 27       	eor	r25, r25
 8d4:	89 2b       	or	r24, r25
 8d6:	b1 f3       	breq	.-20     	; 0x8c4 <wait_1ms+0x60>
		TIFR0 =  (1<<OCF0A);		// clear flag
 8d8:	85 e3       	ldi	r24, 0x35	; 53
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	22 e0       	ldi	r18, 0x02	; 2
 8de:	fc 01       	movw	r30, r24
 8e0:	20 83       	st	Z, r18
	TCNT0 = 0;
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
	
	for(i=0;i<uiFactor;i++)
 8e2:	89 81       	ldd	r24, Y+1	; 0x01
 8e4:	9a 81       	ldd	r25, Y+2	; 0x02
 8e6:	01 96       	adiw	r24, 0x01	; 1
 8e8:	9a 83       	std	Y+2, r25	; 0x02
 8ea:	89 83       	std	Y+1, r24	; 0x01
 8ec:	29 81       	ldd	r18, Y+1	; 0x01
 8ee:	3a 81       	ldd	r19, Y+2	; 0x02
 8f0:	8b 81       	ldd	r24, Y+3	; 0x03
 8f2:	9c 81       	ldd	r25, Y+4	; 0x04
 8f4:	28 17       	cp	r18, r24
 8f6:	39 07       	cpc	r19, r25
 8f8:	20 f3       	brcs	.-56     	; 0x8c2 <wait_1ms+0x5e>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
		TIFR0 =  (1<<OCF0A);		// clear flag
	}
	TCCR0B &= ~(0x07);	// set prescaler to 0 (stop timer)
 8fa:	85 e4       	ldi	r24, 0x45	; 69
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	25 e4       	ldi	r18, 0x45	; 69
 900:	30 e0       	ldi	r19, 0x00	; 0
 902:	f9 01       	movw	r30, r18
 904:	20 81       	ld	r18, Z
 906:	28 7f       	andi	r18, 0xF8	; 248
 908:	fc 01       	movw	r30, r24
 90a:	20 83       	st	Z, r18
}
 90c:	00 00       	nop
 90e:	0f 90       	pop	r0
 910:	0f 90       	pop	r0
 912:	0f 90       	pop	r0
 914:	0f 90       	pop	r0
 916:	df 91       	pop	r29
 918:	cf 91       	pop	r28
 91a:	08 95       	ret

0000091c <Map>:
 * @param [in] OutMin: minimal value of output range
 * @param [in] OutMax: maximal value of output range
 * @return data in new number range
 *****************************************************************************/
int32_t Map(int32_t lData, int32_t InMin, int32_t InMax, int32_t OutMin, int32_t OutMax)
{
 91c:	af 92       	push	r10
 91e:	bf 92       	push	r11
 920:	cf 92       	push	r12
 922:	df 92       	push	r13
 924:	ef 92       	push	r14
 926:	ff 92       	push	r15
 928:	0f 93       	push	r16
 92a:	1f 93       	push	r17
 92c:	cf 93       	push	r28
 92e:	df 93       	push	r29
 930:	cd b7       	in	r28, 0x3d	; 61
 932:	de b7       	in	r29, 0x3e	; 62
 934:	60 97       	sbiw	r28, 0x10	; 16
 936:	0f b6       	in	r0, 0x3f	; 63
 938:	f8 94       	cli
 93a:	de bf       	out	0x3e, r29	; 62
 93c:	0f be       	out	0x3f, r0	; 63
 93e:	cd bf       	out	0x3d, r28	; 61
 940:	69 83       	std	Y+1, r22	; 0x01
 942:	7a 83       	std	Y+2, r23	; 0x02
 944:	8b 83       	std	Y+3, r24	; 0x03
 946:	9c 83       	std	Y+4, r25	; 0x04
 948:	2d 83       	std	Y+5, r18	; 0x05
 94a:	3e 83       	std	Y+6, r19	; 0x06
 94c:	4f 83       	std	Y+7, r20	; 0x07
 94e:	58 87       	std	Y+8, r21	; 0x08
 950:	e9 86       	std	Y+9, r14	; 0x09
 952:	fa 86       	std	Y+10, r15	; 0x0a
 954:	0b 87       	std	Y+11, r16	; 0x0b
 956:	1c 87       	std	Y+12, r17	; 0x0c
 958:	ad 86       	std	Y+13, r10	; 0x0d
 95a:	be 86       	std	Y+14, r11	; 0x0e
 95c:	cf 86       	std	Y+15, r12	; 0x0f
 95e:	d8 8a       	std	Y+16, r13	; 0x10
	return((lData-InMin)*(OutMax-OutMin)/(InMax-InMin)+OutMin);
 960:	29 81       	ldd	r18, Y+1	; 0x01
 962:	3a 81       	ldd	r19, Y+2	; 0x02
 964:	4b 81       	ldd	r20, Y+3	; 0x03
 966:	5c 81       	ldd	r21, Y+4	; 0x04
 968:	8d 81       	ldd	r24, Y+5	; 0x05
 96a:	9e 81       	ldd	r25, Y+6	; 0x06
 96c:	af 81       	ldd	r26, Y+7	; 0x07
 96e:	b8 85       	ldd	r27, Y+8	; 0x08
 970:	79 01       	movw	r14, r18
 972:	8a 01       	movw	r16, r20
 974:	e8 1a       	sub	r14, r24
 976:	f9 0a       	sbc	r15, r25
 978:	0a 0b       	sbc	r16, r26
 97a:	1b 0b       	sbc	r17, r27
 97c:	2d 8d       	ldd	r18, Y+29	; 0x1d
 97e:	3e 8d       	ldd	r19, Y+30	; 0x1e
 980:	4f 8d       	ldd	r20, Y+31	; 0x1f
 982:	58 a1       	ldd	r21, Y+32	; 0x20
 984:	8d 85       	ldd	r24, Y+13	; 0x0d
 986:	9e 85       	ldd	r25, Y+14	; 0x0e
 988:	af 85       	ldd	r26, Y+15	; 0x0f
 98a:	b8 89       	ldd	r27, Y+16	; 0x10
 98c:	59 01       	movw	r10, r18
 98e:	6a 01       	movw	r12, r20
 990:	a8 1a       	sub	r10, r24
 992:	b9 0a       	sbc	r11, r25
 994:	ca 0a       	sbc	r12, r26
 996:	db 0a       	sbc	r13, r27
 998:	d6 01       	movw	r26, r12
 99a:	c5 01       	movw	r24, r10
 99c:	a8 01       	movw	r20, r16
 99e:	97 01       	movw	r18, r14
 9a0:	bc 01       	movw	r22, r24
 9a2:	cd 01       	movw	r24, r26
 9a4:	0e 94 4a 05 	call	0xa94	; 0xa94 <__mulsi3>
 9a8:	7b 01       	movw	r14, r22
 9aa:	8c 01       	movw	r16, r24
 9ac:	29 85       	ldd	r18, Y+9	; 0x09
 9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
 9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
 9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
 9b4:	8d 81       	ldd	r24, Y+5	; 0x05
 9b6:	9e 81       	ldd	r25, Y+6	; 0x06
 9b8:	af 81       	ldd	r26, Y+7	; 0x07
 9ba:	b8 85       	ldd	r27, Y+8	; 0x08
 9bc:	28 1b       	sub	r18, r24
 9be:	39 0b       	sbc	r19, r25
 9c0:	4a 0b       	sbc	r20, r26
 9c2:	5b 0b       	sbc	r21, r27
 9c4:	c8 01       	movw	r24, r16
 9c6:	b7 01       	movw	r22, r14
 9c8:	0e 94 5a 05 	call	0xab4	; 0xab4 <__divmodsi4>
 9cc:	da 01       	movw	r26, r20
 9ce:	c9 01       	movw	r24, r18
 9d0:	9c 01       	movw	r18, r24
 9d2:	ad 01       	movw	r20, r26
 9d4:	8d 85       	ldd	r24, Y+13	; 0x0d
 9d6:	9e 85       	ldd	r25, Y+14	; 0x0e
 9d8:	af 85       	ldd	r26, Y+15	; 0x0f
 9da:	b8 89       	ldd	r27, Y+16	; 0x10
 9dc:	82 0f       	add	r24, r18
 9de:	93 1f       	adc	r25, r19
 9e0:	a4 1f       	adc	r26, r20
 9e2:	b5 1f       	adc	r27, r21
}
 9e4:	bc 01       	movw	r22, r24
 9e6:	cd 01       	movw	r24, r26
 9e8:	60 96       	adiw	r28, 0x10	; 16
 9ea:	0f b6       	in	r0, 0x3f	; 63
 9ec:	f8 94       	cli
 9ee:	de bf       	out	0x3e, r29	; 62
 9f0:	0f be       	out	0x3f, r0	; 63
 9f2:	cd bf       	out	0x3d, r28	; 61
 9f4:	df 91       	pop	r29
 9f6:	cf 91       	pop	r28
 9f8:	1f 91       	pop	r17
 9fa:	0f 91       	pop	r16
 9fc:	ff 90       	pop	r15
 9fe:	ef 90       	pop	r14
 a00:	df 90       	pop	r13
 a02:	cf 90       	pop	r12
 a04:	bf 90       	pop	r11
 a06:	af 90       	pop	r10
 a08:	08 95       	ret

00000a0a <CRC8>:

uint8_t CRC8(uint8_t* au8Data, uint8_t u8Length)
{
 a0a:	cf 93       	push	r28
 a0c:	df 93       	push	r29
 a0e:	cd b7       	in	r28, 0x3d	; 61
 a10:	de b7       	in	r29, 0x3e	; 62
 a12:	28 97       	sbiw	r28, 0x08	; 8
 a14:	0f b6       	in	r0, 0x3f	; 63
 a16:	f8 94       	cli
 a18:	de bf       	out	0x3e, r29	; 62
 a1a:	0f be       	out	0x3f, r0	; 63
 a1c:	cd bf       	out	0x3d, r28	; 61
 a1e:	9f 83       	std	Y+7, r25	; 0x07
 a20:	8e 83       	std	Y+6, r24	; 0x06
 a22:	68 87       	std	Y+8, r22	; 0x08
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;
 a24:	19 82       	std	Y+1, r1	; 0x01

	for(i=0;i<u8Length;i++)
 a26:	1a 82       	std	Y+2, r1	; 0x02
 a28:	27 c0       	rjmp	.+78     	; 0xa78 <CRC8+0x6e>
	{
		u8InByte = au8Data[i];
 a2a:	8a 81       	ldd	r24, Y+2	; 0x02
 a2c:	88 2f       	mov	r24, r24
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	2e 81       	ldd	r18, Y+6	; 0x06
 a32:	3f 81       	ldd	r19, Y+7	; 0x07
 a34:	82 0f       	add	r24, r18
 a36:	93 1f       	adc	r25, r19
 a38:	fc 01       	movw	r30, r24
 a3a:	80 81       	ld	r24, Z
 a3c:	8c 83       	std	Y+4, r24	; 0x04
		for(j=0;j<8;j++)
 a3e:	1b 82       	std	Y+3, r1	; 0x03
 a40:	15 c0       	rjmp	.+42     	; 0xa6c <CRC8+0x62>
		{
			u8Temp = (u8CRC^u8InByte)&0x80;
 a42:	99 81       	ldd	r25, Y+1	; 0x01
 a44:	8c 81       	ldd	r24, Y+4	; 0x04
 a46:	89 27       	eor	r24, r25
 a48:	80 78       	andi	r24, 0x80	; 128
 a4a:	8d 83       	std	Y+5, r24	; 0x05
			u8CRC <<= 1;
 a4c:	89 81       	ldd	r24, Y+1	; 0x01
 a4e:	88 0f       	add	r24, r24
 a50:	89 83       	std	Y+1, r24	; 0x01
			if(u8Temp!=0)
 a52:	8d 81       	ldd	r24, Y+5	; 0x05
 a54:	88 23       	and	r24, r24
 a56:	21 f0       	breq	.+8      	; 0xa60 <CRC8+0x56>
			{
				u8CRC ^= 0x07;
 a58:	99 81       	ldd	r25, Y+1	; 0x01
 a5a:	87 e0       	ldi	r24, 0x07	; 7
 a5c:	89 27       	eor	r24, r25
 a5e:	89 83       	std	Y+1, r24	; 0x01
			}
			u8InByte<<=1;
 a60:	8c 81       	ldd	r24, Y+4	; 0x04
 a62:	88 0f       	add	r24, r24
 a64:	8c 83       	std	Y+4, r24	; 0x04
	u8CRC = 0;

	for(i=0;i<u8Length;i++)
	{
		u8InByte = au8Data[i];
		for(j=0;j<8;j++)
 a66:	8b 81       	ldd	r24, Y+3	; 0x03
 a68:	8f 5f       	subi	r24, 0xFF	; 255
 a6a:	8b 83       	std	Y+3, r24	; 0x03
 a6c:	8b 81       	ldd	r24, Y+3	; 0x03
 a6e:	88 30       	cpi	r24, 0x08	; 8
 a70:	40 f3       	brcs	.-48     	; 0xa42 <CRC8+0x38>
{
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;

	for(i=0;i<u8Length;i++)
 a72:	8a 81       	ldd	r24, Y+2	; 0x02
 a74:	8f 5f       	subi	r24, 0xFF	; 255
 a76:	8a 83       	std	Y+2, r24	; 0x02
 a78:	9a 81       	ldd	r25, Y+2	; 0x02
 a7a:	88 85       	ldd	r24, Y+8	; 0x08
 a7c:	98 17       	cp	r25, r24
 a7e:	a8 f2       	brcs	.-86     	; 0xa2a <CRC8+0x20>
			}
			u8InByte<<=1;
		}
	}

	return u8CRC;
 a80:	89 81       	ldd	r24, Y+1	; 0x01
}
 a82:	28 96       	adiw	r28, 0x08	; 8
 a84:	0f b6       	in	r0, 0x3f	; 63
 a86:	f8 94       	cli
 a88:	de bf       	out	0x3e, r29	; 62
 a8a:	0f be       	out	0x3f, r0	; 63
 a8c:	cd bf       	out	0x3d, r28	; 61
 a8e:	df 91       	pop	r29
 a90:	cf 91       	pop	r28
 a92:	08 95       	ret

00000a94 <__mulsi3>:
 a94:	db 01       	movw	r26, r22
 a96:	8f 93       	push	r24
 a98:	9f 93       	push	r25
 a9a:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__muluhisi3>
 a9e:	bf 91       	pop	r27
 aa0:	af 91       	pop	r26
 aa2:	a2 9f       	mul	r26, r18
 aa4:	80 0d       	add	r24, r0
 aa6:	91 1d       	adc	r25, r1
 aa8:	a3 9f       	mul	r26, r19
 aaa:	90 0d       	add	r25, r0
 aac:	b2 9f       	mul	r27, r18
 aae:	90 0d       	add	r25, r0
 ab0:	11 24       	eor	r1, r1
 ab2:	08 95       	ret

00000ab4 <__divmodsi4>:
 ab4:	05 2e       	mov	r0, r21
 ab6:	97 fb       	bst	r25, 7
 ab8:	1e f4       	brtc	.+6      	; 0xac0 <__divmodsi4+0xc>
 aba:	00 94       	com	r0
 abc:	0e 94 71 05 	call	0xae2	; 0xae2 <__negsi2>
 ac0:	57 fd       	sbrc	r21, 7
 ac2:	07 d0       	rcall	.+14     	; 0xad2 <__divmodsi4_neg2>
 ac4:	0e 94 84 05 	call	0xb08	; 0xb08 <__udivmodsi4>
 ac8:	07 fc       	sbrc	r0, 7
 aca:	03 d0       	rcall	.+6      	; 0xad2 <__divmodsi4_neg2>
 acc:	4e f4       	brtc	.+18     	; 0xae0 <__divmodsi4_exit>
 ace:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__negsi2>

00000ad2 <__divmodsi4_neg2>:
 ad2:	50 95       	com	r21
 ad4:	40 95       	com	r20
 ad6:	30 95       	com	r19
 ad8:	21 95       	neg	r18
 ada:	3f 4f       	sbci	r19, 0xFF	; 255
 adc:	4f 4f       	sbci	r20, 0xFF	; 255
 ade:	5f 4f       	sbci	r21, 0xFF	; 255

00000ae0 <__divmodsi4_exit>:
 ae0:	08 95       	ret

00000ae2 <__negsi2>:
 ae2:	90 95       	com	r25
 ae4:	80 95       	com	r24
 ae6:	70 95       	com	r23
 ae8:	61 95       	neg	r22
 aea:	7f 4f       	sbci	r23, 0xFF	; 255
 aec:	8f 4f       	sbci	r24, 0xFF	; 255
 aee:	9f 4f       	sbci	r25, 0xFF	; 255
 af0:	08 95       	ret

00000af2 <__muluhisi3>:
 af2:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__umulhisi3>
 af6:	a5 9f       	mul	r26, r21
 af8:	90 0d       	add	r25, r0
 afa:	b4 9f       	mul	r27, r20
 afc:	90 0d       	add	r25, r0
 afe:	a4 9f       	mul	r26, r20
 b00:	80 0d       	add	r24, r0
 b02:	91 1d       	adc	r25, r1
 b04:	11 24       	eor	r1, r1
 b06:	08 95       	ret

00000b08 <__udivmodsi4>:
 b08:	a1 e2       	ldi	r26, 0x21	; 33
 b0a:	1a 2e       	mov	r1, r26
 b0c:	aa 1b       	sub	r26, r26
 b0e:	bb 1b       	sub	r27, r27
 b10:	fd 01       	movw	r30, r26
 b12:	0d c0       	rjmp	.+26     	; 0xb2e <__udivmodsi4_ep>

00000b14 <__udivmodsi4_loop>:
 b14:	aa 1f       	adc	r26, r26
 b16:	bb 1f       	adc	r27, r27
 b18:	ee 1f       	adc	r30, r30
 b1a:	ff 1f       	adc	r31, r31
 b1c:	a2 17       	cp	r26, r18
 b1e:	b3 07       	cpc	r27, r19
 b20:	e4 07       	cpc	r30, r20
 b22:	f5 07       	cpc	r31, r21
 b24:	20 f0       	brcs	.+8      	; 0xb2e <__udivmodsi4_ep>
 b26:	a2 1b       	sub	r26, r18
 b28:	b3 0b       	sbc	r27, r19
 b2a:	e4 0b       	sbc	r30, r20
 b2c:	f5 0b       	sbc	r31, r21

00000b2e <__udivmodsi4_ep>:
 b2e:	66 1f       	adc	r22, r22
 b30:	77 1f       	adc	r23, r23
 b32:	88 1f       	adc	r24, r24
 b34:	99 1f       	adc	r25, r25
 b36:	1a 94       	dec	r1
 b38:	69 f7       	brne	.-38     	; 0xb14 <__udivmodsi4_loop>
 b3a:	60 95       	com	r22
 b3c:	70 95       	com	r23
 b3e:	80 95       	com	r24
 b40:	90 95       	com	r25
 b42:	9b 01       	movw	r18, r22
 b44:	ac 01       	movw	r20, r24
 b46:	bd 01       	movw	r22, r26
 b48:	cf 01       	movw	r24, r30
 b4a:	08 95       	ret

00000b4c <__umulhisi3>:
 b4c:	a2 9f       	mul	r26, r18
 b4e:	b0 01       	movw	r22, r0
 b50:	b3 9f       	mul	r27, r19
 b52:	c0 01       	movw	r24, r0
 b54:	a3 9f       	mul	r26, r19
 b56:	70 0d       	add	r23, r0
 b58:	81 1d       	adc	r24, r1
 b5a:	11 24       	eor	r1, r1
 b5c:	91 1d       	adc	r25, r1
 b5e:	b2 9f       	mul	r27, r18
 b60:	70 0d       	add	r23, r0
 b62:	81 1d       	adc	r24, r1
 b64:	11 24       	eor	r1, r1
 b66:	91 1d       	adc	r25, r1
 b68:	08 95       	ret

00000b6a <_exit>:
 b6a:	f8 94       	cli

00000b6c <__stop_program>:
 b6c:	ff cf       	rjmp	.-2      	; 0xb6c <__stop_program>
