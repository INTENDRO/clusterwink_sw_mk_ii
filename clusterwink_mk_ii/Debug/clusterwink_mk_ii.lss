
clusterwink_mk_ii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00003260  000032f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003260  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fb  0080013e  0080013e  00003332  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003332  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003364  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  000033a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014d9  00000000  00000000  0000353c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b33  00000000  00000000  00004a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000191b  00000000  00000000  00005548  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000071c  00000000  00000000  00006e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a01  00000000  00000000  00007580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ef7  00000000  00000000  00007f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00008e78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
       4:	0c 94 4a 02 	jmp	0x494	; 0x494 <__vector_1>
       8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      14:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__vector_5>
      18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      24:	0c 94 10 04 	jmp	0x820	; 0x820 <__vector_9>
      28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      40:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      48:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      4c:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_19>
      50:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      54:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      68:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      6c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      70:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      74:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      78:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      7c:	16 06       	cpc	r1, r22
      7e:	2f 06       	cpc	r2, r31
      80:	48 06       	cpc	r4, r24
      82:	02 07       	cpc	r16, r18
      84:	1d 07       	cpc	r17, r29
      86:	1d 07       	cpc	r17, r29
      88:	1d 07       	cpc	r17, r29
      8a:	ad 07       	cpc	r26, r29
      8c:	ba 07       	cpc	r27, r26
      8e:	c7 07       	cpc	r28, r23
      90:	e2 07       	cpc	r30, r18
      92:	ec 07       	cpc	r30, r28
      94:	dc 08       	sbc	r13, r12
      96:	84 0a       	sbc	r8, r20
      98:	84 0a       	sbc	r8, r20
      9a:	84 0a       	sbc	r8, r20
      9c:	84 0a       	sbc	r8, r20
      9e:	84 0a       	sbc	r8, r20
      a0:	84 0a       	sbc	r8, r20
      a2:	84 0a       	sbc	r8, r20
      a4:	84 0a       	sbc	r8, r20
      a6:	84 0a       	sbc	r8, r20
      a8:	84 0a       	sbc	r8, r20
      aa:	18 09       	sbc	r17, r8
      ac:	25 09       	sbc	r18, r5
      ae:	32 09       	sbc	r19, r2
      b0:	84 0a       	sbc	r8, r20
      b2:	84 0a       	sbc	r8, r20
      b4:	84 0a       	sbc	r8, r20
      b6:	84 0a       	sbc	r8, r20
      b8:	84 0a       	sbc	r8, r20
      ba:	84 0a       	sbc	r8, r20
      bc:	84 0a       	sbc	r8, r20
      be:	84 0a       	sbc	r8, r20
      c0:	84 0a       	sbc	r8, r20
      c2:	84 0a       	sbc	r8, r20
      c4:	84 0a       	sbc	r8, r20
      c6:	84 0a       	sbc	r8, r20
      c8:	84 0a       	sbc	r8, r20
      ca:	3c 09       	sbc	r19, r12
      cc:	47 09       	sbc	r20, r7
      ce:	6a 09       	sbc	r22, r10
      d0:	84 0a       	sbc	r8, r20
      d2:	84 0a       	sbc	r8, r20
      d4:	84 0a       	sbc	r8, r20
      d6:	84 0a       	sbc	r8, r20
      d8:	84 0a       	sbc	r8, r20
      da:	84 0a       	sbc	r8, r20
      dc:	84 0a       	sbc	r8, r20
      de:	84 0a       	sbc	r8, r20
      e0:	84 0a       	sbc	r8, r20
      e2:	84 0a       	sbc	r8, r20
      e4:	84 0a       	sbc	r8, r20
      e6:	84 0a       	sbc	r8, r20
      e8:	84 0a       	sbc	r8, r20
      ea:	a4 09       	sbc	r26, r4
      ec:	af 09       	sbc	r26, r15
      ee:	f7 09       	sbc	r31, r7

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d8 e0       	ldi	r29, 0x08	; 8
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_copy_data>:
      fc:	11 e0       	ldi	r17, 0x01	; 1
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	e0 e6       	ldi	r30, 0x60	; 96
     104:	f2 e3       	ldi	r31, 0x32	; 50
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x10>
     108:	05 90       	lpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	ae 33       	cpi	r26, 0x3E	; 62
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0xc>

00000112 <__do_clear_bss>:
     112:	22 e0       	ldi	r18, 0x02	; 2
     114:	ae e3       	ldi	r26, 0x3E	; 62
     116:	b1 e0       	ldi	r27, 0x01	; 1
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	a9 33       	cpi	r26, 0x39	; 57
     11e:	b2 07       	cpc	r27, r18
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>
     122:	0e 94 aa 0a 	call	0x1554	; 0x1554 <main>
     126:	0c 94 2e 19 	jmp	0x325c	; 0x325c <_exit>

0000012a <__bad_interrupt>:
     12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
    cli();
     136:	f8 94       	cli
    return 1;
     138:	81 e0       	ldi	r24, 0x01	; 1
}
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	08 95       	ret

00000140 <__iRestore>:
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	00 d0       	rcall	.+0      	; 0x146 <__iRestore+0x6>
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	9a 83       	std	Y+2, r25	; 0x02
     14c:	89 83       	std	Y+1, r24	; 0x01
    SREG = *__s;
     14e:	8f e5       	ldi	r24, 0x5F	; 95
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	29 81       	ldd	r18, Y+1	; 0x01
     154:	3a 81       	ldd	r19, Y+2	; 0x02
     156:	f9 01       	movw	r30, r18
     158:	20 81       	ld	r18, Z
     15a:	fc 01       	movw	r30, r24
     15c:	20 83       	st	Z, r18
    __asm__ volatile ("" ::: "memory");
}
     15e:	00 00       	nop
     160:	0f 90       	pop	r0
     162:	0f 90       	pop	r0
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	08 95       	ret

0000016a <RingBuffer_InitBuffer>:
		 *  by re-initializing them using this function.
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	00 d0       	rcall	.+0      	; 0x170 <RingBuffer_InitBuffer+0x6>
     170:	00 d0       	rcall	.+0      	; 0x172 <RingBuffer_InitBuffer+0x8>
     172:	cd b7       	in	r28, 0x3d	; 61
     174:	de b7       	in	r29, 0x3e	; 62
     176:	9c 83       	std	Y+4, r25	; 0x04
     178:	8b 83       	std	Y+3, r24	; 0x03
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     17a:	8f e5       	ldi	r24, 0x5F	; 95
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	fc 01       	movw	r30, r24
     180:	80 81       	ld	r24, Z
     182:	8a 83       	std	Y+2, r24	; 0x02
     184:	0e 94 97 00 	call	0x12e	; 0x12e <__iCliRetVal>
     188:	89 83       	std	Y+1, r24	; 0x01
     18a:	19 c0       	rjmp	.+50     	; 0x1be <RingBuffer_InitBuffer+0x54>
			{
				Buffer->In    = Buffer->Buffer;
     18c:	2b 81       	ldd	r18, Y+3	; 0x03
     18e:	3c 81       	ldd	r19, Y+4	; 0x04
     190:	8b 81       	ldd	r24, Y+3	; 0x03
     192:	9c 81       	ldd	r25, Y+4	; 0x04
     194:	80 58       	subi	r24, 0x80	; 128
     196:	9f 4f       	sbci	r25, 0xFF	; 255
     198:	fc 01       	movw	r30, r24
     19a:	31 83       	std	Z+1, r19	; 0x01
     19c:	20 83       	st	Z, r18
				Buffer->Out   = Buffer->Buffer;
     19e:	2b 81       	ldd	r18, Y+3	; 0x03
     1a0:	3c 81       	ldd	r19, Y+4	; 0x04
     1a2:	8b 81       	ldd	r24, Y+3	; 0x03
     1a4:	9c 81       	ldd	r25, Y+4	; 0x04
     1a6:	8e 57       	subi	r24, 0x7E	; 126
     1a8:	9f 4f       	sbci	r25, 0xFF	; 255
     1aa:	fc 01       	movw	r30, r24
     1ac:	31 83       	std	Z+1, r19	; 0x01
     1ae:	20 83       	st	Z, r18
				Buffer->Count = 0;
     1b0:	8b 81       	ldd	r24, Y+3	; 0x03
     1b2:	9c 81       	ldd	r25, Y+4	; 0x04
     1b4:	8c 57       	subi	r24, 0x7C	; 124
     1b6:	9f 4f       	sbci	r25, 0xFF	; 255
     1b8:	fc 01       	movw	r30, r24
     1ba:	10 82       	st	Z, r1
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     1bc:	19 82       	std	Y+1, r1	; 0x01
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	88 23       	and	r24, r24
     1c2:	21 f7       	brne	.-56     	; 0x18c <RingBuffer_InitBuffer+0x22>
     1c4:	ce 01       	movw	r24, r28
     1c6:	02 96       	adiw	r24, 0x02	; 2
     1c8:	0e 94 a0 00 	call	0x140	; 0x140 <__iRestore>
			{
				Buffer->In    = Buffer->Buffer;
				Buffer->Out   = Buffer->Buffer;
				Buffer->Count = 0;
			}
		}
     1cc:	00 00       	nop
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	0f 90       	pop	r0
     1d4:	0f 90       	pop	r0
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	08 95       	ret

000001dc <RingBuffer_Insert>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	00 d0       	rcall	.+0      	; 0x1e2 <RingBuffer_Insert+0x6>
     1e2:	00 d0       	rcall	.+0      	; 0x1e4 <RingBuffer_Insert+0x8>
     1e4:	1f 92       	push	r1
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
     1ea:	9c 83       	std	Y+4, r25	; 0x04
     1ec:	8b 83       	std	Y+3, r24	; 0x03
     1ee:	6d 83       	std	Y+5, r22	; 0x05
			*Buffer->In = Data;
     1f0:	8b 81       	ldd	r24, Y+3	; 0x03
     1f2:	9c 81       	ldd	r25, Y+4	; 0x04
     1f4:	80 58       	subi	r24, 0x80	; 128
     1f6:	9f 4f       	sbci	r25, 0xFF	; 255
     1f8:	fc 01       	movw	r30, r24
     1fa:	80 81       	ld	r24, Z
     1fc:	91 81       	ldd	r25, Z+1	; 0x01
     1fe:	2d 81       	ldd	r18, Y+5	; 0x05
     200:	fc 01       	movw	r30, r24
     202:	20 83       	st	Z, r18
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
     204:	8b 81       	ldd	r24, Y+3	; 0x03
     206:	9c 81       	ldd	r25, Y+4	; 0x04
     208:	80 58       	subi	r24, 0x80	; 128
     20a:	9f 4f       	sbci	r25, 0xFF	; 255
     20c:	fc 01       	movw	r30, r24
     20e:	80 81       	ld	r24, Z
     210:	91 81       	ldd	r25, Z+1	; 0x01
     212:	9c 01       	movw	r18, r24
     214:	2f 5f       	subi	r18, 0xFF	; 255
     216:	3f 4f       	sbci	r19, 0xFF	; 255
     218:	8b 81       	ldd	r24, Y+3	; 0x03
     21a:	9c 81       	ldd	r25, Y+4	; 0x04
     21c:	80 58       	subi	r24, 0x80	; 128
     21e:	9f 4f       	sbci	r25, 0xFF	; 255
     220:	fc 01       	movw	r30, r24
     222:	31 83       	std	Z+1, r19	; 0x01
     224:	20 83       	st	Z, r18
     226:	8b 81       	ldd	r24, Y+3	; 0x03
     228:	9c 81       	ldd	r25, Y+4	; 0x04
     22a:	80 58       	subi	r24, 0x80	; 128
     22c:	9f 4f       	sbci	r25, 0xFF	; 255
     22e:	fc 01       	movw	r30, r24
     230:	20 81       	ld	r18, Z
     232:	31 81       	ldd	r19, Z+1	; 0x01
     234:	8b 81       	ldd	r24, Y+3	; 0x03
     236:	9c 81       	ldd	r25, Y+4	; 0x04
     238:	80 58       	subi	r24, 0x80	; 128
     23a:	9f 4f       	sbci	r25, 0xFF	; 255
     23c:	28 17       	cp	r18, r24
     23e:	39 07       	cpc	r19, r25
     240:	49 f4       	brne	.+18     	; 0x254 <RingBuffer_Insert+0x78>
			  Buffer->In = Buffer->Buffer;
     242:	2b 81       	ldd	r18, Y+3	; 0x03
     244:	3c 81       	ldd	r19, Y+4	; 0x04
     246:	8b 81       	ldd	r24, Y+3	; 0x03
     248:	9c 81       	ldd	r25, Y+4	; 0x04
     24a:	80 58       	subi	r24, 0x80	; 128
     24c:	9f 4f       	sbci	r25, 0xFF	; 255
     24e:	fc 01       	movw	r30, r24
     250:	31 83       	std	Z+1, r19	; 0x01
     252:	20 83       	st	Z, r18

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     254:	8f e5       	ldi	r24, 0x5F	; 95
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	fc 01       	movw	r30, r24
     25a:	80 81       	ld	r24, Z
     25c:	8a 83       	std	Y+2, r24	; 0x02
     25e:	0e 94 97 00 	call	0x12e	; 0x12e <__iCliRetVal>
     262:	89 83       	std	Y+1, r24	; 0x01
     264:	0f c0       	rjmp	.+30     	; 0x284 <RingBuffer_Insert+0xa8>
			{
				Buffer->Count++;
     266:	8b 81       	ldd	r24, Y+3	; 0x03
     268:	9c 81       	ldd	r25, Y+4	; 0x04
     26a:	8c 57       	subi	r24, 0x7C	; 124
     26c:	9f 4f       	sbci	r25, 0xFF	; 255
     26e:	fc 01       	movw	r30, r24
     270:	80 81       	ld	r24, Z
     272:	21 e0       	ldi	r18, 0x01	; 1
     274:	28 0f       	add	r18, r24
     276:	8b 81       	ldd	r24, Y+3	; 0x03
     278:	9c 81       	ldd	r25, Y+4	; 0x04
     27a:	8c 57       	subi	r24, 0x7C	; 124
     27c:	9f 4f       	sbci	r25, 0xFF	; 255
     27e:	fc 01       	movw	r30, r24
     280:	20 83       	st	Z, r18
			*Buffer->In = Data;
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->In = Buffer->Buffer;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     282:	19 82       	std	Y+1, r1	; 0x01
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	88 23       	and	r24, r24
     288:	71 f7       	brne	.-36     	; 0x266 <RingBuffer_Insert+0x8a>
     28a:	ce 01       	movw	r24, r28
     28c:	02 96       	adiw	r24, 0x02	; 2
     28e:	0e 94 a0 00 	call	0x140	; 0x140 <__iRestore>
			{
				Buffer->Count++;
			}
		}
     292:	00 00       	nop
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0
     29c:	0f 90       	pop	r0
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret

000002a4 <RingBuffer_Remove>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to retrieve from
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	00 d0       	rcall	.+0      	; 0x2aa <RingBuffer_Remove+0x6>
     2aa:	00 d0       	rcall	.+0      	; 0x2ac <RingBuffer_Remove+0x8>
     2ac:	1f 92       	push	r1
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	9d 83       	std	Y+5, r25	; 0x05
     2b4:	8c 83       	std	Y+4, r24	; 0x04
			RingBuff_Data_t Data = *Buffer->Out;
     2b6:	8c 81       	ldd	r24, Y+4	; 0x04
     2b8:	9d 81       	ldd	r25, Y+5	; 0x05
     2ba:	8e 57       	subi	r24, 0x7E	; 126
     2bc:	9f 4f       	sbci	r25, 0xFF	; 255
     2be:	fc 01       	movw	r30, r24
     2c0:	80 81       	ld	r24, Z
     2c2:	91 81       	ldd	r25, Z+1	; 0x01
     2c4:	fc 01       	movw	r30, r24
     2c6:	80 81       	ld	r24, Z
     2c8:	8a 83       	std	Y+2, r24	; 0x02
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
     2ca:	8c 81       	ldd	r24, Y+4	; 0x04
     2cc:	9d 81       	ldd	r25, Y+5	; 0x05
     2ce:	8e 57       	subi	r24, 0x7E	; 126
     2d0:	9f 4f       	sbci	r25, 0xFF	; 255
     2d2:	fc 01       	movw	r30, r24
     2d4:	80 81       	ld	r24, Z
     2d6:	91 81       	ldd	r25, Z+1	; 0x01
     2d8:	9c 01       	movw	r18, r24
     2da:	2f 5f       	subi	r18, 0xFF	; 255
     2dc:	3f 4f       	sbci	r19, 0xFF	; 255
     2de:	8c 81       	ldd	r24, Y+4	; 0x04
     2e0:	9d 81       	ldd	r25, Y+5	; 0x05
     2e2:	8e 57       	subi	r24, 0x7E	; 126
     2e4:	9f 4f       	sbci	r25, 0xFF	; 255
     2e6:	fc 01       	movw	r30, r24
     2e8:	31 83       	std	Z+1, r19	; 0x01
     2ea:	20 83       	st	Z, r18
     2ec:	8c 81       	ldd	r24, Y+4	; 0x04
     2ee:	9d 81       	ldd	r25, Y+5	; 0x05
     2f0:	8e 57       	subi	r24, 0x7E	; 126
     2f2:	9f 4f       	sbci	r25, 0xFF	; 255
     2f4:	fc 01       	movw	r30, r24
     2f6:	20 81       	ld	r18, Z
     2f8:	31 81       	ldd	r19, Z+1	; 0x01
     2fa:	8c 81       	ldd	r24, Y+4	; 0x04
     2fc:	9d 81       	ldd	r25, Y+5	; 0x05
     2fe:	80 58       	subi	r24, 0x80	; 128
     300:	9f 4f       	sbci	r25, 0xFF	; 255
     302:	28 17       	cp	r18, r24
     304:	39 07       	cpc	r19, r25
     306:	49 f4       	brne	.+18     	; 0x31a <RingBuffer_Remove+0x76>
			  Buffer->Out = Buffer->Buffer;
     308:	2c 81       	ldd	r18, Y+4	; 0x04
     30a:	3d 81       	ldd	r19, Y+5	; 0x05
     30c:	8c 81       	ldd	r24, Y+4	; 0x04
     30e:	9d 81       	ldd	r25, Y+5	; 0x05
     310:	8e 57       	subi	r24, 0x7E	; 126
     312:	9f 4f       	sbci	r25, 0xFF	; 255
     314:	fc 01       	movw	r30, r24
     316:	31 83       	std	Z+1, r19	; 0x01
     318:	20 83       	st	Z, r18

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     31a:	8f e5       	ldi	r24, 0x5F	; 95
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	fc 01       	movw	r30, r24
     320:	80 81       	ld	r24, Z
     322:	8b 83       	std	Y+3, r24	; 0x03
     324:	0e 94 97 00 	call	0x12e	; 0x12e <__iCliRetVal>
     328:	89 83       	std	Y+1, r24	; 0x01
     32a:	0f c0       	rjmp	.+30     	; 0x34a <RingBuffer_Remove+0xa6>
			{
				Buffer->Count--;
     32c:	8c 81       	ldd	r24, Y+4	; 0x04
     32e:	9d 81       	ldd	r25, Y+5	; 0x05
     330:	8c 57       	subi	r24, 0x7C	; 124
     332:	9f 4f       	sbci	r25, 0xFF	; 255
     334:	fc 01       	movw	r30, r24
     336:	80 81       	ld	r24, Z
     338:	2f ef       	ldi	r18, 0xFF	; 255
     33a:	28 0f       	add	r18, r24
     33c:	8c 81       	ldd	r24, Y+4	; 0x04
     33e:	9d 81       	ldd	r25, Y+5	; 0x05
     340:	8c 57       	subi	r24, 0x7C	; 124
     342:	9f 4f       	sbci	r25, 0xFF	; 255
     344:	fc 01       	movw	r30, r24
     346:	20 83       	st	Z, r18
			RingBuff_Data_t Data = *Buffer->Out;
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->Out = Buffer->Buffer;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     348:	19 82       	std	Y+1, r1	; 0x01
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	88 23       	and	r24, r24
     34e:	71 f7       	brne	.-36     	; 0x32c <RingBuffer_Remove+0x88>
     350:	ce 01       	movw	r24, r28
     352:	03 96       	adiw	r24, 0x03	; 3
     354:	0e 94 a0 00 	call	0x140	; 0x140 <__iRestore>
			{
				Buffer->Count--;
			}
			
			return Data;
     358:	8a 81       	ldd	r24, Y+2	; 0x02
		}
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	08 95       	ret

0000036a <RingBuffer_CountChar>:
			}
			*(Destination+PeakLength) = 0;
		}

		static inline RingBuff_Count_t RingBuffer_CountChar(RingBuff_t* const Buffer, char charToCheck)
		{
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	00 d0       	rcall	.+0      	; 0x370 <RingBuffer_CountChar+0x6>
     370:	00 d0       	rcall	.+0      	; 0x372 <RingBuffer_CountChar+0x8>
     372:	00 d0       	rcall	.+0      	; 0x374 <RingBuffer_CountChar+0xa>
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
     378:	9d 83       	std	Y+5, r25	; 0x05
     37a:	8c 83       	std	Y+4, r24	; 0x04
     37c:	6e 83       	std	Y+6, r22	; 0x06
			RingBuff_Count_t count = 0;
     37e:	19 82       	std	Y+1, r1	; 0x01

			RingBuff_Data_t* currentRead = Buffer->Out;
     380:	8c 81       	ldd	r24, Y+4	; 0x04
     382:	9d 81       	ldd	r25, Y+5	; 0x05
     384:	8e 57       	subi	r24, 0x7E	; 126
     386:	9f 4f       	sbci	r25, 0xFF	; 255
     388:	fc 01       	movw	r30, r24
     38a:	80 81       	ld	r24, Z
     38c:	91 81       	ldd	r25, Z+1	; 0x01
     38e:	9b 83       	std	Y+3, r25	; 0x03
     390:	8a 83       	std	Y+2, r24	; 0x02

			while(currentRead != Buffer->In)
     392:	1c c0       	rjmp	.+56     	; 0x3cc <RingBuffer_CountChar+0x62>
			{
				if(*currentRead==charToCheck)
     394:	8a 81       	ldd	r24, Y+2	; 0x02
     396:	9b 81       	ldd	r25, Y+3	; 0x03
     398:	fc 01       	movw	r30, r24
     39a:	90 81       	ld	r25, Z
     39c:	8e 81       	ldd	r24, Y+6	; 0x06
     39e:	98 17       	cp	r25, r24
     3a0:	19 f4       	brne	.+6      	; 0x3a8 <RingBuffer_CountChar+0x3e>
				{
					count++;
     3a2:	89 81       	ldd	r24, Y+1	; 0x01
     3a4:	8f 5f       	subi	r24, 0xFF	; 255
     3a6:	89 83       	std	Y+1, r24	; 0x01
				}
				if (++currentRead == &Buffer->Buffer[BUFFER_SIZE]) currentRead = Buffer->Buffer;
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	9b 81       	ldd	r25, Y+3	; 0x03
     3ac:	01 96       	adiw	r24, 0x01	; 1
     3ae:	9b 83       	std	Y+3, r25	; 0x03
     3b0:	8a 83       	std	Y+2, r24	; 0x02
     3b2:	8c 81       	ldd	r24, Y+4	; 0x04
     3b4:	9d 81       	ldd	r25, Y+5	; 0x05
     3b6:	80 58       	subi	r24, 0x80	; 128
     3b8:	9f 4f       	sbci	r25, 0xFF	; 255
     3ba:	2a 81       	ldd	r18, Y+2	; 0x02
     3bc:	3b 81       	ldd	r19, Y+3	; 0x03
     3be:	28 17       	cp	r18, r24
     3c0:	39 07       	cpc	r19, r25
     3c2:	21 f4       	brne	.+8      	; 0x3cc <RingBuffer_CountChar+0x62>
     3c4:	8c 81       	ldd	r24, Y+4	; 0x04
     3c6:	9d 81       	ldd	r25, Y+5	; 0x05
     3c8:	9b 83       	std	Y+3, r25	; 0x03
     3ca:	8a 83       	std	Y+2, r24	; 0x02
		{
			RingBuff_Count_t count = 0;

			RingBuff_Data_t* currentRead = Buffer->Out;

			while(currentRead != Buffer->In)
     3cc:	8c 81       	ldd	r24, Y+4	; 0x04
     3ce:	9d 81       	ldd	r25, Y+5	; 0x05
     3d0:	80 58       	subi	r24, 0x80	; 128
     3d2:	9f 4f       	sbci	r25, 0xFF	; 255
     3d4:	fc 01       	movw	r30, r24
     3d6:	20 81       	ld	r18, Z
     3d8:	31 81       	ldd	r19, Z+1	; 0x01
     3da:	8a 81       	ldd	r24, Y+2	; 0x02
     3dc:	9b 81       	ldd	r25, Y+3	; 0x03
     3de:	28 17       	cp	r18, r24
     3e0:	39 07       	cpc	r19, r25
     3e2:	c1 f6       	brne	.-80     	; 0x394 <RingBuffer_CountChar+0x2a>
				{
					count++;
				}
				if (++currentRead == &Buffer->Buffer[BUFFER_SIZE]) currentRead = Buffer->Buffer;
			}
			return(count);
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
		}
     3e6:	26 96       	adiw	r28, 0x06	; 6
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	cd bf       	out	0x3d, r28	; 61
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <RingBuffer_RemoveUntilChar>:

		static inline void RingBuffer_RemoveUntilChar(RingBuff_t* const Buffer, RingBuff_Data_t* Destination, char endChar, uint8_t includingChar)
		{
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	29 97       	sbiw	r28, 0x09	; 9
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	de bf       	out	0x3e, r29	; 62
     408:	0f be       	out	0x3f, r0	; 63
     40a:	cd bf       	out	0x3d, r28	; 61
     40c:	9d 83       	std	Y+5, r25	; 0x05
     40e:	8c 83       	std	Y+4, r24	; 0x04
     410:	7f 83       	std	Y+7, r23	; 0x07
     412:	6e 83       	std	Y+6, r22	; 0x06
     414:	48 87       	std	Y+8, r20	; 0x08
     416:	29 87       	std	Y+9, r18	; 0x09
			RingBuff_Data_t tempData;
			unsigned int uiDestinationOffset = 0;
     418:	1a 82       	std	Y+2, r1	; 0x02
     41a:	19 82       	std	Y+1, r1	; 0x01
			
			while(1)
			{
				tempData = RingBuffer_Remove(Buffer);
     41c:	8c 81       	ldd	r24, Y+4	; 0x04
     41e:	9d 81       	ldd	r25, Y+5	; 0x05
     420:	0e 94 52 01 	call	0x2a4	; 0x2a4 <RingBuffer_Remove>
     424:	8b 83       	std	Y+3, r24	; 0x03
				if(tempData == endChar)
     426:	9b 81       	ldd	r25, Y+3	; 0x03
     428:	88 85       	ldd	r24, Y+8	; 0x08
     42a:	98 17       	cp	r25, r24
     42c:	d1 f4       	brne	.+52     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
				{
					if(includingChar)
     42e:	89 85       	ldd	r24, Y+9	; 0x09
     430:	88 23       	and	r24, r24
     432:	71 f0       	breq	.+28     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
					{
						*(Destination+uiDestinationOffset) = tempData;
     434:	2e 81       	ldd	r18, Y+6	; 0x06
     436:	3f 81       	ldd	r19, Y+7	; 0x07
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	9a 81       	ldd	r25, Y+2	; 0x02
     43c:	82 0f       	add	r24, r18
     43e:	93 1f       	adc	r25, r19
     440:	2b 81       	ldd	r18, Y+3	; 0x03
     442:	fc 01       	movw	r30, r24
     444:	20 83       	st	Z, r18
						uiDestinationOffset++;
     446:	89 81       	ldd	r24, Y+1	; 0x01
     448:	9a 81       	ldd	r25, Y+2	; 0x02
     44a:	01 96       	adiw	r24, 0x01	; 1
     44c:	9a 83       	std	Y+2, r25	; 0x02
     44e:	89 83       	std	Y+1, r24	; 0x01
					}
					*(Destination+uiDestinationOffset) = 0;
     450:	2e 81       	ldd	r18, Y+6	; 0x06
     452:	3f 81       	ldd	r19, Y+7	; 0x07
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	9a 81       	ldd	r25, Y+2	; 0x02
     458:	82 0f       	add	r24, r18
     45a:	93 1f       	adc	r25, r19
     45c:	fc 01       	movw	r30, r24
     45e:	10 82       	st	Z, r1
					break;
     460:	0f c0       	rjmp	.+30     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
				}
				*(Destination+uiDestinationOffset) = tempData;
     462:	2e 81       	ldd	r18, Y+6	; 0x06
     464:	3f 81       	ldd	r19, Y+7	; 0x07
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	9a 81       	ldd	r25, Y+2	; 0x02
     46a:	82 0f       	add	r24, r18
     46c:	93 1f       	adc	r25, r19
     46e:	2b 81       	ldd	r18, Y+3	; 0x03
     470:	fc 01       	movw	r30, r24
     472:	20 83       	st	Z, r18
				uiDestinationOffset++;
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	9a 81       	ldd	r25, Y+2	; 0x02
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	9a 83       	std	Y+2, r25	; 0x02
     47c:	89 83       	std	Y+1, r24	; 0x01
			}
     47e:	ce cf       	rjmp	.-100    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		}
     480:	00 00       	nop
     482:	29 96       	adiw	r28, 0x09	; 9
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	08 95       	ret

00000494 <__vector_1>:
volatile uint8_t u8Status = 0x00; //higher nibble: error code | 0:no error 1:over temperature
volatile uint8_t u8Duty = 0;


ISR(INT0_vect)	// external interrupt (handshake from RGBooster board)
{				// start RGBooster send sequence: reset "ucRGBIdx" and "ucByteIdx" to zero. then start with calling the ISR directly "INT1_vect();"
     494:	1f 92       	push	r1
     496:	0f 92       	push	r0
     498:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     49c:	0f 92       	push	r0
     49e:	11 24       	eor	r1, r1
     4a0:	2f 93       	push	r18
     4a2:	3f 93       	push	r19
     4a4:	4f 93       	push	r20
     4a6:	8f 93       	push	r24
     4a8:	9f 93       	push	r25
     4aa:	ef 93       	push	r30
     4ac:	ff 93       	push	r31
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
	#ifdef TX_DEBUG
	PORTD |= (1<<PORTD1);
     4b6:	8b e2       	ldi	r24, 0x2B	; 43
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	2b e2       	ldi	r18, 0x2B	; 43
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	f9 01       	movw	r30, r18
     4c0:	20 81       	ld	r18, Z
     4c2:	22 60       	ori	r18, 0x02	; 2
     4c4:	fc 01       	movw	r30, r24
     4c6:	20 83       	st	Z, r18
	#endif
	
	if(u8RGBSingleColor)
     4c8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <u8RGBSingleColor>
     4cc:	88 23       	and	r24, r24
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <__vector_1+0x3e>
     4d0:	b5 c0       	rjmp	.+362    	; 0x63c <__vector_1+0x1a8>
	{
		if(u8RGBIdx<(LED_COUNT))
     4d2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8RGBIdx>
     4d6:	84 31       	cpi	r24, 0x14	; 20
     4d8:	08 f0       	brcs	.+2      	; 0x4dc <__vector_1+0x48>
     4da:	ad c0       	rjmp	.+346    	; 0x636 <__vector_1+0x1a2>
		{
			switch(u8RGBByteIdx) // red green and blue are sent in 3 separate bytes. this variable remembers the next color to be sent
     4dc:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     4e0:	88 2f       	mov	r24, r24
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	81 30       	cpi	r24, 0x01	; 1
     4e6:	91 05       	cpc	r25, r1
     4e8:	d9 f1       	breq	.+118    	; 0x560 <__vector_1+0xcc>
     4ea:	82 30       	cpi	r24, 0x02	; 2
     4ec:	91 05       	cpc	r25, r1
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <__vector_1+0x5e>
     4f0:	6b c0       	rjmp	.+214    	; 0x5c8 <__vector_1+0x134>
     4f2:	89 2b       	or	r24, r25
     4f4:	09 f0       	breq	.+2      	; 0x4f8 <__vector_1+0x64>
     4f6:	7b c1       	rjmp	.+758    	; 0x7ee <__vector_1+0x35a>
			{
				case 0:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (u8RGBGreen & DATA_HIGH_BITMASK);
     4f8:	82 e2       	ldi	r24, 0x22	; 34
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	22 e2       	ldi	r18, 0x22	; 34
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	f9 01       	movw	r30, r18
     502:	20 81       	ld	r18, Z
     504:	32 2f       	mov	r19, r18
     506:	3f 70       	andi	r19, 0x0F	; 15
     508:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <u8RGBGreen>
     50c:	20 7f       	andi	r18, 0xF0	; 240
     50e:	23 2b       	or	r18, r19
     510:	fc 01       	movw	r30, r24
     512:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (u8RGBGreen & DATA_LOW_BITMASK);
     514:	85 e2       	ldi	r24, 0x25	; 37
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	25 e2       	ldi	r18, 0x25	; 37
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	f9 01       	movw	r30, r18
     51e:	20 81       	ld	r18, Z
     520:	32 2f       	mov	r19, r18
     522:	30 7f       	andi	r19, 0xF0	; 240
     524:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <u8RGBGreen>
     528:	2f 70       	andi	r18, 0x0F	; 15
     52a:	23 2b       	or	r18, r19
     52c:	fc 01       	movw	r30, r24
     52e:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     530:	8b e2       	ldi	r24, 0x2B	; 43
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	2b e2       	ldi	r18, 0x2B	; 43
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	f9 01       	movw	r30, r18
     53a:	20 81       	ld	r18, Z
     53c:	28 60       	ori	r18, 0x08	; 8
     53e:	fc 01       	movw	r30, r24
     540:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     542:	8b e2       	ldi	r24, 0x2B	; 43
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	2b e2       	ldi	r18, 0x2B	; 43
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	f9 01       	movw	r30, r18
     54c:	20 81       	ld	r18, Z
     54e:	27 7f       	andi	r18, 0xF7	; 247
     550:	fc 01       	movw	r30, r24
     552:	20 83       	st	Z, r18
				u8RGBByteIdx++;
     554:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     558:	8f 5f       	subi	r24, 0xFF	; 255
     55a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
				break;
     55e:	47 c1       	rjmp	.+654    	; 0x7ee <__vector_1+0x35a>

				case 1:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (u8RGBRed & DATA_HIGH_BITMASK);
     560:	82 e2       	ldi	r24, 0x22	; 34
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	22 e2       	ldi	r18, 0x22	; 34
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	f9 01       	movw	r30, r18
     56a:	20 81       	ld	r18, Z
     56c:	32 2f       	mov	r19, r18
     56e:	3f 70       	andi	r19, 0x0F	; 15
     570:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <u8RGBRed>
     574:	20 7f       	andi	r18, 0xF0	; 240
     576:	23 2b       	or	r18, r19
     578:	fc 01       	movw	r30, r24
     57a:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (u8RGBRed & DATA_LOW_BITMASK);
     57c:	85 e2       	ldi	r24, 0x25	; 37
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	25 e2       	ldi	r18, 0x25	; 37
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	f9 01       	movw	r30, r18
     586:	20 81       	ld	r18, Z
     588:	32 2f       	mov	r19, r18
     58a:	30 7f       	andi	r19, 0xF0	; 240
     58c:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <u8RGBRed>
     590:	2f 70       	andi	r18, 0x0F	; 15
     592:	23 2b       	or	r18, r19
     594:	fc 01       	movw	r30, r24
     596:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     598:	8b e2       	ldi	r24, 0x2B	; 43
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	2b e2       	ldi	r18, 0x2B	; 43
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	f9 01       	movw	r30, r18
     5a2:	20 81       	ld	r18, Z
     5a4:	28 60       	ori	r18, 0x08	; 8
     5a6:	fc 01       	movw	r30, r24
     5a8:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     5aa:	8b e2       	ldi	r24, 0x2B	; 43
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	2b e2       	ldi	r18, 0x2B	; 43
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	f9 01       	movw	r30, r18
     5b4:	20 81       	ld	r18, Z
     5b6:	27 7f       	andi	r18, 0xF7	; 247
     5b8:	fc 01       	movw	r30, r24
     5ba:	20 83       	st	Z, r18
				u8RGBByteIdx++;
     5bc:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     5c0:	8f 5f       	subi	r24, 0xFF	; 255
     5c2:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
				break;
     5c6:	13 c1       	rjmp	.+550    	; 0x7ee <__vector_1+0x35a>

				case 2:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (u8RGBBlue & DATA_HIGH_BITMASK);
     5c8:	82 e2       	ldi	r24, 0x22	; 34
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	22 e2       	ldi	r18, 0x22	; 34
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	f9 01       	movw	r30, r18
     5d2:	20 81       	ld	r18, Z
     5d4:	32 2f       	mov	r19, r18
     5d6:	3f 70       	andi	r19, 0x0F	; 15
     5d8:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <u8RGBBlue>
     5dc:	20 7f       	andi	r18, 0xF0	; 240
     5de:	23 2b       	or	r18, r19
     5e0:	fc 01       	movw	r30, r24
     5e2:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (u8RGBBlue & DATA_LOW_BITMASK);
     5e4:	85 e2       	ldi	r24, 0x25	; 37
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	25 e2       	ldi	r18, 0x25	; 37
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	f9 01       	movw	r30, r18
     5ee:	20 81       	ld	r18, Z
     5f0:	32 2f       	mov	r19, r18
     5f2:	30 7f       	andi	r19, 0xF0	; 240
     5f4:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <u8RGBBlue>
     5f8:	2f 70       	andi	r18, 0x0F	; 15
     5fa:	23 2b       	or	r18, r19
     5fc:	fc 01       	movw	r30, r24
     5fe:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     600:	8b e2       	ldi	r24, 0x2B	; 43
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	2b e2       	ldi	r18, 0x2B	; 43
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	f9 01       	movw	r30, r18
     60a:	20 81       	ld	r18, Z
     60c:	28 60       	ori	r18, 0x08	; 8
     60e:	fc 01       	movw	r30, r24
     610:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     612:	8b e2       	ldi	r24, 0x2B	; 43
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	2b e2       	ldi	r18, 0x2B	; 43
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	f9 01       	movw	r30, r18
     61c:	20 81       	ld	r18, Z
     61e:	27 7f       	andi	r18, 0xF7	; 247
     620:	fc 01       	movw	r30, r24
     622:	20 83       	st	Z, r18
				u8RGBByteIdx=0;
     624:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
				u8RGBIdx++;
     628:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8RGBIdx>
     62c:	8f 5f       	subi	r24, 0xFF	; 255
     62e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <u8RGBIdx>
				break;
     632:	00 00       	nop
     634:	dc c0       	rjmp	.+440    	; 0x7ee <__vector_1+0x35a>
			}
		}
		else
		{
			u8RGBDataState = 0;
     636:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <u8RGBDataState>
     63a:	d9 c0       	rjmp	.+434    	; 0x7ee <__vector_1+0x35a>
		}
	}
	else
	{
		if(u8RGBIdx<(LED_COUNT))
     63c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8RGBIdx>
     640:	84 31       	cpi	r24, 0x14	; 20
     642:	08 f0       	brcs	.+2      	; 0x646 <__vector_1+0x1b2>
     644:	d2 c0       	rjmp	.+420    	; 0x7ea <__vector_1+0x356>
		{
			switch(u8RGBByteIdx) // red green and blue are sent in 3 separate bytes. this variable remembers the next color to be sent
     646:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     64a:	88 2f       	mov	r24, r24
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	81 30       	cpi	r24, 0x01	; 1
     650:	91 05       	cpc	r25, r1
     652:	09 f4       	brne	.+2      	; 0x656 <__vector_1+0x1c2>
     654:	47 c0       	rjmp	.+142    	; 0x6e4 <__vector_1+0x250>
     656:	82 30       	cpi	r24, 0x02	; 2
     658:	91 05       	cpc	r25, r1
     65a:	09 f4       	brne	.+2      	; 0x65e <__vector_1+0x1ca>
     65c:	83 c0       	rjmp	.+262    	; 0x764 <__vector_1+0x2d0>
     65e:	89 2b       	or	r24, r25
     660:	09 f0       	breq	.+2      	; 0x664 <__vector_1+0x1d0>
     662:	c5 c0       	rjmp	.+394    	; 0x7ee <__vector_1+0x35a>
			{
				case 0:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (au8Green[u8RGBIdx] & DATA_HIGH_BITMASK);
     664:	82 e2       	ldi	r24, 0x22	; 34
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	22 e2       	ldi	r18, 0x22	; 34
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	f9 01       	movw	r30, r18
     66e:	20 81       	ld	r18, Z
     670:	42 2f       	mov	r20, r18
     672:	4f 70       	andi	r20, 0x0F	; 15
     674:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     678:	22 2f       	mov	r18, r18
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	2c 5e       	subi	r18, 0xEC	; 236
     67e:	3e 4f       	sbci	r19, 0xFE	; 254
     680:	f9 01       	movw	r30, r18
     682:	20 81       	ld	r18, Z
     684:	20 7f       	andi	r18, 0xF0	; 240
     686:	24 2b       	or	r18, r20
     688:	fc 01       	movw	r30, r24
     68a:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (au8Green[u8RGBIdx] & DATA_LOW_BITMASK);
     68c:	85 e2       	ldi	r24, 0x25	; 37
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	25 e2       	ldi	r18, 0x25	; 37
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	f9 01       	movw	r30, r18
     696:	20 81       	ld	r18, Z
     698:	42 2f       	mov	r20, r18
     69a:	40 7f       	andi	r20, 0xF0	; 240
     69c:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     6a0:	22 2f       	mov	r18, r18
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	2c 5e       	subi	r18, 0xEC	; 236
     6a6:	3e 4f       	sbci	r19, 0xFE	; 254
     6a8:	f9 01       	movw	r30, r18
     6aa:	20 81       	ld	r18, Z
     6ac:	2f 70       	andi	r18, 0x0F	; 15
     6ae:	24 2b       	or	r18, r20
     6b0:	fc 01       	movw	r30, r24
     6b2:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     6b4:	8b e2       	ldi	r24, 0x2B	; 43
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	2b e2       	ldi	r18, 0x2B	; 43
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	f9 01       	movw	r30, r18
     6be:	20 81       	ld	r18, Z
     6c0:	28 60       	ori	r18, 0x08	; 8
     6c2:	fc 01       	movw	r30, r24
     6c4:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     6c6:	8b e2       	ldi	r24, 0x2B	; 43
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	2b e2       	ldi	r18, 0x2B	; 43
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	f9 01       	movw	r30, r18
     6d0:	20 81       	ld	r18, Z
     6d2:	27 7f       	andi	r18, 0xF7	; 247
     6d4:	fc 01       	movw	r30, r24
     6d6:	20 83       	st	Z, r18
				u8RGBByteIdx++;
     6d8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     6dc:	8f 5f       	subi	r24, 0xFF	; 255
     6de:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
				break;
     6e2:	85 c0       	rjmp	.+266    	; 0x7ee <__vector_1+0x35a>

				case 1:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (au8Red[u8RGBIdx] & DATA_HIGH_BITMASK);
     6e4:	82 e2       	ldi	r24, 0x22	; 34
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	22 e2       	ldi	r18, 0x22	; 34
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	f9 01       	movw	r30, r18
     6ee:	20 81       	ld	r18, Z
     6f0:	42 2f       	mov	r20, r18
     6f2:	4f 70       	andi	r20, 0x0F	; 15
     6f4:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     6f8:	22 2f       	mov	r18, r18
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	20 50       	subi	r18, 0x00	; 0
     6fe:	3f 4f       	sbci	r19, 0xFF	; 255
     700:	f9 01       	movw	r30, r18
     702:	20 81       	ld	r18, Z
     704:	20 7f       	andi	r18, 0xF0	; 240
     706:	24 2b       	or	r18, r20
     708:	fc 01       	movw	r30, r24
     70a:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (au8Red[u8RGBIdx] & DATA_LOW_BITMASK);
     70c:	85 e2       	ldi	r24, 0x25	; 37
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	25 e2       	ldi	r18, 0x25	; 37
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	f9 01       	movw	r30, r18
     716:	20 81       	ld	r18, Z
     718:	42 2f       	mov	r20, r18
     71a:	40 7f       	andi	r20, 0xF0	; 240
     71c:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     720:	22 2f       	mov	r18, r18
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	20 50       	subi	r18, 0x00	; 0
     726:	3f 4f       	sbci	r19, 0xFF	; 255
     728:	f9 01       	movw	r30, r18
     72a:	20 81       	ld	r18, Z
     72c:	2f 70       	andi	r18, 0x0F	; 15
     72e:	24 2b       	or	r18, r20
     730:	fc 01       	movw	r30, r24
     732:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     734:	8b e2       	ldi	r24, 0x2B	; 43
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	2b e2       	ldi	r18, 0x2B	; 43
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	f9 01       	movw	r30, r18
     73e:	20 81       	ld	r18, Z
     740:	28 60       	ori	r18, 0x08	; 8
     742:	fc 01       	movw	r30, r24
     744:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     746:	8b e2       	ldi	r24, 0x2B	; 43
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	2b e2       	ldi	r18, 0x2B	; 43
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	f9 01       	movw	r30, r18
     750:	20 81       	ld	r18, Z
     752:	27 7f       	andi	r18, 0xF7	; 247
     754:	fc 01       	movw	r30, r24
     756:	20 83       	st	Z, r18
				u8RGBByteIdx++;
     758:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     75c:	8f 5f       	subi	r24, 0xFF	; 255
     75e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
				break;
     762:	45 c0       	rjmp	.+138    	; 0x7ee <__vector_1+0x35a>

				case 2:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (au8Blue[u8RGBIdx] & DATA_HIGH_BITMASK);
     764:	82 e2       	ldi	r24, 0x22	; 34
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	22 e2       	ldi	r18, 0x22	; 34
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	f9 01       	movw	r30, r18
     76e:	20 81       	ld	r18, Z
     770:	42 2f       	mov	r20, r18
     772:	4f 70       	andi	r20, 0x0F	; 15
     774:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     778:	22 2f       	mov	r18, r18
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	28 5d       	subi	r18, 0xD8	; 216
     77e:	3e 4f       	sbci	r19, 0xFE	; 254
     780:	f9 01       	movw	r30, r18
     782:	20 81       	ld	r18, Z
     784:	20 7f       	andi	r18, 0xF0	; 240
     786:	24 2b       	or	r18, r20
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (au8Blue[u8RGBIdx] & DATA_LOW_BITMASK);
     78c:	85 e2       	ldi	r24, 0x25	; 37
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	25 e2       	ldi	r18, 0x25	; 37
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	f9 01       	movw	r30, r18
     796:	20 81       	ld	r18, Z
     798:	42 2f       	mov	r20, r18
     79a:	40 7f       	andi	r20, 0xF0	; 240
     79c:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     7a0:	22 2f       	mov	r18, r18
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	28 5d       	subi	r18, 0xD8	; 216
     7a6:	3e 4f       	sbci	r19, 0xFE	; 254
     7a8:	f9 01       	movw	r30, r18
     7aa:	20 81       	ld	r18, Z
     7ac:	2f 70       	andi	r18, 0x0F	; 15
     7ae:	24 2b       	or	r18, r20
     7b0:	fc 01       	movw	r30, r24
     7b2:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     7b4:	8b e2       	ldi	r24, 0x2B	; 43
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	2b e2       	ldi	r18, 0x2B	; 43
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	f9 01       	movw	r30, r18
     7be:	20 81       	ld	r18, Z
     7c0:	28 60       	ori	r18, 0x08	; 8
     7c2:	fc 01       	movw	r30, r24
     7c4:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     7c6:	8b e2       	ldi	r24, 0x2B	; 43
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	2b e2       	ldi	r18, 0x2B	; 43
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	f9 01       	movw	r30, r18
     7d0:	20 81       	ld	r18, Z
     7d2:	27 7f       	andi	r18, 0xF7	; 247
     7d4:	fc 01       	movw	r30, r24
     7d6:	20 83       	st	Z, r18
				u8RGBByteIdx=0;
     7d8:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
				u8RGBIdx++;
     7dc:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8RGBIdx>
     7e0:	8f 5f       	subi	r24, 0xFF	; 255
     7e2:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <u8RGBIdx>
				break;
     7e6:	00 00       	nop
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <__vector_1+0x35a>
			}
		}
		else
		{
			u8RGBDataState = 0;
     7ea:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <u8RGBDataState>
		}
	}
	
	
	#ifdef TX_DEBUG
	PORTD &= ~(1<<PORTD1);
     7ee:	8b e2       	ldi	r24, 0x2B	; 43
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	2b e2       	ldi	r18, 0x2B	; 43
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	f9 01       	movw	r30, r18
     7f8:	20 81       	ld	r18, Z
     7fa:	2d 7f       	andi	r18, 0xFD	; 253
     7fc:	fc 01       	movw	r30, r24
     7fe:	20 83       	st	Z, r18
	#endif
}
     800:	00 00       	nop
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	ff 91       	pop	r31
     808:	ef 91       	pop	r30
     80a:	9f 91       	pop	r25
     80c:	8f 91       	pop	r24
     80e:	4f 91       	pop	r20
     810:	3f 91       	pop	r19
     812:	2f 91       	pop	r18
     814:	0f 90       	pop	r0
     816:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     81a:	0f 90       	pop	r0
     81c:	1f 90       	pop	r1
     81e:	18 95       	reti

00000820 <__vector_9>:

ISR(TIMER2_COMPA_vect)
{
     820:	1f 92       	push	r1
     822:	0f 92       	push	r0
     824:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     828:	0f 92       	push	r0
     82a:	11 24       	eor	r1, r1
     82c:	af 92       	push	r10
     82e:	bf 92       	push	r11
     830:	cf 92       	push	r12
     832:	df 92       	push	r13
     834:	ef 92       	push	r14
     836:	ff 92       	push	r15
     838:	0f 93       	push	r16
     83a:	1f 93       	push	r17
     83c:	2f 93       	push	r18
     83e:	3f 93       	push	r19
     840:	4f 93       	push	r20
     842:	5f 93       	push	r21
     844:	6f 93       	push	r22
     846:	7f 93       	push	r23
     848:	8f 93       	push	r24
     84a:	9f 93       	push	r25
     84c:	af 93       	push	r26
     84e:	bf 93       	push	r27
     850:	ef 93       	push	r30
     852:	ff 93       	push	r31
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
	#ifdef TX_DEBUG
	PORTD |= (1<<PORTD1);
     85c:	8b e2       	ldi	r24, 0x2B	; 43
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	2b e2       	ldi	r18, 0x2B	; 43
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	f9 01       	movw	r30, r18
     866:	20 81       	ld	r18, Z
     868:	22 60       	ori	r18, 0x02	; 2
     86a:	fc 01       	movw	r30, r24
     86c:	20 83       	st	Z, r18
	#endif
	
	switch(u8PLEDAnimation)
     86e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <u8PLEDAnimation>
     872:	88 2f       	mov	r24, r24
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	81 30       	cpi	r24, 0x01	; 1
     878:	91 05       	cpc	r25, r1
     87a:	21 f0       	breq	.+8      	; 0x884 <__vector_9+0x64>
     87c:	02 97       	sbiw	r24, 0x02	; 2
     87e:	09 f4       	brne	.+2      	; 0x882 <__vector_9+0x62>
     880:	e9 c0       	rjmp	.+466    	; 0xa54 <__stack+0x155>
     882:	14 c1       	rjmp	.+552    	; 0xaac <__stack+0x1ad>
	{
		case 1:
		if(u8PLEDFadeDirection) // rise
     884:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <u8PLEDFadeDirection>
     888:	88 23       	and	r24, r24
     88a:	09 f4       	brne	.+2      	; 0x88e <__vector_9+0x6e>
     88c:	72 c0       	rjmp	.+228    	; 0x972 <__stack+0x73>
		{
			u32PLEDFadeIntCount++;
     88e:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <u32PLEDFadeIntCount>
     892:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <u32PLEDFadeIntCount+0x1>
     896:	a0 91 65 01 	lds	r26, 0x0165	; 0x800165 <u32PLEDFadeIntCount+0x2>
     89a:	b0 91 66 01 	lds	r27, 0x0166	; 0x800166 <u32PLEDFadeIntCount+0x3>
     89e:	01 96       	adiw	r24, 0x01	; 1
     8a0:	a1 1d       	adc	r26, r1
     8a2:	b1 1d       	adc	r27, r1
     8a4:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <u32PLEDFadeIntCount>
     8a8:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <u32PLEDFadeIntCount+0x1>
     8ac:	a0 93 65 01 	sts	0x0165, r26	; 0x800165 <u32PLEDFadeIntCount+0x2>
     8b0:	b0 93 66 01 	sts	0x0166, r27	; 0x800166 <u32PLEDFadeIntCount+0x3>
			if(u32PLEDFadeIntCount>=u32PLEDFadeIntStep)
     8b4:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <u32PLEDFadeIntCount>
     8b8:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <u32PLEDFadeIntCount+0x1>
     8bc:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <u32PLEDFadeIntCount+0x2>
     8c0:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <u32PLEDFadeIntCount+0x3>
     8c4:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <u32PLEDFadeIntStep>
     8c8:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <u32PLEDFadeIntStep+0x1>
     8cc:	a0 91 61 01 	lds	r26, 0x0161	; 0x800161 <u32PLEDFadeIntStep+0x2>
     8d0:	b0 91 62 01 	lds	r27, 0x0162	; 0x800162 <u32PLEDFadeIntStep+0x3>
     8d4:	28 17       	cp	r18, r24
     8d6:	39 07       	cpc	r19, r25
     8d8:	4a 07       	cpc	r20, r26
     8da:	5b 07       	cpc	r21, r27
     8dc:	08 f4       	brcc	.+2      	; 0x8e0 <__vector_9+0xc0>
     8de:	e3 c0       	rjmp	.+454    	; 0xaa6 <__stack+0x1a7>
			{
				u32PLEDFadeIntCount = 0;
     8e0:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <u32PLEDFadeIntCount>
     8e4:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <u32PLEDFadeIntCount+0x1>
     8e8:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <u32PLEDFadeIntCount+0x2>
     8ec:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <u32PLEDFadeIntCount+0x3>
				u16PLEDFadeCurrValue++;
     8f0:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     8f4:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     8fe:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <u16PLEDFadeCurrValue>
				setPWMDuty(u16PLEDFadeCurrValue);
     902:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     906:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     90a:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <setPWMDuty>
				u8Duty = Map(u16PLEDFadeCurrValue,0,511,0,100);
     90e:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     912:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     916:	cc 01       	movw	r24, r24
     918:	a0 e0       	ldi	r26, 0x00	; 0
     91a:	b0 e0       	ldi	r27, 0x00	; 0
     91c:	1f 92       	push	r1
     91e:	1f 92       	push	r1
     920:	1f 92       	push	r1
     922:	24 e6       	ldi	r18, 0x64	; 100
     924:	2f 93       	push	r18
     926:	a1 2c       	mov	r10, r1
     928:	b1 2c       	mov	r11, r1
     92a:	65 01       	movw	r12, r10
     92c:	e1 2c       	mov	r14, r1
     92e:	f1 2c       	mov	r15, r1
     930:	87 01       	movw	r16, r14
     932:	ea 94       	dec	r14
     934:	f3 94       	inc	r15
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	a9 01       	movw	r20, r18
     93c:	bc 01       	movw	r22, r24
     93e:	cd 01       	movw	r24, r26
     940:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <Map>
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	dc 01       	movw	r26, r24
     94e:	cb 01       	movw	r24, r22
     950:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <u8Duty>

				if(u16PLEDFadeCurrValue>=u16PLEDFadeStopValue)
     954:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     958:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     95c:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <u16PLEDFadeStopValue>
     960:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <u16PLEDFadeStopValue+0x1>
     964:	28 17       	cp	r18, r24
     966:	39 07       	cpc	r19, r25
     968:	08 f4       	brcc	.+2      	; 0x96c <__stack+0x6d>
     96a:	9d c0       	rjmp	.+314    	; 0xaa6 <__stack+0x1a7>
				{
					u8PLEDAnimation = 0;
     96c:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <u8PLEDAnimation>
				{
					u8PLEDAnimation = 0;
				}
			}
		}
		break;
     970:	9a c0       	rjmp	.+308    	; 0xaa6 <__stack+0x1a7>
				}
			}
		}
		else // fall
		{
			u32PLEDFadeIntCount++;
     972:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <u32PLEDFadeIntCount>
     976:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <u32PLEDFadeIntCount+0x1>
     97a:	a0 91 65 01 	lds	r26, 0x0165	; 0x800165 <u32PLEDFadeIntCount+0x2>
     97e:	b0 91 66 01 	lds	r27, 0x0166	; 0x800166 <u32PLEDFadeIntCount+0x3>
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	a1 1d       	adc	r26, r1
     986:	b1 1d       	adc	r27, r1
     988:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <u32PLEDFadeIntCount>
     98c:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <u32PLEDFadeIntCount+0x1>
     990:	a0 93 65 01 	sts	0x0165, r26	; 0x800165 <u32PLEDFadeIntCount+0x2>
     994:	b0 93 66 01 	sts	0x0166, r27	; 0x800166 <u32PLEDFadeIntCount+0x3>
			if(u32PLEDFadeIntCount>=u32PLEDFadeIntStep)
     998:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <u32PLEDFadeIntCount>
     99c:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <u32PLEDFadeIntCount+0x1>
     9a0:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <u32PLEDFadeIntCount+0x2>
     9a4:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <u32PLEDFadeIntCount+0x3>
     9a8:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <u32PLEDFadeIntStep>
     9ac:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <u32PLEDFadeIntStep+0x1>
     9b0:	a0 91 61 01 	lds	r26, 0x0161	; 0x800161 <u32PLEDFadeIntStep+0x2>
     9b4:	b0 91 62 01 	lds	r27, 0x0162	; 0x800162 <u32PLEDFadeIntStep+0x3>
     9b8:	28 17       	cp	r18, r24
     9ba:	39 07       	cpc	r19, r25
     9bc:	4a 07       	cpc	r20, r26
     9be:	5b 07       	cpc	r21, r27
     9c0:	08 f4       	brcc	.+2      	; 0x9c4 <__stack+0xc5>
     9c2:	71 c0       	rjmp	.+226    	; 0xaa6 <__stack+0x1a7>
			{
				u32PLEDFadeIntCount = 0;
     9c4:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <u32PLEDFadeIntCount>
     9c8:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <u32PLEDFadeIntCount+0x1>
     9cc:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <u32PLEDFadeIntCount+0x2>
     9d0:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <u32PLEDFadeIntCount+0x3>
				u16PLEDFadeCurrValue--;
     9d4:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     9d8:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     9e2:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <u16PLEDFadeCurrValue>
				setPWMDuty(u16PLEDFadeCurrValue);
     9e6:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     9ea:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     9ee:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <setPWMDuty>
				u8Duty = Map(u16PLEDFadeCurrValue,0,511,0,100);
     9f2:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     9f6:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     9fa:	cc 01       	movw	r24, r24
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	1f 92       	push	r1
     a02:	1f 92       	push	r1
     a04:	1f 92       	push	r1
     a06:	24 e6       	ldi	r18, 0x64	; 100
     a08:	2f 93       	push	r18
     a0a:	a1 2c       	mov	r10, r1
     a0c:	b1 2c       	mov	r11, r1
     a0e:	65 01       	movw	r12, r10
     a10:	e1 2c       	mov	r14, r1
     a12:	f1 2c       	mov	r15, r1
     a14:	87 01       	movw	r16, r14
     a16:	ea 94       	dec	r14
     a18:	f3 94       	inc	r15
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	a9 01       	movw	r20, r18
     a20:	bc 01       	movw	r22, r24
     a22:	cd 01       	movw	r24, r26
     a24:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <Map>
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	dc 01       	movw	r26, r24
     a32:	cb 01       	movw	r24, r22
     a34:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <u8Duty>

				if(u16PLEDFadeCurrValue<=u16PLEDFadeStopValue)
     a38:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     a3c:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     a40:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <u16PLEDFadeStopValue>
     a44:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <u16PLEDFadeStopValue+0x1>
     a48:	82 17       	cp	r24, r18
     a4a:	93 07       	cpc	r25, r19
     a4c:	60 f1       	brcs	.+88     	; 0xaa6 <__stack+0x1a7>
				{
					u8PLEDAnimation = 0;
     a4e:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <u8PLEDAnimation>
				}
			}
		}
		break;
     a52:	29 c0       	rjmp	.+82     	; 0xaa6 <__stack+0x1a7>
		
		case 2:
		if(u16PLEDStrobeCount<u16PLEDStrobeOn)
     a54:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <u16PLEDStrobeCount>
     a58:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <u16PLEDStrobeCount+0x1>
     a5c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <u16PLEDStrobeOn>
     a60:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <u16PLEDStrobeOn+0x1>
     a64:	28 17       	cp	r18, r24
     a66:	39 07       	cpc	r19, r25
     a68:	18 f4       	brcc	.+6      	; 0xa70 <__stack+0x171>
		{
			enablePLED();
     a6a:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <enablePLED>
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <__stack+0x175>
		}
		else
		{
			disablePLED();
     a70:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <disablePLED>
		}
		
		u16PLEDStrobeCount++;
     a74:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <u16PLEDStrobeCount>
     a78:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <u16PLEDStrobeCount+0x1>
     a7c:	01 96       	adiw	r24, 0x01	; 1
     a7e:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <u16PLEDStrobeCount+0x1>
     a82:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <u16PLEDStrobeCount>
		if(u16PLEDStrobeCount>=u16PLEDStrobeTotal)
     a86:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <u16PLEDStrobeCount>
     a8a:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <u16PLEDStrobeCount+0x1>
     a8e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <u16PLEDStrobeTotal>
     a92:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <u16PLEDStrobeTotal+0x1>
     a96:	28 17       	cp	r18, r24
     a98:	39 07       	cpc	r19, r25
     a9a:	38 f0       	brcs	.+14     	; 0xaaa <__stack+0x1ab>
		{
			u16PLEDStrobeCount = 0;
     a9c:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <u16PLEDStrobeCount+0x1>
     aa0:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <u16PLEDStrobeCount>
		}
		break;
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <__stack+0x1ab>
				{
					u8PLEDAnimation = 0;
				}
			}
		}
		break;
     aa6:	00 00       	nop
     aa8:	01 c0       	rjmp	.+2      	; 0xaac <__stack+0x1ad>
		u16PLEDStrobeCount++;
		if(u16PLEDStrobeCount>=u16PLEDStrobeTotal)
		{
			u16PLEDStrobeCount = 0;
		}
		break;
     aaa:	00 00       	nop
	}
	
	if(u8RGBAnimation)
     aac:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u8RGBAnimation>
     ab0:	88 23       	and	r24, r24
     ab2:	09 f4       	brne	.+2      	; 0xab6 <__stack+0x1b7>
     ab4:	48 c0       	rjmp	.+144    	; 0xb46 <__stack+0x247>
	{
		if(u8RGBBounce)
     ab6:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8RGBBounce>
     aba:	88 23       	and	r24, r24
     abc:	71 f1       	breq	.+92     	; 0xb1a <__stack+0x21b>
		{
			if(u8RGBBounceDirection==0) //normal
     abe:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <u8RGBBounceDirection>
     ac2:	88 23       	and	r24, r24
     ac4:	c1 f4       	brne	.+48     	; 0xaf6 <__stack+0x1f7>
			{
				u16RGBTimeCounter++;
     ac6:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
     aca:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <u16RGBTimeCounter+0x1>
     ad4:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <u16RGBTimeCounter>
				if(u16RGBTimeCounter>=u16RGBTime)
     ad8:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <u16RGBTimeCounter>
     adc:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
     ae0:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
     ae4:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	60 f1       	brcs	.+88     	; 0xb46 <__stack+0x247>
				{
					u8RGBBounceDirection = 1;
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <u8RGBBounceDirection>
     af4:	28 c0       	rjmp	.+80     	; 0xb46 <__stack+0x247>
					//u16RGBTimeCounter--;
				}
			}
			else //reverse
			{
				u16RGBTimeCounter--;
     af6:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
     afa:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <u16RGBTimeCounter+0x1>
     b04:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <u16RGBTimeCounter>
				if(u16RGBTimeCounter==0)
     b08:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
     b0c:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
     b10:	89 2b       	or	r24, r25
     b12:	c9 f4       	brne	.+50     	; 0xb46 <__stack+0x247>
				{
					u8RGBBounceDirection = 0;
     b14:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <u8RGBBounceDirection>
     b18:	16 c0       	rjmp	.+44     	; 0xb46 <__stack+0x247>
				}
			}
		}
		else
		{
			u16RGBTimeCounter++;
     b1a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
     b1e:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
     b22:	01 96       	adiw	r24, 0x01	; 1
     b24:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <u16RGBTimeCounter+0x1>
     b28:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <u16RGBTimeCounter>
			if(u16RGBTimeCounter>=u16RGBTime)
     b2c:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <u16RGBTimeCounter>
     b30:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
     b34:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
     b38:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
     b3c:	28 17       	cp	r18, r24
     b3e:	39 07       	cpc	r19, r25
     b40:	10 f0       	brcs	.+4      	; 0xb46 <__stack+0x247>
			{
				u8RGBAnimation = 0;
     b42:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <u8RGBAnimation>
		}
		
		
	}
	
	if(u8RGBDataState==1)
     b46:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8RGBDataState>
     b4a:	81 30       	cpi	r24, 0x01	; 1
     b4c:	49 f4       	brne	.+18     	; 0xb60 <__stack+0x261>
	{
		u8RGBDataState = 2;
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBDataState>
		
		u8RGBByteIdx = 0;
     b54:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
		u8RGBIdx = 0;
     b58:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <u8RGBIdx>
		INT0_vect();
     b5c:	0e 94 4a 02 	call	0x494	; 0x494 <__vector_1>
	}

	#ifdef TX_DEBUG
	PORTD &= ~(1<<PORTD1);
     b60:	8b e2       	ldi	r24, 0x2B	; 43
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	2b e2       	ldi	r18, 0x2B	; 43
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	f9 01       	movw	r30, r18
     b6a:	20 81       	ld	r18, Z
     b6c:	2d 7f       	andi	r18, 0xFD	; 253
     b6e:	fc 01       	movw	r30, r24
     b70:	20 83       	st	Z, r18
	#endif
}
     b72:	00 00       	nop
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	ff 91       	pop	r31
     b7a:	ef 91       	pop	r30
     b7c:	bf 91       	pop	r27
     b7e:	af 91       	pop	r26
     b80:	9f 91       	pop	r25
     b82:	8f 91       	pop	r24
     b84:	7f 91       	pop	r23
     b86:	6f 91       	pop	r22
     b88:	5f 91       	pop	r21
     b8a:	4f 91       	pop	r20
     b8c:	3f 91       	pop	r19
     b8e:	2f 91       	pop	r18
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	ff 90       	pop	r15
     b96:	ef 90       	pop	r14
     b98:	df 90       	pop	r13
     b9a:	cf 90       	pop	r12
     b9c:	bf 90       	pop	r11
     b9e:	af 90       	pop	r10
     ba0:	0f 90       	pop	r0
     ba2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <__vector_19>:


ISR(SPI_STC_vect)
{
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     bb4:	0f 92       	push	r0
     bb6:	11 24       	eor	r1, r1
     bb8:	2f 93       	push	r18
     bba:	3f 93       	push	r19
     bbc:	4f 93       	push	r20
     bbe:	5f 93       	push	r21
     bc0:	6f 93       	push	r22
     bc2:	7f 93       	push	r23
     bc4:	8f 93       	push	r24
     bc6:	9f 93       	push	r25
     bc8:	af 93       	push	r26
     bca:	bf 93       	push	r27
     bcc:	ef 93       	push	r30
     bce:	ff 93       	push	r31
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	1f 92       	push	r1
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8spiData = SPDR0;
     bda:	8e e4       	ldi	r24, 0x4E	; 78
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	fc 01       	movw	r30, r24
     be0:	80 81       	ld	r24, Z
     be2:	89 83       	std	Y+1, r24	; 0x01
	
	#ifdef TX_DEBUG
	PORTD |= (1<<PORTD1);
     be4:	8b e2       	ldi	r24, 0x2B	; 43
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	2b e2       	ldi	r18, 0x2B	; 43
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	f9 01       	movw	r30, r18
     bee:	20 81       	ld	r18, Z
     bf0:	22 60       	ori	r18, 0x02	; 2
     bf2:	fc 01       	movw	r30, r24
     bf4:	20 83       	st	Z, r18
	#endif
	
	SPDR0 = 0;
     bf6:	8e e4       	ldi	r24, 0x4E	; 78
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	fc 01       	movw	r30, r24
     bfc:	10 82       	st	Z, r1

	switch(SPIBUFFER.spiState)
     bfe:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <SPIBUFFER+0x42>
     c02:	88 2f       	mov	r24, r24
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	09 2e       	mov	r0, r25
     c08:	00 0c       	add	r0, r0
     c0a:	aa 0b       	sbc	r26, r26
     c0c:	bb 0b       	sbc	r27, r27
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	26 e0       	ldi	r18, 0x06	; 6
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	84 1b       	sub	r24, r20
     c18:	95 0b       	sbc	r25, r21
     c1a:	28 17       	cp	r18, r24
     c1c:	39 07       	cpc	r19, r25
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__vector_19+0x76>
     c20:	11 c1       	rjmp	.+546    	; 0xe44 <__vector_19+0x298>
     c22:	82 5c       	subi	r24, 0xC2	; 194
     c24:	9f 4f       	sbci	r25, 0xFF	; 255
     c26:	fc 01       	movw	r30, r24
     c28:	0c 94 05 19 	jmp	0x320a	; 0x320a <__tablejump2__>
	{
		case READY:
			if(u8spiData>=3)
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	83 30       	cpi	r24, 0x03	; 3
     c30:	90 f0       	brcs	.+36     	; 0xc56 <__vector_19+0xaa>
			{
				SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
     c32:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     c36:	88 2f       	mov	r24, r24
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	8c 50       	subi	r24, 0x0C	; 12
     c3c:	9e 4f       	sbci	r25, 0xFE	; 254
     c3e:	29 81       	ldd	r18, Y+1	; 0x01
     c40:	fc 01       	movw	r30, r24
     c42:	20 83       	st	Z, r18
				SPIBUFFER.u8Count++;
     c44:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     c48:	8f 5f       	subi	r24, 0xFF	; 255
     c4a:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <SPIBUFFER+0x40>
				SPIBUFFER.spiState = WRITE;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <SPIBUFFER+0x42>
			}
			else
			{
				SPIBUFFER.spiState = READ;
			}
		break;
     c54:	f7 c0       	rjmp	.+494    	; 0xe44 <__vector_19+0x298>
				SPIBUFFER.u8Count++;
				SPIBUFFER.spiState = WRITE;
			}
			else
			{
				SPIBUFFER.spiState = READ;
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <SPIBUFFER+0x42>
			}
		break;
     c5c:	f3 c0       	rjmp	.+486    	; 0xe44 <__vector_19+0x298>

		case WRITE:
			SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
     c5e:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     c62:	88 2f       	mov	r24, r24
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	8c 50       	subi	r24, 0x0C	; 12
     c68:	9e 4f       	sbci	r25, 0xFE	; 254
     c6a:	29 81       	ldd	r18, Y+1	; 0x01
     c6c:	fc 01       	movw	r30, r24
     c6e:	20 83       	st	Z, r18
			SPIBUFFER.u8Count++;
     c70:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     c74:	8f 5f       	subi	r24, 0xFF	; 255
     c76:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <SPIBUFFER+0x40>
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
     c7a:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     c7e:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <SPIBUFFER>
     c82:	98 17       	cp	r25, r24
     c84:	08 f4       	brcc	.+2      	; 0xc88 <__vector_19+0xdc>
     c86:	db c0       	rjmp	.+438    	; 0xe3e <__vector_19+0x292>
			{
				SPIBUFFER.spiState = DONE_WRITE;
     c88:	84 e0       	ldi	r24, 0x04	; 4
     c8a:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <SPIBUFFER+0x42>
			}
		break;
     c8e:	d7 c0       	rjmp	.+430    	; 0xe3e <__vector_19+0x292>

		case READ:
			SPIBUFFER.u8Count = 0;
     c90:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <SPIBUFFER+0x40>
			
			switch(u8spiData)
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	88 2f       	mov	r24, r24
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	82 3f       	cpi	r24, 0xF2	; 242
     c9c:	91 05       	cpc	r25, r1
     c9e:	79 f1       	breq	.+94     	; 0xcfe <__vector_19+0x152>
     ca0:	83 3f       	cpi	r24, 0xF3	; 243
     ca2:	91 05       	cpc	r25, r1
     ca4:	24 f4       	brge	.+8      	; 0xcae <__vector_19+0x102>
     ca6:	81 3f       	cpi	r24, 0xF1	; 241
     ca8:	91 05       	cpc	r25, r1
     caa:	51 f0       	breq	.+20     	; 0xcc0 <__vector_19+0x114>
     cac:	a6 c0       	rjmp	.+332    	; 0xdfa <__vector_19+0x24e>
     cae:	83 3f       	cpi	r24, 0xF3	; 243
     cb0:	91 05       	cpc	r25, r1
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <__vector_19+0x10a>
     cb4:	43 c0       	rjmp	.+134    	; 0xd3c <__vector_19+0x190>
     cb6:	84 3f       	cpi	r24, 0xF4	; 244
     cb8:	91 05       	cpc	r25, r1
     cba:	09 f4       	brne	.+2      	; 0xcbe <__vector_19+0x112>
     cbc:	5e c0       	rjmp	.+188    	; 0xd7a <__vector_19+0x1ce>
     cbe:	9d c0       	rjmp	.+314    	; 0xdfa <__vector_19+0x24e>
			{
				case 0xF1:
					SPDR0 = 0x01;
     cc0:	8e e4       	ldi	r24, 0x4E	; 78
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	21 e0       	ldi	r18, 0x01	; 1
     cc6:	fc 01       	movw	r30, r24
     cc8:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     cca:	84 e0       	ldi	r24, 0x04	; 4
     ccc:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = u8Status;
     cd6:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <u8Status>
     cda:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     cde:	63 e0       	ldi	r22, 0x03	; 3
     ce0:	84 ef       	ldi	r24, 0xF4	; 244
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <CRC8>
     ce8:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     cec:	84 e0       	ldi	r24, 0x04	; 4
     cee:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     cf2:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     cf6:	83 e0       	ldi	r24, 0x03	; 3
     cf8:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <SPIBUFFER+0x42>
				break;
     cfc:	82 c0       	rjmp	.+260    	; 0xe02 <__vector_19+0x256>
				
				case 0xF2:
					SPDR0 = 0x01;
     cfe:	8e e4       	ldi	r24, 0x4E	; 78
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	21 e0       	ldi	r18, 0x01	; 1
     d04:	fc 01       	movw	r30, r24
     d06:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     d08:	84 e0       	ldi	r24, 0x04	; 4
     d0a:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = u8Duty;
     d14:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <u8Duty>
     d18:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     d1c:	63 e0       	ldi	r22, 0x03	; 3
     d1e:	84 ef       	ldi	r24, 0xF4	; 244
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <CRC8>
     d26:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     d30:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     d34:	83 e0       	ldi	r24, 0x03	; 3
     d36:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <SPIBUFFER+0x42>
				break;
     d3a:	63 c0       	rjmp	.+198    	; 0xe02 <__vector_19+0x256>
				
				case 0xF3:
					SPDR0 = 0x01;
     d3c:	8e e4       	ldi	r24, 0x4E	; 78
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	21 e0       	ldi	r18, 0x01	; 1
     d42:	fc 01       	movw	r30, r24
     d44:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     d46:	84 e0       	ldi	r24, 0x04	; 4
     d48:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = adcGetTemperature();
     d52:	0e 94 f5 16 	call	0x2dea	; 0x2dea <adcGetTemperature>
     d56:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     d5a:	63 e0       	ldi	r22, 0x03	; 3
     d5c:	84 ef       	ldi	r24, 0xF4	; 244
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <CRC8>
     d64:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     d68:	84 e0       	ldi	r24, 0x04	; 4
     d6a:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     d6e:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     d72:	83 e0       	ldi	r24, 0x03	; 3
     d74:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <SPIBUFFER+0x42>
				break;
     d78:	44 c0       	rjmp	.+136    	; 0xe02 <__vector_19+0x256>

				case 0xF4:
					SPDR0 = 0x01;
     d7a:	8e e4       	ldi	r24, 0x4E	; 78
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	21 e0       	ldi	r18, 0x01	; 1
     d80:	fc 01       	movw	r30, r24
     d82:	20 83       	st	Z, r18
					if(u8PLEDAnimation) // ongoing fade
     d84:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <u8PLEDAnimation>
     d88:	88 23       	and	r24, r24
     d8a:	09 f1       	breq	.+66     	; 0xdce <__vector_19+0x222>
					{
						SPIBUFFER.au8Buffer[0] = 7;
     d8c:	87 e0       	ldi	r24, 0x07	; 7
     d8e:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <SPIBUFFER>
						SPIBUFFER.au8Buffer[1] = u8spiData;
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <SPIBUFFER+0x1>
						SPIBUFFER.au8Buffer[2] = u8PLEDFadeStartPercent;
     d98:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <u8PLEDFadeStartPercent>
     d9c:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <SPIBUFFER+0x2>
						SPIBUFFER.au8Buffer[3] = u8PLEDFadeStopPercent;
     da0:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <u8PLEDFadeStopPercent>
     da4:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <SPIBUFFER+0x3>
						SPIBUFFER.au8Buffer[4] = u8PLEDFadeTime;
     da8:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <u8PLEDFadeTime>
     dac:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <SPIBUFFER+0x4>
						SPIBUFFER.au8Buffer[5] = u8Duty;
     db0:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <u8Duty>
     db4:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <SPIBUFFER+0x5>
						SPIBUFFER.au8Buffer[6] = CRC8(&SPIBUFFER.au8Buffer[0],6);
     db8:	66 e0       	ldi	r22, 0x06	; 6
     dba:	84 ef       	ldi	r24, 0xF4	; 244
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <CRC8>
     dc2:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <SPIBUFFER+0x6>
						SPIBUFFER.u8Count = 7;
     dc6:	87 e0       	ldi	r24, 0x07	; 7
     dc8:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <SPIBUFFER+0x40>
     dcc:	10 c0       	rjmp	.+32     	; 0xdee <__vector_19+0x242>
					}
					else // no ongoing fade
					{
						SPIBUFFER.au8Buffer[0] = 3;
     dce:	83 e0       	ldi	r24, 0x03	; 3
     dd0:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <SPIBUFFER>
						SPIBUFFER.au8Buffer[1] = u8spiData;
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <SPIBUFFER+0x1>
						SPIBUFFER.au8Buffer[2] = CRC8(&SPIBUFFER.au8Buffer[0],2);
     dda:	62 e0       	ldi	r22, 0x02	; 2
     ddc:	84 ef       	ldi	r24, 0xF4	; 244
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <CRC8>
     de4:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <SPIBUFFER+0x2>
						SPIBUFFER.u8Count = 3;
     de8:	83 e0       	ldi	r24, 0x03	; 3
     dea:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <SPIBUFFER+0x40>
					}
					SPIBUFFER.u8ReadReturnCount = 0;
     dee:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     df2:	83 e0       	ldi	r24, 0x03	; 3
     df4:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <SPIBUFFER+0x42>
				break;
     df8:	04 c0       	rjmp	.+8      	; 0xe02 <__vector_19+0x256>
				
				default:
					SPIBUFFER.spiState = IDLE;
     dfa:	86 e0       	ldi	r24, 0x06	; 6
     dfc:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <SPIBUFFER+0x42>
				break;
     e00:	00 00       	nop
			}
		break;
     e02:	20 c0       	rjmp	.+64     	; 0xe44 <__vector_19+0x298>
		
		case READ_RETURN:
			SPDR0 = SPIBUFFER.au8Buffer[SPIBUFFER.u8ReadReturnCount];
     e04:	8e e4       	ldi	r24, 0x4E	; 78
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <SPIBUFFER+0x41>
     e0c:	22 2f       	mov	r18, r18
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	2c 50       	subi	r18, 0x0C	; 12
     e12:	3e 4f       	sbci	r19, 0xFE	; 254
     e14:	f9 01       	movw	r30, r18
     e16:	20 81       	ld	r18, Z
     e18:	fc 01       	movw	r30, r24
     e1a:	20 83       	st	Z, r18
			SPIBUFFER.u8ReadReturnCount++;
     e1c:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <SPIBUFFER+0x41>
     e20:	8f 5f       	subi	r24, 0xFF	; 255
     e22:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <SPIBUFFER+0x41>
			if(SPIBUFFER.u8Count == SPIBUFFER.u8ReadReturnCount)
     e26:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     e2a:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <SPIBUFFER+0x41>
     e2e:	98 17       	cp	r25, r24
     e30:	41 f4       	brne	.+16     	; 0xe42 <__vector_19+0x296>
			{
				SPIBUFFER.spiState = DONE_READ;
     e32:	85 e0       	ldi	r24, 0x05	; 5
     e34:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <SPIBUFFER+0x42>
			}
		break;
     e38:	04 c0       	rjmp	.+8      	; 0xe42 <__vector_19+0x296>
		
		break;

		case IDLE:

		break;
     e3a:	00 00       	nop
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <__vector_19+0x298>
			SPIBUFFER.u8Count++;
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
			{
				SPIBUFFER.spiState = DONE_WRITE;
			}
		break;
     e3e:	00 00       	nop
     e40:	01 c0       	rjmp	.+2      	; 0xe44 <__vector_19+0x298>
			SPIBUFFER.u8ReadReturnCount++;
			if(SPIBUFFER.u8Count == SPIBUFFER.u8ReadReturnCount)
			{
				SPIBUFFER.spiState = DONE_READ;
			}
		break;
     e42:	00 00       	nop
		case IDLE:

		break;
	}
	#ifdef TX_DEBUG
	PORTD &= ~(1<<PORTD1);
     e44:	8b e2       	ldi	r24, 0x2B	; 43
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	2b e2       	ldi	r18, 0x2B	; 43
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	f9 01       	movw	r30, r18
     e4e:	20 81       	ld	r18, Z
     e50:	2d 7f       	andi	r18, 0xFD	; 253
     e52:	fc 01       	movw	r30, r24
     e54:	20 83       	st	Z, r18
	#endif
}
     e56:	00 00       	nop
     e58:	0f 90       	pop	r0
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	ff 91       	pop	r31
     e60:	ef 91       	pop	r30
     e62:	bf 91       	pop	r27
     e64:	af 91       	pop	r26
     e66:	9f 91       	pop	r25
     e68:	8f 91       	pop	r24
     e6a:	7f 91       	pop	r23
     e6c:	6f 91       	pop	r22
     e6e:	5f 91       	pop	r21
     e70:	4f 91       	pop	r20
     e72:	3f 91       	pop	r19
     e74:	2f 91       	pop	r18
     e76:	0f 90       	pop	r0
     e78:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e7c:	0f 90       	pop	r0
     e7e:	1f 90       	pop	r1
     e80:	18 95       	reti

00000e82 <__vector_5>:

ISR(PCINT1_vect)
{
     e82:	1f 92       	push	r1
     e84:	0f 92       	push	r0
     e86:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e8a:	0f 92       	push	r0
     e8c:	11 24       	eor	r1, r1
     e8e:	af 92       	push	r10
     e90:	bf 92       	push	r11
     e92:	cf 92       	push	r12
     e94:	df 92       	push	r13
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
	#ifdef TX_DEBUG
	PORTD |= (1<<PORTD1);
     ebe:	8b e2       	ldi	r24, 0x2B	; 43
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	2b e2       	ldi	r18, 0x2B	; 43
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	f9 01       	movw	r30, r18
     ec8:	20 81       	ld	r18, Z
     eca:	22 60       	ori	r18, 0x02	; 2
     ecc:	fc 01       	movw	r30, r24
     ece:	20 83       	st	Z, r18
	#endif
	
	SPDR0 = 0;
     ed0:	8e e4       	ldi	r24, 0x4E	; 78
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	fc 01       	movw	r30, r24
     ed6:	10 82       	st	Z, r1
	if(PIN_SPI & (1<<SPI_SS)) // SS HIGH
     ed8:	83 e2       	ldi	r24, 0x23	; 35
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	fc 01       	movw	r30, r24
     ede:	80 81       	ld	r24, Z
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	80 71       	andi	r24, 0x10	; 16
     ee6:	99 27       	eor	r25, r25
     ee8:	89 2b       	or	r24, r25
     eea:	09 f4       	brne	.+2      	; 0xeee <__vector_5+0x6c>
     eec:	f3 c2       	rjmp	.+1510   	; 0x14d4 <__vector_5+0x652>
	{
		if(SPIBUFFER.spiState == DONE_WRITE)
     eee:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <SPIBUFFER+0x42>
     ef2:	84 30       	cpi	r24, 0x04	; 4
     ef4:	09 f0       	breq	.+2      	; 0xef8 <__vector_5+0x76>
     ef6:	08 c3       	rjmp	.+1552   	; 0x1508 <__vector_5+0x686>
		{	
			if((u8Status & 0xF0) == 0) // no error has occurred
     ef8:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <u8Status>
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	80 7f       	andi	r24, 0xF0	; 240
     f02:	99 27       	eor	r25, r25
     f04:	89 2b       	or	r24, r25
     f06:	09 f0       	breq	.+2      	; 0xf0a <__vector_5+0x88>
     f08:	ff c2       	rjmp	.+1534   	; 0x1508 <__vector_5+0x686>
			{
				if(SPIBUFFER.u8Count == SPIBUFFER.au8Buffer[0]) // correct amount of bytes in buffer
     f0a:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     f0e:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <SPIBUFFER>
     f12:	98 17       	cp	r25, r24
     f14:	09 f0       	breq	.+2      	; 0xf18 <__vector_5+0x96>
     f16:	f8 c2       	rjmp	.+1520   	; 0x1508 <__vector_5+0x686>
				{
					if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
     f18:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     f1c:	68 2f       	mov	r22, r24
     f1e:	84 ef       	ldi	r24, 0xF4	; 244
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <CRC8>
     f26:	88 23       	and	r24, r24
     f28:	09 f0       	breq	.+2      	; 0xf2c <__vector_5+0xaa>
     f2a:	ee c2       	rjmp	.+1500   	; 0x1508 <__vector_5+0x686>
					{
						switch(SPIBUFFER.au8Buffer[1]) // command
     f2c:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SPIBUFFER+0x1>
     f30:	88 2f       	mov	r24, r24
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	09 2e       	mov	r0, r25
     f36:	00 0c       	add	r0, r0
     f38:	aa 0b       	sbc	r26, r26
     f3a:	bb 0b       	sbc	r27, r27
     f3c:	41 e1       	ldi	r20, 0x11	; 17
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	22 e3       	ldi	r18, 0x32	; 50
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	84 1b       	sub	r24, r20
     f46:	95 0b       	sbc	r25, r21
     f48:	28 17       	cp	r18, r24
     f4a:	39 07       	cpc	r19, r25
     f4c:	08 f4       	brcc	.+2      	; 0xf50 <__vector_5+0xce>
     f4e:	dc c2       	rjmp	.+1464   	; 0x1508 <__vector_5+0x686>
     f50:	8b 5b       	subi	r24, 0xBB	; 187
     f52:	9f 4f       	sbci	r25, 0xFF	; 255
     f54:	fc 01       	movw	r30, r24
     f56:	0c 94 05 19 	jmp	0x320a	; 0x320a <__tablejump2__>
						{
							case 0x11:
							if(SPIBUFFER.u8Count == 3)
     f5a:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     f5e:	83 30       	cpi	r24, 0x03	; 3
     f60:	09 f0       	breq	.+2      	; 0xf64 <__vector_5+0xe2>
     f62:	bd c2       	rjmp	.+1402   	; 0x14de <__vector_5+0x65c>
							{
								enablePLED();
     f64:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <enablePLED>
								u8Status |= (1<<STATUS_PLED);
     f68:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <u8Status>
     f6c:	81 60       	ori	r24, 0x01	; 1
     f6e:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <u8Status>
							}
							break;
     f72:	b5 c2       	rjmp	.+1386   	; 0x14de <__vector_5+0x65c>

							case 0x12:
							if(SPIBUFFER.u8Count == 3)
     f74:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     f78:	83 30       	cpi	r24, 0x03	; 3
     f7a:	09 f0       	breq	.+2      	; 0xf7e <__vector_5+0xfc>
     f7c:	b2 c2       	rjmp	.+1380   	; 0x14e2 <__vector_5+0x660>
							{
								disablePLED();
     f7e:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <disablePLED>
								u8Status &= ~(1<<STATUS_PLED);
     f82:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <u8Status>
     f86:	8e 7f       	andi	r24, 0xFE	; 254
     f88:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <u8Status>
							}
							break;
     f8c:	aa c2       	rjmp	.+1364   	; 0x14e2 <__vector_5+0x660>

							case 0x13:
							if(SPIBUFFER.u8Count == 4)
     f8e:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     f92:	84 30       	cpi	r24, 0x04	; 4
     f94:	09 f0       	breq	.+2      	; 0xf98 <__vector_5+0x116>
     f96:	a7 c2       	rjmp	.+1358   	; 0x14e6 <__vector_5+0x664>
							{
								if(u8PLEDAnimation == 0)
     f98:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <u8PLEDAnimation>
     f9c:	88 23       	and	r24, r24
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <__vector_5+0x120>
     fa0:	a2 c2       	rjmp	.+1348   	; 0x14e6 <__vector_5+0x664>
								{
									if(SPIBUFFER.au8Buffer[2]>100)
     fa2:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
     fa6:	85 36       	cpi	r24, 0x65	; 101
     fa8:	20 f0       	brcs	.+8      	; 0xfb2 <__vector_5+0x130>
									{
										u8Duty = 100;
     faa:	84 e6       	ldi	r24, 0x64	; 100
     fac:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <u8Duty>
     fb0:	04 c0       	rjmp	.+8      	; 0xfba <__vector_5+0x138>
									}
									else
									{
										u8Duty = SPIBUFFER.au8Buffer[2];
     fb2:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
     fb6:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <u8Duty>
									}
									setPWMDutyPercent(u8Duty);
     fba:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <u8Duty>
     fbe:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <setPWMDutyPercent>
								}
							}
							break;
     fc2:	91 c2       	rjmp	.+1314   	; 0x14e6 <__vector_5+0x664>
						
							case 0x14:
							u8PLEDAnimation = 0;
     fc4:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <u8PLEDAnimation>
							disablePLED();
     fc8:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <disablePLED>
							u8Status &= ~(1<<STATUS_PLED);
     fcc:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <u8Status>
     fd0:	8e 7f       	andi	r24, 0xFE	; 254
     fd2:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <u8Status>
							break;
     fd6:	98 c2       	rjmp	.+1328   	; 0x1508 <__vector_5+0x686>

							case 0x15:
							if(SPIBUFFER.u8Count == 6)
     fd8:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     fdc:	86 30       	cpi	r24, 0x06	; 6
     fde:	09 f0       	breq	.+2      	; 0xfe2 <__vector_5+0x160>
     fe0:	84 c2       	rjmp	.+1288   	; 0x14ea <__vector_5+0x668>
							{	
								if(SPIBUFFER.au8Buffer[2]>100)
     fe2:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
     fe6:	85 36       	cpi	r24, 0x65	; 101
     fe8:	20 f0       	brcs	.+8      	; 0xff2 <__vector_5+0x170>
								{
									u8PLEDFadeStartPercent=100;
     fea:	84 e6       	ldi	r24, 0x64	; 100
     fec:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <u8PLEDFadeStartPercent>
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <__vector_5+0x178>
								}
								else
								{
									u8PLEDFadeStartPercent = SPIBUFFER.au8Buffer[2];
     ff2:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
     ff6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <u8PLEDFadeStartPercent>
								}
							
								if(SPIBUFFER.au8Buffer[3]>100)
     ffa:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <SPIBUFFER+0x3>
     ffe:	85 36       	cpi	r24, 0x65	; 101
    1000:	20 f0       	brcs	.+8      	; 0x100a <__vector_5+0x188>
								{
									u8PLEDFadeStopPercent=100;
    1002:	84 e6       	ldi	r24, 0x64	; 100
    1004:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <u8PLEDFadeStopPercent>
    1008:	04 c0       	rjmp	.+8      	; 0x1012 <__vector_5+0x190>
								}
								else
								{
									u8PLEDFadeStopPercent = SPIBUFFER.au8Buffer[3];
    100a:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <SPIBUFFER+0x3>
    100e:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <u8PLEDFadeStopPercent>
								}
							
								u16PLEDFadeStartValue = Map(u8PLEDFadeStartPercent,0,100,0,511);
    1012:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <u8PLEDFadeStartPercent>
    1016:	88 2f       	mov	r24, r24
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	a0 e0       	ldi	r26, 0x00	; 0
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	1f 92       	push	r1
    1020:	1f 92       	push	r1
    1022:	21 e0       	ldi	r18, 0x01	; 1
    1024:	2f 93       	push	r18
    1026:	2f ef       	ldi	r18, 0xFF	; 255
    1028:	2f 93       	push	r18
    102a:	a1 2c       	mov	r10, r1
    102c:	b1 2c       	mov	r11, r1
    102e:	65 01       	movw	r12, r10
    1030:	14 e6       	ldi	r17, 0x64	; 100
    1032:	e1 2e       	mov	r14, r17
    1034:	f1 2c       	mov	r15, r1
    1036:	00 e0       	ldi	r16, 0x00	; 0
    1038:	10 e0       	ldi	r17, 0x00	; 0
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	a9 01       	movw	r20, r18
    1040:	bc 01       	movw	r22, r24
    1042:	cd 01       	movw	r24, r26
    1044:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <Map>
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <u16PLEDFadeStartValue+0x1>
    1058:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <u16PLEDFadeStartValue>
								u16PLEDFadeStopValue = Map(u8PLEDFadeStopPercent,0,100,0,511);
    105c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <u8PLEDFadeStopPercent>
    1060:	88 2f       	mov	r24, r24
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	a0 e0       	ldi	r26, 0x00	; 0
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	1f 92       	push	r1
    106a:	1f 92       	push	r1
    106c:	21 e0       	ldi	r18, 0x01	; 1
    106e:	2f 93       	push	r18
    1070:	2f ef       	ldi	r18, 0xFF	; 255
    1072:	2f 93       	push	r18
    1074:	a1 2c       	mov	r10, r1
    1076:	b1 2c       	mov	r11, r1
    1078:	65 01       	movw	r12, r10
    107a:	14 e6       	ldi	r17, 0x64	; 100
    107c:	e1 2e       	mov	r14, r17
    107e:	f1 2c       	mov	r15, r1
    1080:	00 e0       	ldi	r16, 0x00	; 0
    1082:	10 e0       	ldi	r17, 0x00	; 0
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	a9 01       	movw	r20, r18
    108a:	bc 01       	movw	r22, r24
    108c:	cd 01       	movw	r24, r26
    108e:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <Map>
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <u16PLEDFadeStopValue+0x1>
    10a2:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <u16PLEDFadeStopValue>
								u8PLEDFadeTime = SPIBUFFER.au8Buffer[4];
    10a6:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <SPIBUFFER+0x4>
    10aa:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <u8PLEDFadeTime>
							
								setPWMDuty(u16PLEDFadeStartValue);
    10ae:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <u16PLEDFadeStartValue>
    10b2:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <u16PLEDFadeStartValue+0x1>
    10b6:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <setPWMDuty>
								u8Duty = u8PLEDFadeStartPercent;
    10ba:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <u8PLEDFadeStartPercent>
    10be:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <u8Duty>
								u16PLEDFadeCurrValue = u16PLEDFadeStartValue;
    10c2:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <u16PLEDFadeStartValue>
    10c6:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <u16PLEDFadeStartValue+0x1>
    10ca:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <u16PLEDFadeCurrValue+0x1>
    10ce:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <u16PLEDFadeCurrValue>
								u32PLEDFadeIntCount = 0;
    10d2:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <u32PLEDFadeIntCount>
    10d6:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <u32PLEDFadeIntCount+0x1>
    10da:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <u32PLEDFadeIntCount+0x2>
    10de:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <u32PLEDFadeIntCount+0x3>
							
								if(u8PLEDFadeStartPercent<u8PLEDFadeStopPercent) // PLED rise
    10e2:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <u8PLEDFadeStartPercent>
    10e6:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <u8PLEDFadeStopPercent>
    10ea:	98 17       	cp	r25, r24
    10ec:	58 f5       	brcc	.+86     	; 0x1144 <__vector_5+0x2c2>
								{
									u32PLEDFadeIntStep = 6000*u8PLEDFadeTime/(u16PLEDFadeStopValue-u16PLEDFadeStartValue);
    10ee:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <u8PLEDFadeTime>
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	80 e7       	ldi	r24, 0x70	; 112
    10f8:	97 e1       	ldi	r25, 0x17	; 23
    10fa:	28 9f       	mul	r18, r24
    10fc:	a0 01       	movw	r20, r0
    10fe:	29 9f       	mul	r18, r25
    1100:	50 0d       	add	r21, r0
    1102:	38 9f       	mul	r19, r24
    1104:	50 0d       	add	r21, r0
    1106:	11 24       	eor	r1, r1
    1108:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <u16PLEDFadeStopValue>
    110c:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <u16PLEDFadeStopValue+0x1>
    1110:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <u16PLEDFadeStartValue>
    1114:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <u16PLEDFadeStartValue+0x1>
    1118:	28 1b       	sub	r18, r24
    111a:	39 0b       	sbc	r19, r25
    111c:	ca 01       	movw	r24, r20
    111e:	b9 01       	movw	r22, r18
    1120:	0e 94 b0 18 	call	0x3160	; 0x3160 <__udivmodhi4>
    1124:	cb 01       	movw	r24, r22
    1126:	cc 01       	movw	r24, r24
    1128:	a0 e0       	ldi	r26, 0x00	; 0
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <u32PLEDFadeIntStep>
    1130:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <u32PLEDFadeIntStep+0x1>
    1134:	a0 93 61 01 	sts	0x0161, r26	; 0x800161 <u32PLEDFadeIntStep+0x2>
    1138:	b0 93 62 01 	sts	0x0162, r27	; 0x800162 <u32PLEDFadeIntStep+0x3>
									u8PLEDFadeDirection = 1;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <u8PLEDFadeDirection>
    1142:	2f c0       	rjmp	.+94     	; 0x11a2 <__vector_5+0x320>
								}
								else if(u8PLEDFadeStartPercent>u8PLEDFadeStopPercent) // PLED fall
    1144:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <u8PLEDFadeStartPercent>
    1148:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <u8PLEDFadeStopPercent>
    114c:	89 17       	cp	r24, r25
    114e:	48 f5       	brcc	.+82     	; 0x11a2 <__vector_5+0x320>
								{
									u32PLEDFadeIntStep = 6000*u8PLEDFadeTime/(u16PLEDFadeStartValue-u16PLEDFadeStopValue);
    1150:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <u8PLEDFadeTime>
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	80 e7       	ldi	r24, 0x70	; 112
    115a:	97 e1       	ldi	r25, 0x17	; 23
    115c:	28 9f       	mul	r18, r24
    115e:	a0 01       	movw	r20, r0
    1160:	29 9f       	mul	r18, r25
    1162:	50 0d       	add	r21, r0
    1164:	38 9f       	mul	r19, r24
    1166:	50 0d       	add	r21, r0
    1168:	11 24       	eor	r1, r1
    116a:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <u16PLEDFadeStartValue>
    116e:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <u16PLEDFadeStartValue+0x1>
    1172:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <u16PLEDFadeStopValue>
    1176:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <u16PLEDFadeStopValue+0x1>
    117a:	28 1b       	sub	r18, r24
    117c:	39 0b       	sbc	r19, r25
    117e:	ca 01       	movw	r24, r20
    1180:	b9 01       	movw	r22, r18
    1182:	0e 94 b0 18 	call	0x3160	; 0x3160 <__udivmodhi4>
    1186:	cb 01       	movw	r24, r22
    1188:	cc 01       	movw	r24, r24
    118a:	a0 e0       	ldi	r26, 0x00	; 0
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <u32PLEDFadeIntStep>
    1192:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <u32PLEDFadeIntStep+0x1>
    1196:	a0 93 61 01 	sts	0x0161, r26	; 0x800161 <u32PLEDFadeIntStep+0x2>
    119a:	b0 93 62 01 	sts	0x0162, r27	; 0x800162 <u32PLEDFadeIntStep+0x3>
									u8PLEDFadeDirection = 0;
    119e:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <u8PLEDFadeDirection>
								}
								enablePLED();
    11a2:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <enablePLED>
								u8Status |= (1<<STATUS_PLED);
    11a6:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <u8Status>
    11aa:	81 60       	ori	r24, 0x01	; 1
    11ac:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <u8Status>
								u8PLEDAnimation = 1;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <u8PLEDAnimation>
							}
							break;
    11b6:	99 c1       	rjmp	.+818    	; 0x14ea <__vector_5+0x668>
						
							case 0x16:
							if(SPIBUFFER.u8Count == 6)
    11b8:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
    11bc:	86 30       	cpi	r24, 0x06	; 6
    11be:	09 f0       	breq	.+2      	; 0x11c2 <__vector_5+0x340>
    11c0:	96 c1       	rjmp	.+812    	; 0x14ee <__vector_5+0x66c>
							{
								u16PLEDStrobeCount = 0;
    11c2:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <u16PLEDStrobeCount+0x1>
    11c6:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <u16PLEDStrobeCount>
								u16PLEDStrobeOn = 2*((uint16_t)SPIBUFFER.au8Buffer[3]);
    11ca:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <SPIBUFFER+0x3>
    11ce:	88 2f       	mov	r24, r24
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <u16PLEDStrobeOn+0x1>
    11da:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <u16PLEDStrobeOn>
								u16PLEDStrobeTotal = 2*(((uint16_t)SPIBUFFER.au8Buffer[3])+((uint16_t)SPIBUFFER.au8Buffer[4]));
    11de:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <SPIBUFFER+0x3>
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <SPIBUFFER+0x4>
    11ea:	88 2f       	mov	r24, r24
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	82 0f       	add	r24, r18
    11f0:	93 1f       	adc	r25, r19
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <u16PLEDStrobeTotal+0x1>
    11fa:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <u16PLEDStrobeTotal>
							
								if(SPIBUFFER.au8Buffer[2]>100)
    11fe:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
    1202:	85 36       	cpi	r24, 0x65	; 101
    1204:	20 f0       	brcs	.+8      	; 0x120e <__vector_5+0x38c>
								{
									u8Duty = 100;
    1206:	84 e6       	ldi	r24, 0x64	; 100
    1208:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <u8Duty>
    120c:	04 c0       	rjmp	.+8      	; 0x1216 <__vector_5+0x394>
								}
								else
								{
									u8Duty = SPIBUFFER.au8Buffer[2];
    120e:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
    1212:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <u8Duty>
								}
								setPWMDutyPercent(u8Duty);
    1216:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <u8Duty>
    121a:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <setPWMDutyPercent>
								u8Status |= (1<<STATUS_PLED);
    121e:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <u8Status>
    1222:	81 60       	ori	r24, 0x01	; 1
    1224:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <u8Status>
								u8PLEDAnimation = 2;
    1228:	82 e0       	ldi	r24, 0x02	; 2
    122a:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <u8PLEDAnimation>
							}
							break;
    122e:	5f c1       	rjmp	.+702    	; 0x14ee <__vector_5+0x66c>
					
							case 0x21:
							if(SPIBUFFER.u8Count == 3)
    1230:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	09 f0       	breq	.+2      	; 0x123a <__vector_5+0x3b8>
    1238:	5c c1       	rjmp	.+696    	; 0x14f2 <__vector_5+0x670>
							{
								enableAudio();
    123a:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <enableAudio>
								u8Status |= (1<<STATUS_AUDIO);
    123e:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <u8Status>
    1242:	82 60       	ori	r24, 0x02	; 2
    1244:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <u8Status>
							}
							break;
    1248:	54 c1       	rjmp	.+680    	; 0x14f2 <__vector_5+0x670>

							case 0x22:
							if(SPIBUFFER.u8Count == 3)
    124a:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
    124e:	83 30       	cpi	r24, 0x03	; 3
    1250:	09 f0       	breq	.+2      	; 0x1254 <__vector_5+0x3d2>
    1252:	51 c1       	rjmp	.+674    	; 0x14f6 <__vector_5+0x674>
							{
								standbyAudio();
    1254:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <standbyAudio>
								u8Status &= ~(1<<STATUS_AUDIO);
    1258:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <u8Status>
    125c:	8d 7f       	andi	r24, 0xFD	; 253
    125e:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <u8Status>
							}
							break;
    1262:	49 c1       	rjmp	.+658    	; 0x14f6 <__vector_5+0x674>
					
							case 0x23:
							if(SPIBUFFER.u8Count == 4)
    1264:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
    1268:	84 30       	cpi	r24, 0x04	; 4
    126a:	09 f0       	breq	.+2      	; 0x126e <__vector_5+0x3ec>
    126c:	46 c1       	rjmp	.+652    	; 0x14fa <__vector_5+0x678>
							{
								setVolume(SPIBUFFER.au8Buffer[2]);
    126e:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
    1272:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <setVolume>
							}
							break;
    1276:	41 c1       	rjmp	.+642    	; 0x14fa <__vector_5+0x678>
						
							case 0x31:
							RingBuffer_Insert(&RINGBUFFER,0x31);
    1278:	61 e3       	ldi	r22, 0x31	; 49
    127a:	8f e6       	ldi	r24, 0x6F	; 111
    127c:	91 e0       	ldi	r25, 0x01	; 1
    127e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,0xFF);						
    1282:	6f ef       	ldi	r22, 0xFF	; 255
    1284:	8f e6       	ldi	r24, 0x6F	; 111
    1286:	91 e0       	ldi	r25, 0x01	; 1
    1288:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							break;
    128c:	3d c1       	rjmp	.+634    	; 0x1508 <__vector_5+0x686>
						
							case 0x32:
							if(SPIBUFFER.u8Count == 6)
    128e:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
    1292:	86 30       	cpi	r24, 0x06	; 6
    1294:	f9 f4       	brne	.+62     	; 0x12d4 <__vector_5+0x452>
							{
								RingBuffer_Insert(&RINGBUFFER,0x32);
    1296:	62 e3       	ldi	r22, 0x32	; 50
    1298:	8f e6       	ldi	r24, 0x6F	; 111
    129a:	91 e0       	ldi	r25, 0x01	; 1
    129c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[2]);
    12a0:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
    12a4:	68 2f       	mov	r22, r24
    12a6:	8f e6       	ldi	r24, 0x6F	; 111
    12a8:	91 e0       	ldi	r25, 0x01	; 1
    12aa:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[3]);
    12ae:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <SPIBUFFER+0x3>
    12b2:	68 2f       	mov	r22, r24
    12b4:	8f e6       	ldi	r24, 0x6F	; 111
    12b6:	91 e0       	ldi	r25, 0x01	; 1
    12b8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[4]);
    12bc:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <SPIBUFFER+0x4>
    12c0:	68 2f       	mov	r22, r24
    12c2:	8f e6       	ldi	r24, 0x6F	; 111
    12c4:	91 e0       	ldi	r25, 0x01	; 1
    12c6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,0xFF);
    12ca:	6f ef       	ldi	r22, 0xFF	; 255
    12cc:	8f e6       	ldi	r24, 0x6F	; 111
    12ce:	91 e0       	ldi	r25, 0x01	; 1
    12d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							}
						
							case 0x33:
							if(SPIBUFFER.u8Count == 9)
    12d4:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
    12d8:	89 30       	cpi	r24, 0x09	; 9
    12da:	09 f0       	breq	.+2      	; 0x12de <__vector_5+0x45c>
    12dc:	10 c1       	rjmp	.+544    	; 0x14fe <__vector_5+0x67c>
							{
								RingBuffer_Insert(&RINGBUFFER,0x33);
    12de:	63 e3       	ldi	r22, 0x33	; 51
    12e0:	8f e6       	ldi	r24, 0x6F	; 111
    12e2:	91 e0       	ldi	r25, 0x01	; 1
    12e4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[2]);
    12e8:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
    12ec:	68 2f       	mov	r22, r24
    12ee:	8f e6       	ldi	r24, 0x6F	; 111
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[3]);
    12f6:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <SPIBUFFER+0x3>
    12fa:	68 2f       	mov	r22, r24
    12fc:	8f e6       	ldi	r24, 0x6F	; 111
    12fe:	91 e0       	ldi	r25, 0x01	; 1
    1300:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[4]);
    1304:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <SPIBUFFER+0x4>
    1308:	68 2f       	mov	r22, r24
    130a:	8f e6       	ldi	r24, 0x6F	; 111
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[5]);
    1312:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <SPIBUFFER+0x5>
    1316:	68 2f       	mov	r22, r24
    1318:	8f e6       	ldi	r24, 0x6F	; 111
    131a:	91 e0       	ldi	r25, 0x01	; 1
    131c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[6]);
    1320:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <SPIBUFFER+0x6>
    1324:	68 2f       	mov	r22, r24
    1326:	8f e6       	ldi	r24, 0x6F	; 111
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[7]);
    132e:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <SPIBUFFER+0x7>
    1332:	68 2f       	mov	r22, r24
    1334:	8f e6       	ldi	r24, 0x6F	; 111
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,0xFF);
    133c:	6f ef       	ldi	r22, 0xFF	; 255
    133e:	8f e6       	ldi	r24, 0x6F	; 111
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							}
							break;
    1346:	db c0       	rjmp	.+438    	; 0x14fe <__vector_5+0x67c>
						
							case 0x41:
							RingBuffer_Insert(&RINGBUFFER,0x41);
    1348:	61 e4       	ldi	r22, 0x41	; 65
    134a:	8f e6       	ldi	r24, 0x6F	; 111
    134c:	91 e0       	ldi	r25, 0x01	; 1
    134e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,0xFF);
    1352:	6f ef       	ldi	r22, 0xFF	; 255
    1354:	8f e6       	ldi	r24, 0x6F	; 111
    1356:	91 e0       	ldi	r25, 0x01	; 1
    1358:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							break;
    135c:	d5 c0       	rjmp	.+426    	; 0x1508 <__vector_5+0x686>
						
							case 0x42:
							if(SPIBUFFER.u8Count == 11)
    135e:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
    1362:	8b 30       	cpi	r24, 0x0B	; 11
    1364:	09 f0       	breq	.+2      	; 0x1368 <__vector_5+0x4e6>
    1366:	cd c0       	rjmp	.+410    	; 0x1502 <__vector_5+0x680>
							{
								RingBuffer_Insert(&RINGBUFFER,0x42);
    1368:	62 e4       	ldi	r22, 0x42	; 66
    136a:	8f e6       	ldi	r24, 0x6F	; 111
    136c:	91 e0       	ldi	r25, 0x01	; 1
    136e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[2]);
    1372:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
    1376:	68 2f       	mov	r22, r24
    1378:	8f e6       	ldi	r24, 0x6F	; 111
    137a:	91 e0       	ldi	r25, 0x01	; 1
    137c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[3]);
    1380:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <SPIBUFFER+0x3>
    1384:	68 2f       	mov	r22, r24
    1386:	8f e6       	ldi	r24, 0x6F	; 111
    1388:	91 e0       	ldi	r25, 0x01	; 1
    138a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[4]);
    138e:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <SPIBUFFER+0x4>
    1392:	68 2f       	mov	r22, r24
    1394:	8f e6       	ldi	r24, 0x6F	; 111
    1396:	91 e0       	ldi	r25, 0x01	; 1
    1398:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[5]);
    139c:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <SPIBUFFER+0x5>
    13a0:	68 2f       	mov	r22, r24
    13a2:	8f e6       	ldi	r24, 0x6F	; 111
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[6]);
    13aa:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <SPIBUFFER+0x6>
    13ae:	68 2f       	mov	r22, r24
    13b0:	8f e6       	ldi	r24, 0x6F	; 111
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[7]);
    13b8:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <SPIBUFFER+0x7>
    13bc:	68 2f       	mov	r22, r24
    13be:	8f e6       	ldi	r24, 0x6F	; 111
    13c0:	91 e0       	ldi	r25, 0x01	; 1
    13c2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[8]);
    13c6:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <SPIBUFFER+0x8>
    13ca:	68 2f       	mov	r22, r24
    13cc:	8f e6       	ldi	r24, 0x6F	; 111
    13ce:	91 e0       	ldi	r25, 0x01	; 1
    13d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[9]);
    13d4:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <SPIBUFFER+0x9>
    13d8:	68 2f       	mov	r22, r24
    13da:	8f e6       	ldi	r24, 0x6F	; 111
    13dc:	91 e0       	ldi	r25, 0x01	; 1
    13de:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,0xFF);
    13e2:	6f ef       	ldi	r22, 0xFF	; 255
    13e4:	8f e6       	ldi	r24, 0x6F	; 111
    13e6:	91 e0       	ldi	r25, 0x01	; 1
    13e8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							}
							break;
    13ec:	8a c0       	rjmp	.+276    	; 0x1502 <__vector_5+0x680>

							case 0x43:
							if(SPIBUFFER.u8Count == 17)
    13ee:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
    13f2:	81 31       	cpi	r24, 0x11	; 17
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <__vector_5+0x576>
    13f6:	87 c0       	rjmp	.+270    	; 0x1506 <__vector_5+0x684>
							{
								RingBuffer_Insert(&RINGBUFFER,0x43);
    13f8:	63 e4       	ldi	r22, 0x43	; 67
    13fa:	8f e6       	ldi	r24, 0x6F	; 111
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[2]);
    1402:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
    1406:	68 2f       	mov	r22, r24
    1408:	8f e6       	ldi	r24, 0x6F	; 111
    140a:	91 e0       	ldi	r25, 0x01	; 1
    140c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[3]);
    1410:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <SPIBUFFER+0x3>
    1414:	68 2f       	mov	r22, r24
    1416:	8f e6       	ldi	r24, 0x6F	; 111
    1418:	91 e0       	ldi	r25, 0x01	; 1
    141a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[4]);
    141e:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <SPIBUFFER+0x4>
    1422:	68 2f       	mov	r22, r24
    1424:	8f e6       	ldi	r24, 0x6F	; 111
    1426:	91 e0       	ldi	r25, 0x01	; 1
    1428:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[5]);
    142c:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <SPIBUFFER+0x5>
    1430:	68 2f       	mov	r22, r24
    1432:	8f e6       	ldi	r24, 0x6F	; 111
    1434:	91 e0       	ldi	r25, 0x01	; 1
    1436:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[6]);
    143a:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <SPIBUFFER+0x6>
    143e:	68 2f       	mov	r22, r24
    1440:	8f e6       	ldi	r24, 0x6F	; 111
    1442:	91 e0       	ldi	r25, 0x01	; 1
    1444:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[7]);
    1448:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <SPIBUFFER+0x7>
    144c:	68 2f       	mov	r22, r24
    144e:	8f e6       	ldi	r24, 0x6F	; 111
    1450:	91 e0       	ldi	r25, 0x01	; 1
    1452:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[8]);
    1456:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <SPIBUFFER+0x8>
    145a:	68 2f       	mov	r22, r24
    145c:	8f e6       	ldi	r24, 0x6F	; 111
    145e:	91 e0       	ldi	r25, 0x01	; 1
    1460:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[9]);
    1464:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <SPIBUFFER+0x9>
    1468:	68 2f       	mov	r22, r24
    146a:	8f e6       	ldi	r24, 0x6F	; 111
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[10]);
    1472:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <SPIBUFFER+0xa>
    1476:	68 2f       	mov	r22, r24
    1478:	8f e6       	ldi	r24, 0x6F	; 111
    147a:	91 e0       	ldi	r25, 0x01	; 1
    147c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[11]);
    1480:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SPIBUFFER+0xb>
    1484:	68 2f       	mov	r22, r24
    1486:	8f e6       	ldi	r24, 0x6F	; 111
    1488:	91 e0       	ldi	r25, 0x01	; 1
    148a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[12]);
    148e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <SPIBUFFER+0xc>
    1492:	68 2f       	mov	r22, r24
    1494:	8f e6       	ldi	r24, 0x6F	; 111
    1496:	91 e0       	ldi	r25, 0x01	; 1
    1498:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[13]);
    149c:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <SPIBUFFER+0xd>
    14a0:	68 2f       	mov	r22, r24
    14a2:	8f e6       	ldi	r24, 0x6F	; 111
    14a4:	91 e0       	ldi	r25, 0x01	; 1
    14a6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[14]);
    14aa:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <SPIBUFFER+0xe>
    14ae:	68 2f       	mov	r22, r24
    14b0:	8f e6       	ldi	r24, 0x6F	; 111
    14b2:	91 e0       	ldi	r25, 0x01	; 1
    14b4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[15]);
    14b8:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <SPIBUFFER+0xf>
    14bc:	68 2f       	mov	r22, r24
    14be:	8f e6       	ldi	r24, 0x6F	; 111
    14c0:	91 e0       	ldi	r25, 0x01	; 1
    14c2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
								RingBuffer_Insert(&RINGBUFFER,0xFF);
    14c6:	6f ef       	ldi	r22, 0xFF	; 255
    14c8:	8f e6       	ldi	r24, 0x6F	; 111
    14ca:	91 e0       	ldi	r25, 0x01	; 1
    14cc:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							}
							break;
    14d0:	00 00       	nop
    14d2:	19 c0       	rjmp	.+50     	; 0x1506 <__vector_5+0x684>
			
		}
	}
	else // SS LOW
	{
		SPIBUFFER.u8Count = 0;
    14d4:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <SPIBUFFER+0x40>
		SPIBUFFER.spiState = READY;
    14d8:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <SPIBUFFER+0x42>
    14dc:	15 c0       	rjmp	.+42     	; 0x1508 <__vector_5+0x686>
							if(SPIBUFFER.u8Count == 3)
							{
								enablePLED();
								u8Status |= (1<<STATUS_PLED);
							}
							break;
    14de:	00 00       	nop
    14e0:	13 c0       	rjmp	.+38     	; 0x1508 <__vector_5+0x686>
							if(SPIBUFFER.u8Count == 3)
							{
								disablePLED();
								u8Status &= ~(1<<STATUS_PLED);
							}
							break;
    14e2:	00 00       	nop
    14e4:	11 c0       	rjmp	.+34     	; 0x1508 <__vector_5+0x686>
										u8Duty = SPIBUFFER.au8Buffer[2];
									}
									setPWMDutyPercent(u8Duty);
								}
							}
							break;
    14e6:	00 00       	nop
    14e8:	0f c0       	rjmp	.+30     	; 0x1508 <__vector_5+0x686>
								}
								enablePLED();
								u8Status |= (1<<STATUS_PLED);
								u8PLEDAnimation = 1;
							}
							break;
    14ea:	00 00       	nop
    14ec:	0d c0       	rjmp	.+26     	; 0x1508 <__vector_5+0x686>
								}
								setPWMDutyPercent(u8Duty);
								u8Status |= (1<<STATUS_PLED);
								u8PLEDAnimation = 2;
							}
							break;
    14ee:	00 00       	nop
    14f0:	0b c0       	rjmp	.+22     	; 0x1508 <__vector_5+0x686>
							if(SPIBUFFER.u8Count == 3)
							{
								enableAudio();
								u8Status |= (1<<STATUS_AUDIO);
							}
							break;
    14f2:	00 00       	nop
    14f4:	09 c0       	rjmp	.+18     	; 0x1508 <__vector_5+0x686>
							if(SPIBUFFER.u8Count == 3)
							{
								standbyAudio();
								u8Status &= ~(1<<STATUS_AUDIO);
							}
							break;
    14f6:	00 00       	nop
    14f8:	07 c0       	rjmp	.+14     	; 0x1508 <__vector_5+0x686>
							case 0x23:
							if(SPIBUFFER.u8Count == 4)
							{
								setVolume(SPIBUFFER.au8Buffer[2]);
							}
							break;
    14fa:	00 00       	nop
    14fc:	05 c0       	rjmp	.+10     	; 0x1508 <__vector_5+0x686>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[5]);
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[6]);
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[7]);
								RingBuffer_Insert(&RINGBUFFER,0xFF);
							}
							break;
    14fe:	00 00       	nop
    1500:	03 c0       	rjmp	.+6      	; 0x1508 <__vector_5+0x686>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[7]);
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[8]);
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[9]);
								RingBuffer_Insert(&RINGBUFFER,0xFF);
							}
							break;
    1502:	00 00       	nop
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <__vector_5+0x686>
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[13]);
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[14]);
								RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[15]);
								RingBuffer_Insert(&RINGBUFFER,0xFF);
							}
							break;
    1506:	00 00       	nop
	{
		SPIBUFFER.u8Count = 0;
		SPIBUFFER.spiState = READY;
	}
	#ifdef TX_DEBUG
	PORTD &= ~(1<<PORTD1);
    1508:	8b e2       	ldi	r24, 0x2B	; 43
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	2b e2       	ldi	r18, 0x2B	; 43
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	f9 01       	movw	r30, r18
    1512:	20 81       	ld	r18, Z
    1514:	2d 7f       	andi	r18, 0xFD	; 253
    1516:	fc 01       	movw	r30, r24
    1518:	20 83       	st	Z, r18
	#endif
}
    151a:	00 00       	nop
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	ff 91       	pop	r31
    1522:	ef 91       	pop	r30
    1524:	bf 91       	pop	r27
    1526:	af 91       	pop	r26
    1528:	9f 91       	pop	r25
    152a:	8f 91       	pop	r24
    152c:	7f 91       	pop	r23
    152e:	6f 91       	pop	r22
    1530:	5f 91       	pop	r21
    1532:	4f 91       	pop	r20
    1534:	3f 91       	pop	r19
    1536:	2f 91       	pop	r18
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	ff 90       	pop	r15
    153e:	ef 90       	pop	r14
    1540:	df 90       	pop	r13
    1542:	cf 90       	pop	r12
    1544:	bf 90       	pop	r11
    1546:	af 90       	pop	r10
    1548:	0f 90       	pop	r0
    154a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    154e:	0f 90       	pop	r0
    1550:	1f 90       	pop	r1
    1552:	18 95       	reti

00001554 <main>:
// 		
// 	}
// }

int main(void)
{
    1554:	df 92       	push	r13
    1556:	ef 92       	push	r14
    1558:	ff 92       	push	r15
    155a:	0f 93       	push	r16
    155c:	1f 93       	push	r17
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	2e 97       	sbiw	r28, 0x0e	; 14
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
	uint16_t i;
	uint8_t au8Command[8];
	uint8_t u8Temp,u8Count,u8StartTemp,u8StopTemp;
	portInit();
    1572:	0e 94 a8 14 	call	0x2950	; 0x2950 <portInit>
	adcInit();
    1576:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <adcInit>
	initPWM(0);
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	0e 94 11 16 	call	0x2c22	; 0x2c22 <initPWM>
	startPWM();
    1582:	0e 94 41 16 	call	0x2c82	; 0x2c82 <startPWM>
	spiInitBuffer(&SPIBUFFER);
    1586:	84 ef       	ldi	r24, 0xF4	; 244
    1588:	91 e0       	ldi	r25, 0x01	; 1
    158a:	0e 94 36 14 	call	0x286c	; 0x286c <spiInitBuffer>
	spiSlaveInit();
    158e:	0e 94 56 14 	call	0x28ac	; 0x28ac <spiSlaveInit>
 	spiPcInt();
    1592:	0e 94 89 14 	call	0x2912	; 0x2912 <spiPcInt>
	RingBuffer_InitBuffer(&RINGBUFFER);
    1596:	8f e6       	ldi	r24, 0x6F	; 111
    1598:	91 e0       	ldi	r25, 0x01	; 1
    159a:	0e 94 b5 00 	call	0x16a	; 0x16a <RingBuffer_InitBuffer>
	initRGBooster();
    159e:	0e 94 ef 13 	call	0x27de	; 0x27de <initRGBooster>
	INT0_Init();
    15a2:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <INT0_Init>
	INT_5ms_Init();
    15a6:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <INT_5ms_Init>

	wait_1ms(100);
    15aa:	84 e6       	ldi	r24, 0x64	; 100
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 88 17 	call	0x2f10	; 0x2f10 <wait_1ms>
	initAudio();
    15b2:	0e 94 02 16 	call	0x2c04	; 0x2c04 <initAudio>
	
	#ifdef TX_DEBUG
	DDRD |= (1<<DDRD1);
    15b6:	8a e2       	ldi	r24, 0x2A	; 42
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	2a e2       	ldi	r18, 0x2A	; 42
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	f9 01       	movw	r30, r18
    15c0:	20 81       	ld	r18, Z
    15c2:	22 60       	ori	r18, 0x02	; 2
    15c4:	fc 01       	movw	r30, r24
    15c6:	20 83       	st	Z, r18
	PORTD &= ~(1<<PORTD1);
    15c8:	8b e2       	ldi	r24, 0x2B	; 43
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	2b e2       	ldi	r18, 0x2B	; 43
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	f9 01       	movw	r30, r18
    15d2:	20 81       	ld	r18, Z
    15d4:	2d 7f       	andi	r18, 0xFD	; 253
    15d6:	fc 01       	movw	r30, r24
    15d8:	20 83       	st	Z, r18
	#endif

	#ifdef RX_DEBUG
	DDRD |= (1<<DDRD0);
    15da:	8a e2       	ldi	r24, 0x2A	; 42
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	2a e2       	ldi	r18, 0x2A	; 42
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	f9 01       	movw	r30, r18
    15e4:	20 81       	ld	r18, Z
    15e6:	21 60       	ori	r18, 0x01	; 1
    15e8:	fc 01       	movw	r30, r24
    15ea:	20 83       	st	Z, r18
	PORTD &= ~(1<<PORTD0);
    15ec:	8b e2       	ldi	r24, 0x2B	; 43
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	2b e2       	ldi	r18, 0x2B	; 43
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	f9 01       	movw	r30, r18
    15f6:	20 81       	ld	r18, Z
    15f8:	2e 7f       	andi	r18, 0xFE	; 254
    15fa:	fc 01       	movw	r30, r24
    15fc:	20 83       	st	Z, r18
	#endif
		
	sei();
    15fe:	78 94       	sei
	
	
	u8RGBRed = 0;
    1600:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <u8RGBRed>
	u8RGBGreen = 0;
    1604:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <u8RGBGreen>
	u8RGBBlue = 0;
    1608:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <u8RGBBlue>
	u8RGBSingleColor = 1;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8RGBSingleColor>
	u8RGBDataState = 1;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBDataState>
	
	wait_1ms(100);
    1618:	84 e6       	ldi	r24, 0x64	; 100
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	0e 94 88 17 	call	0x2f10	; 0x2f10 <wait_1ms>
// 	u8RGBAnimation = 1;
//  	wait_1ms(12000);
// 	RingBuffer_Insert(&RINGBUFFER,0x41);
// 	RingBuffer_Insert(&RINGBUFFER,0xFF);
	
	RingBuffer_Insert(&RINGBUFFER,0x42);
    1620:	62 e4       	ldi	r22, 0x42	; 66
    1622:	8f e6       	ldi	r24, 0x6F	; 111
    1624:	91 e0       	ldi	r25, 0x01	; 1
    1626:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,1);
    162a:	61 e0       	ldi	r22, 0x01	; 1
    162c:	8f e6       	ldi	r24, 0x6F	; 111
    162e:	91 e0       	ldi	r25, 0x01	; 1
    1630:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,1);
    1634:	61 e0       	ldi	r22, 0x01	; 1
    1636:	8f e6       	ldi	r24, 0x6F	; 111
    1638:	91 e0       	ldi	r25, 0x01	; 1
    163a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,1);
    163e:	61 e0       	ldi	r22, 0x01	; 1
    1640:	8f e6       	ldi	r24, 0x6F	; 111
    1642:	91 e0       	ldi	r25, 0x01	; 1
    1644:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,100);
    1648:	64 e6       	ldi	r22, 0x64	; 100
    164a:	8f e6       	ldi	r24, 0x6F	; 111
    164c:	91 e0       	ldi	r25, 0x01	; 1
    164e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,1);
    1652:	61 e0       	ldi	r22, 0x01	; 1
    1654:	8f e6       	ldi	r24, 0x6F	; 111
    1656:	91 e0       	ldi	r25, 0x01	; 1
    1658:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,1);
    165c:	61 e0       	ldi	r22, 0x01	; 1
    165e:	8f e6       	ldi	r24, 0x6F	; 111
    1660:	91 e0       	ldi	r25, 0x01	; 1
    1662:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,3);
    1666:	63 e0       	ldi	r22, 0x03	; 3
    1668:	8f e6       	ldi	r24, 0x6F	; 111
    166a:	91 e0       	ldi	r25, 0x01	; 1
    166c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,2);
    1670:	62 e0       	ldi	r22, 0x02	; 2
    1672:	8f e6       	ldi	r24, 0x6F	; 111
    1674:	91 e0       	ldi	r25, 0x01	; 1
    1676:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    167a:	6f ef       	ldi	r22, 0xFF	; 255
    167c:	8f e6       	ldi	r24, 0x6F	; 111
    167e:	91 e0       	ldi	r25, 0x01	; 1
    1680:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
		
	
    while (1) 
    {
		if(adcGetTemperature() > MAX_TEMP)
    1684:	0e 94 f5 16 	call	0x2dea	; 0x2dea <adcGetTemperature>
    1688:	81 32       	cpi	r24, 0x21	; 33
    168a:	28 f1       	brcs	.+74     	; 0x16d6 <main+0x182>
		{
			u8Status &= 0x0F;
    168c:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <u8Status>
    1690:	8f 70       	andi	r24, 0x0F	; 15
    1692:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <u8Status>
			u8Status |= 0x10; 
    1696:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <u8Status>
    169a:	80 61       	ori	r24, 0x10	; 16
    169c:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <u8Status>
			
			u8PLEDAnimation = 0;
    16a0:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <u8PLEDAnimation>
			u8RGBAnimation = 0;
    16a4:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <u8RGBAnimation>
			
			disablePLED();
    16a8:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <disablePLED>
			u8Status &= ~(1<<STATUS_PLED);
    16ac:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <u8Status>
    16b0:	8e 7f       	andi	r24, 0xFE	; 254
    16b2:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <u8Status>
			
			wait_1ms(10);
    16b6:	8a e0       	ldi	r24, 0x0A	; 10
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	0e 94 88 17 	call	0x2f10	; 0x2f10 <wait_1ms>
			
			u8RGBRed = 0;
    16be:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <u8RGBRed>
			u8RGBGreen = 0;
    16c2:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <u8RGBGreen>
			u8RGBBlue = 0;
    16c6:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <u8RGBBlue>
			u8RGBSingleColor = 1;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8RGBSingleColor>
			u8RGBDataState = 1;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBDataState>
		}
		
		if(u8RGBAnimation)
    16d6:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u8RGBAnimation>
    16da:	88 23       	and	r24, r24
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <main+0x18c>
    16de:	d7 c5       	rjmp	.+2990   	; 0x228e <main+0xd3a>
		{
			if(RingBuffer_CountChar(&RINGBUFFER,0xFF))
    16e0:	6f ef       	ldi	r22, 0xFF	; 255
    16e2:	8f e6       	ldi	r24, 0x6F	; 111
    16e4:	91 e0       	ldi	r25, 0x01	; 1
    16e6:	0e 94 b5 01 	call	0x36a	; 0x36a <RingBuffer_CountChar>
    16ea:	88 23       	and	r24, r24
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <main+0x19c>
    16ee:	a9 c0       	rjmp	.+338    	; 0x1842 <main+0x2ee>
			{
				RingBuffer_RemoveUntilChar(&RINGBUFFER,au8Command,0xFF,0);
    16f0:	ce 01       	movw	r24, r28
    16f2:	07 96       	adiw	r24, 0x07	; 7
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	4f ef       	ldi	r20, 0xFF	; 255
    16f8:	bc 01       	movw	r22, r24
    16fa:	8f e6       	ldi	r24, 0x6F	; 111
    16fc:	91 e0       	ldi	r25, 0x01	; 1
    16fe:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <RingBuffer_RemoveUntilChar>
				
				switch(au8Command[0])
    1702:	8f 81       	ldd	r24, Y+7	; 0x07
    1704:	88 2f       	mov	r24, r24
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	82 34       	cpi	r24, 0x42	; 66
    170a:	91 05       	cpc	r25, r1
    170c:	59 f0       	breq	.+22     	; 0x1724 <main+0x1d0>
    170e:	83 34       	cpi	r24, 0x43	; 67
    1710:	91 05       	cpc	r25, r1
    1712:	09 f4       	brne	.+2      	; 0x1716 <main+0x1c2>
    1714:	41 c0       	rjmp	.+130    	; 0x1798 <main+0x244>
    1716:	81 34       	cpi	r24, 0x41	; 65
    1718:	91 05       	cpc	r25, r1
    171a:	09 f0       	breq	.+2      	; 0x171e <main+0x1ca>
    171c:	92 c0       	rjmp	.+292    	; 0x1842 <main+0x2ee>
				{
					case 0x41:
					u8RGBAnimation = 0;
    171e:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <u8RGBAnimation>
					break;
    1722:	8f c0       	rjmp	.+286    	; 0x1842 <main+0x2ee>
					
					case 0x42:
					if(strlen(au8Command) == 9)
    1724:	ce 01       	movw	r24, r28
    1726:	07 96       	adiw	r24, 0x07	; 7
    1728:	0e 94 25 19 	call	0x324a	; 0x324a <strlen>
    172c:	09 97       	sbiw	r24, 0x09	; 9
    172e:	09 f0       	breq	.+2      	; 0x1732 <main+0x1de>
    1730:	85 c0       	rjmp	.+266    	; 0x183c <main+0x2e8>
					{
						u8RGBStartRed = au8Command[1]-1;
    1732:	88 85       	ldd	r24, Y+8	; 0x08
    1734:	81 50       	subi	r24, 0x01	; 1
    1736:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8RGBStartRed>
						u8RGBStartGreen = au8Command[2]-1;
    173a:	89 85       	ldd	r24, Y+9	; 0x09
    173c:	81 50       	subi	r24, 0x01	; 1
    173e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8RGBStartGreen>
						u8RGBStartBlue = au8Command[3]-1;
    1742:	8a 85       	ldd	r24, Y+10	; 0x0a
    1744:	81 50       	subi	r24, 0x01	; 1
    1746:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <u8RGBStartBlue>
						u8RGBStopRed = au8Command[4]-1;
    174a:	8b 85       	ldd	r24, Y+11	; 0x0b
    174c:	81 50       	subi	r24, 0x01	; 1
    174e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8RGBStopRed>
						u8RGBStopGreen = au8Command[5]-1;
    1752:	8c 85       	ldd	r24, Y+12	; 0x0c
    1754:	81 50       	subi	r24, 0x01	; 1
    1756:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <u8RGBStopGreen>
						u8RGBStopBlue = au8Command[6]-1;
    175a:	8d 85       	ldd	r24, Y+13	; 0x0d
    175c:	81 50       	subi	r24, 0x01	; 1
    175e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <u8RGBStopBlue>
						u16RGBTime = ((uint16_t)au8Command[7])*200;
    1762:	8e 85       	ldd	r24, Y+14	; 0x0e
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	48 ec       	ldi	r20, 0xC8	; 200
    176a:	42 9f       	mul	r20, r18
    176c:	c0 01       	movw	r24, r0
    176e:	43 9f       	mul	r20, r19
    1770:	90 0d       	add	r25, r0
    1772:	11 24       	eor	r1, r1
    1774:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <u16RGBTime+0x1>
    1778:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <u16RGBTime>
						u8RGBBounce = au8Command[8]-1;
    177c:	8f 85       	ldd	r24, Y+15	; 0x0f
    177e:	81 50       	subi	r24, 0x01	; 1
    1780:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8RGBBounce>
						u8RGBBounceDirection = 0;
    1784:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <u8RGBBounceDirection>
						u16RGBTimeCounter = 0;
    1788:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <u16RGBTimeCounter+0x1>
    178c:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <u16RGBTimeCounter>
						u8RGBAnimation = 1;
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <u8RGBAnimation>
					}
					break;
    1796:	52 c0       	rjmp	.+164    	; 0x183c <main+0x2e8>

					case 0x43:
					if(strlen(au8Command) == 15)
    1798:	ce 01       	movw	r24, r28
    179a:	07 96       	adiw	r24, 0x07	; 7
    179c:	0e 94 25 19 	call	0x324a	; 0x324a <strlen>
    17a0:	0f 97       	sbiw	r24, 0x0f	; 15
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <main+0x252>
    17a4:	4d c0       	rjmp	.+154    	; 0x1840 <main+0x2ec>
					{
						u8RGBStartRed = au8Command[1]-1;
    17a6:	88 85       	ldd	r24, Y+8	; 0x08
    17a8:	81 50       	subi	r24, 0x01	; 1
    17aa:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8RGBStartRed>
						u8RGBStartGreen = au8Command[2]-1;
    17ae:	89 85       	ldd	r24, Y+9	; 0x09
    17b0:	81 50       	subi	r24, 0x01	; 1
    17b2:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8RGBStartGreen>
						u8RGBStartBlue = au8Command[3]-1;
    17b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    17b8:	81 50       	subi	r24, 0x01	; 1
    17ba:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <u8RGBStartBlue>
						u8RGBStartMiddleRed = au8Command[4]-1;
    17be:	8b 85       	ldd	r24, Y+11	; 0x0b
    17c0:	81 50       	subi	r24, 0x01	; 1
    17c2:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <u8RGBStartMiddleRed>
						u8RGBStartMiddleGreen = au8Command[5]-1;
    17c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    17c8:	81 50       	subi	r24, 0x01	; 1
    17ca:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <u8RGBStartMiddleGreen>
						u8RGBStartMiddleBlue = au8Command[6]-1;
    17ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d0:	81 50       	subi	r24, 0x01	; 1
    17d2:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8RGBStartMiddleBlue>
						u8RGBStopRed = au8Command[7]-1;
    17d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    17d8:	81 50       	subi	r24, 0x01	; 1
    17da:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8RGBStopRed>
						u8RGBStopGreen = au8Command[8]-1;
    17de:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e0:	81 50       	subi	r24, 0x01	; 1
    17e2:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <u8RGBStopGreen>
						u8RGBStopBlue = au8Command[9]-1;
    17e6:	88 89       	ldd	r24, Y+16	; 0x10
    17e8:	81 50       	subi	r24, 0x01	; 1
    17ea:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <u8RGBStopBlue>
						u8RGBStopMiddleRed = au8Command[10]-1;
    17ee:	89 89       	ldd	r24, Y+17	; 0x11
    17f0:	81 50       	subi	r24, 0x01	; 1
    17f2:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <u8RGBStopMiddleRed>
						u8RGBStopMiddleGreen = au8Command[11]-1;
    17f6:	8a 89       	ldd	r24, Y+18	; 0x12
    17f8:	81 50       	subi	r24, 0x01	; 1
    17fa:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <u8RGBStopMiddleGreen>
						u8RGBStopMiddleBlue = au8Command[12]-1;
    17fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1800:	81 50       	subi	r24, 0x01	; 1
    1802:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <u8RGBStopMiddleBlue>
						u16RGBTime = ((uint16_t)au8Command[13])*200;
    1806:	8c 89       	ldd	r24, Y+20	; 0x14
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	48 ec       	ldi	r20, 0xC8	; 200
    180e:	42 9f       	mul	r20, r18
    1810:	c0 01       	movw	r24, r0
    1812:	43 9f       	mul	r20, r19
    1814:	90 0d       	add	r25, r0
    1816:	11 24       	eor	r1, r1
    1818:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <u16RGBTime+0x1>
    181c:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <u16RGBTime>
						u8RGBBounce = au8Command[14]-1;
    1820:	8d 89       	ldd	r24, Y+21	; 0x15
    1822:	81 50       	subi	r24, 0x01	; 1
    1824:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8RGBBounce>
						u8RGBBounceDirection = 0;
    1828:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <u8RGBBounceDirection>
						u16RGBTimeCounter = 0;
    182c:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <u16RGBTimeCounter+0x1>
    1830:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <u16RGBTimeCounter>
						u8RGBAnimation = 2;
    1834:	82 e0       	ldi	r24, 0x02	; 2
    1836:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <u8RGBAnimation>
					}
					break;
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <main+0x2ec>
						u8RGBBounce = au8Command[8]-1;
						u8RGBBounceDirection = 0;
						u16RGBTimeCounter = 0;
						u8RGBAnimation = 1;
					}
					break;
    183c:	00 00       	nop
    183e:	01 c0       	rjmp	.+2      	; 0x1842 <main+0x2ee>
						u8RGBBounce = au8Command[14]-1;
						u8RGBBounceDirection = 0;
						u16RGBTimeCounter = 0;
						u8RGBAnimation = 2;
					}
					break;
    1840:	00 00       	nop
				}
			}
			
			if(u8RGBDataState==0)
    1842:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8RGBDataState>
    1846:	88 23       	and	r24, r24
    1848:	09 f0       	breq	.+2      	; 0x184c <main+0x2f8>
    184a:	1c cf       	rjmp	.-456    	; 0x1684 <main+0x130>
			{
				#ifdef RX_DEBUG
				PORTD |= (1<<PORTD0);
    184c:	8b e2       	ldi	r24, 0x2B	; 43
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	2b e2       	ldi	r18, 0x2B	; 43
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	f9 01       	movw	r30, r18
    1856:	20 81       	ld	r18, Z
    1858:	21 60       	ori	r18, 0x01	; 1
    185a:	fc 01       	movw	r30, r24
    185c:	20 83       	st	Z, r18
				#endif
				
				switch(u8RGBAnimation)
    185e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u8RGBAnimation>
    1862:	88 2f       	mov	r24, r24
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	91 05       	cpc	r25, r1
    186a:	21 f0       	breq	.+8      	; 0x1874 <main+0x320>
    186c:	02 97       	sbiw	r24, 0x02	; 2
    186e:	09 f4       	brne	.+2      	; 0x1872 <main+0x31e>
    1870:	40 c1       	rjmp	.+640    	; 0x1af2 <main+0x59e>
    1872:	03 c5       	rjmp	.+2566   	; 0x227a <main+0xd26>
				{
					case 1:
					if(u8RGBStartRed<u8RGBStopRed)
    1874:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <u8RGBStartRed>
    1878:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    187c:	98 17       	cp	r25, r24
    187e:	88 f5       	brcc	.+98     	; 0x18e2 <main+0x38e>
					{
						u8RGBRed = (uint8_t)(((uint32_t)(u8RGBStopRed-u8RGBStartRed))*u16RGBTimeCounter/u16RGBTime + u8RGBStartRed);
    1880:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    188c:	88 2f       	mov	r24, r24
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	a9 01       	movw	r20, r18
    1892:	48 1b       	sub	r20, r24
    1894:	59 0b       	sbc	r21, r25
    1896:	ca 01       	movw	r24, r20
    1898:	9c 01       	movw	r18, r24
    189a:	99 0f       	add	r25, r25
    189c:	44 0b       	sbc	r20, r20
    189e:	55 0b       	sbc	r21, r21
    18a0:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    18a4:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    18a8:	cc 01       	movw	r24, r24
    18aa:	a0 e0       	ldi	r26, 0x00	; 0
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	bc 01       	movw	r22, r24
    18b0:	cd 01       	movw	r24, r26
    18b2:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    18b6:	7b 01       	movw	r14, r22
    18b8:	8c 01       	movw	r16, r24
    18ba:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    18be:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    18c2:	9c 01       	movw	r18, r24
    18c4:	40 e0       	ldi	r20, 0x00	; 0
    18c6:	50 e0       	ldi	r21, 0x00	; 0
    18c8:	c8 01       	movw	r24, r16
    18ca:	b7 01       	movw	r22, r14
    18cc:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    18d0:	da 01       	movw	r26, r20
    18d2:	c9 01       	movw	r24, r18
    18d4:	98 2f       	mov	r25, r24
    18d6:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    18da:	89 0f       	add	r24, r25
    18dc:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <u8RGBRed>
    18e0:	31 c0       	rjmp	.+98     	; 0x1944 <main+0x3f0>
					}
					else
					{
						u8RGBRed = (uint8_t)(u8RGBStartRed - ((uint32_t)(u8RGBStartRed-u8RGBStopRed))*u16RGBTimeCounter/u16RGBTime);
    18e2:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <u8RGBStartRed>
    18e6:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	f9 01       	movw	r30, r18
    18f8:	e8 1b       	sub	r30, r24
    18fa:	f9 0b       	sbc	r31, r25
    18fc:	cf 01       	movw	r24, r30
    18fe:	9c 01       	movw	r18, r24
    1900:	99 0f       	add	r25, r25
    1902:	44 0b       	sbc	r20, r20
    1904:	55 0b       	sbc	r21, r21
    1906:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    190a:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    190e:	cc 01       	movw	r24, r24
    1910:	a0 e0       	ldi	r26, 0x00	; 0
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	bc 01       	movw	r22, r24
    1916:	cd 01       	movw	r24, r26
    1918:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    191c:	7b 01       	movw	r14, r22
    191e:	8c 01       	movw	r16, r24
    1920:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    1924:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    1928:	9c 01       	movw	r18, r24
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	c8 01       	movw	r24, r16
    1930:	b7 01       	movw	r22, r14
    1932:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    1936:	da 01       	movw	r26, r20
    1938:	c9 01       	movw	r24, r18
    193a:	fd 2d       	mov	r31, r13
    193c:	f8 1b       	sub	r31, r24
    193e:	8f 2f       	mov	r24, r31
    1940:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <u8RGBRed>
					}
					
					if(u8RGBStartGreen<u8RGBStopGreen)
    1944:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <u8RGBStartGreen>
    1948:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    194c:	98 17       	cp	r25, r24
    194e:	88 f5       	brcc	.+98     	; 0x19b2 <main+0x45e>
					{
						u8RGBGreen = (uint8_t)(((uint32_t)(u8RGBStopGreen-u8RGBStartGreen))*u16RGBTimeCounter/u16RGBTime + u8RGBStartGreen);
    1950:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    195c:	88 2f       	mov	r24, r24
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	a9 01       	movw	r20, r18
    1962:	48 1b       	sub	r20, r24
    1964:	59 0b       	sbc	r21, r25
    1966:	ca 01       	movw	r24, r20
    1968:	9c 01       	movw	r18, r24
    196a:	99 0f       	add	r25, r25
    196c:	44 0b       	sbc	r20, r20
    196e:	55 0b       	sbc	r21, r21
    1970:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    1974:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    1978:	cc 01       	movw	r24, r24
    197a:	a0 e0       	ldi	r26, 0x00	; 0
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	bc 01       	movw	r22, r24
    1980:	cd 01       	movw	r24, r26
    1982:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    1986:	7b 01       	movw	r14, r22
    1988:	8c 01       	movw	r16, r24
    198a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    198e:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    1992:	9c 01       	movw	r18, r24
    1994:	40 e0       	ldi	r20, 0x00	; 0
    1996:	50 e0       	ldi	r21, 0x00	; 0
    1998:	c8 01       	movw	r24, r16
    199a:	b7 01       	movw	r22, r14
    199c:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    19a0:	da 01       	movw	r26, r20
    19a2:	c9 01       	movw	r24, r18
    19a4:	98 2f       	mov	r25, r24
    19a6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    19aa:	89 0f       	add	r24, r25
    19ac:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u8RGBGreen>
    19b0:	31 c0       	rjmp	.+98     	; 0x1a14 <main+0x4c0>
					}
					else
					{
						u8RGBGreen = (uint8_t)(u8RGBStartGreen - ((uint32_t)(u8RGBStartGreen-u8RGBStopGreen))*u16RGBTimeCounter/u16RGBTime);
    19b2:	d0 90 44 01 	lds	r13, 0x0144	; 0x800144 <u8RGBStartGreen>
    19b6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    19c2:	88 2f       	mov	r24, r24
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	f9 01       	movw	r30, r18
    19c8:	e8 1b       	sub	r30, r24
    19ca:	f9 0b       	sbc	r31, r25
    19cc:	cf 01       	movw	r24, r30
    19ce:	9c 01       	movw	r18, r24
    19d0:	99 0f       	add	r25, r25
    19d2:	44 0b       	sbc	r20, r20
    19d4:	55 0b       	sbc	r21, r21
    19d6:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    19da:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    19de:	cc 01       	movw	r24, r24
    19e0:	a0 e0       	ldi	r26, 0x00	; 0
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	bc 01       	movw	r22, r24
    19e6:	cd 01       	movw	r24, r26
    19e8:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    19ec:	7b 01       	movw	r14, r22
    19ee:	8c 01       	movw	r16, r24
    19f0:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    19f4:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    19f8:	9c 01       	movw	r18, r24
    19fa:	40 e0       	ldi	r20, 0x00	; 0
    19fc:	50 e0       	ldi	r21, 0x00	; 0
    19fe:	c8 01       	movw	r24, r16
    1a00:	b7 01       	movw	r22, r14
    1a02:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    1a06:	da 01       	movw	r26, r20
    1a08:	c9 01       	movw	r24, r18
    1a0a:	fd 2d       	mov	r31, r13
    1a0c:	f8 1b       	sub	r31, r24
    1a0e:	8f 2f       	mov	r24, r31
    1a10:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u8RGBGreen>
					}
					
					if(u8RGBStartBlue<u8RGBStopBlue)
    1a14:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <u8RGBStartBlue>
    1a18:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    1a1c:	98 17       	cp	r25, r24
    1a1e:	88 f5       	brcc	.+98     	; 0x1a82 <main+0x52e>
					{
						u8RGBBlue = (uint8_t)(((uint32_t)(u8RGBStopBlue-u8RGBStartBlue))*u16RGBTimeCounter/u16RGBTime + u8RGBStartBlue);
    1a20:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    1a2c:	88 2f       	mov	r24, r24
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a9 01       	movw	r20, r18
    1a32:	48 1b       	sub	r20, r24
    1a34:	59 0b       	sbc	r21, r25
    1a36:	ca 01       	movw	r24, r20
    1a38:	9c 01       	movw	r18, r24
    1a3a:	99 0f       	add	r25, r25
    1a3c:	44 0b       	sbc	r20, r20
    1a3e:	55 0b       	sbc	r21, r21
    1a40:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    1a44:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    1a48:	cc 01       	movw	r24, r24
    1a4a:	a0 e0       	ldi	r26, 0x00	; 0
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	bc 01       	movw	r22, r24
    1a50:	cd 01       	movw	r24, r26
    1a52:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    1a56:	7b 01       	movw	r14, r22
    1a58:	8c 01       	movw	r16, r24
    1a5a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    1a5e:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    1a62:	9c 01       	movw	r18, r24
    1a64:	40 e0       	ldi	r20, 0x00	; 0
    1a66:	50 e0       	ldi	r21, 0x00	; 0
    1a68:	c8 01       	movw	r24, r16
    1a6a:	b7 01       	movw	r22, r14
    1a6c:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    1a70:	da 01       	movw	r26, r20
    1a72:	c9 01       	movw	r24, r18
    1a74:	98 2f       	mov	r25, r24
    1a76:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    1a7a:	89 0f       	add	r24, r25
    1a7c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <u8RGBBlue>
    1a80:	31 c0       	rjmp	.+98     	; 0x1ae4 <main+0x590>
					}
					else
					{
						u8RGBBlue = (uint8_t)(u8RGBStartBlue - ((uint32_t)(u8RGBStartBlue-u8RGBStopBlue))*u16RGBTimeCounter/u16RGBTime);
    1a82:	d0 90 45 01 	lds	r13, 0x0145	; 0x800145 <u8RGBStartBlue>
    1a86:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    1a92:	88 2f       	mov	r24, r24
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	f9 01       	movw	r30, r18
    1a98:	e8 1b       	sub	r30, r24
    1a9a:	f9 0b       	sbc	r31, r25
    1a9c:	cf 01       	movw	r24, r30
    1a9e:	9c 01       	movw	r18, r24
    1aa0:	99 0f       	add	r25, r25
    1aa2:	44 0b       	sbc	r20, r20
    1aa4:	55 0b       	sbc	r21, r21
    1aa6:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    1aaa:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    1aae:	cc 01       	movw	r24, r24
    1ab0:	a0 e0       	ldi	r26, 0x00	; 0
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	bc 01       	movw	r22, r24
    1ab6:	cd 01       	movw	r24, r26
    1ab8:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    1abc:	7b 01       	movw	r14, r22
    1abe:	8c 01       	movw	r16, r24
    1ac0:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    1ac4:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    1ac8:	9c 01       	movw	r18, r24
    1aca:	40 e0       	ldi	r20, 0x00	; 0
    1acc:	50 e0       	ldi	r21, 0x00	; 0
    1ace:	c8 01       	movw	r24, r16
    1ad0:	b7 01       	movw	r22, r14
    1ad2:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    1ad6:	da 01       	movw	r26, r20
    1ad8:	c9 01       	movw	r24, r18
    1ada:	fd 2d       	mov	r31, r13
    1adc:	f8 1b       	sub	r31, r24
    1ade:	8f 2f       	mov	r24, r31
    1ae0:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <u8RGBBlue>
					}
					u8RGBSingleColor = 1;
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8RGBSingleColor>
					u8RGBDataState = 1;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBDataState>
					break;
    1af0:	c4 c3       	rjmp	.+1928   	; 0x227a <main+0xd26>

					case 2:
					u8Count = LED_COUNT/2;
    1af2:	8a e0       	ldi	r24, 0x0A	; 10
    1af4:	8e 83       	std	Y+6, r24	; 0x06
					for(i=0;i<u8Count;i++)
    1af6:	1a 82       	std	Y+2, r1	; 0x02
    1af8:	19 82       	std	Y+1, r1	; 0x01
    1afa:	b0 c3       	rjmp	.+1888   	; 0x225c <main+0xd08>
					{
						if(u8RGBStartRed<u8RGBStartMiddleRed)
    1afc:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <u8RGBStartRed>
    1b00:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u8RGBStartMiddleRed>
    1b04:	98 17       	cp	r25, r24
    1b06:	78 f5       	brcc	.+94     	; 0x1b66 <main+0x612>
						{
							u8StartTemp = (uint8_t)(((uint32_t)(u8RGBStartMiddleRed-u8RGBStartRed))*i/(u8Count-1)+u8RGBStartRed);
    1b08:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u8RGBStartMiddleRed>
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    1b14:	88 2f       	mov	r24, r24
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	a9 01       	movw	r20, r18
    1b1a:	48 1b       	sub	r20, r24
    1b1c:	59 0b       	sbc	r21, r25
    1b1e:	ca 01       	movw	r24, r20
    1b20:	9c 01       	movw	r18, r24
    1b22:	99 0f       	add	r25, r25
    1b24:	44 0b       	sbc	r20, r20
    1b26:	55 0b       	sbc	r21, r21
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2c:	cc 01       	movw	r24, r24
    1b2e:	a0 e0       	ldi	r26, 0x00	; 0
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	bc 01       	movw	r22, r24
    1b34:	cd 01       	movw	r24, r26
    1b36:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    1b3a:	7b 01       	movw	r14, r22
    1b3c:	8c 01       	movw	r16, r24
    1b3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b40:	88 2f       	mov	r24, r24
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	9c 01       	movw	r18, r24
    1b48:	99 0f       	add	r25, r25
    1b4a:	44 0b       	sbc	r20, r20
    1b4c:	55 0b       	sbc	r21, r21
    1b4e:	c8 01       	movw	r24, r16
    1b50:	b7 01       	movw	r22, r14
    1b52:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    1b56:	da 01       	movw	r26, r20
    1b58:	c9 01       	movw	r24, r18
    1b5a:	98 2f       	mov	r25, r24
    1b5c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    1b60:	89 0f       	add	r24, r25
    1b62:	8c 83       	std	Y+4, r24	; 0x04
    1b64:	2f c0       	rjmp	.+94     	; 0x1bc4 <main+0x670>
						}
						else
						{
							u8StartTemp = (uint8_t)(u8RGBStartRed-((uint32_t)(u8RGBStartRed-u8RGBStartMiddleRed))*i/(u8Count-1));
    1b66:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <u8RGBStartRed>
    1b6a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u8RGBStartMiddleRed>
    1b76:	88 2f       	mov	r24, r24
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	f9 01       	movw	r30, r18
    1b7c:	e8 1b       	sub	r30, r24
    1b7e:	f9 0b       	sbc	r31, r25
    1b80:	cf 01       	movw	r24, r30
    1b82:	9c 01       	movw	r18, r24
    1b84:	99 0f       	add	r25, r25
    1b86:	44 0b       	sbc	r20, r20
    1b88:	55 0b       	sbc	r21, r21
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8e:	cc 01       	movw	r24, r24
    1b90:	a0 e0       	ldi	r26, 0x00	; 0
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	bc 01       	movw	r22, r24
    1b96:	cd 01       	movw	r24, r26
    1b98:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    1b9c:	7b 01       	movw	r14, r22
    1b9e:	8c 01       	movw	r16, r24
    1ba0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba2:	88 2f       	mov	r24, r24
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	9c 01       	movw	r18, r24
    1baa:	99 0f       	add	r25, r25
    1bac:	44 0b       	sbc	r20, r20
    1bae:	55 0b       	sbc	r21, r21
    1bb0:	c8 01       	movw	r24, r16
    1bb2:	b7 01       	movw	r22, r14
    1bb4:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    1bb8:	da 01       	movw	r26, r20
    1bba:	c9 01       	movw	r24, r18
    1bbc:	fd 2d       	mov	r31, r13
    1bbe:	f8 1b       	sub	r31, r24
    1bc0:	8f 2f       	mov	r24, r31
    1bc2:	8c 83       	std	Y+4, r24	; 0x04
						}

						if(u8RGBStopRed<u8RGBStopMiddleRed)
    1bc4:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <u8RGBStopRed>
    1bc8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u8RGBStopMiddleRed>
    1bcc:	98 17       	cp	r25, r24
    1bce:	78 f5       	brcc	.+94     	; 0x1c2e <main+0x6da>
						{
							u8StopTemp = (uint8_t)(((uint32_t)(u8RGBStopMiddleRed-u8RGBStopRed))*i/(u8Count-1)+u8RGBStopRed);
    1bd0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u8RGBStopMiddleRed>
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    1bdc:	88 2f       	mov	r24, r24
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a9 01       	movw	r20, r18
    1be2:	48 1b       	sub	r20, r24
    1be4:	59 0b       	sbc	r21, r25
    1be6:	ca 01       	movw	r24, r20
    1be8:	9c 01       	movw	r18, r24
    1bea:	99 0f       	add	r25, r25
    1bec:	44 0b       	sbc	r20, r20
    1bee:	55 0b       	sbc	r21, r21
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf4:	cc 01       	movw	r24, r24
    1bf6:	a0 e0       	ldi	r26, 0x00	; 0
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	bc 01       	movw	r22, r24
    1bfc:	cd 01       	movw	r24, r26
    1bfe:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    1c02:	7b 01       	movw	r14, r22
    1c04:	8c 01       	movw	r16, r24
    1c06:	8e 81       	ldd	r24, Y+6	; 0x06
    1c08:	88 2f       	mov	r24, r24
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	9c 01       	movw	r18, r24
    1c10:	99 0f       	add	r25, r25
    1c12:	44 0b       	sbc	r20, r20
    1c14:	55 0b       	sbc	r21, r21
    1c16:	c8 01       	movw	r24, r16
    1c18:	b7 01       	movw	r22, r14
    1c1a:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    1c1e:	da 01       	movw	r26, r20
    1c20:	c9 01       	movw	r24, r18
    1c22:	98 2f       	mov	r25, r24
    1c24:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    1c28:	89 0f       	add	r24, r25
    1c2a:	8d 83       	std	Y+5, r24	; 0x05
    1c2c:	2f c0       	rjmp	.+94     	; 0x1c8c <main+0x738>
						}
						else
						{
							u8StopTemp = (uint8_t)(u8RGBStopRed-((uint32_t)(u8RGBStopRed-u8RGBStopMiddleRed))*i/(u8Count-1));
    1c2e:	d0 90 49 01 	lds	r13, 0x0149	; 0x800149 <u8RGBStopRed>
    1c32:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u8RGBStopMiddleRed>
    1c3e:	88 2f       	mov	r24, r24
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	f9 01       	movw	r30, r18
    1c44:	e8 1b       	sub	r30, r24
    1c46:	f9 0b       	sbc	r31, r25
    1c48:	cf 01       	movw	r24, r30
    1c4a:	9c 01       	movw	r18, r24
    1c4c:	99 0f       	add	r25, r25
    1c4e:	44 0b       	sbc	r20, r20
    1c50:	55 0b       	sbc	r21, r21
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	9a 81       	ldd	r25, Y+2	; 0x02
    1c56:	cc 01       	movw	r24, r24
    1c58:	a0 e0       	ldi	r26, 0x00	; 0
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    1c64:	7b 01       	movw	r14, r22
    1c66:	8c 01       	movw	r16, r24
    1c68:	8e 81       	ldd	r24, Y+6	; 0x06
    1c6a:	88 2f       	mov	r24, r24
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	01 97       	sbiw	r24, 0x01	; 1
    1c70:	9c 01       	movw	r18, r24
    1c72:	99 0f       	add	r25, r25
    1c74:	44 0b       	sbc	r20, r20
    1c76:	55 0b       	sbc	r21, r21
    1c78:	c8 01       	movw	r24, r16
    1c7a:	b7 01       	movw	r22, r14
    1c7c:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    1c80:	da 01       	movw	r26, r20
    1c82:	c9 01       	movw	r24, r18
    1c84:	fd 2d       	mov	r31, r13
    1c86:	f8 1b       	sub	r31, r24
    1c88:	8f 2f       	mov	r24, r31
    1c8a:	8d 83       	std	Y+5, r24	; 0x05
						}

						if(u8StartTemp<u8StopTemp)
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c90:	98 17       	cp	r25, r24
    1c92:	68 f5       	brcc	.+90     	; 0x1cee <main+0x79a>
						{
							u8Temp = (uint8_t)(((uint32_t)(u8StopTemp-u8StartTemp))*u16RGBTimeCounter/u16RGBTime + u8StartTemp);
    1c94:	8d 81       	ldd	r24, Y+5	; 0x05
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9c:	88 2f       	mov	r24, r24
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	a9 01       	movw	r20, r18
    1ca2:	48 1b       	sub	r20, r24
    1ca4:	59 0b       	sbc	r21, r25
    1ca6:	ca 01       	movw	r24, r20
    1ca8:	9c 01       	movw	r18, r24
    1caa:	99 0f       	add	r25, r25
    1cac:	44 0b       	sbc	r20, r20
    1cae:	55 0b       	sbc	r21, r21
    1cb0:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    1cb4:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    1cb8:	cc 01       	movw	r24, r24
    1cba:	a0 e0       	ldi	r26, 0x00	; 0
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	bc 01       	movw	r22, r24
    1cc0:	cd 01       	movw	r24, r26
    1cc2:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    1cc6:	7b 01       	movw	r14, r22
    1cc8:	8c 01       	movw	r16, r24
    1cca:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    1cce:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    1cd2:	9c 01       	movw	r18, r24
    1cd4:	40 e0       	ldi	r20, 0x00	; 0
    1cd6:	50 e0       	ldi	r21, 0x00	; 0
    1cd8:	c8 01       	movw	r24, r16
    1cda:	b7 01       	movw	r22, r14
    1cdc:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    1ce0:	da 01       	movw	r26, r20
    1ce2:	c9 01       	movw	r24, r18
    1ce4:	98 2f       	mov	r25, r24
    1ce6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce8:	89 0f       	add	r24, r25
    1cea:	8b 83       	std	Y+3, r24	; 0x03
    1cec:	2c c0       	rjmp	.+88     	; 0x1d46 <main+0x7f2>
						}
						else
						{
							u8Temp = (uint8_t)(u8StartTemp-((uint32_t)(u8StartTemp-u8StopTemp))*u16RGBTimeCounter/u16RGBTime);
    1cee:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf6:	88 2f       	mov	r24, r24
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	f9 01       	movw	r30, r18
    1cfc:	e8 1b       	sub	r30, r24
    1cfe:	f9 0b       	sbc	r31, r25
    1d00:	cf 01       	movw	r24, r30
    1d02:	9c 01       	movw	r18, r24
    1d04:	99 0f       	add	r25, r25
    1d06:	44 0b       	sbc	r20, r20
    1d08:	55 0b       	sbc	r21, r21
    1d0a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    1d0e:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    1d12:	cc 01       	movw	r24, r24
    1d14:	a0 e0       	ldi	r26, 0x00	; 0
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	bc 01       	movw	r22, r24
    1d1a:	cd 01       	movw	r24, r26
    1d1c:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    1d20:	7b 01       	movw	r14, r22
    1d22:	8c 01       	movw	r16, r24
    1d24:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    1d28:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    1d2c:	9c 01       	movw	r18, r24
    1d2e:	40 e0       	ldi	r20, 0x00	; 0
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	c8 01       	movw	r24, r16
    1d34:	b7 01       	movw	r22, r14
    1d36:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    1d3a:	da 01       	movw	r26, r20
    1d3c:	c9 01       	movw	r24, r18
    1d3e:	98 2f       	mov	r25, r24
    1d40:	8c 81       	ldd	r24, Y+4	; 0x04
    1d42:	89 1b       	sub	r24, r25
    1d44:	8b 83       	std	Y+3, r24	; 0x03
						}
						au8Red[i] = u8Temp;
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4a:	80 50       	subi	r24, 0x00	; 0
    1d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d50:	fc 01       	movw	r30, r24
    1d52:	20 83       	st	Z, r18
						au8Red[LED_COUNT-i-1] = u8Temp;
    1d54:	23 e1       	ldi	r18, 0x13	; 19
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5c:	a9 01       	movw	r20, r18
    1d5e:	48 1b       	sub	r20, r24
    1d60:	59 0b       	sbc	r21, r25
    1d62:	ca 01       	movw	r24, r20
    1d64:	80 50       	subi	r24, 0x00	; 0
    1d66:	9f 4f       	sbci	r25, 0xFF	; 255
    1d68:	2b 81       	ldd	r18, Y+3	; 0x03
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	20 83       	st	Z, r18

						if(u8RGBStartGreen<u8RGBStartMiddleGreen)
    1d6e:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <u8RGBStartGreen>
    1d72:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8RGBStartMiddleGreen>
    1d76:	98 17       	cp	r25, r24
    1d78:	78 f5       	brcc	.+94     	; 0x1dd8 <main+0x884>
						{
							u8StartTemp = (uint8_t)(((uint32_t)(u8RGBStartMiddleGreen-u8RGBStartGreen))*i/(u8Count-1)+u8RGBStartGreen);
    1d7a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8RGBStartMiddleGreen>
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    1d86:	88 2f       	mov	r24, r24
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	a9 01       	movw	r20, r18
    1d8c:	48 1b       	sub	r20, r24
    1d8e:	59 0b       	sbc	r21, r25
    1d90:	ca 01       	movw	r24, r20
    1d92:	9c 01       	movw	r18, r24
    1d94:	99 0f       	add	r25, r25
    1d96:	44 0b       	sbc	r20, r20
    1d98:	55 0b       	sbc	r21, r21
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9e:	cc 01       	movw	r24, r24
    1da0:	a0 e0       	ldi	r26, 0x00	; 0
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	bc 01       	movw	r22, r24
    1da6:	cd 01       	movw	r24, r26
    1da8:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    1dac:	7b 01       	movw	r14, r22
    1dae:	8c 01       	movw	r16, r24
    1db0:	8e 81       	ldd	r24, Y+6	; 0x06
    1db2:	88 2f       	mov	r24, r24
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	9c 01       	movw	r18, r24
    1dba:	99 0f       	add	r25, r25
    1dbc:	44 0b       	sbc	r20, r20
    1dbe:	55 0b       	sbc	r21, r21
    1dc0:	c8 01       	movw	r24, r16
    1dc2:	b7 01       	movw	r22, r14
    1dc4:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    1dc8:	da 01       	movw	r26, r20
    1dca:	c9 01       	movw	r24, r18
    1dcc:	98 2f       	mov	r25, r24
    1dce:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    1dd2:	89 0f       	add	r24, r25
    1dd4:	8c 83       	std	Y+4, r24	; 0x04
    1dd6:	2f c0       	rjmp	.+94     	; 0x1e36 <main+0x8e2>
						}
						else
						{
							u8StartTemp = (uint8_t)(u8RGBStartGreen-((uint32_t)(u8RGBStartGreen-u8RGBStartMiddleGreen))*i/(u8Count-1));
    1dd8:	d0 90 44 01 	lds	r13, 0x0144	; 0x800144 <u8RGBStartGreen>
    1ddc:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8RGBStartMiddleGreen>
    1de8:	88 2f       	mov	r24, r24
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	f9 01       	movw	r30, r18
    1dee:	e8 1b       	sub	r30, r24
    1df0:	f9 0b       	sbc	r31, r25
    1df2:	cf 01       	movw	r24, r30
    1df4:	9c 01       	movw	r18, r24
    1df6:	99 0f       	add	r25, r25
    1df8:	44 0b       	sbc	r20, r20
    1dfa:	55 0b       	sbc	r21, r21
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1e00:	cc 01       	movw	r24, r24
    1e02:	a0 e0       	ldi	r26, 0x00	; 0
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	bc 01       	movw	r22, r24
    1e08:	cd 01       	movw	r24, r26
    1e0a:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    1e0e:	7b 01       	movw	r14, r22
    1e10:	8c 01       	movw	r16, r24
    1e12:	8e 81       	ldd	r24, Y+6	; 0x06
    1e14:	88 2f       	mov	r24, r24
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	9c 01       	movw	r18, r24
    1e1c:	99 0f       	add	r25, r25
    1e1e:	44 0b       	sbc	r20, r20
    1e20:	55 0b       	sbc	r21, r21
    1e22:	c8 01       	movw	r24, r16
    1e24:	b7 01       	movw	r22, r14
    1e26:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    1e2a:	da 01       	movw	r26, r20
    1e2c:	c9 01       	movw	r24, r18
    1e2e:	fd 2d       	mov	r31, r13
    1e30:	f8 1b       	sub	r31, r24
    1e32:	8f 2f       	mov	r24, r31
    1e34:	8c 83       	std	Y+4, r24	; 0x04
						}

						if(u8RGBStopGreen<u8RGBStopMiddleGreen)
    1e36:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <u8RGBStopGreen>
    1e3a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u8RGBStopMiddleGreen>
    1e3e:	98 17       	cp	r25, r24
    1e40:	78 f5       	brcc	.+94     	; 0x1ea0 <main+0x94c>
						{
							u8StopTemp = (uint8_t)(((uint32_t)(u8RGBStopMiddleGreen-u8RGBStopGreen))*i/(u8Count-1)+u8RGBStopGreen);
    1e42:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u8RGBStopMiddleGreen>
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    1e4e:	88 2f       	mov	r24, r24
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	a9 01       	movw	r20, r18
    1e54:	48 1b       	sub	r20, r24
    1e56:	59 0b       	sbc	r21, r25
    1e58:	ca 01       	movw	r24, r20
    1e5a:	9c 01       	movw	r18, r24
    1e5c:	99 0f       	add	r25, r25
    1e5e:	44 0b       	sbc	r20, r20
    1e60:	55 0b       	sbc	r21, r21
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	9a 81       	ldd	r25, Y+2	; 0x02
    1e66:	cc 01       	movw	r24, r24
    1e68:	a0 e0       	ldi	r26, 0x00	; 0
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	bc 01       	movw	r22, r24
    1e6e:	cd 01       	movw	r24, r26
    1e70:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    1e74:	7b 01       	movw	r14, r22
    1e76:	8c 01       	movw	r16, r24
    1e78:	8e 81       	ldd	r24, Y+6	; 0x06
    1e7a:	88 2f       	mov	r24, r24
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	9c 01       	movw	r18, r24
    1e82:	99 0f       	add	r25, r25
    1e84:	44 0b       	sbc	r20, r20
    1e86:	55 0b       	sbc	r21, r21
    1e88:	c8 01       	movw	r24, r16
    1e8a:	b7 01       	movw	r22, r14
    1e8c:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    1e90:	da 01       	movw	r26, r20
    1e92:	c9 01       	movw	r24, r18
    1e94:	98 2f       	mov	r25, r24
    1e96:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    1e9a:	89 0f       	add	r24, r25
    1e9c:	8d 83       	std	Y+5, r24	; 0x05
    1e9e:	2f c0       	rjmp	.+94     	; 0x1efe <main+0x9aa>
						}
						else
						{
							u8StopTemp = (uint8_t)(u8RGBStopGreen-((uint32_t)(u8RGBStopGreen-u8RGBStopMiddleGreen))*i/(u8Count-1));
    1ea0:	d0 90 4a 01 	lds	r13, 0x014A	; 0x80014a <u8RGBStopGreen>
    1ea4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u8RGBStopMiddleGreen>
    1eb0:	88 2f       	mov	r24, r24
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	f9 01       	movw	r30, r18
    1eb6:	e8 1b       	sub	r30, r24
    1eb8:	f9 0b       	sbc	r31, r25
    1eba:	cf 01       	movw	r24, r30
    1ebc:	9c 01       	movw	r18, r24
    1ebe:	99 0f       	add	r25, r25
    1ec0:	44 0b       	sbc	r20, r20
    1ec2:	55 0b       	sbc	r21, r21
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec8:	cc 01       	movw	r24, r24
    1eca:	a0 e0       	ldi	r26, 0x00	; 0
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	bc 01       	movw	r22, r24
    1ed0:	cd 01       	movw	r24, r26
    1ed2:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    1ed6:	7b 01       	movw	r14, r22
    1ed8:	8c 01       	movw	r16, r24
    1eda:	8e 81       	ldd	r24, Y+6	; 0x06
    1edc:	88 2f       	mov	r24, r24
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	9c 01       	movw	r18, r24
    1ee4:	99 0f       	add	r25, r25
    1ee6:	44 0b       	sbc	r20, r20
    1ee8:	55 0b       	sbc	r21, r21
    1eea:	c8 01       	movw	r24, r16
    1eec:	b7 01       	movw	r22, r14
    1eee:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    1ef2:	da 01       	movw	r26, r20
    1ef4:	c9 01       	movw	r24, r18
    1ef6:	fd 2d       	mov	r31, r13
    1ef8:	f8 1b       	sub	r31, r24
    1efa:	8f 2f       	mov	r24, r31
    1efc:	8d 83       	std	Y+5, r24	; 0x05
						}

						if(u8StartTemp<u8StopTemp)
    1efe:	9c 81       	ldd	r25, Y+4	; 0x04
    1f00:	8d 81       	ldd	r24, Y+5	; 0x05
    1f02:	98 17       	cp	r25, r24
    1f04:	68 f5       	brcc	.+90     	; 0x1f60 <main+0xa0c>
						{
							u8Temp = (uint8_t)(((uint32_t)(u8StopTemp-u8StartTemp))*u16RGBTimeCounter/u16RGBTime + u8StartTemp);
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	28 2f       	mov	r18, r24
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0e:	88 2f       	mov	r24, r24
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	a9 01       	movw	r20, r18
    1f14:	48 1b       	sub	r20, r24
    1f16:	59 0b       	sbc	r21, r25
    1f18:	ca 01       	movw	r24, r20
    1f1a:	9c 01       	movw	r18, r24
    1f1c:	99 0f       	add	r25, r25
    1f1e:	44 0b       	sbc	r20, r20
    1f20:	55 0b       	sbc	r21, r21
    1f22:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    1f26:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    1f2a:	cc 01       	movw	r24, r24
    1f2c:	a0 e0       	ldi	r26, 0x00	; 0
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    1f38:	7b 01       	movw	r14, r22
    1f3a:	8c 01       	movw	r16, r24
    1f3c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    1f40:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    1f44:	9c 01       	movw	r18, r24
    1f46:	40 e0       	ldi	r20, 0x00	; 0
    1f48:	50 e0       	ldi	r21, 0x00	; 0
    1f4a:	c8 01       	movw	r24, r16
    1f4c:	b7 01       	movw	r22, r14
    1f4e:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    1f52:	da 01       	movw	r26, r20
    1f54:	c9 01       	movw	r24, r18
    1f56:	98 2f       	mov	r25, r24
    1f58:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5a:	89 0f       	add	r24, r25
    1f5c:	8b 83       	std	Y+3, r24	; 0x03
    1f5e:	2c c0       	rjmp	.+88     	; 0x1fb8 <main+0xa64>
						}
						else
						{
							u8Temp = (uint8_t)(u8StartTemp-((uint32_t)(u8StartTemp-u8StopTemp))*u16RGBTimeCounter/u16RGBTime);
    1f60:	8c 81       	ldd	r24, Y+4	; 0x04
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	8d 81       	ldd	r24, Y+5	; 0x05
    1f68:	88 2f       	mov	r24, r24
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	f9 01       	movw	r30, r18
    1f6e:	e8 1b       	sub	r30, r24
    1f70:	f9 0b       	sbc	r31, r25
    1f72:	cf 01       	movw	r24, r30
    1f74:	9c 01       	movw	r18, r24
    1f76:	99 0f       	add	r25, r25
    1f78:	44 0b       	sbc	r20, r20
    1f7a:	55 0b       	sbc	r21, r21
    1f7c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    1f80:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    1f84:	cc 01       	movw	r24, r24
    1f86:	a0 e0       	ldi	r26, 0x00	; 0
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	bc 01       	movw	r22, r24
    1f8c:	cd 01       	movw	r24, r26
    1f8e:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    1f92:	7b 01       	movw	r14, r22
    1f94:	8c 01       	movw	r16, r24
    1f96:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    1f9a:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    1f9e:	9c 01       	movw	r18, r24
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	50 e0       	ldi	r21, 0x00	; 0
    1fa4:	c8 01       	movw	r24, r16
    1fa6:	b7 01       	movw	r22, r14
    1fa8:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    1fac:	da 01       	movw	r26, r20
    1fae:	c9 01       	movw	r24, r18
    1fb0:	98 2f       	mov	r25, r24
    1fb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb4:	89 1b       	sub	r24, r25
    1fb6:	8b 83       	std	Y+3, r24	; 0x03
						}
						au8Green[i] = u8Temp;
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbc:	8c 5e       	subi	r24, 0xEC	; 236
    1fbe:	9e 4f       	sbci	r25, 0xFE	; 254
    1fc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	20 83       	st	Z, r18
						au8Green[LED_COUNT-i-1] = u8Temp;
    1fc6:	23 e1       	ldi	r18, 0x13	; 19
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fce:	a9 01       	movw	r20, r18
    1fd0:	48 1b       	sub	r20, r24
    1fd2:	59 0b       	sbc	r21, r25
    1fd4:	ca 01       	movw	r24, r20
    1fd6:	8c 5e       	subi	r24, 0xEC	; 236
    1fd8:	9e 4f       	sbci	r25, 0xFE	; 254
    1fda:	2b 81       	ldd	r18, Y+3	; 0x03
    1fdc:	fc 01       	movw	r30, r24
    1fde:	20 83       	st	Z, r18
						
						if(u8RGBStartBlue<u8RGBStartMiddleBlue)
    1fe0:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <u8RGBStartBlue>
    1fe4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u8RGBStartMiddleBlue>
    1fe8:	98 17       	cp	r25, r24
    1fea:	78 f5       	brcc	.+94     	; 0x204a <main+0xaf6>
						{
							u8StartTemp = (uint8_t)(((uint32_t)(u8RGBStartMiddleBlue-u8RGBStartBlue))*i/(u8Count-1)+u8RGBStartBlue);
    1fec:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u8RGBStartMiddleBlue>
    1ff0:	28 2f       	mov	r18, r24
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    1ff8:	88 2f       	mov	r24, r24
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	a9 01       	movw	r20, r18
    1ffe:	48 1b       	sub	r20, r24
    2000:	59 0b       	sbc	r21, r25
    2002:	ca 01       	movw	r24, r20
    2004:	9c 01       	movw	r18, r24
    2006:	99 0f       	add	r25, r25
    2008:	44 0b       	sbc	r20, r20
    200a:	55 0b       	sbc	r21, r21
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	9a 81       	ldd	r25, Y+2	; 0x02
    2010:	cc 01       	movw	r24, r24
    2012:	a0 e0       	ldi	r26, 0x00	; 0
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	bc 01       	movw	r22, r24
    2018:	cd 01       	movw	r24, r26
    201a:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    201e:	7b 01       	movw	r14, r22
    2020:	8c 01       	movw	r16, r24
    2022:	8e 81       	ldd	r24, Y+6	; 0x06
    2024:	88 2f       	mov	r24, r24
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	9c 01       	movw	r18, r24
    202c:	99 0f       	add	r25, r25
    202e:	44 0b       	sbc	r20, r20
    2030:	55 0b       	sbc	r21, r21
    2032:	c8 01       	movw	r24, r16
    2034:	b7 01       	movw	r22, r14
    2036:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    203a:	da 01       	movw	r26, r20
    203c:	c9 01       	movw	r24, r18
    203e:	98 2f       	mov	r25, r24
    2040:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    2044:	89 0f       	add	r24, r25
    2046:	8c 83       	std	Y+4, r24	; 0x04
    2048:	2f c0       	rjmp	.+94     	; 0x20a8 <main+0xb54>
						}
						else
						{
							u8StartTemp = (uint8_t)(u8RGBStartBlue-((uint32_t)(u8RGBStartBlue-u8RGBStartMiddleBlue))*i/(u8Count-1));
    204a:	d0 90 45 01 	lds	r13, 0x0145	; 0x800145 <u8RGBStartBlue>
    204e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    2052:	28 2f       	mov	r18, r24
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u8RGBStartMiddleBlue>
    205a:	88 2f       	mov	r24, r24
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	f9 01       	movw	r30, r18
    2060:	e8 1b       	sub	r30, r24
    2062:	f9 0b       	sbc	r31, r25
    2064:	cf 01       	movw	r24, r30
    2066:	9c 01       	movw	r18, r24
    2068:	99 0f       	add	r25, r25
    206a:	44 0b       	sbc	r20, r20
    206c:	55 0b       	sbc	r21, r21
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	9a 81       	ldd	r25, Y+2	; 0x02
    2072:	cc 01       	movw	r24, r24
    2074:	a0 e0       	ldi	r26, 0x00	; 0
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	bc 01       	movw	r22, r24
    207a:	cd 01       	movw	r24, r26
    207c:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    2080:	7b 01       	movw	r14, r22
    2082:	8c 01       	movw	r16, r24
    2084:	8e 81       	ldd	r24, Y+6	; 0x06
    2086:	88 2f       	mov	r24, r24
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	9c 01       	movw	r18, r24
    208e:	99 0f       	add	r25, r25
    2090:	44 0b       	sbc	r20, r20
    2092:	55 0b       	sbc	r21, r21
    2094:	c8 01       	movw	r24, r16
    2096:	b7 01       	movw	r22, r14
    2098:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    209c:	da 01       	movw	r26, r20
    209e:	c9 01       	movw	r24, r18
    20a0:	fd 2d       	mov	r31, r13
    20a2:	f8 1b       	sub	r31, r24
    20a4:	8f 2f       	mov	r24, r31
    20a6:	8c 83       	std	Y+4, r24	; 0x04
						}

						if(u8RGBStopBlue<u8RGBStopMiddleBlue)
    20a8:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <u8RGBStopBlue>
    20ac:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <u8RGBStopMiddleBlue>
    20b0:	98 17       	cp	r25, r24
    20b2:	78 f5       	brcc	.+94     	; 0x2112 <main+0xbbe>
						{
							u8StopTemp = (uint8_t)(((uint32_t)(u8RGBStopMiddleBlue-u8RGBStopBlue))*i/(u8Count-1)+u8RGBStopBlue);
    20b4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <u8RGBStopMiddleBlue>
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    20c0:	88 2f       	mov	r24, r24
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	a9 01       	movw	r20, r18
    20c6:	48 1b       	sub	r20, r24
    20c8:	59 0b       	sbc	r21, r25
    20ca:	ca 01       	movw	r24, r20
    20cc:	9c 01       	movw	r18, r24
    20ce:	99 0f       	add	r25, r25
    20d0:	44 0b       	sbc	r20, r20
    20d2:	55 0b       	sbc	r21, r21
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	9a 81       	ldd	r25, Y+2	; 0x02
    20d8:	cc 01       	movw	r24, r24
    20da:	a0 e0       	ldi	r26, 0x00	; 0
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	bc 01       	movw	r22, r24
    20e0:	cd 01       	movw	r24, r26
    20e2:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    20e6:	7b 01       	movw	r14, r22
    20e8:	8c 01       	movw	r16, r24
    20ea:	8e 81       	ldd	r24, Y+6	; 0x06
    20ec:	88 2f       	mov	r24, r24
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	9c 01       	movw	r18, r24
    20f4:	99 0f       	add	r25, r25
    20f6:	44 0b       	sbc	r20, r20
    20f8:	55 0b       	sbc	r21, r21
    20fa:	c8 01       	movw	r24, r16
    20fc:	b7 01       	movw	r22, r14
    20fe:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    2102:	da 01       	movw	r26, r20
    2104:	c9 01       	movw	r24, r18
    2106:	98 2f       	mov	r25, r24
    2108:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    210c:	89 0f       	add	r24, r25
    210e:	8d 83       	std	Y+5, r24	; 0x05
    2110:	2f c0       	rjmp	.+94     	; 0x2170 <main+0xc1c>
						}
						else
						{
							u8StopTemp = (uint8_t)(u8RGBStopBlue-((uint32_t)(u8RGBStopBlue-u8RGBStopMiddleBlue))*i/(u8Count-1));
    2112:	d0 90 4b 01 	lds	r13, 0x014B	; 0x80014b <u8RGBStopBlue>
    2116:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <u8RGBStopMiddleBlue>
    2122:	88 2f       	mov	r24, r24
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	f9 01       	movw	r30, r18
    2128:	e8 1b       	sub	r30, r24
    212a:	f9 0b       	sbc	r31, r25
    212c:	cf 01       	movw	r24, r30
    212e:	9c 01       	movw	r18, r24
    2130:	99 0f       	add	r25, r25
    2132:	44 0b       	sbc	r20, r20
    2134:	55 0b       	sbc	r21, r21
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	9a 81       	ldd	r25, Y+2	; 0x02
    213a:	cc 01       	movw	r24, r24
    213c:	a0 e0       	ldi	r26, 0x00	; 0
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    2148:	7b 01       	movw	r14, r22
    214a:	8c 01       	movw	r16, r24
    214c:	8e 81       	ldd	r24, Y+6	; 0x06
    214e:	88 2f       	mov	r24, r24
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	9c 01       	movw	r18, r24
    2156:	99 0f       	add	r25, r25
    2158:	44 0b       	sbc	r20, r20
    215a:	55 0b       	sbc	r21, r21
    215c:	c8 01       	movw	r24, r16
    215e:	b7 01       	movw	r22, r14
    2160:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    2164:	da 01       	movw	r26, r20
    2166:	c9 01       	movw	r24, r18
    2168:	fd 2d       	mov	r31, r13
    216a:	f8 1b       	sub	r31, r24
    216c:	8f 2f       	mov	r24, r31
    216e:	8d 83       	std	Y+5, r24	; 0x05
						}

						if(u8StartTemp<u8StopTemp)
    2170:	9c 81       	ldd	r25, Y+4	; 0x04
    2172:	8d 81       	ldd	r24, Y+5	; 0x05
    2174:	98 17       	cp	r25, r24
    2176:	68 f5       	brcc	.+90     	; 0x21d2 <main+0xc7e>
						{
							u8Temp = (uint8_t)(((uint32_t)(u8StopTemp-u8StartTemp))*u16RGBTimeCounter/u16RGBTime + u8StartTemp);
    2178:	8d 81       	ldd	r24, Y+5	; 0x05
    217a:	28 2f       	mov	r18, r24
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	8c 81       	ldd	r24, Y+4	; 0x04
    2180:	88 2f       	mov	r24, r24
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	a9 01       	movw	r20, r18
    2186:	48 1b       	sub	r20, r24
    2188:	59 0b       	sbc	r21, r25
    218a:	ca 01       	movw	r24, r20
    218c:	9c 01       	movw	r18, r24
    218e:	99 0f       	add	r25, r25
    2190:	44 0b       	sbc	r20, r20
    2192:	55 0b       	sbc	r21, r21
    2194:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    2198:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    219c:	cc 01       	movw	r24, r24
    219e:	a0 e0       	ldi	r26, 0x00	; 0
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	bc 01       	movw	r22, r24
    21a4:	cd 01       	movw	r24, r26
    21a6:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    21aa:	7b 01       	movw	r14, r22
    21ac:	8c 01       	movw	r16, r24
    21ae:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    21b2:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    21b6:	9c 01       	movw	r18, r24
    21b8:	40 e0       	ldi	r20, 0x00	; 0
    21ba:	50 e0       	ldi	r21, 0x00	; 0
    21bc:	c8 01       	movw	r24, r16
    21be:	b7 01       	movw	r22, r14
    21c0:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    21c4:	da 01       	movw	r26, r20
    21c6:	c9 01       	movw	r24, r18
    21c8:	98 2f       	mov	r25, r24
    21ca:	8c 81       	ldd	r24, Y+4	; 0x04
    21cc:	89 0f       	add	r24, r25
    21ce:	8b 83       	std	Y+3, r24	; 0x03
    21d0:	2c c0       	rjmp	.+88     	; 0x222a <main+0xcd6>
						}
						else
						{
							u8Temp = (uint8_t)(u8StartTemp-((uint32_t)(u8StartTemp-u8StopTemp))*u16RGBTimeCounter/u16RGBTime);
    21d2:	8c 81       	ldd	r24, Y+4	; 0x04
    21d4:	28 2f       	mov	r18, r24
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	8d 81       	ldd	r24, Y+5	; 0x05
    21da:	88 2f       	mov	r24, r24
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	f9 01       	movw	r30, r18
    21e0:	e8 1b       	sub	r30, r24
    21e2:	f9 0b       	sbc	r31, r25
    21e4:	cf 01       	movw	r24, r30
    21e6:	9c 01       	movw	r18, r24
    21e8:	99 0f       	add	r25, r25
    21ea:	44 0b       	sbc	r20, r20
    21ec:	55 0b       	sbc	r21, r21
    21ee:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    21f2:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    21f6:	cc 01       	movw	r24, r24
    21f8:	a0 e0       	ldi	r26, 0x00	; 0
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	bc 01       	movw	r22, r24
    21fe:	cd 01       	movw	r24, r26
    2200:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    2204:	7b 01       	movw	r14, r22
    2206:	8c 01       	movw	r16, r24
    2208:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    220c:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    2210:	9c 01       	movw	r18, r24
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	50 e0       	ldi	r21, 0x00	; 0
    2216:	c8 01       	movw	r24, r16
    2218:	b7 01       	movw	r22, r14
    221a:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    221e:	da 01       	movw	r26, r20
    2220:	c9 01       	movw	r24, r18
    2222:	98 2f       	mov	r25, r24
    2224:	8c 81       	ldd	r24, Y+4	; 0x04
    2226:	89 1b       	sub	r24, r25
    2228:	8b 83       	std	Y+3, r24	; 0x03
						}
						au8Blue[i] = u8Temp;
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	9a 81       	ldd	r25, Y+2	; 0x02
    222e:	88 5d       	subi	r24, 0xD8	; 216
    2230:	9e 4f       	sbci	r25, 0xFE	; 254
    2232:	2b 81       	ldd	r18, Y+3	; 0x03
    2234:	fc 01       	movw	r30, r24
    2236:	20 83       	st	Z, r18
						au8Blue[LED_COUNT-i-1] = u8Temp;
    2238:	23 e1       	ldi	r18, 0x13	; 19
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	9a 81       	ldd	r25, Y+2	; 0x02
    2240:	a9 01       	movw	r20, r18
    2242:	48 1b       	sub	r20, r24
    2244:	59 0b       	sbc	r21, r25
    2246:	ca 01       	movw	r24, r20
    2248:	88 5d       	subi	r24, 0xD8	; 216
    224a:	9e 4f       	sbci	r25, 0xFE	; 254
    224c:	2b 81       	ldd	r18, Y+3	; 0x03
    224e:	fc 01       	movw	r30, r24
    2250:	20 83       	st	Z, r18
					u8RGBDataState = 1;
					break;

					case 2:
					u8Count = LED_COUNT/2;
					for(i=0;i<u8Count;i++)
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	9a 81       	ldd	r25, Y+2	; 0x02
    2256:	01 96       	adiw	r24, 0x01	; 1
    2258:	9a 83       	std	Y+2, r25	; 0x02
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	8e 81       	ldd	r24, Y+6	; 0x06
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	9a 81       	ldd	r25, Y+2	; 0x02
    2266:	82 17       	cp	r24, r18
    2268:	93 07       	cpc	r25, r19
    226a:	08 f4       	brcc	.+2      	; 0x226e <main+0xd1a>
    226c:	47 cc       	rjmp	.-1906   	; 0x1afc <main+0x5a8>
							u8Temp = (uint8_t)(u8StartTemp-((uint32_t)(u8StartTemp-u8StopTemp))*u16RGBTimeCounter/u16RGBTime);
						}
						au8Blue[i] = u8Temp;
						au8Blue[LED_COUNT-i-1] = u8Temp;
					}
					u8RGBSingleColor = 0;
    226e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <u8RGBSingleColor>
					u8RGBDataState = 1;
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBDataState>
					break;
    2278:	00 00       	nop
				}

				#ifdef RX_DEBUG
				PORTD &= ~(1<<PORTD0);
    227a:	8b e2       	ldi	r24, 0x2B	; 43
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	2b e2       	ldi	r18, 0x2B	; 43
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	f9 01       	movw	r30, r18
    2284:	20 81       	ld	r18, Z
    2286:	2e 7f       	andi	r18, 0xFE	; 254
    2288:	fc 01       	movw	r30, r24
    228a:	20 83       	st	Z, r18
    228c:	fb c9       	rjmp	.-3082   	; 0x1684 <main+0x130>
				#endif
			}
		}
		else // no animation active
		{
			if(RingBuffer_CountChar(&RINGBUFFER,0xFF) && (u8RGBDataState==0))
    228e:	6f ef       	ldi	r22, 0xFF	; 255
    2290:	8f e6       	ldi	r24, 0x6F	; 111
    2292:	91 e0       	ldi	r25, 0x01	; 1
    2294:	0e 94 b5 01 	call	0x36a	; 0x36a <RingBuffer_CountChar>
    2298:	88 23       	and	r24, r24
    229a:	09 f4       	brne	.+2      	; 0x229e <main+0xd4a>
    229c:	f3 c9       	rjmp	.-3098   	; 0x1684 <main+0x130>
    229e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8RGBDataState>
    22a2:	88 23       	and	r24, r24
    22a4:	09 f0       	breq	.+2      	; 0x22a8 <main+0xd54>
    22a6:	ee c9       	rjmp	.-3108   	; 0x1684 <main+0x130>
			{
				RingBuffer_RemoveUntilChar(&RINGBUFFER,au8Command,0xFF,0);
    22a8:	ce 01       	movw	r24, r28
    22aa:	07 96       	adiw	r24, 0x07	; 7
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	4f ef       	ldi	r20, 0xFF	; 255
    22b0:	bc 01       	movw	r22, r24
    22b2:	8f e6       	ldi	r24, 0x6F	; 111
    22b4:	91 e0       	ldi	r25, 0x01	; 1
    22b6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <RingBuffer_RemoveUntilChar>
				
				switch(au8Command[0])
    22ba:	8f 81       	ldd	r24, Y+7	; 0x07
    22bc:	88 2f       	mov	r24, r24
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	83 33       	cpi	r24, 0x33	; 51
    22c2:	91 05       	cpc	r25, r1
    22c4:	c9 f1       	breq	.+114    	; 0x2338 <main+0xde4>
    22c6:	84 33       	cpi	r24, 0x34	; 52
    22c8:	91 05       	cpc	r25, r1
    22ca:	34 f4       	brge	.+12     	; 0x22d8 <main+0xd84>
    22cc:	81 33       	cpi	r24, 0x31	; 49
    22ce:	91 05       	cpc	r25, r1
    22d0:	61 f0       	breq	.+24     	; 0x22ea <main+0xd96>
    22d2:	c2 97       	sbiw	r24, 0x32	; 50
    22d4:	b9 f0       	breq	.+46     	; 0x2304 <main+0xdb0>
    22d6:	66 c2       	rjmp	.+1228   	; 0x27a4 <main+0x1250>
    22d8:	82 34       	cpi	r24, 0x42	; 66
    22da:	91 05       	cpc	r25, r1
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <main+0xd8c>
    22de:	cc c1       	rjmp	.+920    	; 0x2678 <main+0x1124>
    22e0:	83 34       	cpi	r24, 0x43	; 67
    22e2:	91 05       	cpc	r25, r1
    22e4:	09 f4       	brne	.+2      	; 0x22e8 <main+0xd94>
    22e6:	02 c2       	rjmp	.+1028   	; 0x26ec <main+0x1198>
    22e8:	5d c2       	rjmp	.+1210   	; 0x27a4 <main+0x1250>
				{
					case 0x31:
					u8RGBRed = 0;
    22ea:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <u8RGBRed>
					u8RGBGreen = 0;
    22ee:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <u8RGBGreen>
					u8RGBBlue = 0;
    22f2:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <u8RGBBlue>
					u8RGBSingleColor = 1;
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8RGBSingleColor>
					u8RGBDataState = 1;
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBDataState>
					break;
    2302:	50 c2       	rjmp	.+1184   	; 0x27a4 <main+0x1250>
					
					case 0x32:
					if(strlen(au8Command) == 4)
    2304:	ce 01       	movw	r24, r28
    2306:	07 96       	adiw	r24, 0x07	; 7
    2308:	0e 94 25 19 	call	0x324a	; 0x324a <strlen>
    230c:	04 97       	sbiw	r24, 0x04	; 4
    230e:	09 f0       	breq	.+2      	; 0x2312 <main+0xdbe>
    2310:	3f c2       	rjmp	.+1150   	; 0x2790 <main+0x123c>
					{
						u8RGBRed = au8Command[1]-1;
    2312:	88 85       	ldd	r24, Y+8	; 0x08
    2314:	81 50       	subi	r24, 0x01	; 1
    2316:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <u8RGBRed>
						u8RGBGreen = au8Command[2]-1;
    231a:	89 85       	ldd	r24, Y+9	; 0x09
    231c:	81 50       	subi	r24, 0x01	; 1
    231e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u8RGBGreen>
						u8RGBBlue = au8Command[3]-1;
    2322:	8a 85       	ldd	r24, Y+10	; 0x0a
    2324:	81 50       	subi	r24, 0x01	; 1
    2326:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <u8RGBBlue>
						u8RGBSingleColor = 1;
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8RGBSingleColor>
						u8RGBDataState = 1;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBDataState>
					}
					break;
    2336:	2c c2       	rjmp	.+1112   	; 0x2790 <main+0x123c>
					
					case 0x33:
					if(strlen(au8Command) == 7)
    2338:	ce 01       	movw	r24, r28
    233a:	07 96       	adiw	r24, 0x07	; 7
    233c:	0e 94 25 19 	call	0x324a	; 0x324a <strlen>
    2340:	07 97       	sbiw	r24, 0x07	; 7
    2342:	09 f0       	breq	.+2      	; 0x2346 <main+0xdf2>
    2344:	28 c2       	rjmp	.+1104   	; 0x2796 <main+0x1242>
					{
						u8RGBStartRed = au8Command[1]-1;
    2346:	88 85       	ldd	r24, Y+8	; 0x08
    2348:	81 50       	subi	r24, 0x01	; 1
    234a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8RGBStartRed>
						u8RGBStartGreen = au8Command[2]-1;
    234e:	89 85       	ldd	r24, Y+9	; 0x09
    2350:	81 50       	subi	r24, 0x01	; 1
    2352:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8RGBStartGreen>
						u8RGBStartBlue = au8Command[3]-1;
    2356:	8a 85       	ldd	r24, Y+10	; 0x0a
    2358:	81 50       	subi	r24, 0x01	; 1
    235a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <u8RGBStartBlue>
						u8RGBStopRed = au8Command[4]-1;
    235e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2360:	81 50       	subi	r24, 0x01	; 1
    2362:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8RGBStopRed>
						u8RGBStopGreen = au8Command[5]-1;
    2366:	8c 85       	ldd	r24, Y+12	; 0x0c
    2368:	81 50       	subi	r24, 0x01	; 1
    236a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <u8RGBStopGreen>
						u8RGBStopBlue = au8Command[6]-1;
    236e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2370:	81 50       	subi	r24, 0x01	; 1
    2372:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <u8RGBStopBlue>
						
						
						u8Count = LED_COUNT/2;
    2376:	8a e0       	ldi	r24, 0x0A	; 10
    2378:	8e 83       	std	Y+6, r24	; 0x06
						for(i=0;i<u8Count;i++)
    237a:	1a 82       	std	Y+2, r1	; 0x02
    237c:	19 82       	std	Y+1, r1	; 0x01
    237e:	6d c1       	rjmp	.+730    	; 0x265a <main+0x1106>
						{
							if(u8RGBStartRed<u8RGBStopRed)
    2380:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <u8RGBStartRed>
    2384:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    2388:	98 17       	cp	r25, r24
    238a:	78 f5       	brcc	.+94     	; 0x23ea <main+0xe96>
							{
								u8Temp = (uint8_t)(((uint32_t)(u8RGBStopRed-u8RGBStartRed))*i/(u8Count-1) + u8RGBStartRed);
    238c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    2390:	28 2f       	mov	r18, r24
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    2398:	88 2f       	mov	r24, r24
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	a9 01       	movw	r20, r18
    239e:	48 1b       	sub	r20, r24
    23a0:	59 0b       	sbc	r21, r25
    23a2:	ca 01       	movw	r24, r20
    23a4:	9c 01       	movw	r18, r24
    23a6:	99 0f       	add	r25, r25
    23a8:	44 0b       	sbc	r20, r20
    23aa:	55 0b       	sbc	r21, r21
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	9a 81       	ldd	r25, Y+2	; 0x02
    23b0:	cc 01       	movw	r24, r24
    23b2:	a0 e0       	ldi	r26, 0x00	; 0
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	bc 01       	movw	r22, r24
    23b8:	cd 01       	movw	r24, r26
    23ba:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    23be:	7b 01       	movw	r14, r22
    23c0:	8c 01       	movw	r16, r24
    23c2:	8e 81       	ldd	r24, Y+6	; 0x06
    23c4:	88 2f       	mov	r24, r24
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	9c 01       	movw	r18, r24
    23cc:	99 0f       	add	r25, r25
    23ce:	44 0b       	sbc	r20, r20
    23d0:	55 0b       	sbc	r21, r21
    23d2:	c8 01       	movw	r24, r16
    23d4:	b7 01       	movw	r22, r14
    23d6:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    23da:	da 01       	movw	r26, r20
    23dc:	c9 01       	movw	r24, r18
    23de:	98 2f       	mov	r25, r24
    23e0:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    23e4:	89 0f       	add	r24, r25
    23e6:	8b 83       	std	Y+3, r24	; 0x03
    23e8:	2f c0       	rjmp	.+94     	; 0x2448 <main+0xef4>
							}
							else
							{
								u8Temp = (uint8_t)(u8RGBStartRed - ((uint32_t)(u8RGBStartRed-u8RGBStopRed))*i/(u8Count-1));
    23ea:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <u8RGBStartRed>
    23ee:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    23f2:	28 2f       	mov	r18, r24
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    23fa:	88 2f       	mov	r24, r24
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	f9 01       	movw	r30, r18
    2400:	e8 1b       	sub	r30, r24
    2402:	f9 0b       	sbc	r31, r25
    2404:	cf 01       	movw	r24, r30
    2406:	9c 01       	movw	r18, r24
    2408:	99 0f       	add	r25, r25
    240a:	44 0b       	sbc	r20, r20
    240c:	55 0b       	sbc	r21, r21
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	9a 81       	ldd	r25, Y+2	; 0x02
    2412:	cc 01       	movw	r24, r24
    2414:	a0 e0       	ldi	r26, 0x00	; 0
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	bc 01       	movw	r22, r24
    241a:	cd 01       	movw	r24, r26
    241c:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    2420:	7b 01       	movw	r14, r22
    2422:	8c 01       	movw	r16, r24
    2424:	8e 81       	ldd	r24, Y+6	; 0x06
    2426:	88 2f       	mov	r24, r24
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	9c 01       	movw	r18, r24
    242e:	99 0f       	add	r25, r25
    2430:	44 0b       	sbc	r20, r20
    2432:	55 0b       	sbc	r21, r21
    2434:	c8 01       	movw	r24, r16
    2436:	b7 01       	movw	r22, r14
    2438:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    243c:	da 01       	movw	r26, r20
    243e:	c9 01       	movw	r24, r18
    2440:	fd 2d       	mov	r31, r13
    2442:	f8 1b       	sub	r31, r24
    2444:	8f 2f       	mov	r24, r31
    2446:	8b 83       	std	Y+3, r24	; 0x03
							}
							au8Red[i] = u8Temp;
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	9a 81       	ldd	r25, Y+2	; 0x02
    244c:	80 50       	subi	r24, 0x00	; 0
    244e:	9f 4f       	sbci	r25, 0xFF	; 255
    2450:	2b 81       	ldd	r18, Y+3	; 0x03
    2452:	fc 01       	movw	r30, r24
    2454:	20 83       	st	Z, r18
							au8Red[LED_COUNT-i-1] = u8Temp;
    2456:	23 e1       	ldi	r18, 0x13	; 19
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	9a 81       	ldd	r25, Y+2	; 0x02
    245e:	a9 01       	movw	r20, r18
    2460:	48 1b       	sub	r20, r24
    2462:	59 0b       	sbc	r21, r25
    2464:	ca 01       	movw	r24, r20
    2466:	80 50       	subi	r24, 0x00	; 0
    2468:	9f 4f       	sbci	r25, 0xFF	; 255
    246a:	2b 81       	ldd	r18, Y+3	; 0x03
    246c:	fc 01       	movw	r30, r24
    246e:	20 83       	st	Z, r18
							
							if(u8RGBStartGreen<u8RGBStopGreen)
    2470:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <u8RGBStartGreen>
    2474:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    2478:	98 17       	cp	r25, r24
    247a:	78 f5       	brcc	.+94     	; 0x24da <main+0xf86>
							{
								u8Temp = (uint8_t)(((uint32_t)(u8RGBStopGreen-u8RGBStartGreen))*i/(u8Count-1) + u8RGBStartGreen);
    247c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    2480:	28 2f       	mov	r18, r24
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    2488:	88 2f       	mov	r24, r24
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	a9 01       	movw	r20, r18
    248e:	48 1b       	sub	r20, r24
    2490:	59 0b       	sbc	r21, r25
    2492:	ca 01       	movw	r24, r20
    2494:	9c 01       	movw	r18, r24
    2496:	99 0f       	add	r25, r25
    2498:	44 0b       	sbc	r20, r20
    249a:	55 0b       	sbc	r21, r21
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	9a 81       	ldd	r25, Y+2	; 0x02
    24a0:	cc 01       	movw	r24, r24
    24a2:	a0 e0       	ldi	r26, 0x00	; 0
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	bc 01       	movw	r22, r24
    24a8:	cd 01       	movw	r24, r26
    24aa:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    24ae:	7b 01       	movw	r14, r22
    24b0:	8c 01       	movw	r16, r24
    24b2:	8e 81       	ldd	r24, Y+6	; 0x06
    24b4:	88 2f       	mov	r24, r24
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	9c 01       	movw	r18, r24
    24bc:	99 0f       	add	r25, r25
    24be:	44 0b       	sbc	r20, r20
    24c0:	55 0b       	sbc	r21, r21
    24c2:	c8 01       	movw	r24, r16
    24c4:	b7 01       	movw	r22, r14
    24c6:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    24ca:	da 01       	movw	r26, r20
    24cc:	c9 01       	movw	r24, r18
    24ce:	98 2f       	mov	r25, r24
    24d0:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    24d4:	89 0f       	add	r24, r25
    24d6:	8b 83       	std	Y+3, r24	; 0x03
    24d8:	2f c0       	rjmp	.+94     	; 0x2538 <main+0xfe4>
							}
							else
							{
								u8Temp = (uint8_t)(u8RGBStartGreen - ((uint32_t)(u8RGBStartGreen-u8RGBStopGreen))*i/(u8Count-1));
    24da:	d0 90 44 01 	lds	r13, 0x0144	; 0x800144 <u8RGBStartGreen>
    24de:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    24e2:	28 2f       	mov	r18, r24
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    24ea:	88 2f       	mov	r24, r24
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	f9 01       	movw	r30, r18
    24f0:	e8 1b       	sub	r30, r24
    24f2:	f9 0b       	sbc	r31, r25
    24f4:	cf 01       	movw	r24, r30
    24f6:	9c 01       	movw	r18, r24
    24f8:	99 0f       	add	r25, r25
    24fa:	44 0b       	sbc	r20, r20
    24fc:	55 0b       	sbc	r21, r21
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	9a 81       	ldd	r25, Y+2	; 0x02
    2502:	cc 01       	movw	r24, r24
    2504:	a0 e0       	ldi	r26, 0x00	; 0
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	bc 01       	movw	r22, r24
    250a:	cd 01       	movw	r24, r26
    250c:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    2510:	7b 01       	movw	r14, r22
    2512:	8c 01       	movw	r16, r24
    2514:	8e 81       	ldd	r24, Y+6	; 0x06
    2516:	88 2f       	mov	r24, r24
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	9c 01       	movw	r18, r24
    251e:	99 0f       	add	r25, r25
    2520:	44 0b       	sbc	r20, r20
    2522:	55 0b       	sbc	r21, r21
    2524:	c8 01       	movw	r24, r16
    2526:	b7 01       	movw	r22, r14
    2528:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    252c:	da 01       	movw	r26, r20
    252e:	c9 01       	movw	r24, r18
    2530:	fd 2d       	mov	r31, r13
    2532:	f8 1b       	sub	r31, r24
    2534:	8f 2f       	mov	r24, r31
    2536:	8b 83       	std	Y+3, r24	; 0x03
							}
							au8Green[i] = u8Temp;
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	9a 81       	ldd	r25, Y+2	; 0x02
    253c:	8c 5e       	subi	r24, 0xEC	; 236
    253e:	9e 4f       	sbci	r25, 0xFE	; 254
    2540:	2b 81       	ldd	r18, Y+3	; 0x03
    2542:	fc 01       	movw	r30, r24
    2544:	20 83       	st	Z, r18
							au8Green[LED_COUNT-i-1] = u8Temp;
    2546:	23 e1       	ldi	r18, 0x13	; 19
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	89 81       	ldd	r24, Y+1	; 0x01
    254c:	9a 81       	ldd	r25, Y+2	; 0x02
    254e:	a9 01       	movw	r20, r18
    2550:	48 1b       	sub	r20, r24
    2552:	59 0b       	sbc	r21, r25
    2554:	ca 01       	movw	r24, r20
    2556:	8c 5e       	subi	r24, 0xEC	; 236
    2558:	9e 4f       	sbci	r25, 0xFE	; 254
    255a:	2b 81       	ldd	r18, Y+3	; 0x03
    255c:	fc 01       	movw	r30, r24
    255e:	20 83       	st	Z, r18
							
							if(u8RGBStartBlue<u8RGBStopBlue)
    2560:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <u8RGBStartBlue>
    2564:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    2568:	98 17       	cp	r25, r24
    256a:	78 f5       	brcc	.+94     	; 0x25ca <main+0x1076>
							{
								u8Temp = (uint8_t)(((uint32_t)(u8RGBStopBlue-u8RGBStartBlue))*i/(u8Count-1) + u8RGBStartBlue);
    256c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    2570:	28 2f       	mov	r18, r24
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    2578:	88 2f       	mov	r24, r24
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	a9 01       	movw	r20, r18
    257e:	48 1b       	sub	r20, r24
    2580:	59 0b       	sbc	r21, r25
    2582:	ca 01       	movw	r24, r20
    2584:	9c 01       	movw	r18, r24
    2586:	99 0f       	add	r25, r25
    2588:	44 0b       	sbc	r20, r20
    258a:	55 0b       	sbc	r21, r21
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	9a 81       	ldd	r25, Y+2	; 0x02
    2590:	cc 01       	movw	r24, r24
    2592:	a0 e0       	ldi	r26, 0x00	; 0
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	bc 01       	movw	r22, r24
    2598:	cd 01       	movw	r24, r26
    259a:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    259e:	7b 01       	movw	r14, r22
    25a0:	8c 01       	movw	r16, r24
    25a2:	8e 81       	ldd	r24, Y+6	; 0x06
    25a4:	88 2f       	mov	r24, r24
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	9c 01       	movw	r18, r24
    25ac:	99 0f       	add	r25, r25
    25ae:	44 0b       	sbc	r20, r20
    25b0:	55 0b       	sbc	r21, r21
    25b2:	c8 01       	movw	r24, r16
    25b4:	b7 01       	movw	r22, r14
    25b6:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    25ba:	da 01       	movw	r26, r20
    25bc:	c9 01       	movw	r24, r18
    25be:	98 2f       	mov	r25, r24
    25c0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    25c4:	89 0f       	add	r24, r25
    25c6:	8b 83       	std	Y+3, r24	; 0x03
    25c8:	2f c0       	rjmp	.+94     	; 0x2628 <main+0x10d4>
							}
							else
							{
								u8Temp = (uint8_t)(u8RGBStartBlue - ((uint32_t)(u8RGBStartBlue-u8RGBStopBlue))*i/(u8Count-1));
    25ca:	d0 90 45 01 	lds	r13, 0x0145	; 0x800145 <u8RGBStartBlue>
    25ce:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    25d2:	28 2f       	mov	r18, r24
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    25da:	88 2f       	mov	r24, r24
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	f9 01       	movw	r30, r18
    25e0:	e8 1b       	sub	r30, r24
    25e2:	f9 0b       	sbc	r31, r25
    25e4:	cf 01       	movw	r24, r30
    25e6:	9c 01       	movw	r18, r24
    25e8:	99 0f       	add	r25, r25
    25ea:	44 0b       	sbc	r20, r20
    25ec:	55 0b       	sbc	r21, r21
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	9a 81       	ldd	r25, Y+2	; 0x02
    25f2:	cc 01       	movw	r24, r24
    25f4:	a0 e0       	ldi	r26, 0x00	; 0
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	bc 01       	movw	r22, r24
    25fa:	cd 01       	movw	r24, r26
    25fc:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    2600:	7b 01       	movw	r14, r22
    2602:	8c 01       	movw	r16, r24
    2604:	8e 81       	ldd	r24, Y+6	; 0x06
    2606:	88 2f       	mov	r24, r24
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	9c 01       	movw	r18, r24
    260e:	99 0f       	add	r25, r25
    2610:	44 0b       	sbc	r20, r20
    2612:	55 0b       	sbc	r21, r21
    2614:	c8 01       	movw	r24, r16
    2616:	b7 01       	movw	r22, r14
    2618:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    261c:	da 01       	movw	r26, r20
    261e:	c9 01       	movw	r24, r18
    2620:	fd 2d       	mov	r31, r13
    2622:	f8 1b       	sub	r31, r24
    2624:	8f 2f       	mov	r24, r31
    2626:	8b 83       	std	Y+3, r24	; 0x03
							}
							au8Blue[i] = u8Temp;
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	9a 81       	ldd	r25, Y+2	; 0x02
    262c:	88 5d       	subi	r24, 0xD8	; 216
    262e:	9e 4f       	sbci	r25, 0xFE	; 254
    2630:	2b 81       	ldd	r18, Y+3	; 0x03
    2632:	fc 01       	movw	r30, r24
    2634:	20 83       	st	Z, r18
							au8Blue[LED_COUNT-i-1] = u8Temp;
    2636:	23 e1       	ldi	r18, 0x13	; 19
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	9a 81       	ldd	r25, Y+2	; 0x02
    263e:	a9 01       	movw	r20, r18
    2640:	48 1b       	sub	r20, r24
    2642:	59 0b       	sbc	r21, r25
    2644:	ca 01       	movw	r24, r20
    2646:	88 5d       	subi	r24, 0xD8	; 216
    2648:	9e 4f       	sbci	r25, 0xFE	; 254
    264a:	2b 81       	ldd	r18, Y+3	; 0x03
    264c:	fc 01       	movw	r30, r24
    264e:	20 83       	st	Z, r18
						u8RGBStopGreen = au8Command[5]-1;
						u8RGBStopBlue = au8Command[6]-1;
						
						
						u8Count = LED_COUNT/2;
						for(i=0;i<u8Count;i++)
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	9a 81       	ldd	r25, Y+2	; 0x02
    2654:	01 96       	adiw	r24, 0x01	; 1
    2656:	9a 83       	std	Y+2, r25	; 0x02
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	8e 81       	ldd	r24, Y+6	; 0x06
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	9a 81       	ldd	r25, Y+2	; 0x02
    2664:	82 17       	cp	r24, r18
    2666:	93 07       	cpc	r25, r19
    2668:	08 f4       	brcc	.+2      	; 0x266c <main+0x1118>
    266a:	8a ce       	rjmp	.-748    	; 0x2380 <main+0xe2c>
								u8Temp = (uint8_t)(u8RGBStartBlue - ((uint32_t)(u8RGBStartBlue-u8RGBStopBlue))*i/(u8Count-1));
							}
							au8Blue[i] = u8Temp;
							au8Blue[LED_COUNT-i-1] = u8Temp;
						}
						u8RGBSingleColor = 0;
    266c:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <u8RGBSingleColor>
						u8RGBDataState = 1;
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBDataState>
					}
					break;
    2676:	8f c0       	rjmp	.+286    	; 0x2796 <main+0x1242>
					
					case 0x42:
					if(strlen(au8Command) == 9)
    2678:	ce 01       	movw	r24, r28
    267a:	07 96       	adiw	r24, 0x07	; 7
    267c:	0e 94 25 19 	call	0x324a	; 0x324a <strlen>
    2680:	09 97       	sbiw	r24, 0x09	; 9
    2682:	09 f0       	breq	.+2      	; 0x2686 <main+0x1132>
    2684:	8b c0       	rjmp	.+278    	; 0x279c <main+0x1248>
					{
						u8RGBStartRed = au8Command[1]-1;
    2686:	88 85       	ldd	r24, Y+8	; 0x08
    2688:	81 50       	subi	r24, 0x01	; 1
    268a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8RGBStartRed>
						u8RGBStartGreen = au8Command[2]-1;
    268e:	89 85       	ldd	r24, Y+9	; 0x09
    2690:	81 50       	subi	r24, 0x01	; 1
    2692:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8RGBStartGreen>
						u8RGBStartBlue = au8Command[3]-1;
    2696:	8a 85       	ldd	r24, Y+10	; 0x0a
    2698:	81 50       	subi	r24, 0x01	; 1
    269a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <u8RGBStartBlue>
						u8RGBStopRed = au8Command[4]-1;
    269e:	8b 85       	ldd	r24, Y+11	; 0x0b
    26a0:	81 50       	subi	r24, 0x01	; 1
    26a2:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8RGBStopRed>
						u8RGBStopGreen = au8Command[5]-1;
    26a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    26a8:	81 50       	subi	r24, 0x01	; 1
    26aa:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <u8RGBStopGreen>
						u8RGBStopBlue = au8Command[6]-1;
    26ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b0:	81 50       	subi	r24, 0x01	; 1
    26b2:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <u8RGBStopBlue>
						u16RGBTime = ((uint16_t)au8Command[7])*200;
    26b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    26b8:	28 2f       	mov	r18, r24
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	48 ec       	ldi	r20, 0xC8	; 200
    26be:	42 9f       	mul	r20, r18
    26c0:	c0 01       	movw	r24, r0
    26c2:	43 9f       	mul	r20, r19
    26c4:	90 0d       	add	r25, r0
    26c6:	11 24       	eor	r1, r1
    26c8:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <u16RGBTime+0x1>
    26cc:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <u16RGBTime>
						u8RGBBounce = au8Command[8]-1;
    26d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26d2:	81 50       	subi	r24, 0x01	; 1
    26d4:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8RGBBounce>
						u8RGBBounceDirection = 0;
    26d8:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <u8RGBBounceDirection>
						u16RGBTimeCounter = 0;
    26dc:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <u16RGBTimeCounter+0x1>
    26e0:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <u16RGBTimeCounter>
						u8RGBAnimation = 1;
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <u8RGBAnimation>
					}
					break;
    26ea:	58 c0       	rjmp	.+176    	; 0x279c <main+0x1248>

					case 0x43:
					if(strlen(au8Command) == 15)
    26ec:	ce 01       	movw	r24, r28
    26ee:	07 96       	adiw	r24, 0x07	; 7
    26f0:	0e 94 25 19 	call	0x324a	; 0x324a <strlen>
    26f4:	0f 97       	sbiw	r24, 0x0f	; 15
    26f6:	09 f0       	breq	.+2      	; 0x26fa <main+0x11a6>
    26f8:	54 c0       	rjmp	.+168    	; 0x27a2 <main+0x124e>
					{
						u8RGBStartRed = au8Command[1]-1;
    26fa:	88 85       	ldd	r24, Y+8	; 0x08
    26fc:	81 50       	subi	r24, 0x01	; 1
    26fe:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8RGBStartRed>
						u8RGBStartGreen = au8Command[2]-1;
    2702:	89 85       	ldd	r24, Y+9	; 0x09
    2704:	81 50       	subi	r24, 0x01	; 1
    2706:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8RGBStartGreen>
						u8RGBStartBlue = au8Command[3]-1;
    270a:	8a 85       	ldd	r24, Y+10	; 0x0a
    270c:	81 50       	subi	r24, 0x01	; 1
    270e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <u8RGBStartBlue>
						u8RGBStartMiddleRed = au8Command[4]-1;
    2712:	8b 85       	ldd	r24, Y+11	; 0x0b
    2714:	81 50       	subi	r24, 0x01	; 1
    2716:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <u8RGBStartMiddleRed>
						u8RGBStartMiddleGreen = au8Command[5]-1;
    271a:	8c 85       	ldd	r24, Y+12	; 0x0c
    271c:	81 50       	subi	r24, 0x01	; 1
    271e:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <u8RGBStartMiddleGreen>
						u8RGBStartMiddleBlue = au8Command[6]-1;
    2722:	8d 85       	ldd	r24, Y+13	; 0x0d
    2724:	81 50       	subi	r24, 0x01	; 1
    2726:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8RGBStartMiddleBlue>
						u8RGBStopRed = au8Command[7]-1;
    272a:	8e 85       	ldd	r24, Y+14	; 0x0e
    272c:	81 50       	subi	r24, 0x01	; 1
    272e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8RGBStopRed>
						u8RGBStopGreen = au8Command[8]-1;
    2732:	8f 85       	ldd	r24, Y+15	; 0x0f
    2734:	81 50       	subi	r24, 0x01	; 1
    2736:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <u8RGBStopGreen>
						u8RGBStopBlue = au8Command[9]-1;
    273a:	88 89       	ldd	r24, Y+16	; 0x10
    273c:	81 50       	subi	r24, 0x01	; 1
    273e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <u8RGBStopBlue>
						u8RGBStopMiddleRed = au8Command[10]-1;
    2742:	89 89       	ldd	r24, Y+17	; 0x11
    2744:	81 50       	subi	r24, 0x01	; 1
    2746:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <u8RGBStopMiddleRed>
						u8RGBStopMiddleGreen = au8Command[11]-1;
    274a:	8a 89       	ldd	r24, Y+18	; 0x12
    274c:	81 50       	subi	r24, 0x01	; 1
    274e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <u8RGBStopMiddleGreen>
						u8RGBStopMiddleBlue = au8Command[12]-1;
    2752:	8b 89       	ldd	r24, Y+19	; 0x13
    2754:	81 50       	subi	r24, 0x01	; 1
    2756:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <u8RGBStopMiddleBlue>
						u16RGBTime = ((uint16_t)au8Command[13])*200;
    275a:	8c 89       	ldd	r24, Y+20	; 0x14
    275c:	28 2f       	mov	r18, r24
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	48 ec       	ldi	r20, 0xC8	; 200
    2762:	42 9f       	mul	r20, r18
    2764:	c0 01       	movw	r24, r0
    2766:	43 9f       	mul	r20, r19
    2768:	90 0d       	add	r25, r0
    276a:	11 24       	eor	r1, r1
    276c:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <u16RGBTime+0x1>
    2770:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <u16RGBTime>
						u8RGBBounce = au8Command[14]-1;
    2774:	8d 89       	ldd	r24, Y+21	; 0x15
    2776:	81 50       	subi	r24, 0x01	; 1
    2778:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8RGBBounce>
						u8RGBBounceDirection = 0;
    277c:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <u8RGBBounceDirection>
						u16RGBTimeCounter = 0;
    2780:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <u16RGBTimeCounter+0x1>
    2784:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <u16RGBTimeCounter>
						u8RGBAnimation = 2;
    2788:	82 e0       	ldi	r24, 0x02	; 2
    278a:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <u8RGBAnimation>
					}
					break;
    278e:	09 c0       	rjmp	.+18     	; 0x27a2 <main+0x124e>
						u8RGBGreen = au8Command[2]-1;
						u8RGBBlue = au8Command[3]-1;
						u8RGBSingleColor = 1;
						u8RGBDataState = 1;
					}
					break;
    2790:	00 00       	nop
    2792:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <main+0x130>
							au8Blue[LED_COUNT-i-1] = u8Temp;
						}
						u8RGBSingleColor = 0;
						u8RGBDataState = 1;
					}
					break;
    2796:	00 00       	nop
    2798:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <main+0x130>
						u8RGBBounce = au8Command[8]-1;
						u8RGBBounceDirection = 0;
						u16RGBTimeCounter = 0;
						u8RGBAnimation = 1;
					}
					break;
    279c:	00 00       	nop
    279e:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <main+0x130>
						u8RGBBounce = au8Command[14]-1;
						u8RGBBounceDirection = 0;
						u16RGBTimeCounter = 0;
						u8RGBAnimation = 2;
					}
					break;
    27a2:	00 00       	nop
				}
			}
		} // no animation active
    } // while 1
    27a4:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <main+0x130>

000027a8 <INT0_Init>:
#include "utils.h"
#include "rgbooster.h"


void INT0_Init(void)
{
    27a8:	cf 93       	push	r28
    27aa:	df 93       	push	r29
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
	EICRA |= (1<<ISC01); // interrupt on falling edge
    27b0:	89 e6       	ldi	r24, 0x69	; 105
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	29 e6       	ldi	r18, 0x69	; 105
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	f9 01       	movw	r30, r18
    27ba:	20 81       	ld	r18, Z
    27bc:	22 60       	ori	r18, 0x02	; 2
    27be:	fc 01       	movw	r30, r24
    27c0:	20 83       	st	Z, r18
	EIFR  = (1<<INTF0); // clear flag
    27c2:	8c e3       	ldi	r24, 0x3C	; 60
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	21 e0       	ldi	r18, 0x01	; 1
    27c8:	fc 01       	movw	r30, r24
    27ca:	20 83       	st	Z, r18
	EIMSK = (1<<INT0);  // INT1 enable
    27cc:	8d e3       	ldi	r24, 0x3D	; 61
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	21 e0       	ldi	r18, 0x01	; 1
    27d2:	fc 01       	movw	r30, r24
    27d4:	20 83       	st	Z, r18
}
    27d6:	00 00       	nop
    27d8:	df 91       	pop	r29
    27da:	cf 91       	pop	r28
    27dc:	08 95       	ret

000027de <initRGBooster>:

void initRGBooster(void)
{
    27de:	cf 93       	push	r28
    27e0:	df 93       	push	r29
    27e2:	cd b7       	in	r28, 0x3d	; 61
    27e4:	de b7       	in	r29, 0x3e	; 62
	DDR_DATA_LOW |= DATA_LOW_BITMASK; //RGB DATA LOWER NIBBLE -> OUTPUT
    27e6:	84 e2       	ldi	r24, 0x24	; 36
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	24 e2       	ldi	r18, 0x24	; 36
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	f9 01       	movw	r30, r18
    27f0:	20 81       	ld	r18, Z
    27f2:	2f 60       	ori	r18, 0x0F	; 15
    27f4:	fc 01       	movw	r30, r24
    27f6:	20 83       	st	Z, r18
	PORT_DATA_LOW &= ~DATA_LOW_BITMASK; //RGB DATA LOWER NIBBLE -> LOW
    27f8:	85 e2       	ldi	r24, 0x25	; 37
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	25 e2       	ldi	r18, 0x25	; 37
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	f9 01       	movw	r30, r18
    2802:	20 81       	ld	r18, Z
    2804:	20 7f       	andi	r18, 0xF0	; 240
    2806:	fc 01       	movw	r30, r24
    2808:	20 83       	st	Z, r18
	DDR_DATA_HIGH |= DATA_HIGH_BITMASK; //RGB DATA HIGHER NIBBLE -> OUTPUT
    280a:	81 e2       	ldi	r24, 0x21	; 33
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	21 e2       	ldi	r18, 0x21	; 33
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	f9 01       	movw	r30, r18
    2814:	20 81       	ld	r18, Z
    2816:	20 6f       	ori	r18, 0xF0	; 240
    2818:	fc 01       	movw	r30, r24
    281a:	20 83       	st	Z, r18
	PORT_DATA_HIGH &= ~DATA_HIGH_BITMASK; //RGB DATA HIGHER NIBBLE -> LOW
    281c:	82 e2       	ldi	r24, 0x22	; 34
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	22 e2       	ldi	r18, 0x22	; 34
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	f9 01       	movw	r30, r18
    2826:	20 81       	ld	r18, Z
    2828:	2f 70       	andi	r18, 0x0F	; 15
    282a:	fc 01       	movw	r30, r24
    282c:	20 83       	st	Z, r18

	DDR_CONTROL |= (1<<SEND); //SEND PIN -> OUTPUT
    282e:	8a e2       	ldi	r24, 0x2A	; 42
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	2a e2       	ldi	r18, 0x2A	; 42
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	f9 01       	movw	r30, r18
    2838:	20 81       	ld	r18, Z
    283a:	28 60       	ori	r18, 0x08	; 8
    283c:	fc 01       	movw	r30, r24
    283e:	20 83       	st	Z, r18
	PORT_CONTROL &= ~(1<<SEND); //SEND PIN LOW
    2840:	8b e2       	ldi	r24, 0x2B	; 43
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	2b e2       	ldi	r18, 0x2B	; 43
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	f9 01       	movw	r30, r18
    284a:	20 81       	ld	r18, Z
    284c:	27 7f       	andi	r18, 0xF7	; 247
    284e:	fc 01       	movw	r30, r24
    2850:	20 83       	st	Z, r18
	DDR_CONTROL &= ~(1<<DONE_BUSY); //DONE BUSY PIN -> INPUT
    2852:	8a e2       	ldi	r24, 0x2A	; 42
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	2a e2       	ldi	r18, 0x2A	; 42
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	f9 01       	movw	r30, r18
    285c:	20 81       	ld	r18, Z
    285e:	2b 7f       	andi	r18, 0xFB	; 251
    2860:	fc 01       	movw	r30, r24
    2862:	20 83       	st	Z, r18
    2864:	00 00       	nop
    2866:	df 91       	pop	r29
    2868:	cf 91       	pop	r28
    286a:	08 95       	ret

0000286c <spiInitBuffer>:
#include <avr/io.h>
#include "spi.h"


void spiInitBuffer(SpiBuf_t* Buffer)
{
    286c:	cf 93       	push	r28
    286e:	df 93       	push	r29
    2870:	00 d0       	rcall	.+0      	; 0x2872 <spiInitBuffer+0x6>
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	9a 83       	std	Y+2, r25	; 0x02
    2878:	89 83       	std	Y+1, r24	; 0x01
	Buffer->u8Count = 0;
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	9a 81       	ldd	r25, Y+2	; 0x02
    287e:	80 5c       	subi	r24, 0xC0	; 192
    2880:	9f 4f       	sbci	r25, 0xFF	; 255
    2882:	fc 01       	movw	r30, r24
    2884:	10 82       	st	Z, r1
	Buffer->u8ReadReturnCount = 0;
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	9a 81       	ldd	r25, Y+2	; 0x02
    288a:	8f 5b       	subi	r24, 0xBF	; 191
    288c:	9f 4f       	sbci	r25, 0xFF	; 255
    288e:	fc 01       	movw	r30, r24
    2890:	10 82       	st	Z, r1
	Buffer->spiState = IDLE;
    2892:	89 81       	ldd	r24, Y+1	; 0x01
    2894:	9a 81       	ldd	r25, Y+2	; 0x02
    2896:	8e 5b       	subi	r24, 0xBE	; 190
    2898:	9f 4f       	sbci	r25, 0xFF	; 255
    289a:	26 e0       	ldi	r18, 0x06	; 6
    289c:	fc 01       	movw	r30, r24
    289e:	20 83       	st	Z, r18
}
    28a0:	00 00       	nop
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	df 91       	pop	r29
    28a8:	cf 91       	pop	r28
    28aa:	08 95       	ret

000028ac <spiSlaveInit>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiSlaveInit(void)
{
    28ac:	cf 93       	push	r28
    28ae:	df 93       	push	r29
    28b0:	1f 92       	push	r1
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t ucTemp;
	SPSR0 = 0;
    28b6:	8d e4       	ldi	r24, 0x4D	; 77
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	fc 01       	movw	r30, r24
    28bc:	10 82       	st	Z, r1
	SPCR0 = (1<<SPIE0);
    28be:	8c e4       	ldi	r24, 0x4C	; 76
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	20 e8       	ldi	r18, 0x80	; 128
    28c4:	fc 01       	movw	r30, r24
    28c6:	20 83       	st	Z, r18
	
	ucTemp = SPSR0;					
    28c8:	8d e4       	ldi	r24, 0x4D	; 77
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	fc 01       	movw	r30, r24
    28ce:	80 81       	ld	r24, Z
    28d0:	89 83       	std	Y+1, r24	; 0x01
	ucTemp = SPDR0;
    28d2:	8e e4       	ldi	r24, 0x4E	; 78
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	fc 01       	movw	r30, r24
    28d8:	80 81       	ld	r24, Z
    28da:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0;
    28dc:	8e e4       	ldi	r24, 0x4E	; 78
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	fc 01       	movw	r30, r24
    28e2:	10 82       	st	Z, r1
	
	DDRB |= (1<<PINB6);				// MISO needs to be an output
    28e4:	84 e2       	ldi	r24, 0x24	; 36
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	24 e2       	ldi	r18, 0x24	; 36
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	f9 01       	movw	r30, r18
    28ee:	20 81       	ld	r18, Z
    28f0:	20 64       	ori	r18, 0x40	; 64
    28f2:	fc 01       	movw	r30, r24
    28f4:	20 83       	st	Z, r18
	
	SPCR0 |= (1<<SPE0);
    28f6:	8c e4       	ldi	r24, 0x4C	; 76
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	2c e4       	ldi	r18, 0x4C	; 76
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	f9 01       	movw	r30, r18
    2900:	20 81       	ld	r18, Z
    2902:	20 64       	ori	r18, 0x40	; 64
    2904:	fc 01       	movw	r30, r24
    2906:	20 83       	st	Z, r18
}
    2908:	00 00       	nop
    290a:	0f 90       	pop	r0
    290c:	df 91       	pop	r29
    290e:	cf 91       	pop	r28
    2910:	08 95       	ret

00002912 <spiPcInt>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiPcInt(void)
{
    2912:	cf 93       	push	r28
    2914:	df 93       	push	r29
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
	PCICR |= (1<<PCIE1);
    291a:	88 e6       	ldi	r24, 0x68	; 104
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	28 e6       	ldi	r18, 0x68	; 104
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	f9 01       	movw	r30, r18
    2924:	20 81       	ld	r18, Z
    2926:	22 60       	ori	r18, 0x02	; 2
    2928:	fc 01       	movw	r30, r24
    292a:	20 83       	st	Z, r18
	PCIFR = (1<<PCIF1);
    292c:	8b e3       	ldi	r24, 0x3B	; 59
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	22 e0       	ldi	r18, 0x02	; 2
    2932:	fc 01       	movw	r30, r24
    2934:	20 83       	st	Z, r18
	PCMSK1 |= (1<<PCINT12);
    2936:	8c e6       	ldi	r24, 0x6C	; 108
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	2c e6       	ldi	r18, 0x6C	; 108
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	f9 01       	movw	r30, r18
    2940:	20 81       	ld	r18, Z
    2942:	20 61       	ori	r18, 0x10	; 16
    2944:	fc 01       	movw	r30, r24
    2946:	20 83       	st	Z, r18
    2948:	00 00       	nop
    294a:	df 91       	pop	r29
    294c:	cf 91       	pop	r28
    294e:	08 95       	ret

00002950 <portInit>:
 * @return 8bit analog value
 *****************************************************************************/
uint8_t adcGetValue(void)
{
	return(ADCH);
}
    2950:	cf 93       	push	r28
    2952:	df 93       	push	r29
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
    2958:	8a e2       	ldi	r24, 0x2A	; 42
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	2a e2       	ldi	r18, 0x2A	; 42
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	f9 01       	movw	r30, r18
    2962:	20 81       	ld	r18, Z
    2964:	20 63       	ori	r18, 0x30	; 48
    2966:	fc 01       	movw	r30, r24
    2968:	20 83       	st	Z, r18
    296a:	8b e2       	ldi	r24, 0x2B	; 43
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	2b e2       	ldi	r18, 0x2B	; 43
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	f9 01       	movw	r30, r18
    2974:	20 81       	ld	r18, Z
    2976:	20 62       	ori	r18, 0x20	; 32
    2978:	fc 01       	movw	r30, r24
    297a:	20 83       	st	Z, r18
    297c:	8b e2       	ldi	r24, 0x2B	; 43
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	2b e2       	ldi	r18, 0x2B	; 43
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	f9 01       	movw	r30, r18
    2986:	20 81       	ld	r18, Z
    2988:	2f 7e       	andi	r18, 0xEF	; 239
    298a:	fc 01       	movw	r30, r24
    298c:	20 83       	st	Z, r18
    298e:	8a e2       	ldi	r24, 0x2A	; 42
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	2a e2       	ldi	r18, 0x2A	; 42
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	f9 01       	movw	r30, r18
    2998:	20 81       	ld	r18, Z
    299a:	20 68       	ori	r18, 0x80	; 128
    299c:	fc 01       	movw	r30, r24
    299e:	20 83       	st	Z, r18
    29a0:	8b e2       	ldi	r24, 0x2B	; 43
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	2b e2       	ldi	r18, 0x2B	; 43
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	f9 01       	movw	r30, r18
    29aa:	20 81       	ld	r18, Z
    29ac:	20 68       	ori	r18, 0x80	; 128
    29ae:	fc 01       	movw	r30, r24
    29b0:	20 83       	st	Z, r18
    29b2:	8a e2       	ldi	r24, 0x2A	; 42
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	2a e2       	ldi	r18, 0x2A	; 42
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	f9 01       	movw	r30, r18
    29bc:	20 81       	ld	r18, Z
    29be:	2f 7b       	andi	r18, 0xBF	; 191
    29c0:	fc 01       	movw	r30, r24
    29c2:	20 83       	st	Z, r18
    29c4:	8a e2       	ldi	r24, 0x2A	; 42
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	2a e2       	ldi	r18, 0x2A	; 42
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	f9 01       	movw	r30, r18
    29ce:	20 81       	ld	r18, Z
    29d0:	2c 7f       	andi	r18, 0xFC	; 252
    29d2:	fc 01       	movw	r30, r24
    29d4:	20 83       	st	Z, r18
    29d6:	8b e2       	ldi	r24, 0x2B	; 43
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	2b e2       	ldi	r18, 0x2B	; 43
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	f9 01       	movw	r30, r18
    29e0:	20 81       	ld	r18, Z
    29e2:	21 60       	ori	r18, 0x01	; 1
    29e4:	fc 01       	movw	r30, r24
    29e6:	20 83       	st	Z, r18
    29e8:	81 e2       	ldi	r24, 0x21	; 33
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	21 e2       	ldi	r18, 0x21	; 33
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	f9 01       	movw	r30, r18
    29f2:	20 81       	ld	r18, Z
    29f4:	2e 7f       	andi	r18, 0xFE	; 254
    29f6:	fc 01       	movw	r30, r24
    29f8:	20 83       	st	Z, r18
    29fa:	82 e2       	ldi	r24, 0x22	; 34
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	22 e2       	ldi	r18, 0x22	; 34
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	f9 01       	movw	r30, r18
    2a04:	20 81       	ld	r18, Z
    2a06:	2e 7f       	andi	r18, 0xFE	; 254
    2a08:	fc 01       	movw	r30, r24
    2a0a:	20 83       	st	Z, r18
    2a0c:	8e e7       	ldi	r24, 0x7E	; 126
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	2e e7       	ldi	r18, 0x7E	; 126
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	f9 01       	movw	r30, r18
    2a16:	20 81       	ld	r18, Z
    2a18:	21 60       	ori	r18, 0x01	; 1
    2a1a:	fc 01       	movw	r30, r24
    2a1c:	20 83       	st	Z, r18
    2a1e:	81 e2       	ldi	r24, 0x21	; 33
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	21 e2       	ldi	r18, 0x21	; 33
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	f9 01       	movw	r30, r18
    2a28:	20 81       	ld	r18, Z
    2a2a:	21 7f       	andi	r18, 0xF1	; 241
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	20 83       	st	Z, r18
    2a30:	82 e2       	ldi	r24, 0x22	; 34
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	22 e2       	ldi	r18, 0x22	; 34
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	f9 01       	movw	r30, r18
    2a3a:	20 81       	ld	r18, Z
    2a3c:	2e 60       	ori	r18, 0x0E	; 14
    2a3e:	fc 01       	movw	r30, r24
    2a40:	20 83       	st	Z, r18
    2a42:	87 e2       	ldi	r24, 0x27	; 39
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	fc 01       	movw	r30, r24
    2a48:	80 81       	ld	r24, Z
    2a4a:	87 e2       	ldi	r24, 0x27	; 39
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	fc 01       	movw	r30, r24
    2a50:	10 82       	st	Z, r1
    2a52:	88 e2       	ldi	r24, 0x28	; 40
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	fc 01       	movw	r30, r24
    2a58:	80 81       	ld	r24, Z
    2a5a:	88 e2       	ldi	r24, 0x28	; 40
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	2f ef       	ldi	r18, 0xFF	; 255
    2a60:	fc 01       	movw	r30, r24
    2a62:	20 83       	st	Z, r18
    2a64:	00 00       	nop
    2a66:	df 91       	pop	r29
    2a68:	cf 91       	pop	r28
    2a6a:	08 95       	ret

00002a6c <enablePLED>:
    2a6c:	cf 93       	push	r28
    2a6e:	df 93       	push	r29
    2a70:	cd b7       	in	r28, 0x3d	; 61
    2a72:	de b7       	in	r29, 0x3e	; 62
    2a74:	8b e2       	ldi	r24, 0x2B	; 43
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	2b e2       	ldi	r18, 0x2B	; 43
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	f9 01       	movw	r30, r18
    2a7e:	20 81       	ld	r18, Z
    2a80:	2f 7d       	andi	r18, 0xDF	; 223
    2a82:	fc 01       	movw	r30, r24
    2a84:	20 83       	st	Z, r18
    2a86:	00 00       	nop
    2a88:	df 91       	pop	r29
    2a8a:	cf 91       	pop	r28
    2a8c:	08 95       	ret

00002a8e <disablePLED>:
    2a8e:	cf 93       	push	r28
    2a90:	df 93       	push	r29
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	8b e2       	ldi	r24, 0x2B	; 43
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	2b e2       	ldi	r18, 0x2B	; 43
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	f9 01       	movw	r30, r18
    2aa0:	20 81       	ld	r18, Z
    2aa2:	20 62       	ori	r18, 0x20	; 32
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	20 83       	st	Z, r18
    2aa8:	00 00       	nop
    2aaa:	df 91       	pop	r29
    2aac:	cf 91       	pop	r28
    2aae:	08 95       	ret

00002ab0 <standbyAudio>:
    2ab0:	cf 93       	push	r28
    2ab2:	df 93       	push	r29
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	8b e2       	ldi	r24, 0x2B	; 43
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	2b e2       	ldi	r18, 0x2B	; 43
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	f9 01       	movw	r30, r18
    2ac2:	20 81       	ld	r18, Z
    2ac4:	20 68       	ori	r18, 0x80	; 128
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	20 83       	st	Z, r18
    2aca:	8a e2       	ldi	r24, 0x2A	; 42
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	2a e2       	ldi	r18, 0x2A	; 42
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	f9 01       	movw	r30, r18
    2ad4:	20 81       	ld	r18, Z
    2ad6:	20 68       	ori	r18, 0x80	; 128
    2ad8:	fc 01       	movw	r30, r24
    2ada:	20 83       	st	Z, r18
    2adc:	00 00       	nop
    2ade:	df 91       	pop	r29
    2ae0:	cf 91       	pop	r28
    2ae2:	08 95       	ret

00002ae4 <enableAudio>:
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
    2aec:	8b e2       	ldi	r24, 0x2B	; 43
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	2b e2       	ldi	r18, 0x2B	; 43
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	f9 01       	movw	r30, r18
    2af6:	20 81       	ld	r18, Z
    2af8:	2f 77       	andi	r18, 0x7F	; 127
    2afa:	fc 01       	movw	r30, r24
    2afc:	20 83       	st	Z, r18
    2afe:	8a e2       	ldi	r24, 0x2A	; 42
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	2a e2       	ldi	r18, 0x2A	; 42
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	f9 01       	movw	r30, r18
    2b08:	20 81       	ld	r18, Z
    2b0a:	20 68       	ori	r18, 0x80	; 128
    2b0c:	fc 01       	movw	r30, r24
    2b0e:	20 83       	st	Z, r18
    2b10:	00 00       	nop
    2b12:	df 91       	pop	r29
    2b14:	cf 91       	pop	r28
    2b16:	08 95       	ret

00002b18 <incVolume>:
    2b18:	cf 93       	push	r28
    2b1a:	df 93       	push	r29
    2b1c:	00 d0       	rcall	.+0      	; 0x2b1e <incVolume+0x6>
    2b1e:	cd b7       	in	r28, 0x3d	; 61
    2b20:	de b7       	in	r29, 0x3e	; 62
    2b22:	8a 83       	std	Y+2, r24	; 0x02
    2b24:	8b e2       	ldi	r24, 0x2B	; 43
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	2b e2       	ldi	r18, 0x2B	; 43
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	f9 01       	movw	r30, r18
    2b2e:	20 81       	ld	r18, Z
    2b30:	20 64       	ori	r18, 0x40	; 64
    2b32:	fc 01       	movw	r30, r24
    2b34:	20 83       	st	Z, r18
    2b36:	19 82       	std	Y+1, r1	; 0x01
    2b38:	15 c0       	rjmp	.+42     	; 0x2b64 <incVolume+0x4c>
    2b3a:	8a e2       	ldi	r24, 0x2A	; 42
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	2a e2       	ldi	r18, 0x2A	; 42
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	f9 01       	movw	r30, r18
    2b44:	20 81       	ld	r18, Z
    2b46:	20 64       	ori	r18, 0x40	; 64
    2b48:	fc 01       	movw	r30, r24
    2b4a:	20 83       	st	Z, r18
    2b4c:	8a e2       	ldi	r24, 0x2A	; 42
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	2a e2       	ldi	r18, 0x2A	; 42
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	f9 01       	movw	r30, r18
    2b56:	20 81       	ld	r18, Z
    2b58:	2f 7b       	andi	r18, 0xBF	; 191
    2b5a:	fc 01       	movw	r30, r24
    2b5c:	20 83       	st	Z, r18
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	8f 5f       	subi	r24, 0xFF	; 255
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	99 81       	ldd	r25, Y+1	; 0x01
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	98 17       	cp	r25, r24
    2b6a:	38 f3       	brcs	.-50     	; 0x2b3a <incVolume+0x22>
    2b6c:	00 00       	nop
    2b6e:	0f 90       	pop	r0
    2b70:	0f 90       	pop	r0
    2b72:	df 91       	pop	r29
    2b74:	cf 91       	pop	r28
    2b76:	08 95       	ret

00002b78 <decVolume>:
    2b78:	cf 93       	push	r28
    2b7a:	df 93       	push	r29
    2b7c:	00 d0       	rcall	.+0      	; 0x2b7e <decVolume+0x6>
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
    2b82:	8a 83       	std	Y+2, r24	; 0x02
    2b84:	8b e2       	ldi	r24, 0x2B	; 43
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	2b e2       	ldi	r18, 0x2B	; 43
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	f9 01       	movw	r30, r18
    2b8e:	20 81       	ld	r18, Z
    2b90:	2f 7b       	andi	r18, 0xBF	; 191
    2b92:	fc 01       	movw	r30, r24
    2b94:	20 83       	st	Z, r18
    2b96:	19 82       	std	Y+1, r1	; 0x01
    2b98:	15 c0       	rjmp	.+42     	; 0x2bc4 <decVolume+0x4c>
    2b9a:	8a e2       	ldi	r24, 0x2A	; 42
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	2a e2       	ldi	r18, 0x2A	; 42
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	f9 01       	movw	r30, r18
    2ba4:	20 81       	ld	r18, Z
    2ba6:	20 64       	ori	r18, 0x40	; 64
    2ba8:	fc 01       	movw	r30, r24
    2baa:	20 83       	st	Z, r18
    2bac:	8a e2       	ldi	r24, 0x2A	; 42
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	2a e2       	ldi	r18, 0x2A	; 42
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	f9 01       	movw	r30, r18
    2bb6:	20 81       	ld	r18, Z
    2bb8:	2f 7b       	andi	r18, 0xBF	; 191
    2bba:	fc 01       	movw	r30, r24
    2bbc:	20 83       	st	Z, r18
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	8f 5f       	subi	r24, 0xFF	; 255
    2bc2:	89 83       	std	Y+1, r24	; 0x01
    2bc4:	99 81       	ldd	r25, Y+1	; 0x01
    2bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc8:	98 17       	cp	r25, r24
    2bca:	38 f3       	brcs	.-50     	; 0x2b9a <decVolume+0x22>
    2bcc:	00 00       	nop
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
    2bd2:	df 91       	pop	r29
    2bd4:	cf 91       	pop	r28
    2bd6:	08 95       	ret

00002bd8 <setVolume>:
    2bd8:	cf 93       	push	r28
    2bda:	df 93       	push	r29
    2bdc:	1f 92       	push	r1
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62
    2be2:	89 83       	std	Y+1, r24	; 0x01
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	81 34       	cpi	r24, 0x41	; 65
    2be8:	10 f0       	brcs	.+4      	; 0x2bee <setVolume+0x16>
    2bea:	80 e4       	ldi	r24, 0x40	; 64
    2bec:	89 83       	std	Y+1, r24	; 0x01
    2bee:	80 e4       	ldi	r24, 0x40	; 64
    2bf0:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <decVolume>
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <incVolume>
    2bfa:	00 00       	nop
    2bfc:	0f 90       	pop	r0
    2bfe:	df 91       	pop	r29
    2c00:	cf 91       	pop	r28
    2c02:	08 95       	ret

00002c04 <initAudio>:
    2c04:	cf 93       	push	r28
    2c06:	df 93       	push	r29
    2c08:	cd b7       	in	r28, 0x3d	; 61
    2c0a:	de b7       	in	r29, 0x3e	; 62
    2c0c:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <enableAudio>
    2c10:	80 e4       	ldi	r24, 0x40	; 64
    2c12:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <decVolume>
    2c16:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <standbyAudio>
    2c1a:	00 00       	nop
    2c1c:	df 91       	pop	r29
    2c1e:	cf 91       	pop	r28
    2c20:	08 95       	ret

00002c22 <initPWM>:
    2c22:	cf 93       	push	r28
    2c24:	df 93       	push	r29
    2c26:	00 d0       	rcall	.+0      	; 0x2c28 <initPWM+0x6>
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
    2c2c:	9a 83       	std	Y+2, r25	; 0x02
    2c2e:	89 83       	std	Y+1, r24	; 0x01
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	9a 81       	ldd	r25, Y+2	; 0x02
    2c34:	81 15       	cp	r24, r1
    2c36:	92 40       	sbci	r25, 0x02	; 2
    2c38:	20 f0       	brcs	.+8      	; 0x2c42 <initPWM+0x20>
    2c3a:	8f ef       	ldi	r24, 0xFF	; 255
    2c3c:	91 e0       	ldi	r25, 0x01	; 1
    2c3e:	9a 83       	std	Y+2, r25	; 0x02
    2c40:	89 83       	std	Y+1, r24	; 0x01
    2c42:	80 e8       	ldi	r24, 0x80	; 128
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	22 e2       	ldi	r18, 0x22	; 34
    2c48:	fc 01       	movw	r30, r24
    2c4a:	20 83       	st	Z, r18
    2c4c:	81 e8       	ldi	r24, 0x81	; 129
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	28 e0       	ldi	r18, 0x08	; 8
    2c52:	fc 01       	movw	r30, r24
    2c54:	20 83       	st	Z, r18
    2c56:	84 e8       	ldi	r24, 0x84	; 132
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	fc 01       	movw	r30, r24
    2c5c:	11 82       	std	Z+1, r1	; 0x01
    2c5e:	10 82       	st	Z, r1
    2c60:	8a e8       	ldi	r24, 0x8A	; 138
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	29 81       	ldd	r18, Y+1	; 0x01
    2c66:	3a 81       	ldd	r19, Y+2	; 0x02
    2c68:	fc 01       	movw	r30, r24
    2c6a:	31 83       	std	Z+1, r19	; 0x01
    2c6c:	20 83       	st	Z, r18
    2c6e:	8f e6       	ldi	r24, 0x6F	; 111
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	fc 01       	movw	r30, r24
    2c74:	10 82       	st	Z, r1
    2c76:	00 00       	nop
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	df 91       	pop	r29
    2c7e:	cf 91       	pop	r28
    2c80:	08 95       	ret

00002c82 <startPWM>:
    2c82:	cf 93       	push	r28
    2c84:	df 93       	push	r29
    2c86:	cd b7       	in	r28, 0x3d	; 61
    2c88:	de b7       	in	r29, 0x3e	; 62
    2c8a:	81 e8       	ldi	r24, 0x81	; 129
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	21 e8       	ldi	r18, 0x81	; 129
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	f9 01       	movw	r30, r18
    2c94:	20 81       	ld	r18, Z
    2c96:	21 60       	ori	r18, 0x01	; 1
    2c98:	fc 01       	movw	r30, r24
    2c9a:	20 83       	st	Z, r18
    2c9c:	00 00       	nop
    2c9e:	df 91       	pop	r29
    2ca0:	cf 91       	pop	r28
    2ca2:	08 95       	ret

00002ca4 <setPWMDutyPercent>:
    2ca4:	8f 92       	push	r8
    2ca6:	9f 92       	push	r9
    2ca8:	af 92       	push	r10
    2caa:	bf 92       	push	r11
    2cac:	cf 92       	push	r12
    2cae:	df 92       	push	r13
    2cb0:	ef 92       	push	r14
    2cb2:	ff 92       	push	r15
    2cb4:	0f 93       	push	r16
    2cb6:	1f 93       	push	r17
    2cb8:	cf 93       	push	r28
    2cba:	df 93       	push	r29
    2cbc:	1f 92       	push	r1
    2cbe:	cd b7       	in	r28, 0x3d	; 61
    2cc0:	de b7       	in	r29, 0x3e	; 62
    2cc2:	89 83       	std	Y+1, r24	; 0x01
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
    2cc6:	85 36       	cpi	r24, 0x65	; 101
    2cc8:	10 f0       	brcs	.+4      	; 0x2cce <setPWMDutyPercent+0x2a>
    2cca:	84 e6       	ldi	r24, 0x64	; 100
    2ccc:	89 83       	std	Y+1, r24	; 0x01
    2cce:	0f 2e       	mov	r0, r31
    2cd0:	fa e8       	ldi	r31, 0x8A	; 138
    2cd2:	8f 2e       	mov	r8, r31
    2cd4:	91 2c       	mov	r9, r1
    2cd6:	f0 2d       	mov	r31, r0
    2cd8:	89 81       	ldd	r24, Y+1	; 0x01
    2cda:	88 2f       	mov	r24, r24
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	a0 e0       	ldi	r26, 0x00	; 0
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	1f 92       	push	r1
    2ce4:	1f 92       	push	r1
    2ce6:	21 e0       	ldi	r18, 0x01	; 1
    2ce8:	2f 93       	push	r18
    2cea:	2f ef       	ldi	r18, 0xFF	; 255
    2cec:	2f 93       	push	r18
    2cee:	a1 2c       	mov	r10, r1
    2cf0:	b1 2c       	mov	r11, r1
    2cf2:	65 01       	movw	r12, r10
    2cf4:	14 e6       	ldi	r17, 0x64	; 100
    2cf6:	e1 2e       	mov	r14, r17
    2cf8:	f1 2c       	mov	r15, r1
    2cfa:	00 e0       	ldi	r16, 0x00	; 0
    2cfc:	10 e0       	ldi	r17, 0x00	; 0
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	a9 01       	movw	r20, r18
    2d04:	bc 01       	movw	r22, r24
    2d06:	cd 01       	movw	r24, r26
    2d08:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <Map>
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	f4 01       	movw	r30, r8
    2d1a:	91 83       	std	Z+1, r25	; 0x01
    2d1c:	80 83       	st	Z, r24
    2d1e:	00 00       	nop
    2d20:	0f 90       	pop	r0
    2d22:	df 91       	pop	r29
    2d24:	cf 91       	pop	r28
    2d26:	1f 91       	pop	r17
    2d28:	0f 91       	pop	r16
    2d2a:	ff 90       	pop	r15
    2d2c:	ef 90       	pop	r14
    2d2e:	df 90       	pop	r13
    2d30:	cf 90       	pop	r12
    2d32:	bf 90       	pop	r11
    2d34:	af 90       	pop	r10
    2d36:	9f 90       	pop	r9
    2d38:	8f 90       	pop	r8
    2d3a:	08 95       	ret

00002d3c <setPWMDuty>:
    2d3c:	cf 93       	push	r28
    2d3e:	df 93       	push	r29
    2d40:	00 d0       	rcall	.+0      	; 0x2d42 <setPWMDuty+0x6>
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
    2d46:	9a 83       	std	Y+2, r25	; 0x02
    2d48:	89 83       	std	Y+1, r24	; 0x01
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4e:	81 15       	cp	r24, r1
    2d50:	92 40       	sbci	r25, 0x02	; 2
    2d52:	20 f0       	brcs	.+8      	; 0x2d5c <setPWMDuty+0x20>
    2d54:	8f ef       	ldi	r24, 0xFF	; 255
    2d56:	91 e0       	ldi	r25, 0x01	; 1
    2d58:	9a 83       	std	Y+2, r25	; 0x02
    2d5a:	89 83       	std	Y+1, r24	; 0x01
    2d5c:	8a e8       	ldi	r24, 0x8A	; 138
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	29 81       	ldd	r18, Y+1	; 0x01
    2d62:	3a 81       	ldd	r19, Y+2	; 0x02
    2d64:	fc 01       	movw	r30, r24
    2d66:	31 83       	std	Z+1, r19	; 0x01
    2d68:	20 83       	st	Z, r18
    2d6a:	00 00       	nop
    2d6c:	0f 90       	pop	r0
    2d6e:	0f 90       	pop	r0
    2d70:	df 91       	pop	r29
    2d72:	cf 91       	pop	r28
    2d74:	08 95       	ret

00002d76 <adcInit>:
    2d76:	cf 93       	push	r28
    2d78:	df 93       	push	r29
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	81 e2       	ldi	r24, 0x21	; 33
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	21 e2       	ldi	r18, 0x21	; 33
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	f9 01       	movw	r30, r18
    2d88:	20 81       	ld	r18, Z
    2d8a:	2e 7f       	andi	r18, 0xFE	; 254
    2d8c:	fc 01       	movw	r30, r24
    2d8e:	20 83       	st	Z, r18
    2d90:	8e e7       	ldi	r24, 0x7E	; 126
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	2e e7       	ldi	r18, 0x7E	; 126
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	f9 01       	movw	r30, r18
    2d9a:	20 81       	ld	r18, Z
    2d9c:	21 60       	ori	r18, 0x01	; 1
    2d9e:	fc 01       	movw	r30, r24
    2da0:	20 83       	st	Z, r18
    2da2:	8c e7       	ldi	r24, 0x7C	; 124
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	20 e6       	ldi	r18, 0x60	; 96
    2da8:	fc 01       	movw	r30, r24
    2daa:	20 83       	st	Z, r18
    2dac:	8a e7       	ldi	r24, 0x7A	; 122
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	27 e3       	ldi	r18, 0x37	; 55
    2db2:	fc 01       	movw	r30, r24
    2db4:	20 83       	st	Z, r18
    2db6:	8b e7       	ldi	r24, 0x7B	; 123
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	fc 01       	movw	r30, r24
    2dbc:	10 82       	st	Z, r1
    2dbe:	8a e7       	ldi	r24, 0x7A	; 122
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	2a e7       	ldi	r18, 0x7A	; 122
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	f9 01       	movw	r30, r18
    2dc8:	20 81       	ld	r18, Z
    2dca:	20 68       	ori	r18, 0x80	; 128
    2dcc:	fc 01       	movw	r30, r24
    2dce:	20 83       	st	Z, r18
    2dd0:	8a e7       	ldi	r24, 0x7A	; 122
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	2a e7       	ldi	r18, 0x7A	; 122
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	f9 01       	movw	r30, r18
    2dda:	20 81       	ld	r18, Z
    2ddc:	20 64       	ori	r18, 0x40	; 64
    2dde:	fc 01       	movw	r30, r24
    2de0:	20 83       	st	Z, r18
    2de2:	00 00       	nop
    2de4:	df 91       	pop	r29
    2de6:	cf 91       	pop	r28
    2de8:	08 95       	ret

00002dea <adcGetTemperature>:

uint8_t adcGetTemperature(void)
{
    2dea:	af 92       	push	r10
    2dec:	bf 92       	push	r11
    2dee:	cf 92       	push	r12
    2df0:	df 92       	push	r13
    2df2:	ef 92       	push	r14
    2df4:	ff 92       	push	r15
    2df6:	0f 93       	push	r16
    2df8:	1f 93       	push	r17
    2dfa:	cf 93       	push	r28
    2dfc:	df 93       	push	r29
    2dfe:	00 d0       	rcall	.+0      	; 0x2e00 <adcGetTemperature+0x16>
    2e00:	00 d0       	rcall	.+0      	; 0x2e02 <adcGetTemperature+0x18>
    2e02:	cd b7       	in	r28, 0x3d	; 61
    2e04:	de b7       	in	r29, 0x3e	; 62
	int32_t s32Temp;
	
	s32Temp = Map((int32_t)ADCH,0,255,-50,450);
    2e06:	89 e7       	ldi	r24, 0x79	; 121
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	fc 01       	movw	r30, r24
    2e0c:	80 81       	ld	r24, Z
    2e0e:	88 2f       	mov	r24, r24
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	a0 e0       	ldi	r26, 0x00	; 0
    2e14:	b0 e0       	ldi	r27, 0x00	; 0
    2e16:	1f 92       	push	r1
    2e18:	1f 92       	push	r1
    2e1a:	21 e0       	ldi	r18, 0x01	; 1
    2e1c:	2f 93       	push	r18
    2e1e:	22 ec       	ldi	r18, 0xC2	; 194
    2e20:	2f 93       	push	r18
    2e22:	0f 2e       	mov	r0, r31
    2e24:	fe ec       	ldi	r31, 0xCE	; 206
    2e26:	af 2e       	mov	r10, r31
    2e28:	bb 24       	eor	r11, r11
    2e2a:	ba 94       	dec	r11
    2e2c:	cb 2c       	mov	r12, r11
    2e2e:	db 2c       	mov	r13, r11
    2e30:	f0 2d       	mov	r31, r0
    2e32:	e1 2c       	mov	r14, r1
    2e34:	f1 2c       	mov	r15, r1
    2e36:	87 01       	movw	r16, r14
    2e38:	ea 94       	dec	r14
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	a9 01       	movw	r20, r18
    2e40:	bc 01       	movw	r22, r24
    2e42:	cd 01       	movw	r24, r26
    2e44:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <Map>
    2e48:	0f 90       	pop	r0
    2e4a:	0f 90       	pop	r0
    2e4c:	0f 90       	pop	r0
    2e4e:	0f 90       	pop	r0
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	89 83       	std	Y+1, r24	; 0x01
    2e56:	9a 83       	std	Y+2, r25	; 0x02
    2e58:	ab 83       	std	Y+3, r26	; 0x03
    2e5a:	bc 83       	std	Y+4, r27	; 0x04
	if(s32Temp<0)
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e60:	ab 81       	ldd	r26, Y+3	; 0x03
    2e62:	bc 81       	ldd	r27, Y+4	; 0x04
    2e64:	bb 23       	and	r27, r27
    2e66:	2c f4       	brge	.+10     	; 0x2e72 <adcGetTemperature+0x88>
	{
		s32Temp = 0;
    2e68:	19 82       	std	Y+1, r1	; 0x01
    2e6a:	1a 82       	std	Y+2, r1	; 0x02
    2e6c:	1b 82       	std	Y+3, r1	; 0x03
    2e6e:	1c 82       	std	Y+4, r1	; 0x04
    2e70:	12 c0       	rjmp	.+36     	; 0x2e96 <adcGetTemperature+0xac>
	}
	else if(s32Temp>255)
    2e72:	89 81       	ldd	r24, Y+1	; 0x01
    2e74:	9a 81       	ldd	r25, Y+2	; 0x02
    2e76:	ab 81       	ldd	r26, Y+3	; 0x03
    2e78:	bc 81       	ldd	r27, Y+4	; 0x04
    2e7a:	8f 3f       	cpi	r24, 0xFF	; 255
    2e7c:	91 05       	cpc	r25, r1
    2e7e:	a1 05       	cpc	r26, r1
    2e80:	b1 05       	cpc	r27, r1
    2e82:	49 f0       	breq	.+18     	; 0x2e96 <adcGetTemperature+0xac>
    2e84:	44 f0       	brlt	.+16     	; 0x2e96 <adcGetTemperature+0xac>
	{
		s32Temp = 255;
    2e86:	8f ef       	ldi	r24, 0xFF	; 255
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	a0 e0       	ldi	r26, 0x00	; 0
    2e8c:	b0 e0       	ldi	r27, 0x00	; 0
    2e8e:	89 83       	std	Y+1, r24	; 0x01
    2e90:	9a 83       	std	Y+2, r25	; 0x02
    2e92:	ab 83       	std	Y+3, r26	; 0x03
    2e94:	bc 83       	std	Y+4, r27	; 0x04
	}
	return (uint8_t)s32Temp;
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e98:	0f 90       	pop	r0
    2e9a:	0f 90       	pop	r0
    2e9c:	0f 90       	pop	r0
    2e9e:	0f 90       	pop	r0
    2ea0:	df 91       	pop	r29
    2ea2:	cf 91       	pop	r28
    2ea4:	1f 91       	pop	r17
    2ea6:	0f 91       	pop	r16
    2ea8:	ff 90       	pop	r15
    2eaa:	ef 90       	pop	r14
    2eac:	df 90       	pop	r13
    2eae:	cf 90       	pop	r12
    2eb0:	bf 90       	pop	r11
    2eb2:	af 90       	pop	r10
    2eb4:	08 95       	ret

00002eb6 <INT_5ms_Init>:

///////////////////////////////////////////////////////////////////////////////
// UTILITIES
///////////////////////////////////////////////////////////////////////////////
void INT_5ms_Init(void)
{
    2eb6:	cf 93       	push	r28
    2eb8:	df 93       	push	r29
    2eba:	cd b7       	in	r28, 0x3d	; 61
    2ebc:	de b7       	in	r29, 0x3e	; 62
	TCCR2A = (1<<WGM21);	// mode: CTC
    2ebe:	80 eb       	ldi	r24, 0xB0	; 176
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	22 e0       	ldi	r18, 0x02	; 2
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	20 83       	st	Z, r18
	TCCR2B = 0;				// mode: CTC, clock off
    2ec8:	81 eb       	ldi	r24, 0xB1	; 177
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	fc 01       	movw	r30, r24
    2ece:	10 82       	st	Z, r1
	TCNT2 = 0;
    2ed0:	82 eb       	ldi	r24, 0xB2	; 178
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	fc 01       	movw	r30, r24
    2ed6:	10 82       	st	Z, r1
	OCR2A = 96;
    2ed8:	83 eb       	ldi	r24, 0xB3	; 179
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	20 e6       	ldi	r18, 0x60	; 96
    2ede:	fc 01       	movw	r30, r24
    2ee0:	20 83       	st	Z, r18
	TIMSK2 = (1<<OCIE2A);
    2ee2:	80 e7       	ldi	r24, 0x70	; 112
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	22 e0       	ldi	r18, 0x02	; 2
    2ee8:	fc 01       	movw	r30, r24
    2eea:	20 83       	st	Z, r18
	TIFR2 = (1<<OCF2A);
    2eec:	87 e3       	ldi	r24, 0x37	; 55
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	22 e0       	ldi	r18, 0x02	; 2
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	20 83       	st	Z, r18

	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);
    2ef6:	81 eb       	ldi	r24, 0xB1	; 177
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	21 eb       	ldi	r18, 0xB1	; 177
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	f9 01       	movw	r30, r18
    2f00:	20 81       	ld	r18, Z
    2f02:	27 60       	ori	r18, 0x07	; 7
    2f04:	fc 01       	movw	r30, r24
    2f06:	20 83       	st	Z, r18
}
    2f08:	00 00       	nop
    2f0a:	df 91       	pop	r29
    2f0c:	cf 91       	pop	r28
    2f0e:	08 95       	ret

00002f10 <wait_1ms>:
 *
 * @param [in] uiFactor: 1ms multiplier
 * @return no return value
 *****************************************************************************/
void wait_1ms(uint16_t uiFactor)
{
    2f10:	cf 93       	push	r28
    2f12:	df 93       	push	r29
    2f14:	00 d0       	rcall	.+0      	; 0x2f16 <wait_1ms+0x6>
    2f16:	00 d0       	rcall	.+0      	; 0x2f18 <wait_1ms+0x8>
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
    2f1c:	9c 83       	std	Y+4, r25	; 0x04
    2f1e:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t i;
	TCCR0A = (1<<WGM01);	// mode: CTC
    2f20:	84 e4       	ldi	r24, 0x44	; 68
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	22 e0       	ldi	r18, 0x02	; 2
    2f26:	fc 01       	movw	r30, r24
    2f28:	20 83       	st	Z, r18
	TCCR0B = 0;				// mode: CTC
    2f2a:	85 e4       	ldi	r24, 0x45	; 69
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	fc 01       	movw	r30, r24
    2f30:	10 82       	st	Z, r1
	TIFR0 =  (1<<OCF0A);	// only OCFA flag needs to be cleared
    2f32:	85 e3       	ldi	r24, 0x35	; 53
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	22 e0       	ldi	r18, 0x02	; 2
    2f38:	fc 01       	movw	r30, r24
    2f3a:	20 83       	st	Z, r18
	TIMSK0 = 0;				// no interrupts
    2f3c:	8e e6       	ldi	r24, 0x6E	; 110
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	fc 01       	movw	r30, r24
    2f42:	10 82       	st	Z, r1
	TCNT0 = 0;
    2f44:	86 e4       	ldi	r24, 0x46	; 70
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	fc 01       	movw	r30, r24
    2f4a:	10 82       	st	Z, r1
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
    2f4c:	87 e4       	ldi	r24, 0x47	; 71
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	2d e4       	ldi	r18, 0x4D	; 77
    2f52:	fc 01       	movw	r30, r24
    2f54:	20 83       	st	Z, r18
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
    2f56:	85 e4       	ldi	r24, 0x45	; 69
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	25 e4       	ldi	r18, 0x45	; 69
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	f9 01       	movw	r30, r18
    2f60:	20 81       	ld	r18, Z
    2f62:	24 60       	ori	r18, 0x04	; 4
    2f64:	fc 01       	movw	r30, r24
    2f66:	20 83       	st	Z, r18
	
	for(i=0;i<uiFactor;i++)
    2f68:	1a 82       	std	Y+2, r1	; 0x02
    2f6a:	19 82       	std	Y+1, r1	; 0x01
    2f6c:	15 c0       	rjmp	.+42     	; 0x2f98 <wait_1ms+0x88>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
    2f6e:	00 00       	nop
    2f70:	85 e3       	ldi	r24, 0x35	; 53
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	fc 01       	movw	r30, r24
    2f76:	80 81       	ld	r24, Z
    2f78:	88 2f       	mov	r24, r24
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	82 70       	andi	r24, 0x02	; 2
    2f7e:	99 27       	eor	r25, r25
    2f80:	89 2b       	or	r24, r25
    2f82:	b1 f3       	breq	.-20     	; 0x2f70 <wait_1ms+0x60>
		TIFR0 =  (1<<OCF0A);		// clear flag
    2f84:	85 e3       	ldi	r24, 0x35	; 53
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	22 e0       	ldi	r18, 0x02	; 2
    2f8a:	fc 01       	movw	r30, r24
    2f8c:	20 83       	st	Z, r18
	TCNT0 = 0;
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
	
	for(i=0;i<uiFactor;i++)
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	9a 81       	ldd	r25, Y+2	; 0x02
    2f92:	01 96       	adiw	r24, 0x01	; 1
    2f94:	9a 83       	std	Y+2, r25	; 0x02
    2f96:	89 83       	std	Y+1, r24	; 0x01
    2f98:	29 81       	ldd	r18, Y+1	; 0x01
    2f9a:	3a 81       	ldd	r19, Y+2	; 0x02
    2f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa0:	28 17       	cp	r18, r24
    2fa2:	39 07       	cpc	r19, r25
    2fa4:	20 f3       	brcs	.-56     	; 0x2f6e <wait_1ms+0x5e>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
		TIFR0 =  (1<<OCF0A);		// clear flag
	}
	TCCR0B &= ~(0x07);	// set prescaler to 0 (stop timer)
    2fa6:	85 e4       	ldi	r24, 0x45	; 69
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	25 e4       	ldi	r18, 0x45	; 69
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	f9 01       	movw	r30, r18
    2fb0:	20 81       	ld	r18, Z
    2fb2:	28 7f       	andi	r18, 0xF8	; 248
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	20 83       	st	Z, r18
}
    2fb8:	00 00       	nop
    2fba:	0f 90       	pop	r0
    2fbc:	0f 90       	pop	r0
    2fbe:	0f 90       	pop	r0
    2fc0:	0f 90       	pop	r0
    2fc2:	df 91       	pop	r29
    2fc4:	cf 91       	pop	r28
    2fc6:	08 95       	ret

00002fc8 <Map>:
 * @param [in] s32OutMin: minimal value of output range
 * @param [in] s32OutMax: maximal value of output range
 * @return data in new number range
 *****************************************************************************/
int32_t Map(int32_t s32Data, int32_t s32InMin, int32_t s32InMax, int32_t s32OutMin, int32_t s32OutMax)
{
    2fc8:	af 92       	push	r10
    2fca:	bf 92       	push	r11
    2fcc:	cf 92       	push	r12
    2fce:	df 92       	push	r13
    2fd0:	ef 92       	push	r14
    2fd2:	ff 92       	push	r15
    2fd4:	0f 93       	push	r16
    2fd6:	1f 93       	push	r17
    2fd8:	cf 93       	push	r28
    2fda:	df 93       	push	r29
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
    2fe0:	60 97       	sbiw	r28, 0x10	; 16
    2fe2:	0f b6       	in	r0, 0x3f	; 63
    2fe4:	f8 94       	cli
    2fe6:	de bf       	out	0x3e, r29	; 62
    2fe8:	0f be       	out	0x3f, r0	; 63
    2fea:	cd bf       	out	0x3d, r28	; 61
    2fec:	69 83       	std	Y+1, r22	; 0x01
    2fee:	7a 83       	std	Y+2, r23	; 0x02
    2ff0:	8b 83       	std	Y+3, r24	; 0x03
    2ff2:	9c 83       	std	Y+4, r25	; 0x04
    2ff4:	2d 83       	std	Y+5, r18	; 0x05
    2ff6:	3e 83       	std	Y+6, r19	; 0x06
    2ff8:	4f 83       	std	Y+7, r20	; 0x07
    2ffa:	58 87       	std	Y+8, r21	; 0x08
    2ffc:	e9 86       	std	Y+9, r14	; 0x09
    2ffe:	fa 86       	std	Y+10, r15	; 0x0a
    3000:	0b 87       	std	Y+11, r16	; 0x0b
    3002:	1c 87       	std	Y+12, r17	; 0x0c
    3004:	ad 86       	std	Y+13, r10	; 0x0d
    3006:	be 86       	std	Y+14, r11	; 0x0e
    3008:	cf 86       	std	Y+15, r12	; 0x0f
    300a:	d8 8a       	std	Y+16, r13	; 0x10
	return((s32Data-s32InMin)*(s32OutMax-s32OutMin)/(s32InMax-s32InMin)+s32OutMin);
    300c:	29 81       	ldd	r18, Y+1	; 0x01
    300e:	3a 81       	ldd	r19, Y+2	; 0x02
    3010:	4b 81       	ldd	r20, Y+3	; 0x03
    3012:	5c 81       	ldd	r21, Y+4	; 0x04
    3014:	8d 81       	ldd	r24, Y+5	; 0x05
    3016:	9e 81       	ldd	r25, Y+6	; 0x06
    3018:	af 81       	ldd	r26, Y+7	; 0x07
    301a:	b8 85       	ldd	r27, Y+8	; 0x08
    301c:	79 01       	movw	r14, r18
    301e:	8a 01       	movw	r16, r20
    3020:	e8 1a       	sub	r14, r24
    3022:	f9 0a       	sbc	r15, r25
    3024:	0a 0b       	sbc	r16, r26
    3026:	1b 0b       	sbc	r17, r27
    3028:	2d 8d       	ldd	r18, Y+29	; 0x1d
    302a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    302c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    302e:	58 a1       	ldd	r21, Y+32	; 0x20
    3030:	8d 85       	ldd	r24, Y+13	; 0x0d
    3032:	9e 85       	ldd	r25, Y+14	; 0x0e
    3034:	af 85       	ldd	r26, Y+15	; 0x0f
    3036:	b8 89       	ldd	r27, Y+16	; 0x10
    3038:	59 01       	movw	r10, r18
    303a:	6a 01       	movw	r12, r20
    303c:	a8 1a       	sub	r10, r24
    303e:	b9 0a       	sbc	r11, r25
    3040:	ca 0a       	sbc	r12, r26
    3042:	db 0a       	sbc	r13, r27
    3044:	d6 01       	movw	r26, r12
    3046:	c5 01       	movw	r24, r10
    3048:	a8 01       	movw	r20, r16
    304a:	97 01       	movw	r18, r14
    304c:	bc 01       	movw	r22, r24
    304e:	cd 01       	movw	r24, r26
    3050:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulsi3>
    3054:	7b 01       	movw	r14, r22
    3056:	8c 01       	movw	r16, r24
    3058:	29 85       	ldd	r18, Y+9	; 0x09
    305a:	3a 85       	ldd	r19, Y+10	; 0x0a
    305c:	4b 85       	ldd	r20, Y+11	; 0x0b
    305e:	5c 85       	ldd	r21, Y+12	; 0x0c
    3060:	8d 81       	ldd	r24, Y+5	; 0x05
    3062:	9e 81       	ldd	r25, Y+6	; 0x06
    3064:	af 81       	ldd	r26, Y+7	; 0x07
    3066:	b8 85       	ldd	r27, Y+8	; 0x08
    3068:	28 1b       	sub	r18, r24
    306a:	39 0b       	sbc	r19, r25
    306c:	4a 0b       	sbc	r20, r26
    306e:	5b 0b       	sbc	r21, r27
    3070:	c8 01       	movw	r24, r16
    3072:	b7 01       	movw	r22, r14
    3074:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__divmodsi4>
    3078:	da 01       	movw	r26, r20
    307a:	c9 01       	movw	r24, r18
    307c:	9c 01       	movw	r18, r24
    307e:	ad 01       	movw	r20, r26
    3080:	8d 85       	ldd	r24, Y+13	; 0x0d
    3082:	9e 85       	ldd	r25, Y+14	; 0x0e
    3084:	af 85       	ldd	r26, Y+15	; 0x0f
    3086:	b8 89       	ldd	r27, Y+16	; 0x10
    3088:	82 0f       	add	r24, r18
    308a:	93 1f       	adc	r25, r19
    308c:	a4 1f       	adc	r26, r20
    308e:	b5 1f       	adc	r27, r21
}
    3090:	bc 01       	movw	r22, r24
    3092:	cd 01       	movw	r24, r26
    3094:	60 96       	adiw	r28, 0x10	; 16
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	f8 94       	cli
    309a:	de bf       	out	0x3e, r29	; 62
    309c:	0f be       	out	0x3f, r0	; 63
    309e:	cd bf       	out	0x3d, r28	; 61
    30a0:	df 91       	pop	r29
    30a2:	cf 91       	pop	r28
    30a4:	1f 91       	pop	r17
    30a6:	0f 91       	pop	r16
    30a8:	ff 90       	pop	r15
    30aa:	ef 90       	pop	r14
    30ac:	df 90       	pop	r13
    30ae:	cf 90       	pop	r12
    30b0:	bf 90       	pop	r11
    30b2:	af 90       	pop	r10
    30b4:	08 95       	ret

000030b6 <CRC8>:

uint8_t CRC8(uint8_t* au8Data, uint8_t u8Length)
{
    30b6:	cf 93       	push	r28
    30b8:	df 93       	push	r29
    30ba:	cd b7       	in	r28, 0x3d	; 61
    30bc:	de b7       	in	r29, 0x3e	; 62
    30be:	28 97       	sbiw	r28, 0x08	; 8
    30c0:	0f b6       	in	r0, 0x3f	; 63
    30c2:	f8 94       	cli
    30c4:	de bf       	out	0x3e, r29	; 62
    30c6:	0f be       	out	0x3f, r0	; 63
    30c8:	cd bf       	out	0x3d, r28	; 61
    30ca:	9f 83       	std	Y+7, r25	; 0x07
    30cc:	8e 83       	std	Y+6, r24	; 0x06
    30ce:	68 87       	std	Y+8, r22	; 0x08
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;
    30d0:	19 82       	std	Y+1, r1	; 0x01

	for(i=0;i<u8Length;i++)
    30d2:	1a 82       	std	Y+2, r1	; 0x02
    30d4:	27 c0       	rjmp	.+78     	; 0x3124 <CRC8+0x6e>
	{
		u8InByte = au8Data[i];
    30d6:	8a 81       	ldd	r24, Y+2	; 0x02
    30d8:	88 2f       	mov	r24, r24
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	2e 81       	ldd	r18, Y+6	; 0x06
    30de:	3f 81       	ldd	r19, Y+7	; 0x07
    30e0:	82 0f       	add	r24, r18
    30e2:	93 1f       	adc	r25, r19
    30e4:	fc 01       	movw	r30, r24
    30e6:	80 81       	ld	r24, Z
    30e8:	8c 83       	std	Y+4, r24	; 0x04
		for(j=0;j<8;j++)
    30ea:	1b 82       	std	Y+3, r1	; 0x03
    30ec:	15 c0       	rjmp	.+42     	; 0x3118 <CRC8+0x62>
		{
			u8Temp = (u8CRC^u8InByte)&0x80;
    30ee:	99 81       	ldd	r25, Y+1	; 0x01
    30f0:	8c 81       	ldd	r24, Y+4	; 0x04
    30f2:	89 27       	eor	r24, r25
    30f4:	80 78       	andi	r24, 0x80	; 128
    30f6:	8d 83       	std	Y+5, r24	; 0x05
			u8CRC <<= 1;
    30f8:	89 81       	ldd	r24, Y+1	; 0x01
    30fa:	88 0f       	add	r24, r24
    30fc:	89 83       	std	Y+1, r24	; 0x01
			if(u8Temp!=0)
    30fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3100:	88 23       	and	r24, r24
    3102:	21 f0       	breq	.+8      	; 0x310c <CRC8+0x56>
			{
				u8CRC ^= 0x07;
    3104:	99 81       	ldd	r25, Y+1	; 0x01
    3106:	87 e0       	ldi	r24, 0x07	; 7
    3108:	89 27       	eor	r24, r25
    310a:	89 83       	std	Y+1, r24	; 0x01
			}
			u8InByte<<=1;
    310c:	8c 81       	ldd	r24, Y+4	; 0x04
    310e:	88 0f       	add	r24, r24
    3110:	8c 83       	std	Y+4, r24	; 0x04
	u8CRC = 0;

	for(i=0;i<u8Length;i++)
	{
		u8InByte = au8Data[i];
		for(j=0;j<8;j++)
    3112:	8b 81       	ldd	r24, Y+3	; 0x03
    3114:	8f 5f       	subi	r24, 0xFF	; 255
    3116:	8b 83       	std	Y+3, r24	; 0x03
    3118:	8b 81       	ldd	r24, Y+3	; 0x03
    311a:	88 30       	cpi	r24, 0x08	; 8
    311c:	40 f3       	brcs	.-48     	; 0x30ee <CRC8+0x38>
{
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;

	for(i=0;i<u8Length;i++)
    311e:	8a 81       	ldd	r24, Y+2	; 0x02
    3120:	8f 5f       	subi	r24, 0xFF	; 255
    3122:	8a 83       	std	Y+2, r24	; 0x02
    3124:	9a 81       	ldd	r25, Y+2	; 0x02
    3126:	88 85       	ldd	r24, Y+8	; 0x08
    3128:	98 17       	cp	r25, r24
    312a:	a8 f2       	brcs	.-86     	; 0x30d6 <CRC8+0x20>
			}
			u8InByte<<=1;
		}
	}

	return u8CRC;
    312c:	89 81       	ldd	r24, Y+1	; 0x01
}
    312e:	28 96       	adiw	r28, 0x08	; 8
    3130:	0f b6       	in	r0, 0x3f	; 63
    3132:	f8 94       	cli
    3134:	de bf       	out	0x3e, r29	; 62
    3136:	0f be       	out	0x3f, r0	; 63
    3138:	cd bf       	out	0x3d, r28	; 61
    313a:	df 91       	pop	r29
    313c:	cf 91       	pop	r28
    313e:	08 95       	ret

00003140 <__mulsi3>:
    3140:	db 01       	movw	r26, r22
    3142:	8f 93       	push	r24
    3144:	9f 93       	push	r25
    3146:	0e 94 0b 19 	call	0x3216	; 0x3216 <__muluhisi3>
    314a:	bf 91       	pop	r27
    314c:	af 91       	pop	r26
    314e:	a2 9f       	mul	r26, r18
    3150:	80 0d       	add	r24, r0
    3152:	91 1d       	adc	r25, r1
    3154:	a3 9f       	mul	r26, r19
    3156:	90 0d       	add	r25, r0
    3158:	b2 9f       	mul	r27, r18
    315a:	90 0d       	add	r25, r0
    315c:	11 24       	eor	r1, r1
    315e:	08 95       	ret

00003160 <__udivmodhi4>:
    3160:	aa 1b       	sub	r26, r26
    3162:	bb 1b       	sub	r27, r27
    3164:	51 e1       	ldi	r21, 0x11	; 17
    3166:	07 c0       	rjmp	.+14     	; 0x3176 <__udivmodhi4_ep>

00003168 <__udivmodhi4_loop>:
    3168:	aa 1f       	adc	r26, r26
    316a:	bb 1f       	adc	r27, r27
    316c:	a6 17       	cp	r26, r22
    316e:	b7 07       	cpc	r27, r23
    3170:	10 f0       	brcs	.+4      	; 0x3176 <__udivmodhi4_ep>
    3172:	a6 1b       	sub	r26, r22
    3174:	b7 0b       	sbc	r27, r23

00003176 <__udivmodhi4_ep>:
    3176:	88 1f       	adc	r24, r24
    3178:	99 1f       	adc	r25, r25
    317a:	5a 95       	dec	r21
    317c:	a9 f7       	brne	.-22     	; 0x3168 <__udivmodhi4_loop>
    317e:	80 95       	com	r24
    3180:	90 95       	com	r25
    3182:	bc 01       	movw	r22, r24
    3184:	cd 01       	movw	r24, r26
    3186:	08 95       	ret

00003188 <__udivmodsi4>:
    3188:	a1 e2       	ldi	r26, 0x21	; 33
    318a:	1a 2e       	mov	r1, r26
    318c:	aa 1b       	sub	r26, r26
    318e:	bb 1b       	sub	r27, r27
    3190:	fd 01       	movw	r30, r26
    3192:	0d c0       	rjmp	.+26     	; 0x31ae <__udivmodsi4_ep>

00003194 <__udivmodsi4_loop>:
    3194:	aa 1f       	adc	r26, r26
    3196:	bb 1f       	adc	r27, r27
    3198:	ee 1f       	adc	r30, r30
    319a:	ff 1f       	adc	r31, r31
    319c:	a2 17       	cp	r26, r18
    319e:	b3 07       	cpc	r27, r19
    31a0:	e4 07       	cpc	r30, r20
    31a2:	f5 07       	cpc	r31, r21
    31a4:	20 f0       	brcs	.+8      	; 0x31ae <__udivmodsi4_ep>
    31a6:	a2 1b       	sub	r26, r18
    31a8:	b3 0b       	sbc	r27, r19
    31aa:	e4 0b       	sbc	r30, r20
    31ac:	f5 0b       	sbc	r31, r21

000031ae <__udivmodsi4_ep>:
    31ae:	66 1f       	adc	r22, r22
    31b0:	77 1f       	adc	r23, r23
    31b2:	88 1f       	adc	r24, r24
    31b4:	99 1f       	adc	r25, r25
    31b6:	1a 94       	dec	r1
    31b8:	69 f7       	brne	.-38     	; 0x3194 <__udivmodsi4_loop>
    31ba:	60 95       	com	r22
    31bc:	70 95       	com	r23
    31be:	80 95       	com	r24
    31c0:	90 95       	com	r25
    31c2:	9b 01       	movw	r18, r22
    31c4:	ac 01       	movw	r20, r24
    31c6:	bd 01       	movw	r22, r26
    31c8:	cf 01       	movw	r24, r30
    31ca:	08 95       	ret

000031cc <__divmodsi4>:
    31cc:	05 2e       	mov	r0, r21
    31ce:	97 fb       	bst	r25, 7
    31d0:	1e f4       	brtc	.+6      	; 0x31d8 <__divmodsi4+0xc>
    31d2:	00 94       	com	r0
    31d4:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__negsi2>
    31d8:	57 fd       	sbrc	r21, 7
    31da:	07 d0       	rcall	.+14     	; 0x31ea <__divmodsi4_neg2>
    31dc:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
    31e0:	07 fc       	sbrc	r0, 7
    31e2:	03 d0       	rcall	.+6      	; 0x31ea <__divmodsi4_neg2>
    31e4:	4e f4       	brtc	.+18     	; 0x31f8 <__divmodsi4_exit>
    31e6:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <__negsi2>

000031ea <__divmodsi4_neg2>:
    31ea:	50 95       	com	r21
    31ec:	40 95       	com	r20
    31ee:	30 95       	com	r19
    31f0:	21 95       	neg	r18
    31f2:	3f 4f       	sbci	r19, 0xFF	; 255
    31f4:	4f 4f       	sbci	r20, 0xFF	; 255
    31f6:	5f 4f       	sbci	r21, 0xFF	; 255

000031f8 <__divmodsi4_exit>:
    31f8:	08 95       	ret

000031fa <__negsi2>:
    31fa:	90 95       	com	r25
    31fc:	80 95       	com	r24
    31fe:	70 95       	com	r23
    3200:	61 95       	neg	r22
    3202:	7f 4f       	sbci	r23, 0xFF	; 255
    3204:	8f 4f       	sbci	r24, 0xFF	; 255
    3206:	9f 4f       	sbci	r25, 0xFF	; 255
    3208:	08 95       	ret

0000320a <__tablejump2__>:
    320a:	ee 0f       	add	r30, r30
    320c:	ff 1f       	adc	r31, r31
    320e:	05 90       	lpm	r0, Z+
    3210:	f4 91       	lpm	r31, Z
    3212:	e0 2d       	mov	r30, r0
    3214:	09 94       	ijmp

00003216 <__muluhisi3>:
    3216:	0e 94 16 19 	call	0x322c	; 0x322c <__umulhisi3>
    321a:	a5 9f       	mul	r26, r21
    321c:	90 0d       	add	r25, r0
    321e:	b4 9f       	mul	r27, r20
    3220:	90 0d       	add	r25, r0
    3222:	a4 9f       	mul	r26, r20
    3224:	80 0d       	add	r24, r0
    3226:	91 1d       	adc	r25, r1
    3228:	11 24       	eor	r1, r1
    322a:	08 95       	ret

0000322c <__umulhisi3>:
    322c:	a2 9f       	mul	r26, r18
    322e:	b0 01       	movw	r22, r0
    3230:	b3 9f       	mul	r27, r19
    3232:	c0 01       	movw	r24, r0
    3234:	a3 9f       	mul	r26, r19
    3236:	70 0d       	add	r23, r0
    3238:	81 1d       	adc	r24, r1
    323a:	11 24       	eor	r1, r1
    323c:	91 1d       	adc	r25, r1
    323e:	b2 9f       	mul	r27, r18
    3240:	70 0d       	add	r23, r0
    3242:	81 1d       	adc	r24, r1
    3244:	11 24       	eor	r1, r1
    3246:	91 1d       	adc	r25, r1
    3248:	08 95       	ret

0000324a <strlen>:
    324a:	fc 01       	movw	r30, r24
    324c:	01 90       	ld	r0, Z+
    324e:	00 20       	and	r0, r0
    3250:	e9 f7       	brne	.-6      	; 0x324c <strlen+0x2>
    3252:	80 95       	com	r24
    3254:	90 95       	com	r25
    3256:	8e 0f       	add	r24, r30
    3258:	9f 1f       	adc	r25, r31
    325a:	08 95       	ret

0000325c <_exit>:
    325c:	f8 94       	cli

0000325e <__stop_program>:
    325e:	ff cf       	rjmp	.-2      	; 0x325e <__stop_program>
