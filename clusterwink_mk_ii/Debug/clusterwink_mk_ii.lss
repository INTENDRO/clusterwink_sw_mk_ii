
clusterwink_mk_ii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000566  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b3  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b6  00000000  00000000  00001087  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000536  00000000  00000000  0000183d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000298  00000000  00000000  00001d74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000472  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000521  00000000  00000000  0000247e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  0000299f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8c:	0c 94 b1 02 	jmp	0x562	; 0x562 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <main>:
#include <avr/io.h>
#include "utils.h"


int main(void)
{
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	1f 92       	push	r1
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
    uint8_t u8Duty = 0;
  9e:	19 82       	std	Y+1, r1	; 0x01
	
	portInit();
  a0:	0e 94 68 00 	call	0xd0	; 0xd0 <portInit>
	initPWM(0);
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 b7 00 	call	0x16e	; 0x16e <initPWM>
	startPWM();
  aa:	0e 94 16 01 	call	0x22c	; 0x22c <startPWM>
	enablePLED();
  ae:	0e 94 a6 00 	call	0x14c	; 0x14c <enablePLED>
	
    while (1) 
    {
		setDuty(0);
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 27 01 	call	0x24e	; 0x24e <setDuty>
		wait_1ms(1000);
  b8:	88 ee       	ldi	r24, 0xE8	; 232
  ba:	93 e0       	ldi	r25, 0x03	; 3
  bc:	0e 94 73 01 	call	0x2e6	; 0x2e6 <wait_1ms>
		setDuty(1);
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 27 01 	call	0x24e	; 0x24e <setDuty>
		wait_1ms(1000);
  c6:	88 ee       	ldi	r24, 0xE8	; 232
  c8:	93 e0       	ldi	r25, 0x03	; 3
  ca:	0e 94 73 01 	call	0x2e6	; 0x2e6 <wait_1ms>
    }
  ce:	f1 cf       	rjmp	.-30     	; 0xb2 <main+0x1e>

000000d0 <portInit>:
 * @return 8bit analog value
 *****************************************************************************/
uint8_t adcGetValue(void)
{
	return(ADCH);
}
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	8a e2       	ldi	r24, 0x2A	; 42
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	2a e2       	ldi	r18, 0x2A	; 42
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	f9 01       	movw	r30, r18
  e2:	20 81       	ld	r18, Z
  e4:	20 63       	ori	r18, 0x30	; 48
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
  ea:	8b e2       	ldi	r24, 0x2B	; 43
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	2b e2       	ldi	r18, 0x2B	; 43
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	f9 01       	movw	r30, r18
  f4:	20 81       	ld	r18, Z
  f6:	20 62       	ori	r18, 0x20	; 32
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
  fc:	8b e2       	ldi	r24, 0x2B	; 43
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	2b e2       	ldi	r18, 0x2B	; 43
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	f9 01       	movw	r30, r18
 106:	20 81       	ld	r18, Z
 108:	2f 7e       	andi	r18, 0xEF	; 239
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
 10e:	8a e2       	ldi	r24, 0x2A	; 42
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	2a e2       	ldi	r18, 0x2A	; 42
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	f9 01       	movw	r30, r18
 118:	20 81       	ld	r18, Z
 11a:	20 68       	ori	r18, 0x80	; 128
 11c:	fc 01       	movw	r30, r24
 11e:	20 83       	st	Z, r18
 120:	8b e2       	ldi	r24, 0x2B	; 43
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	2b e2       	ldi	r18, 0x2B	; 43
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	f9 01       	movw	r30, r18
 12a:	20 81       	ld	r18, Z
 12c:	20 68       	ori	r18, 0x80	; 128
 12e:	fc 01       	movw	r30, r24
 130:	20 83       	st	Z, r18
 132:	8a e2       	ldi	r24, 0x2A	; 42
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	2a e2       	ldi	r18, 0x2A	; 42
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	f9 01       	movw	r30, r18
 13c:	20 81       	ld	r18, Z
 13e:	2f 7b       	andi	r18, 0xBF	; 191
 140:	fc 01       	movw	r30, r24
 142:	20 83       	st	Z, r18
 144:	00 00       	nop
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <enablePLED>:
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	8b e2       	ldi	r24, 0x2B	; 43
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	2b e2       	ldi	r18, 0x2B	; 43
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	f9 01       	movw	r30, r18
 15e:	20 81       	ld	r18, Z
 160:	2f 7d       	andi	r18, 0xDF	; 223
 162:	fc 01       	movw	r30, r24
 164:	20 83       	st	Z, r18
 166:	00 00       	nop
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <initPWM>:
 16e:	8f 92       	push	r8
 170:	9f 92       	push	r9
 172:	af 92       	push	r10
 174:	bf 92       	push	r11
 176:	cf 92       	push	r12
 178:	df 92       	push	r13
 17a:	ef 92       	push	r14
 17c:	ff 92       	push	r15
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	1f 92       	push	r1
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	89 83       	std	Y+1, r24	; 0x01
 18e:	89 81       	ldd	r24, Y+1	; 0x01
 190:	85 36       	cpi	r24, 0x65	; 101
 192:	10 f0       	brcs	.+4      	; 0x198 <initPWM+0x2a>
 194:	84 e6       	ldi	r24, 0x64	; 100
 196:	89 83       	std	Y+1, r24	; 0x01
 198:	80 e8       	ldi	r24, 0x80	; 128
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	22 e2       	ldi	r18, 0x22	; 34
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
 1a2:	81 e8       	ldi	r24, 0x81	; 129
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	28 e0       	ldi	r18, 0x08	; 8
 1a8:	fc 01       	movw	r30, r24
 1aa:	20 83       	st	Z, r18
 1ac:	84 e8       	ldi	r24, 0x84	; 132
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	fc 01       	movw	r30, r24
 1b2:	11 82       	std	Z+1, r1	; 0x01
 1b4:	10 82       	st	Z, r1
 1b6:	0f 2e       	mov	r0, r31
 1b8:	fa e8       	ldi	r31, 0x8A	; 138
 1ba:	8f 2e       	mov	r8, r31
 1bc:	91 2c       	mov	r9, r1
 1be:	f0 2d       	mov	r31, r0
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	88 2f       	mov	r24, r24
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	a0 e0       	ldi	r26, 0x00	; 0
 1c8:	b0 e0       	ldi	r27, 0x00	; 0
 1ca:	1f 92       	push	r1
 1cc:	1f 92       	push	r1
 1ce:	21 e0       	ldi	r18, 0x01	; 1
 1d0:	2f 93       	push	r18
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	2f 93       	push	r18
 1d6:	a1 2c       	mov	r10, r1
 1d8:	b1 2c       	mov	r11, r1
 1da:	65 01       	movw	r12, r10
 1dc:	14 e6       	ldi	r17, 0x64	; 100
 1de:	e1 2e       	mov	r14, r17
 1e0:	f1 2c       	mov	r15, r1
 1e2:	00 e0       	ldi	r16, 0x00	; 0
 1e4:	10 e0       	ldi	r17, 0x00	; 0
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	a9 01       	movw	r20, r18
 1ec:	bc 01       	movw	r22, r24
 1ee:	cd 01       	movw	r24, r26
 1f0:	0e 94 cf 01 	call	0x39e	; 0x39e <Map>
 1f4:	0f 90       	pop	r0
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	dc 01       	movw	r26, r24
 1fe:	cb 01       	movw	r24, r22
 200:	f4 01       	movw	r30, r8
 202:	91 83       	std	Z+1, r25	; 0x01
 204:	80 83       	st	Z, r24
 206:	8f e6       	ldi	r24, 0x6F	; 111
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	fc 01       	movw	r30, r24
 20c:	10 82       	st	Z, r1
 20e:	00 00       	nop
 210:	0f 90       	pop	r0
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	df 90       	pop	r13
 220:	cf 90       	pop	r12
 222:	bf 90       	pop	r11
 224:	af 90       	pop	r10
 226:	9f 90       	pop	r9
 228:	8f 90       	pop	r8
 22a:	08 95       	ret

0000022c <startPWM>:
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
 234:	81 e8       	ldi	r24, 0x81	; 129
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	21 e8       	ldi	r18, 0x81	; 129
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	f9 01       	movw	r30, r18
 23e:	20 81       	ld	r18, Z
 240:	21 60       	ori	r18, 0x01	; 1
 242:	fc 01       	movw	r30, r24
 244:	20 83       	st	Z, r18
 246:	00 00       	nop
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <setDuty>:
 24e:	8f 92       	push	r8
 250:	9f 92       	push	r9
 252:	af 92       	push	r10
 254:	bf 92       	push	r11
 256:	cf 92       	push	r12
 258:	df 92       	push	r13
 25a:	ef 92       	push	r14
 25c:	ff 92       	push	r15
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	1f 92       	push	r1
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
 26c:	89 83       	std	Y+1, r24	; 0x01
 26e:	89 81       	ldd	r24, Y+1	; 0x01
 270:	85 36       	cpi	r24, 0x65	; 101
 272:	10 f0       	brcs	.+4      	; 0x278 <setDuty+0x2a>
 274:	84 e6       	ldi	r24, 0x64	; 100
 276:	89 83       	std	Y+1, r24	; 0x01
 278:	0f 2e       	mov	r0, r31
 27a:	fa e8       	ldi	r31, 0x8A	; 138
 27c:	8f 2e       	mov	r8, r31
 27e:	91 2c       	mov	r9, r1
 280:	f0 2d       	mov	r31, r0
 282:	89 81       	ldd	r24, Y+1	; 0x01
 284:	88 2f       	mov	r24, r24
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	a0 e0       	ldi	r26, 0x00	; 0
 28a:	b0 e0       	ldi	r27, 0x00	; 0
 28c:	1f 92       	push	r1
 28e:	1f 92       	push	r1
 290:	21 e0       	ldi	r18, 0x01	; 1
 292:	2f 93       	push	r18
 294:	2f ef       	ldi	r18, 0xFF	; 255
 296:	2f 93       	push	r18
 298:	a1 2c       	mov	r10, r1
 29a:	b1 2c       	mov	r11, r1
 29c:	65 01       	movw	r12, r10
 29e:	14 e6       	ldi	r17, 0x64	; 100
 2a0:	e1 2e       	mov	r14, r17
 2a2:	f1 2c       	mov	r15, r1
 2a4:	00 e0       	ldi	r16, 0x00	; 0
 2a6:	10 e0       	ldi	r17, 0x00	; 0
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	a9 01       	movw	r20, r18
 2ae:	bc 01       	movw	r22, r24
 2b0:	cd 01       	movw	r24, r26
 2b2:	0e 94 cf 01 	call	0x39e	; 0x39e <Map>
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	dc 01       	movw	r26, r24
 2c0:	cb 01       	movw	r24, r22
 2c2:	f4 01       	movw	r30, r8
 2c4:	91 83       	std	Z+1, r25	; 0x01
 2c6:	80 83       	st	Z, r24
 2c8:	00 00       	nop
 2ca:	0f 90       	pop	r0
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	0f 91       	pop	r16
 2d4:	ff 90       	pop	r15
 2d6:	ef 90       	pop	r14
 2d8:	df 90       	pop	r13
 2da:	cf 90       	pop	r12
 2dc:	bf 90       	pop	r11
 2de:	af 90       	pop	r10
 2e0:	9f 90       	pop	r9
 2e2:	8f 90       	pop	r8
 2e4:	08 95       	ret

000002e6 <wait_1ms>:
 *
 * @param [in] uiFactor: 1ms multiplier
 * @return no return value
 *****************************************************************************/
void wait_1ms(uint16_t uiFactor)
{
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	00 d0       	rcall	.+0      	; 0x2ec <wait_1ms+0x6>
 2ec:	00 d0       	rcall	.+0      	; 0x2ee <wait_1ms+0x8>
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
 2f2:	9c 83       	std	Y+4, r25	; 0x04
 2f4:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t i;
	TCCR0A = (1<<WGM01);	// mode: CTC
 2f6:	84 e4       	ldi	r24, 0x44	; 68
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	22 e0       	ldi	r18, 0x02	; 2
 2fc:	fc 01       	movw	r30, r24
 2fe:	20 83       	st	Z, r18
	TCCR0B = 0;				// mode: CTC
 300:	85 e4       	ldi	r24, 0x45	; 69
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	fc 01       	movw	r30, r24
 306:	10 82       	st	Z, r1
	TIFR0 =  (1<<OCF0A);	// only OCFA flag needs to be cleared
 308:	85 e3       	ldi	r24, 0x35	; 53
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	22 e0       	ldi	r18, 0x02	; 2
 30e:	fc 01       	movw	r30, r24
 310:	20 83       	st	Z, r18
	TIMSK0 = 0;				// no interrupts
 312:	8e e6       	ldi	r24, 0x6E	; 110
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	fc 01       	movw	r30, r24
 318:	10 82       	st	Z, r1
	TCNT0 = 0;
 31a:	86 e4       	ldi	r24, 0x46	; 70
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	fc 01       	movw	r30, r24
 320:	10 82       	st	Z, r1
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
 322:	87 e4       	ldi	r24, 0x47	; 71
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	2d e4       	ldi	r18, 0x4D	; 77
 328:	fc 01       	movw	r30, r24
 32a:	20 83       	st	Z, r18
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
 32c:	85 e4       	ldi	r24, 0x45	; 69
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	25 e4       	ldi	r18, 0x45	; 69
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	f9 01       	movw	r30, r18
 336:	20 81       	ld	r18, Z
 338:	24 60       	ori	r18, 0x04	; 4
 33a:	fc 01       	movw	r30, r24
 33c:	20 83       	st	Z, r18
	
	for(i=0;i<uiFactor;i++)
 33e:	1a 82       	std	Y+2, r1	; 0x02
 340:	19 82       	std	Y+1, r1	; 0x01
 342:	15 c0       	rjmp	.+42     	; 0x36e <wait_1ms+0x88>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
 344:	00 00       	nop
 346:	85 e3       	ldi	r24, 0x35	; 53
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	fc 01       	movw	r30, r24
 34c:	80 81       	ld	r24, Z
 34e:	88 2f       	mov	r24, r24
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	82 70       	andi	r24, 0x02	; 2
 354:	99 27       	eor	r25, r25
 356:	89 2b       	or	r24, r25
 358:	b1 f3       	breq	.-20     	; 0x346 <wait_1ms+0x60>
		TIFR0 =  (1<<OCF0A);		// clear flag
 35a:	85 e3       	ldi	r24, 0x35	; 53
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	22 e0       	ldi	r18, 0x02	; 2
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18
	TCNT0 = 0;
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
	
	for(i=0;i<uiFactor;i++)
 364:	89 81       	ldd	r24, Y+1	; 0x01
 366:	9a 81       	ldd	r25, Y+2	; 0x02
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	9a 83       	std	Y+2, r25	; 0x02
 36c:	89 83       	std	Y+1, r24	; 0x01
 36e:	29 81       	ldd	r18, Y+1	; 0x01
 370:	3a 81       	ldd	r19, Y+2	; 0x02
 372:	8b 81       	ldd	r24, Y+3	; 0x03
 374:	9c 81       	ldd	r25, Y+4	; 0x04
 376:	28 17       	cp	r18, r24
 378:	39 07       	cpc	r19, r25
 37a:	20 f3       	brcs	.-56     	; 0x344 <wait_1ms+0x5e>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
		TIFR0 =  (1<<OCF0A);		// clear flag
	}
	TCCR0B &= ~(0x07);	// set prescaler to 0 (stop timer)
 37c:	85 e4       	ldi	r24, 0x45	; 69
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	25 e4       	ldi	r18, 0x45	; 69
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	f9 01       	movw	r30, r18
 386:	20 81       	ld	r18, Z
 388:	28 7f       	andi	r18, 0xF8	; 248
 38a:	fc 01       	movw	r30, r24
 38c:	20 83       	st	Z, r18
}
 38e:	00 00       	nop
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	0f 90       	pop	r0
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <Map>:
 * @param [in] OutMin: minimal value of output range
 * @param [in] OutMax: maximal value of output range
 * @return data in new number range
 *****************************************************************************/
int32_t Map(int32_t lData, int32_t InMin, int32_t InMax, int32_t OutMin, int32_t OutMax)
{
 39e:	af 92       	push	r10
 3a0:	bf 92       	push	r11
 3a2:	cf 92       	push	r12
 3a4:	df 92       	push	r13
 3a6:	ef 92       	push	r14
 3a8:	ff 92       	push	r15
 3aa:	0f 93       	push	r16
 3ac:	1f 93       	push	r17
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62
 3b6:	60 97       	sbiw	r28, 0x10	; 16
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	f8 94       	cli
 3bc:	de bf       	out	0x3e, r29	; 62
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	cd bf       	out	0x3d, r28	; 61
 3c2:	69 83       	std	Y+1, r22	; 0x01
 3c4:	7a 83       	std	Y+2, r23	; 0x02
 3c6:	8b 83       	std	Y+3, r24	; 0x03
 3c8:	9c 83       	std	Y+4, r25	; 0x04
 3ca:	2d 83       	std	Y+5, r18	; 0x05
 3cc:	3e 83       	std	Y+6, r19	; 0x06
 3ce:	4f 83       	std	Y+7, r20	; 0x07
 3d0:	58 87       	std	Y+8, r21	; 0x08
 3d2:	e9 86       	std	Y+9, r14	; 0x09
 3d4:	fa 86       	std	Y+10, r15	; 0x0a
 3d6:	0b 87       	std	Y+11, r16	; 0x0b
 3d8:	1c 87       	std	Y+12, r17	; 0x0c
 3da:	ad 86       	std	Y+13, r10	; 0x0d
 3dc:	be 86       	std	Y+14, r11	; 0x0e
 3de:	cf 86       	std	Y+15, r12	; 0x0f
 3e0:	d8 8a       	std	Y+16, r13	; 0x10
	return((lData-InMin)*(OutMax-OutMin)/(InMax-InMin)+OutMin);
 3e2:	29 81       	ldd	r18, Y+1	; 0x01
 3e4:	3a 81       	ldd	r19, Y+2	; 0x02
 3e6:	4b 81       	ldd	r20, Y+3	; 0x03
 3e8:	5c 81       	ldd	r21, Y+4	; 0x04
 3ea:	8d 81       	ldd	r24, Y+5	; 0x05
 3ec:	9e 81       	ldd	r25, Y+6	; 0x06
 3ee:	af 81       	ldd	r26, Y+7	; 0x07
 3f0:	b8 85       	ldd	r27, Y+8	; 0x08
 3f2:	79 01       	movw	r14, r18
 3f4:	8a 01       	movw	r16, r20
 3f6:	e8 1a       	sub	r14, r24
 3f8:	f9 0a       	sbc	r15, r25
 3fa:	0a 0b       	sbc	r16, r26
 3fc:	1b 0b       	sbc	r17, r27
 3fe:	2d 8d       	ldd	r18, Y+29	; 0x1d
 400:	3e 8d       	ldd	r19, Y+30	; 0x1e
 402:	4f 8d       	ldd	r20, Y+31	; 0x1f
 404:	58 a1       	ldd	r21, Y+32	; 0x20
 406:	8d 85       	ldd	r24, Y+13	; 0x0d
 408:	9e 85       	ldd	r25, Y+14	; 0x0e
 40a:	af 85       	ldd	r26, Y+15	; 0x0f
 40c:	b8 89       	ldd	r27, Y+16	; 0x10
 40e:	59 01       	movw	r10, r18
 410:	6a 01       	movw	r12, r20
 412:	a8 1a       	sub	r10, r24
 414:	b9 0a       	sbc	r11, r25
 416:	ca 0a       	sbc	r12, r26
 418:	db 0a       	sbc	r13, r27
 41a:	d6 01       	movw	r26, r12
 41c:	c5 01       	movw	r24, r10
 41e:	a8 01       	movw	r20, r16
 420:	97 01       	movw	r18, r14
 422:	bc 01       	movw	r22, r24
 424:	cd 01       	movw	r24, r26
 426:	0e 94 46 02 	call	0x48c	; 0x48c <__mulsi3>
 42a:	7b 01       	movw	r14, r22
 42c:	8c 01       	movw	r16, r24
 42e:	29 85       	ldd	r18, Y+9	; 0x09
 430:	3a 85       	ldd	r19, Y+10	; 0x0a
 432:	4b 85       	ldd	r20, Y+11	; 0x0b
 434:	5c 85       	ldd	r21, Y+12	; 0x0c
 436:	8d 81       	ldd	r24, Y+5	; 0x05
 438:	9e 81       	ldd	r25, Y+6	; 0x06
 43a:	af 81       	ldd	r26, Y+7	; 0x07
 43c:	b8 85       	ldd	r27, Y+8	; 0x08
 43e:	28 1b       	sub	r18, r24
 440:	39 0b       	sbc	r19, r25
 442:	4a 0b       	sbc	r20, r26
 444:	5b 0b       	sbc	r21, r27
 446:	c8 01       	movw	r24, r16
 448:	b7 01       	movw	r22, r14
 44a:	0e 94 56 02 	call	0x4ac	; 0x4ac <__divmodsi4>
 44e:	da 01       	movw	r26, r20
 450:	c9 01       	movw	r24, r18
 452:	9c 01       	movw	r18, r24
 454:	ad 01       	movw	r20, r26
 456:	8d 85       	ldd	r24, Y+13	; 0x0d
 458:	9e 85       	ldd	r25, Y+14	; 0x0e
 45a:	af 85       	ldd	r26, Y+15	; 0x0f
 45c:	b8 89       	ldd	r27, Y+16	; 0x10
 45e:	82 0f       	add	r24, r18
 460:	93 1f       	adc	r25, r19
 462:	a4 1f       	adc	r26, r20
 464:	b5 1f       	adc	r27, r21
}
 466:	bc 01       	movw	r22, r24
 468:	cd 01       	movw	r24, r26
 46a:	60 96       	adiw	r28, 0x10	; 16
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	1f 91       	pop	r17
 47c:	0f 91       	pop	r16
 47e:	ff 90       	pop	r15
 480:	ef 90       	pop	r14
 482:	df 90       	pop	r13
 484:	cf 90       	pop	r12
 486:	bf 90       	pop	r11
 488:	af 90       	pop	r10
 48a:	08 95       	ret

0000048c <__mulsi3>:
 48c:	db 01       	movw	r26, r22
 48e:	8f 93       	push	r24
 490:	9f 93       	push	r25
 492:	0e 94 75 02 	call	0x4ea	; 0x4ea <__muluhisi3>
 496:	bf 91       	pop	r27
 498:	af 91       	pop	r26
 49a:	a2 9f       	mul	r26, r18
 49c:	80 0d       	add	r24, r0
 49e:	91 1d       	adc	r25, r1
 4a0:	a3 9f       	mul	r26, r19
 4a2:	90 0d       	add	r25, r0
 4a4:	b2 9f       	mul	r27, r18
 4a6:	90 0d       	add	r25, r0
 4a8:	11 24       	eor	r1, r1
 4aa:	08 95       	ret

000004ac <__divmodsi4>:
 4ac:	05 2e       	mov	r0, r21
 4ae:	97 fb       	bst	r25, 7
 4b0:	1e f4       	brtc	.+6      	; 0x4b8 <__divmodsi4+0xc>
 4b2:	00 94       	com	r0
 4b4:	0e 94 6d 02 	call	0x4da	; 0x4da <__negsi2>
 4b8:	57 fd       	sbrc	r21, 7
 4ba:	07 d0       	rcall	.+14     	; 0x4ca <__divmodsi4_neg2>
 4bc:	0e 94 80 02 	call	0x500	; 0x500 <__udivmodsi4>
 4c0:	07 fc       	sbrc	r0, 7
 4c2:	03 d0       	rcall	.+6      	; 0x4ca <__divmodsi4_neg2>
 4c4:	4e f4       	brtc	.+18     	; 0x4d8 <__divmodsi4_exit>
 4c6:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__negsi2>

000004ca <__divmodsi4_neg2>:
 4ca:	50 95       	com	r21
 4cc:	40 95       	com	r20
 4ce:	30 95       	com	r19
 4d0:	21 95       	neg	r18
 4d2:	3f 4f       	sbci	r19, 0xFF	; 255
 4d4:	4f 4f       	sbci	r20, 0xFF	; 255
 4d6:	5f 4f       	sbci	r21, 0xFF	; 255

000004d8 <__divmodsi4_exit>:
 4d8:	08 95       	ret

000004da <__negsi2>:
 4da:	90 95       	com	r25
 4dc:	80 95       	com	r24
 4de:	70 95       	com	r23
 4e0:	61 95       	neg	r22
 4e2:	7f 4f       	sbci	r23, 0xFF	; 255
 4e4:	8f 4f       	sbci	r24, 0xFF	; 255
 4e6:	9f 4f       	sbci	r25, 0xFF	; 255
 4e8:	08 95       	ret

000004ea <__muluhisi3>:
 4ea:	0e 94 a2 02 	call	0x544	; 0x544 <__umulhisi3>
 4ee:	a5 9f       	mul	r26, r21
 4f0:	90 0d       	add	r25, r0
 4f2:	b4 9f       	mul	r27, r20
 4f4:	90 0d       	add	r25, r0
 4f6:	a4 9f       	mul	r26, r20
 4f8:	80 0d       	add	r24, r0
 4fa:	91 1d       	adc	r25, r1
 4fc:	11 24       	eor	r1, r1
 4fe:	08 95       	ret

00000500 <__udivmodsi4>:
 500:	a1 e2       	ldi	r26, 0x21	; 33
 502:	1a 2e       	mov	r1, r26
 504:	aa 1b       	sub	r26, r26
 506:	bb 1b       	sub	r27, r27
 508:	fd 01       	movw	r30, r26
 50a:	0d c0       	rjmp	.+26     	; 0x526 <__udivmodsi4_ep>

0000050c <__udivmodsi4_loop>:
 50c:	aa 1f       	adc	r26, r26
 50e:	bb 1f       	adc	r27, r27
 510:	ee 1f       	adc	r30, r30
 512:	ff 1f       	adc	r31, r31
 514:	a2 17       	cp	r26, r18
 516:	b3 07       	cpc	r27, r19
 518:	e4 07       	cpc	r30, r20
 51a:	f5 07       	cpc	r31, r21
 51c:	20 f0       	brcs	.+8      	; 0x526 <__udivmodsi4_ep>
 51e:	a2 1b       	sub	r26, r18
 520:	b3 0b       	sbc	r27, r19
 522:	e4 0b       	sbc	r30, r20
 524:	f5 0b       	sbc	r31, r21

00000526 <__udivmodsi4_ep>:
 526:	66 1f       	adc	r22, r22
 528:	77 1f       	adc	r23, r23
 52a:	88 1f       	adc	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	1a 94       	dec	r1
 530:	69 f7       	brne	.-38     	; 0x50c <__udivmodsi4_loop>
 532:	60 95       	com	r22
 534:	70 95       	com	r23
 536:	80 95       	com	r24
 538:	90 95       	com	r25
 53a:	9b 01       	movw	r18, r22
 53c:	ac 01       	movw	r20, r24
 53e:	bd 01       	movw	r22, r26
 540:	cf 01       	movw	r24, r30
 542:	08 95       	ret

00000544 <__umulhisi3>:
 544:	a2 9f       	mul	r26, r18
 546:	b0 01       	movw	r22, r0
 548:	b3 9f       	mul	r27, r19
 54a:	c0 01       	movw	r24, r0
 54c:	a3 9f       	mul	r26, r19
 54e:	70 0d       	add	r23, r0
 550:	81 1d       	adc	r24, r1
 552:	11 24       	eor	r1, r1
 554:	91 1d       	adc	r25, r1
 556:	b2 9f       	mul	r27, r18
 558:	70 0d       	add	r23, r0
 55a:	81 1d       	adc	r24, r1
 55c:	11 24       	eor	r1, r1
 55e:	91 1d       	adc	r25, r1
 560:	08 95       	ret

00000562 <_exit>:
 562:	f8 94       	cli

00000564 <__stop_program>:
 564:	ff cf       	rjmp	.-2      	; 0x564 <__stop_program>
