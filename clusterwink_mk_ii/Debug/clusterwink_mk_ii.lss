
clusterwink_mk_ii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000009ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000097a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  00800100  00800100  000009ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d17  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000977  00000000  00000000  00001867  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000083f  00000000  00000000  000021de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d4  00000000  00000000  00002a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000561  00000000  00000000  00002df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c7  00000000  00000000  00003355  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003b1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_5>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_19>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 34       	cpi	r26, 0x42	; 66
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 27 01 	call	0x24e	; 0x24e <main>
  9c:	0c 94 bb 04 	jmp	0x976	; 0x976 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <__vector_19>:
static RingBuff_t RINGBUFFER;
static SpiBuf_t SPIBUFFER;


ISR(SPI_STC_vect)
{
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	1f 92       	push	r1
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8spiData = SPDR0;
  c4:	8e e4       	ldi	r24, 0x4E	; 78
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	fc 01       	movw	r30, r24
  ca:	80 81       	ld	r24, Z
  cc:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0;
  ce:	8e e4       	ldi	r24, 0x4E	; 78
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	fc 01       	movw	r30, r24
  d4:	10 82       	st	Z, r1

	switch(SPIBUFFER.spiState)
  d6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <_edata+0x41>
  da:	88 2f       	mov	r24, r24
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 05       	cpc	r25, r1
  e2:	f1 f0       	breq	.+60     	; 0x120 <__vector_19+0x7c>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	91 05       	cpc	r25, r1
  e8:	a4 f5       	brge	.+104    	; 0x152 <__vector_19+0xae>
  ea:	89 2b       	or	r24, r25
  ec:	99 f5       	brne	.+102    	; 0x154 <__vector_19+0xb0>
	{
		case READY:
			if(u8spiData>=3)
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	83 30       	cpi	r24, 0x03	; 3
  f2:	90 f0       	brcs	.+36     	; 0x118 <__vector_19+0x74>
			{
				SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
  f4:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
  f8:	88 2f       	mov	r24, r24
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	80 50       	subi	r24, 0x00	; 0
  fe:	9f 4f       	sbci	r25, 0xFF	; 255
 100:	29 81       	ldd	r18, Y+1	; 0x01
 102:	fc 01       	movw	r30, r24
 104:	20 83       	st	Z, r18
				SPIBUFFER.u8Count++;
 106:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 10a:	8f 5f       	subi	r24, 0xFF	; 255
 10c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <_edata+0x40>
				SPIBUFFER.spiState = WRITE;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_edata+0x41>
			}
			else
			{
				SPIBUFFER.spiState = READ;
			}
		break;
 116:	1e c0       	rjmp	.+60     	; 0x154 <__vector_19+0xb0>
				SPIBUFFER.u8Count++;
				SPIBUFFER.spiState = WRITE;
			}
			else
			{
				SPIBUFFER.spiState = READ;
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_edata+0x41>
			}
		break;
 11e:	1a c0       	rjmp	.+52     	; 0x154 <__vector_19+0xb0>

		case WRITE:
			SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
 120:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 124:	88 2f       	mov	r24, r24
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	80 50       	subi	r24, 0x00	; 0
 12a:	9f 4f       	sbci	r25, 0xFF	; 255
 12c:	29 81       	ldd	r18, Y+1	; 0x01
 12e:	fc 01       	movw	r30, r24
 130:	20 83       	st	Z, r18
			SPIBUFFER.u8Count++;
 132:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 136:	8f 5f       	subi	r24, 0xFF	; 255
 138:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <_edata+0x40>
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
 13c:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <_edata+0x40>
 140:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 144:	98 17       	cp	r25, r24
 146:	20 f0       	brcs	.+8      	; 0x150 <__vector_19+0xac>
			{
				SPIBUFFER.spiState = IDLE;
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_edata+0x41>
			}
		break;
 14e:	02 c0       	rjmp	.+4      	; 0x154 <__vector_19+0xb0>
 150:	01 c0       	rjmp	.+2      	; 0x154 <__vector_19+0xb0>

		case READ:

		break;
 152:	00 00       	nop
		case IDLE:

		break;
	}

}
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	2f 91       	pop	r18
 164:	0f 90       	pop	r0
 166:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <__vector_5>:

ISR(PCINT1_vect)
{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	2f 93       	push	r18
 17e:	3f 93       	push	r19
 180:	4f 93       	push	r20
 182:	5f 93       	push	r21
 184:	6f 93       	push	r22
 186:	7f 93       	push	r23
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	af 93       	push	r26
 18e:	bf 93       	push	r27
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8CRC;
	
	if(PIN_SPI & (1<<SPI_SS)) // SS HIGH
 19c:	83 e2       	ldi	r24, 0x23	; 35
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	fc 01       	movw	r30, r24
 1a2:	80 81       	ld	r24, Z
 1a4:	88 2f       	mov	r24, r24
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	80 71       	andi	r24, 0x10	; 16
 1aa:	99 27       	eor	r25, r25
 1ac:	89 2b       	or	r24, r25
 1ae:	b9 f1       	breq	.+110    	; 0x21e <__vector_5+0xae>
	{
		if(SPIBUFFER.u8Count == SPIBUFFER.au8Buffer[0]) // correct amount of bytes in buffer
 1b0:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <_edata+0x40>
 1b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1b8:	98 17       	cp	r25, r24
 1ba:	a9 f5       	brne	.+106    	; 0x226 <__vector_5+0xb6>
		{
			if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
 1bc:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 1c0:	68 2f       	mov	r22, r24
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0e 94 0b 04 	call	0x816	; 0x816 <CRC8>
 1ca:	88 23       	and	r24, r24
 1cc:	61 f5       	brne	.+88     	; 0x226 <__vector_5+0xb6>
			{
				switch(SPIBUFFER.au8Buffer[1]) // command
 1ce:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
 1d2:	88 2f       	mov	r24, r24
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	82 30       	cpi	r24, 0x02	; 2
 1d8:	91 05       	cpc	r25, r1
 1da:	71 f0       	breq	.+28     	; 0x1f8 <__vector_5+0x88>
 1dc:	83 30       	cpi	r24, 0x03	; 3
 1de:	91 05       	cpc	r25, r1
 1e0:	99 f0       	breq	.+38     	; 0x208 <__vector_5+0x98>
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <__vector_5+0x78>
 1e6:	1f c0       	rjmp	.+62     	; 0x226 <__vector_5+0xb6>
				{
					case 0x01:
					if(SPIBUFFER.u8Count == 3)
 1e8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 1ec:	83 30       	cpi	r24, 0x03	; 3
 1ee:	19 f4       	brne	.+6      	; 0x1f6 <__vector_5+0x86>
					{
						enablePLED();
 1f0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <enablePLED>
					}
					break;
 1f4:	13 c0       	rjmp	.+38     	; 0x21c <__vector_5+0xac>
 1f6:	12 c0       	rjmp	.+36     	; 0x21c <__vector_5+0xac>

					case 0x02:
					if(SPIBUFFER.u8Count == 3)
 1f8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 1fc:	83 30       	cpi	r24, 0x03	; 3
 1fe:	19 f4       	brne	.+6      	; 0x206 <__vector_5+0x96>
					{
						disablePLED();
 200:	0e 94 70 02 	call	0x4e0	; 0x4e0 <disablePLED>
					}
					break;
 204:	0b c0       	rjmp	.+22     	; 0x21c <__vector_5+0xac>
 206:	0a c0       	rjmp	.+20     	; 0x21c <__vector_5+0xac>

					case 0x03:
					if(SPIBUFFER.u8Count == 4)
 208:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 20c:	84 30       	cpi	r24, 0x04	; 4
 20e:	29 f4       	brne	.+10     	; 0x21a <__vector_5+0xaa>
					{
						setDuty(SPIBUFFER.au8Buffer[2]);
 210:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 214:	0e 94 ee 02 	call	0x5dc	; 0x5dc <setDuty>
					}
					break;
 218:	00 c0       	rjmp	.+0      	; 0x21a <__vector_5+0xaa>
 21a:	00 00       	nop
 21c:	04 c0       	rjmp	.+8      	; 0x226 <__vector_5+0xb6>
			
		}
	}
	else // SS LOW
	{
		SPIBUFFER.u8Count = 0;
 21e:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <_edata+0x40>
		SPIBUFFER.spiState = READY;
 222:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <_edata+0x41>
	}
	
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	bf 91       	pop	r27
 230:	af 91       	pop	r26
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	7f 91       	pop	r23
 238:	6f 91       	pop	r22
 23a:	5f 91       	pop	r21
 23c:	4f 91       	pop	r20
 23e:	3f 91       	pop	r19
 240:	2f 91       	pop	r18
 242:	0f 90       	pop	r0
 244:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <main>:



int main(void)
{
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	00 d0       	rcall	.+0      	; 0x254 <main+0x6>
 254:	1f 92       	push	r1
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
    uint8_t u8Duty = 0;
 25a:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t i;
	
	portInit();
 25c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <portInit>
	initPWM(1);
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 80 02 	call	0x500	; 0x500 <initPWM>
	startPWM();
 266:	0e 94 de 02 	call	0x5bc	; 0x5bc <startPWM>
	spiInitBuffer(&SPIBUFFER);
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <spiInitBuffer>
	spiSlaveInit();
 272:	0e 94 83 01 	call	0x306	; 0x306 <spiSlaveInit>
	spiPcInt();
 276:	0e 94 b5 01 	call	0x36a	; 0x36a <spiPcInt>

	wait_1ms(100);
 27a:	84 e6       	ldi	r24, 0x64	; 100
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 39 03 	call	0x672	; 0x672 <wait_1ms>

	//enableAudio();

	PORT_VOL |= (1<<VOL_UD);
 282:	8b e2       	ldi	r24, 0x2B	; 43
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	2b e2       	ldi	r18, 0x2B	; 43
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	f9 01       	movw	r30, r18
 28c:	20 81       	ld	r18, Z
 28e:	20 64       	ori	r18, 0x40	; 64
 290:	fc 01       	movw	r30, r24
 292:	20 83       	st	Z, r18
	for(i=0;i<32;i++)
 294:	1a 82       	std	Y+2, r1	; 0x02
 296:	19 82       	std	Y+1, r1	; 0x01
 298:	17 c0       	rjmp	.+46     	; 0x2c8 <main+0x7a>
	{
		DDR_VOL |= (1<<VOL_UD);
 29a:	8a e2       	ldi	r24, 0x2A	; 42
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	2a e2       	ldi	r18, 0x2A	; 42
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	f9 01       	movw	r30, r18
 2a4:	20 81       	ld	r18, Z
 2a6:	20 64       	ori	r18, 0x40	; 64
 2a8:	fc 01       	movw	r30, r24
 2aa:	20 83       	st	Z, r18
		DDR_VOL &= ~(1<<VOL_UD);
 2ac:	8a e2       	ldi	r24, 0x2A	; 42
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	2a e2       	ldi	r18, 0x2A	; 42
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	f9 01       	movw	r30, r18
 2b6:	20 81       	ld	r18, Z
 2b8:	2f 7b       	andi	r18, 0xBF	; 191
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18
	wait_1ms(100);

	//enableAudio();

	PORT_VOL |= (1<<VOL_UD);
	for(i=0;i<32;i++)
 2be:	89 81       	ldd	r24, Y+1	; 0x01
 2c0:	9a 81       	ldd	r25, Y+2	; 0x02
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	9a 83       	std	Y+2, r25	; 0x02
 2c6:	89 83       	std	Y+1, r24	; 0x01
 2c8:	89 81       	ldd	r24, Y+1	; 0x01
 2ca:	9a 81       	ldd	r25, Y+2	; 0x02
 2cc:	80 97       	sbiw	r24, 0x20	; 32
 2ce:	28 f3       	brcs	.-54     	; 0x29a <main+0x4c>
		DDR_VOL &= ~(1<<VOL_UD);
	}

	
	
	sei();
 2d0:	78 94       	sei
	
	
    while (1) 
    {

    }
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <main+0x84>

000002d4 <spiInitBuffer>:
#include <avr/io.h>
#include "spi.h"


void spiInitBuffer(SpiBuf_t* Buffer)
{
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	00 d0       	rcall	.+0      	; 0x2da <spiInitBuffer+0x6>
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
 2de:	9a 83       	std	Y+2, r25	; 0x02
 2e0:	89 83       	std	Y+1, r24	; 0x01
	Buffer->u8Count = 0;
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	9a 81       	ldd	r25, Y+2	; 0x02
 2e6:	80 5c       	subi	r24, 0xC0	; 192
 2e8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ea:	fc 01       	movw	r30, r24
 2ec:	10 82       	st	Z, r1
	Buffer->spiState = IDLE;
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	9a 81       	ldd	r25, Y+2	; 0x02
 2f2:	8f 5b       	subi	r24, 0xBF	; 191
 2f4:	9f 4f       	sbci	r25, 0xFF	; 255
 2f6:	23 e0       	ldi	r18, 0x03	; 3
 2f8:	fc 01       	movw	r30, r24
 2fa:	20 83       	st	Z, r18
}
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <spiSlaveInit>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiSlaveInit(void)
{
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	1f 92       	push	r1
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t ucTemp;
	SPSR0 = 0;
 310:	8d e4       	ldi	r24, 0x4D	; 77
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	fc 01       	movw	r30, r24
 316:	10 82       	st	Z, r1
	SPCR0 = (1<<SPIE0);
 318:	8c e4       	ldi	r24, 0x4C	; 76
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	20 e8       	ldi	r18, 0x80	; 128
 31e:	fc 01       	movw	r30, r24
 320:	20 83       	st	Z, r18
	
	ucTemp = SPSR0;					
 322:	8d e4       	ldi	r24, 0x4D	; 77
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	fc 01       	movw	r30, r24
 328:	80 81       	ld	r24, Z
 32a:	89 83       	std	Y+1, r24	; 0x01
	ucTemp = SPDR0;
 32c:	8e e4       	ldi	r24, 0x4E	; 78
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	fc 01       	movw	r30, r24
 332:	80 81       	ld	r24, Z
 334:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0;
 336:	8e e4       	ldi	r24, 0x4E	; 78
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	fc 01       	movw	r30, r24
 33c:	10 82       	st	Z, r1
	
	DDRB |= (1<<PINB6);				// MISO needs to be an output
 33e:	84 e2       	ldi	r24, 0x24	; 36
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	24 e2       	ldi	r18, 0x24	; 36
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	f9 01       	movw	r30, r18
 348:	20 81       	ld	r18, Z
 34a:	20 64       	ori	r18, 0x40	; 64
 34c:	fc 01       	movw	r30, r24
 34e:	20 83       	st	Z, r18
	
	SPCR0 |= (1<<SPE0);
 350:	8c e4       	ldi	r24, 0x4C	; 76
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	2c e4       	ldi	r18, 0x4C	; 76
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	f9 01       	movw	r30, r18
 35a:	20 81       	ld	r18, Z
 35c:	20 64       	ori	r18, 0x40	; 64
 35e:	fc 01       	movw	r30, r24
 360:	20 83       	st	Z, r18
}
 362:	0f 90       	pop	r0
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <spiPcInt>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiPcInt(void)
{
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
	PCICR |= (1<<PCIE1);
 372:	88 e6       	ldi	r24, 0x68	; 104
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	28 e6       	ldi	r18, 0x68	; 104
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	f9 01       	movw	r30, r18
 37c:	20 81       	ld	r18, Z
 37e:	22 60       	ori	r18, 0x02	; 2
 380:	fc 01       	movw	r30, r24
 382:	20 83       	st	Z, r18
	PCIFR = (1<<PCIF1);
 384:	8b e3       	ldi	r24, 0x3B	; 59
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	22 e0       	ldi	r18, 0x02	; 2
 38a:	fc 01       	movw	r30, r24
 38c:	20 83       	st	Z, r18
	PCMSK1 |= (1<<PCINT12);
 38e:	8c e6       	ldi	r24, 0x6C	; 108
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	2c e6       	ldi	r18, 0x6C	; 108
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	f9 01       	movw	r30, r18
 398:	20 81       	ld	r18, Z
 39a:	20 61       	ori	r18, 0x10	; 16
 39c:	fc 01       	movw	r30, r24
 39e:	20 83       	st	Z, r18
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	08 95       	ret

000003a6 <portInit>:
 * @return 8bit analog value
 *****************************************************************************/
uint8_t adcGetValue(void)
{
	return(ADCH);
}
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	cd b7       	in	r28, 0x3d	; 61
 3ac:	de b7       	in	r29, 0x3e	; 62
 3ae:	8a e2       	ldi	r24, 0x2A	; 42
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	2a e2       	ldi	r18, 0x2A	; 42
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	f9 01       	movw	r30, r18
 3b8:	20 81       	ld	r18, Z
 3ba:	20 63       	ori	r18, 0x30	; 48
 3bc:	fc 01       	movw	r30, r24
 3be:	20 83       	st	Z, r18
 3c0:	8b e2       	ldi	r24, 0x2B	; 43
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	2b e2       	ldi	r18, 0x2B	; 43
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	f9 01       	movw	r30, r18
 3ca:	20 81       	ld	r18, Z
 3cc:	20 62       	ori	r18, 0x20	; 32
 3ce:	fc 01       	movw	r30, r24
 3d0:	20 83       	st	Z, r18
 3d2:	8b e2       	ldi	r24, 0x2B	; 43
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	2b e2       	ldi	r18, 0x2B	; 43
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	f9 01       	movw	r30, r18
 3dc:	20 81       	ld	r18, Z
 3de:	2f 7e       	andi	r18, 0xEF	; 239
 3e0:	fc 01       	movw	r30, r24
 3e2:	20 83       	st	Z, r18
 3e4:	8a e2       	ldi	r24, 0x2A	; 42
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	2a e2       	ldi	r18, 0x2A	; 42
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	f9 01       	movw	r30, r18
 3ee:	20 81       	ld	r18, Z
 3f0:	20 68       	ori	r18, 0x80	; 128
 3f2:	fc 01       	movw	r30, r24
 3f4:	20 83       	st	Z, r18
 3f6:	8b e2       	ldi	r24, 0x2B	; 43
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	2b e2       	ldi	r18, 0x2B	; 43
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	f9 01       	movw	r30, r18
 400:	20 81       	ld	r18, Z
 402:	20 68       	ori	r18, 0x80	; 128
 404:	fc 01       	movw	r30, r24
 406:	20 83       	st	Z, r18
 408:	8a e2       	ldi	r24, 0x2A	; 42
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	2a e2       	ldi	r18, 0x2A	; 42
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	f9 01       	movw	r30, r18
 412:	20 81       	ld	r18, Z
 414:	2f 7b       	andi	r18, 0xBF	; 191
 416:	fc 01       	movw	r30, r24
 418:	20 83       	st	Z, r18
 41a:	8a e2       	ldi	r24, 0x2A	; 42
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	2a e2       	ldi	r18, 0x2A	; 42
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	f9 01       	movw	r30, r18
 424:	20 81       	ld	r18, Z
 426:	2c 7f       	andi	r18, 0xFC	; 252
 428:	fc 01       	movw	r30, r24
 42a:	20 83       	st	Z, r18
 42c:	8b e2       	ldi	r24, 0x2B	; 43
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	2b e2       	ldi	r18, 0x2B	; 43
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	f9 01       	movw	r30, r18
 436:	20 81       	ld	r18, Z
 438:	21 60       	ori	r18, 0x01	; 1
 43a:	fc 01       	movw	r30, r24
 43c:	20 83       	st	Z, r18
 43e:	81 e2       	ldi	r24, 0x21	; 33
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	21 e2       	ldi	r18, 0x21	; 33
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	f9 01       	movw	r30, r18
 448:	20 81       	ld	r18, Z
 44a:	2e 7f       	andi	r18, 0xFE	; 254
 44c:	fc 01       	movw	r30, r24
 44e:	20 83       	st	Z, r18
 450:	82 e2       	ldi	r24, 0x22	; 34
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	22 e2       	ldi	r18, 0x22	; 34
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	f9 01       	movw	r30, r18
 45a:	20 81       	ld	r18, Z
 45c:	2e 7f       	andi	r18, 0xFE	; 254
 45e:	fc 01       	movw	r30, r24
 460:	20 83       	st	Z, r18
 462:	8e e7       	ldi	r24, 0x7E	; 126
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	2e e7       	ldi	r18, 0x7E	; 126
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	f9 01       	movw	r30, r18
 46c:	20 81       	ld	r18, Z
 46e:	21 60       	ori	r18, 0x01	; 1
 470:	fc 01       	movw	r30, r24
 472:	20 83       	st	Z, r18
 474:	81 e2       	ldi	r24, 0x21	; 33
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	21 e2       	ldi	r18, 0x21	; 33
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	f9 01       	movw	r30, r18
 47e:	20 81       	ld	r18, Z
 480:	21 7f       	andi	r18, 0xF1	; 241
 482:	fc 01       	movw	r30, r24
 484:	20 83       	st	Z, r18
 486:	82 e2       	ldi	r24, 0x22	; 34
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	22 e2       	ldi	r18, 0x22	; 34
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	f9 01       	movw	r30, r18
 490:	20 81       	ld	r18, Z
 492:	2e 60       	ori	r18, 0x0E	; 14
 494:	fc 01       	movw	r30, r24
 496:	20 83       	st	Z, r18
 498:	87 e2       	ldi	r24, 0x27	; 39
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	fc 01       	movw	r30, r24
 49e:	80 81       	ld	r24, Z
 4a0:	87 e2       	ldi	r24, 0x27	; 39
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	fc 01       	movw	r30, r24
 4a6:	10 82       	st	Z, r1
 4a8:	88 e2       	ldi	r24, 0x28	; 40
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	fc 01       	movw	r30, r24
 4ae:	80 81       	ld	r24, Z
 4b0:	88 e2       	ldi	r24, 0x28	; 40
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	2f ef       	ldi	r18, 0xFF	; 255
 4b6:	fc 01       	movw	r30, r24
 4b8:	20 83       	st	Z, r18
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	08 95       	ret

000004c0 <enablePLED>:
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	cd b7       	in	r28, 0x3d	; 61
 4c6:	de b7       	in	r29, 0x3e	; 62
 4c8:	8b e2       	ldi	r24, 0x2B	; 43
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	2b e2       	ldi	r18, 0x2B	; 43
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	f9 01       	movw	r30, r18
 4d2:	20 81       	ld	r18, Z
 4d4:	2f 7d       	andi	r18, 0xDF	; 223
 4d6:	fc 01       	movw	r30, r24
 4d8:	20 83       	st	Z, r18
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	08 95       	ret

000004e0 <disablePLED>:
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	cd b7       	in	r28, 0x3d	; 61
 4e6:	de b7       	in	r29, 0x3e	; 62
 4e8:	8b e2       	ldi	r24, 0x2B	; 43
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	2b e2       	ldi	r18, 0x2B	; 43
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	f9 01       	movw	r30, r18
 4f2:	20 81       	ld	r18, Z
 4f4:	20 62       	ori	r18, 0x20	; 32
 4f6:	fc 01       	movw	r30, r24
 4f8:	20 83       	st	Z, r18
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	08 95       	ret

00000500 <initPWM>:
 500:	8f 92       	push	r8
 502:	9f 92       	push	r9
 504:	af 92       	push	r10
 506:	bf 92       	push	r11
 508:	cf 92       	push	r12
 50a:	df 92       	push	r13
 50c:	ef 92       	push	r14
 50e:	ff 92       	push	r15
 510:	0f 93       	push	r16
 512:	1f 93       	push	r17
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
 518:	1f 92       	push	r1
 51a:	cd b7       	in	r28, 0x3d	; 61
 51c:	de b7       	in	r29, 0x3e	; 62
 51e:	89 83       	std	Y+1, r24	; 0x01
 520:	89 81       	ldd	r24, Y+1	; 0x01
 522:	85 36       	cpi	r24, 0x65	; 101
 524:	10 f0       	brcs	.+4      	; 0x52a <initPWM+0x2a>
 526:	84 e6       	ldi	r24, 0x64	; 100
 528:	89 83       	std	Y+1, r24	; 0x01
 52a:	80 e8       	ldi	r24, 0x80	; 128
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	22 e2       	ldi	r18, 0x22	; 34
 530:	fc 01       	movw	r30, r24
 532:	20 83       	st	Z, r18
 534:	81 e8       	ldi	r24, 0x81	; 129
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	28 e0       	ldi	r18, 0x08	; 8
 53a:	fc 01       	movw	r30, r24
 53c:	20 83       	st	Z, r18
 53e:	84 e8       	ldi	r24, 0x84	; 132
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	fc 01       	movw	r30, r24
 544:	11 82       	std	Z+1, r1	; 0x01
 546:	10 82       	st	Z, r1
 548:	0f 2e       	mov	r0, r31
 54a:	fa e8       	ldi	r31, 0x8A	; 138
 54c:	8f 2e       	mov	r8, r31
 54e:	91 2c       	mov	r9, r1
 550:	f0 2d       	mov	r31, r0
 552:	89 81       	ldd	r24, Y+1	; 0x01
 554:	88 2f       	mov	r24, r24
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	a0 e0       	ldi	r26, 0x00	; 0
 55a:	b0 e0       	ldi	r27, 0x00	; 0
 55c:	1f 92       	push	r1
 55e:	1f 92       	push	r1
 560:	21 e0       	ldi	r18, 0x01	; 1
 562:	2f 93       	push	r18
 564:	2f ef       	ldi	r18, 0xFF	; 255
 566:	2f 93       	push	r18
 568:	a1 2c       	mov	r10, r1
 56a:	b1 2c       	mov	r11, r1
 56c:	65 01       	movw	r12, r10
 56e:	14 e6       	ldi	r17, 0x64	; 100
 570:	e1 2e       	mov	r14, r17
 572:	f1 2c       	mov	r15, r1
 574:	00 e0       	ldi	r16, 0x00	; 0
 576:	10 e0       	ldi	r17, 0x00	; 0
 578:	20 e0       	ldi	r18, 0x00	; 0
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	a9 01       	movw	r20, r18
 57e:	bc 01       	movw	r22, r24
 580:	cd 01       	movw	r24, r26
 582:	0e 94 94 03 	call	0x728	; 0x728 <Map>
 586:	0f 90       	pop	r0
 588:	0f 90       	pop	r0
 58a:	0f 90       	pop	r0
 58c:	0f 90       	pop	r0
 58e:	dc 01       	movw	r26, r24
 590:	cb 01       	movw	r24, r22
 592:	f4 01       	movw	r30, r8
 594:	91 83       	std	Z+1, r25	; 0x01
 596:	80 83       	st	Z, r24
 598:	8f e6       	ldi	r24, 0x6F	; 111
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	fc 01       	movw	r30, r24
 59e:	10 82       	st	Z, r1
 5a0:	0f 90       	pop	r0
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	1f 91       	pop	r17
 5a8:	0f 91       	pop	r16
 5aa:	ff 90       	pop	r15
 5ac:	ef 90       	pop	r14
 5ae:	df 90       	pop	r13
 5b0:	cf 90       	pop	r12
 5b2:	bf 90       	pop	r11
 5b4:	af 90       	pop	r10
 5b6:	9f 90       	pop	r9
 5b8:	8f 90       	pop	r8
 5ba:	08 95       	ret

000005bc <startPWM>:
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
 5c4:	81 e8       	ldi	r24, 0x81	; 129
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	21 e8       	ldi	r18, 0x81	; 129
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	f9 01       	movw	r30, r18
 5ce:	20 81       	ld	r18, Z
 5d0:	21 60       	ori	r18, 0x01	; 1
 5d2:	fc 01       	movw	r30, r24
 5d4:	20 83       	st	Z, r18
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	08 95       	ret

000005dc <setDuty>:
 5dc:	8f 92       	push	r8
 5de:	9f 92       	push	r9
 5e0:	af 92       	push	r10
 5e2:	bf 92       	push	r11
 5e4:	cf 92       	push	r12
 5e6:	df 92       	push	r13
 5e8:	ef 92       	push	r14
 5ea:	ff 92       	push	r15
 5ec:	0f 93       	push	r16
 5ee:	1f 93       	push	r17
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
 5f4:	1f 92       	push	r1
 5f6:	cd b7       	in	r28, 0x3d	; 61
 5f8:	de b7       	in	r29, 0x3e	; 62
 5fa:	89 83       	std	Y+1, r24	; 0x01
 5fc:	89 81       	ldd	r24, Y+1	; 0x01
 5fe:	85 36       	cpi	r24, 0x65	; 101
 600:	10 f0       	brcs	.+4      	; 0x606 <setDuty+0x2a>
 602:	84 e6       	ldi	r24, 0x64	; 100
 604:	89 83       	std	Y+1, r24	; 0x01
 606:	0f 2e       	mov	r0, r31
 608:	fa e8       	ldi	r31, 0x8A	; 138
 60a:	8f 2e       	mov	r8, r31
 60c:	91 2c       	mov	r9, r1
 60e:	f0 2d       	mov	r31, r0
 610:	89 81       	ldd	r24, Y+1	; 0x01
 612:	88 2f       	mov	r24, r24
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	a0 e0       	ldi	r26, 0x00	; 0
 618:	b0 e0       	ldi	r27, 0x00	; 0
 61a:	1f 92       	push	r1
 61c:	1f 92       	push	r1
 61e:	21 e0       	ldi	r18, 0x01	; 1
 620:	2f 93       	push	r18
 622:	2f ef       	ldi	r18, 0xFF	; 255
 624:	2f 93       	push	r18
 626:	a1 2c       	mov	r10, r1
 628:	b1 2c       	mov	r11, r1
 62a:	65 01       	movw	r12, r10
 62c:	14 e6       	ldi	r17, 0x64	; 100
 62e:	e1 2e       	mov	r14, r17
 630:	f1 2c       	mov	r15, r1
 632:	00 e0       	ldi	r16, 0x00	; 0
 634:	10 e0       	ldi	r17, 0x00	; 0
 636:	20 e0       	ldi	r18, 0x00	; 0
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	a9 01       	movw	r20, r18
 63c:	bc 01       	movw	r22, r24
 63e:	cd 01       	movw	r24, r26
 640:	0e 94 94 03 	call	0x728	; 0x728 <Map>
 644:	0f 90       	pop	r0
 646:	0f 90       	pop	r0
 648:	0f 90       	pop	r0
 64a:	0f 90       	pop	r0
 64c:	dc 01       	movw	r26, r24
 64e:	cb 01       	movw	r24, r22
 650:	f4 01       	movw	r30, r8
 652:	91 83       	std	Z+1, r25	; 0x01
 654:	80 83       	st	Z, r24
 656:	0f 90       	pop	r0
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	1f 91       	pop	r17
 65e:	0f 91       	pop	r16
 660:	ff 90       	pop	r15
 662:	ef 90       	pop	r14
 664:	df 90       	pop	r13
 666:	cf 90       	pop	r12
 668:	bf 90       	pop	r11
 66a:	af 90       	pop	r10
 66c:	9f 90       	pop	r9
 66e:	8f 90       	pop	r8
 670:	08 95       	ret

00000672 <wait_1ms>:
 *
 * @param [in] uiFactor: 1ms multiplier
 * @return no return value
 *****************************************************************************/
void wait_1ms(uint16_t uiFactor)
{
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	00 d0       	rcall	.+0      	; 0x678 <wait_1ms+0x6>
 678:	00 d0       	rcall	.+0      	; 0x67a <wait_1ms+0x8>
 67a:	cd b7       	in	r28, 0x3d	; 61
 67c:	de b7       	in	r29, 0x3e	; 62
 67e:	9c 83       	std	Y+4, r25	; 0x04
 680:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t i;
	TCCR0A = (1<<WGM01);	// mode: CTC
 682:	84 e4       	ldi	r24, 0x44	; 68
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	22 e0       	ldi	r18, 0x02	; 2
 688:	fc 01       	movw	r30, r24
 68a:	20 83       	st	Z, r18
	TCCR0B = 0;				// mode: CTC
 68c:	85 e4       	ldi	r24, 0x45	; 69
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	fc 01       	movw	r30, r24
 692:	10 82       	st	Z, r1
	TIFR0 =  (1<<OCF0A);	// only OCFA flag needs to be cleared
 694:	85 e3       	ldi	r24, 0x35	; 53
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	22 e0       	ldi	r18, 0x02	; 2
 69a:	fc 01       	movw	r30, r24
 69c:	20 83       	st	Z, r18
	TIMSK0 = 0;				// no interrupts
 69e:	8e e6       	ldi	r24, 0x6E	; 110
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	fc 01       	movw	r30, r24
 6a4:	10 82       	st	Z, r1
	TCNT0 = 0;
 6a6:	86 e4       	ldi	r24, 0x46	; 70
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	fc 01       	movw	r30, r24
 6ac:	10 82       	st	Z, r1
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
 6ae:	87 e4       	ldi	r24, 0x47	; 71
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	2d e4       	ldi	r18, 0x4D	; 77
 6b4:	fc 01       	movw	r30, r24
 6b6:	20 83       	st	Z, r18
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
 6b8:	85 e4       	ldi	r24, 0x45	; 69
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	25 e4       	ldi	r18, 0x45	; 69
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	f9 01       	movw	r30, r18
 6c2:	20 81       	ld	r18, Z
 6c4:	24 60       	ori	r18, 0x04	; 4
 6c6:	fc 01       	movw	r30, r24
 6c8:	20 83       	st	Z, r18
	
	for(i=0;i<uiFactor;i++)
 6ca:	1a 82       	std	Y+2, r1	; 0x02
 6cc:	19 82       	std	Y+1, r1	; 0x01
 6ce:	15 c0       	rjmp	.+42     	; 0x6fa <wait_1ms+0x88>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
 6d0:	00 00       	nop
 6d2:	85 e3       	ldi	r24, 0x35	; 53
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	fc 01       	movw	r30, r24
 6d8:	80 81       	ld	r24, Z
 6da:	88 2f       	mov	r24, r24
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	82 70       	andi	r24, 0x02	; 2
 6e0:	99 27       	eor	r25, r25
 6e2:	89 2b       	or	r24, r25
 6e4:	b1 f3       	breq	.-20     	; 0x6d2 <wait_1ms+0x60>
		TIFR0 =  (1<<OCF0A);		// clear flag
 6e6:	85 e3       	ldi	r24, 0x35	; 53
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	22 e0       	ldi	r18, 0x02	; 2
 6ec:	fc 01       	movw	r30, r24
 6ee:	20 83       	st	Z, r18
	TCNT0 = 0;
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
	
	for(i=0;i<uiFactor;i++)
 6f0:	89 81       	ldd	r24, Y+1	; 0x01
 6f2:	9a 81       	ldd	r25, Y+2	; 0x02
 6f4:	01 96       	adiw	r24, 0x01	; 1
 6f6:	9a 83       	std	Y+2, r25	; 0x02
 6f8:	89 83       	std	Y+1, r24	; 0x01
 6fa:	29 81       	ldd	r18, Y+1	; 0x01
 6fc:	3a 81       	ldd	r19, Y+2	; 0x02
 6fe:	8b 81       	ldd	r24, Y+3	; 0x03
 700:	9c 81       	ldd	r25, Y+4	; 0x04
 702:	28 17       	cp	r18, r24
 704:	39 07       	cpc	r19, r25
 706:	20 f3       	brcs	.-56     	; 0x6d0 <wait_1ms+0x5e>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
		TIFR0 =  (1<<OCF0A);		// clear flag
	}
	TCCR0B &= ~(0x07);	// set prescaler to 0 (stop timer)
 708:	85 e4       	ldi	r24, 0x45	; 69
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	25 e4       	ldi	r18, 0x45	; 69
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	f9 01       	movw	r30, r18
 712:	20 81       	ld	r18, Z
 714:	28 7f       	andi	r18, 0xF8	; 248
 716:	fc 01       	movw	r30, r24
 718:	20 83       	st	Z, r18
}
 71a:	0f 90       	pop	r0
 71c:	0f 90       	pop	r0
 71e:	0f 90       	pop	r0
 720:	0f 90       	pop	r0
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	08 95       	ret

00000728 <Map>:
 * @param [in] OutMin: minimal value of output range
 * @param [in] OutMax: maximal value of output range
 * @return data in new number range
 *****************************************************************************/
int32_t Map(int32_t lData, int32_t InMin, int32_t InMax, int32_t OutMin, int32_t OutMax)
{
 728:	af 92       	push	r10
 72a:	bf 92       	push	r11
 72c:	cf 92       	push	r12
 72e:	df 92       	push	r13
 730:	ef 92       	push	r14
 732:	ff 92       	push	r15
 734:	0f 93       	push	r16
 736:	1f 93       	push	r17
 738:	cf 93       	push	r28
 73a:	df 93       	push	r29
 73c:	cd b7       	in	r28, 0x3d	; 61
 73e:	de b7       	in	r29, 0x3e	; 62
 740:	64 97       	sbiw	r28, 0x14	; 20
 742:	0f b6       	in	r0, 0x3f	; 63
 744:	f8 94       	cli
 746:	de bf       	out	0x3e, r29	; 62
 748:	0f be       	out	0x3f, r0	; 63
 74a:	cd bf       	out	0x3d, r28	; 61
 74c:	69 83       	std	Y+1, r22	; 0x01
 74e:	7a 83       	std	Y+2, r23	; 0x02
 750:	8b 83       	std	Y+3, r24	; 0x03
 752:	9c 83       	std	Y+4, r25	; 0x04
 754:	2d 83       	std	Y+5, r18	; 0x05
 756:	3e 83       	std	Y+6, r19	; 0x06
 758:	4f 83       	std	Y+7, r20	; 0x07
 75a:	58 87       	std	Y+8, r21	; 0x08
 75c:	e9 86       	std	Y+9, r14	; 0x09
 75e:	fa 86       	std	Y+10, r15	; 0x0a
 760:	0b 87       	std	Y+11, r16	; 0x0b
 762:	1c 87       	std	Y+12, r17	; 0x0c
 764:	ad 86       	std	Y+13, r10	; 0x0d
 766:	be 86       	std	Y+14, r11	; 0x0e
 768:	cf 86       	std	Y+15, r12	; 0x0f
 76a:	d8 8a       	std	Y+16, r13	; 0x10
	return((lData-InMin)*(OutMax-OutMin)/(InMax-InMin)+OutMin);
 76c:	29 81       	ldd	r18, Y+1	; 0x01
 76e:	3a 81       	ldd	r19, Y+2	; 0x02
 770:	4b 81       	ldd	r20, Y+3	; 0x03
 772:	5c 81       	ldd	r21, Y+4	; 0x04
 774:	8d 81       	ldd	r24, Y+5	; 0x05
 776:	9e 81       	ldd	r25, Y+6	; 0x06
 778:	af 81       	ldd	r26, Y+7	; 0x07
 77a:	b8 85       	ldd	r27, Y+8	; 0x08
 77c:	79 01       	movw	r14, r18
 77e:	8a 01       	movw	r16, r20
 780:	e8 1a       	sub	r14, r24
 782:	f9 0a       	sbc	r15, r25
 784:	0a 0b       	sbc	r16, r26
 786:	1b 0b       	sbc	r17, r27
 788:	29 a1       	ldd	r18, Y+33	; 0x21
 78a:	3a a1       	ldd	r19, Y+34	; 0x22
 78c:	4b a1       	ldd	r20, Y+35	; 0x23
 78e:	5c a1       	ldd	r21, Y+36	; 0x24
 790:	8d 85       	ldd	r24, Y+13	; 0x0d
 792:	9e 85       	ldd	r25, Y+14	; 0x0e
 794:	af 85       	ldd	r26, Y+15	; 0x0f
 796:	b8 89       	ldd	r27, Y+16	; 0x10
 798:	59 01       	movw	r10, r18
 79a:	6a 01       	movw	r12, r20
 79c:	a8 1a       	sub	r10, r24
 79e:	b9 0a       	sbc	r11, r25
 7a0:	ca 0a       	sbc	r12, r26
 7a2:	db 0a       	sbc	r13, r27
 7a4:	d6 01       	movw	r26, r12
 7a6:	c5 01       	movw	r24, r10
 7a8:	a8 01       	movw	r20, r16
 7aa:	97 01       	movw	r18, r14
 7ac:	bc 01       	movw	r22, r24
 7ae:	cd 01       	movw	r24, r26
 7b0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__mulsi3>
 7b4:	7b 01       	movw	r14, r22
 7b6:	8c 01       	movw	r16, r24
 7b8:	29 85       	ldd	r18, Y+9	; 0x09
 7ba:	3a 85       	ldd	r19, Y+10	; 0x0a
 7bc:	4b 85       	ldd	r20, Y+11	; 0x0b
 7be:	5c 85       	ldd	r21, Y+12	; 0x0c
 7c0:	8d 81       	ldd	r24, Y+5	; 0x05
 7c2:	9e 81       	ldd	r25, Y+6	; 0x06
 7c4:	af 81       	ldd	r26, Y+7	; 0x07
 7c6:	b8 85       	ldd	r27, Y+8	; 0x08
 7c8:	28 1b       	sub	r18, r24
 7ca:	39 0b       	sbc	r19, r25
 7cc:	4a 0b       	sbc	r20, r26
 7ce:	5b 0b       	sbc	r21, r27
 7d0:	c8 01       	movw	r24, r16
 7d2:	b7 01       	movw	r22, r14
 7d4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__divmodsi4>
 7d8:	da 01       	movw	r26, r20
 7da:	c9 01       	movw	r24, r18
 7dc:	9c 01       	movw	r18, r24
 7de:	ad 01       	movw	r20, r26
 7e0:	8d 85       	ldd	r24, Y+13	; 0x0d
 7e2:	9e 85       	ldd	r25, Y+14	; 0x0e
 7e4:	af 85       	ldd	r26, Y+15	; 0x0f
 7e6:	b8 89       	ldd	r27, Y+16	; 0x10
 7e8:	82 0f       	add	r24, r18
 7ea:	93 1f       	adc	r25, r19
 7ec:	a4 1f       	adc	r26, r20
 7ee:	b5 1f       	adc	r27, r21
}
 7f0:	bc 01       	movw	r22, r24
 7f2:	cd 01       	movw	r24, r26
 7f4:	64 96       	adiw	r28, 0x14	; 20
 7f6:	0f b6       	in	r0, 0x3f	; 63
 7f8:	f8 94       	cli
 7fa:	de bf       	out	0x3e, r29	; 62
 7fc:	0f be       	out	0x3f, r0	; 63
 7fe:	cd bf       	out	0x3d, r28	; 61
 800:	df 91       	pop	r29
 802:	cf 91       	pop	r28
 804:	1f 91       	pop	r17
 806:	0f 91       	pop	r16
 808:	ff 90       	pop	r15
 80a:	ef 90       	pop	r14
 80c:	df 90       	pop	r13
 80e:	cf 90       	pop	r12
 810:	bf 90       	pop	r11
 812:	af 90       	pop	r10
 814:	08 95       	ret

00000816 <CRC8>:

uint8_t CRC8(uint8_t* au8Data, uint8_t u8Length)
{
 816:	cf 93       	push	r28
 818:	df 93       	push	r29
 81a:	cd b7       	in	r28, 0x3d	; 61
 81c:	de b7       	in	r29, 0x3e	; 62
 81e:	28 97       	sbiw	r28, 0x08	; 8
 820:	0f b6       	in	r0, 0x3f	; 63
 822:	f8 94       	cli
 824:	de bf       	out	0x3e, r29	; 62
 826:	0f be       	out	0x3f, r0	; 63
 828:	cd bf       	out	0x3d, r28	; 61
 82a:	9f 83       	std	Y+7, r25	; 0x07
 82c:	8e 83       	std	Y+6, r24	; 0x06
 82e:	68 87       	std	Y+8, r22	; 0x08
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;
 830:	19 82       	std	Y+1, r1	; 0x01

	for(i=0;i<u8Length;i++)
 832:	1a 82       	std	Y+2, r1	; 0x02
 834:	27 c0       	rjmp	.+78     	; 0x884 <CRC8+0x6e>
	{
		u8InByte = au8Data[i];
 836:	8a 81       	ldd	r24, Y+2	; 0x02
 838:	88 2f       	mov	r24, r24
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	2e 81       	ldd	r18, Y+6	; 0x06
 83e:	3f 81       	ldd	r19, Y+7	; 0x07
 840:	82 0f       	add	r24, r18
 842:	93 1f       	adc	r25, r19
 844:	fc 01       	movw	r30, r24
 846:	80 81       	ld	r24, Z
 848:	8c 83       	std	Y+4, r24	; 0x04
		for(j=0;j<8;j++)
 84a:	1b 82       	std	Y+3, r1	; 0x03
 84c:	15 c0       	rjmp	.+42     	; 0x878 <CRC8+0x62>
		{
			u8Temp = (u8CRC^u8InByte)&0x80;
 84e:	99 81       	ldd	r25, Y+1	; 0x01
 850:	8c 81       	ldd	r24, Y+4	; 0x04
 852:	89 27       	eor	r24, r25
 854:	80 78       	andi	r24, 0x80	; 128
 856:	8d 83       	std	Y+5, r24	; 0x05
			u8CRC <<= 1;
 858:	89 81       	ldd	r24, Y+1	; 0x01
 85a:	88 0f       	add	r24, r24
 85c:	89 83       	std	Y+1, r24	; 0x01
			if(u8Temp!=0)
 85e:	8d 81       	ldd	r24, Y+5	; 0x05
 860:	88 23       	and	r24, r24
 862:	21 f0       	breq	.+8      	; 0x86c <CRC8+0x56>
			{
				u8CRC ^= 0x07;
 864:	99 81       	ldd	r25, Y+1	; 0x01
 866:	87 e0       	ldi	r24, 0x07	; 7
 868:	89 27       	eor	r24, r25
 86a:	89 83       	std	Y+1, r24	; 0x01
			}
			u8InByte<<=1;
 86c:	8c 81       	ldd	r24, Y+4	; 0x04
 86e:	88 0f       	add	r24, r24
 870:	8c 83       	std	Y+4, r24	; 0x04
	u8CRC = 0;

	for(i=0;i<u8Length;i++)
	{
		u8InByte = au8Data[i];
		for(j=0;j<8;j++)
 872:	8b 81       	ldd	r24, Y+3	; 0x03
 874:	8f 5f       	subi	r24, 0xFF	; 255
 876:	8b 83       	std	Y+3, r24	; 0x03
 878:	8b 81       	ldd	r24, Y+3	; 0x03
 87a:	88 30       	cpi	r24, 0x08	; 8
 87c:	40 f3       	brcs	.-48     	; 0x84e <CRC8+0x38>
{
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;

	for(i=0;i<u8Length;i++)
 87e:	8a 81       	ldd	r24, Y+2	; 0x02
 880:	8f 5f       	subi	r24, 0xFF	; 255
 882:	8a 83       	std	Y+2, r24	; 0x02
 884:	9a 81       	ldd	r25, Y+2	; 0x02
 886:	88 85       	ldd	r24, Y+8	; 0x08
 888:	98 17       	cp	r25, r24
 88a:	a8 f2       	brcs	.-86     	; 0x836 <CRC8+0x20>
			}
			u8InByte<<=1;
		}
	}

	return u8CRC;
 88c:	89 81       	ldd	r24, Y+1	; 0x01
}
 88e:	28 96       	adiw	r28, 0x08	; 8
 890:	0f b6       	in	r0, 0x3f	; 63
 892:	f8 94       	cli
 894:	de bf       	out	0x3e, r29	; 62
 896:	0f be       	out	0x3f, r0	; 63
 898:	cd bf       	out	0x3d, r28	; 61
 89a:	df 91       	pop	r29
 89c:	cf 91       	pop	r28
 89e:	08 95       	ret

000008a0 <__mulsi3>:
 8a0:	db 01       	movw	r26, r22
 8a2:	8f 93       	push	r24
 8a4:	9f 93       	push	r25
 8a6:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__muluhisi3>
 8aa:	bf 91       	pop	r27
 8ac:	af 91       	pop	r26
 8ae:	a2 9f       	mul	r26, r18
 8b0:	80 0d       	add	r24, r0
 8b2:	91 1d       	adc	r25, r1
 8b4:	a3 9f       	mul	r26, r19
 8b6:	90 0d       	add	r25, r0
 8b8:	b2 9f       	mul	r27, r18
 8ba:	90 0d       	add	r25, r0
 8bc:	11 24       	eor	r1, r1
 8be:	08 95       	ret

000008c0 <__divmodsi4>:
 8c0:	05 2e       	mov	r0, r21
 8c2:	97 fb       	bst	r25, 7
 8c4:	1e f4       	brtc	.+6      	; 0x8cc <__divmodsi4+0xc>
 8c6:	00 94       	com	r0
 8c8:	0e 94 77 04 	call	0x8ee	; 0x8ee <__negsi2>
 8cc:	57 fd       	sbrc	r21, 7
 8ce:	07 d0       	rcall	.+14     	; 0x8de <__divmodsi4_neg2>
 8d0:	0e 94 8a 04 	call	0x914	; 0x914 <__udivmodsi4>
 8d4:	07 fc       	sbrc	r0, 7
 8d6:	03 d0       	rcall	.+6      	; 0x8de <__divmodsi4_neg2>
 8d8:	4e f4       	brtc	.+18     	; 0x8ec <__divmodsi4_exit>
 8da:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__negsi2>

000008de <__divmodsi4_neg2>:
 8de:	50 95       	com	r21
 8e0:	40 95       	com	r20
 8e2:	30 95       	com	r19
 8e4:	21 95       	neg	r18
 8e6:	3f 4f       	sbci	r19, 0xFF	; 255
 8e8:	4f 4f       	sbci	r20, 0xFF	; 255
 8ea:	5f 4f       	sbci	r21, 0xFF	; 255

000008ec <__divmodsi4_exit>:
 8ec:	08 95       	ret

000008ee <__negsi2>:
 8ee:	90 95       	com	r25
 8f0:	80 95       	com	r24
 8f2:	70 95       	com	r23
 8f4:	61 95       	neg	r22
 8f6:	7f 4f       	sbci	r23, 0xFF	; 255
 8f8:	8f 4f       	sbci	r24, 0xFF	; 255
 8fa:	9f 4f       	sbci	r25, 0xFF	; 255
 8fc:	08 95       	ret

000008fe <__muluhisi3>:
 8fe:	0e 94 ac 04 	call	0x958	; 0x958 <__umulhisi3>
 902:	a5 9f       	mul	r26, r21
 904:	90 0d       	add	r25, r0
 906:	b4 9f       	mul	r27, r20
 908:	90 0d       	add	r25, r0
 90a:	a4 9f       	mul	r26, r20
 90c:	80 0d       	add	r24, r0
 90e:	91 1d       	adc	r25, r1
 910:	11 24       	eor	r1, r1
 912:	08 95       	ret

00000914 <__udivmodsi4>:
 914:	a1 e2       	ldi	r26, 0x21	; 33
 916:	1a 2e       	mov	r1, r26
 918:	aa 1b       	sub	r26, r26
 91a:	bb 1b       	sub	r27, r27
 91c:	fd 01       	movw	r30, r26
 91e:	0d c0       	rjmp	.+26     	; 0x93a <__udivmodsi4_ep>

00000920 <__udivmodsi4_loop>:
 920:	aa 1f       	adc	r26, r26
 922:	bb 1f       	adc	r27, r27
 924:	ee 1f       	adc	r30, r30
 926:	ff 1f       	adc	r31, r31
 928:	a2 17       	cp	r26, r18
 92a:	b3 07       	cpc	r27, r19
 92c:	e4 07       	cpc	r30, r20
 92e:	f5 07       	cpc	r31, r21
 930:	20 f0       	brcs	.+8      	; 0x93a <__udivmodsi4_ep>
 932:	a2 1b       	sub	r26, r18
 934:	b3 0b       	sbc	r27, r19
 936:	e4 0b       	sbc	r30, r20
 938:	f5 0b       	sbc	r31, r21

0000093a <__udivmodsi4_ep>:
 93a:	66 1f       	adc	r22, r22
 93c:	77 1f       	adc	r23, r23
 93e:	88 1f       	adc	r24, r24
 940:	99 1f       	adc	r25, r25
 942:	1a 94       	dec	r1
 944:	69 f7       	brne	.-38     	; 0x920 <__udivmodsi4_loop>
 946:	60 95       	com	r22
 948:	70 95       	com	r23
 94a:	80 95       	com	r24
 94c:	90 95       	com	r25
 94e:	9b 01       	movw	r18, r22
 950:	ac 01       	movw	r20, r24
 952:	bd 01       	movw	r22, r26
 954:	cf 01       	movw	r24, r30
 956:	08 95       	ret

00000958 <__umulhisi3>:
 958:	a2 9f       	mul	r26, r18
 95a:	b0 01       	movw	r22, r0
 95c:	b3 9f       	mul	r27, r19
 95e:	c0 01       	movw	r24, r0
 960:	a3 9f       	mul	r26, r19
 962:	70 0d       	add	r23, r0
 964:	81 1d       	adc	r24, r1
 966:	11 24       	eor	r1, r1
 968:	91 1d       	adc	r25, r1
 96a:	b2 9f       	mul	r27, r18
 96c:	70 0d       	add	r23, r0
 96e:	81 1d       	adc	r24, r1
 970:	11 24       	eor	r1, r1
 972:	91 1d       	adc	r25, r1
 974:	08 95       	ret

00000976 <_exit>:
 976:	f8 94       	cli

00000978 <__stop_program>:
 978:	ff cf       	rjmp	.-2      	; 0x978 <__stop_program>
