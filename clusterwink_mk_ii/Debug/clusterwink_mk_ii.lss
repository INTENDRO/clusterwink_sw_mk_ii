
clusterwink_mk_ii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000032ee  00003382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000032ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fb  0080013e  0080013e  000033c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000033c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000033f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00003430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014d9  00000000  00000000  000035c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b33  00000000  00000000  00004aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001957  00000000  00000000  000055d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000071c  00000000  00000000  00006f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a01  00000000  00000000  00007648  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ef7  00000000  00000000  00008049  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00008f40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
       4:	0c 94 4a 02 	jmp	0x494	; 0x494 <__vector_1>
       8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      14:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__vector_5>
      18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      24:	0c 94 10 04 	jmp	0x820	; 0x820 <__vector_9>
      28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      40:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      48:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      4c:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_19>
      50:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      54:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      68:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      6c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      70:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      74:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      78:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      7c:	16 06       	cpc	r1, r22
      7e:	2f 06       	cpc	r2, r31
      80:	48 06       	cpc	r4, r24
      82:	02 07       	cpc	r16, r18
      84:	1d 07       	cpc	r17, r29
      86:	1d 07       	cpc	r17, r29
      88:	1d 07       	cpc	r17, r29
      8a:	a4 07       	cpc	r26, r20
      8c:	b1 07       	cpc	r27, r17
      8e:	be 07       	cpc	r27, r30
      90:	d9 07       	cpc	r29, r25
      92:	e3 07       	cpc	r30, r19
      94:	d3 08       	sbc	r13, r3
      96:	7b 0a       	sbc	r7, r27
      98:	7b 0a       	sbc	r7, r27
      9a:	7b 0a       	sbc	r7, r27
      9c:	7b 0a       	sbc	r7, r27
      9e:	7b 0a       	sbc	r7, r27
      a0:	7b 0a       	sbc	r7, r27
      a2:	7b 0a       	sbc	r7, r27
      a4:	7b 0a       	sbc	r7, r27
      a6:	7b 0a       	sbc	r7, r27
      a8:	7b 0a       	sbc	r7, r27
      aa:	0f 09       	sbc	r16, r15
      ac:	1c 09       	sbc	r17, r12
      ae:	29 09       	sbc	r18, r9
      b0:	7b 0a       	sbc	r7, r27
      b2:	7b 0a       	sbc	r7, r27
      b4:	7b 0a       	sbc	r7, r27
      b6:	7b 0a       	sbc	r7, r27
      b8:	7b 0a       	sbc	r7, r27
      ba:	7b 0a       	sbc	r7, r27
      bc:	7b 0a       	sbc	r7, r27
      be:	7b 0a       	sbc	r7, r27
      c0:	7b 0a       	sbc	r7, r27
      c2:	7b 0a       	sbc	r7, r27
      c4:	7b 0a       	sbc	r7, r27
      c6:	7b 0a       	sbc	r7, r27
      c8:	7b 0a       	sbc	r7, r27
      ca:	33 09       	sbc	r19, r3
      cc:	3e 09       	sbc	r19, r14
      ce:	61 09       	sbc	r22, r1
      d0:	7b 0a       	sbc	r7, r27
      d2:	7b 0a       	sbc	r7, r27
      d4:	7b 0a       	sbc	r7, r27
      d6:	7b 0a       	sbc	r7, r27
      d8:	7b 0a       	sbc	r7, r27
      da:	7b 0a       	sbc	r7, r27
      dc:	7b 0a       	sbc	r7, r27
      de:	7b 0a       	sbc	r7, r27
      e0:	7b 0a       	sbc	r7, r27
      e2:	7b 0a       	sbc	r7, r27
      e4:	7b 0a       	sbc	r7, r27
      e6:	7b 0a       	sbc	r7, r27
      e8:	7b 0a       	sbc	r7, r27
      ea:	9b 09       	sbc	r25, r11
      ec:	a6 09       	sbc	r26, r6
      ee:	ee 09       	sbc	r30, r14

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d8 e0       	ldi	r29, 0x08	; 8
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_copy_data>:
      fc:	11 e0       	ldi	r17, 0x01	; 1
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	ee ee       	ldi	r30, 0xEE	; 238
     104:	f2 e3       	ldi	r31, 0x32	; 50
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x10>
     108:	05 90       	lpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	ae 33       	cpi	r26, 0x3E	; 62
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0xc>

00000112 <__do_clear_bss>:
     112:	22 e0       	ldi	r18, 0x02	; 2
     114:	ae e3       	ldi	r26, 0x3E	; 62
     116:	b1 e0       	ldi	r27, 0x01	; 1
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	a9 33       	cpi	r26, 0x39	; 57
     11e:	b2 07       	cpc	r27, r18
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>
     122:	0e 94 a1 0a 	call	0x1542	; 0x1542 <main>
     126:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <_exit>

0000012a <__bad_interrupt>:
     12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
    cli();
     136:	f8 94       	cli
    return 1;
     138:	81 e0       	ldi	r24, 0x01	; 1
}
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	08 95       	ret

00000140 <__iRestore>:
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	00 d0       	rcall	.+0      	; 0x146 <__iRestore+0x6>
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	9a 83       	std	Y+2, r25	; 0x02
     14c:	89 83       	std	Y+1, r24	; 0x01
    SREG = *__s;
     14e:	8f e5       	ldi	r24, 0x5F	; 95
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	29 81       	ldd	r18, Y+1	; 0x01
     154:	3a 81       	ldd	r19, Y+2	; 0x02
     156:	f9 01       	movw	r30, r18
     158:	20 81       	ld	r18, Z
     15a:	fc 01       	movw	r30, r24
     15c:	20 83       	st	Z, r18
    __asm__ volatile ("" ::: "memory");
}
     15e:	00 00       	nop
     160:	0f 90       	pop	r0
     162:	0f 90       	pop	r0
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	08 95       	ret

0000016a <RingBuffer_InitBuffer>:
		 *  by re-initializing them using this function.
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	00 d0       	rcall	.+0      	; 0x170 <RingBuffer_InitBuffer+0x6>
     170:	00 d0       	rcall	.+0      	; 0x172 <RingBuffer_InitBuffer+0x8>
     172:	cd b7       	in	r28, 0x3d	; 61
     174:	de b7       	in	r29, 0x3e	; 62
     176:	9c 83       	std	Y+4, r25	; 0x04
     178:	8b 83       	std	Y+3, r24	; 0x03
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     17a:	8f e5       	ldi	r24, 0x5F	; 95
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	fc 01       	movw	r30, r24
     180:	80 81       	ld	r24, Z
     182:	8a 83       	std	Y+2, r24	; 0x02
     184:	0e 94 97 00 	call	0x12e	; 0x12e <__iCliRetVal>
     188:	89 83       	std	Y+1, r24	; 0x01
     18a:	19 c0       	rjmp	.+50     	; 0x1be <RingBuffer_InitBuffer+0x54>
			{
				Buffer->In    = Buffer->Buffer;
     18c:	2b 81       	ldd	r18, Y+3	; 0x03
     18e:	3c 81       	ldd	r19, Y+4	; 0x04
     190:	8b 81       	ldd	r24, Y+3	; 0x03
     192:	9c 81       	ldd	r25, Y+4	; 0x04
     194:	80 58       	subi	r24, 0x80	; 128
     196:	9f 4f       	sbci	r25, 0xFF	; 255
     198:	fc 01       	movw	r30, r24
     19a:	31 83       	std	Z+1, r19	; 0x01
     19c:	20 83       	st	Z, r18
				Buffer->Out   = Buffer->Buffer;
     19e:	2b 81       	ldd	r18, Y+3	; 0x03
     1a0:	3c 81       	ldd	r19, Y+4	; 0x04
     1a2:	8b 81       	ldd	r24, Y+3	; 0x03
     1a4:	9c 81       	ldd	r25, Y+4	; 0x04
     1a6:	8e 57       	subi	r24, 0x7E	; 126
     1a8:	9f 4f       	sbci	r25, 0xFF	; 255
     1aa:	fc 01       	movw	r30, r24
     1ac:	31 83       	std	Z+1, r19	; 0x01
     1ae:	20 83       	st	Z, r18
				Buffer->Count = 0;
     1b0:	8b 81       	ldd	r24, Y+3	; 0x03
     1b2:	9c 81       	ldd	r25, Y+4	; 0x04
     1b4:	8c 57       	subi	r24, 0x7C	; 124
     1b6:	9f 4f       	sbci	r25, 0xFF	; 255
     1b8:	fc 01       	movw	r30, r24
     1ba:	10 82       	st	Z, r1
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     1bc:	19 82       	std	Y+1, r1	; 0x01
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	88 23       	and	r24, r24
     1c2:	21 f7       	brne	.-56     	; 0x18c <RingBuffer_InitBuffer+0x22>
     1c4:	ce 01       	movw	r24, r28
     1c6:	02 96       	adiw	r24, 0x02	; 2
     1c8:	0e 94 a0 00 	call	0x140	; 0x140 <__iRestore>
			{
				Buffer->In    = Buffer->Buffer;
				Buffer->Out   = Buffer->Buffer;
				Buffer->Count = 0;
			}
		}
     1cc:	00 00       	nop
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	0f 90       	pop	r0
     1d4:	0f 90       	pop	r0
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	08 95       	ret

000001dc <RingBuffer_Insert>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	00 d0       	rcall	.+0      	; 0x1e2 <RingBuffer_Insert+0x6>
     1e2:	00 d0       	rcall	.+0      	; 0x1e4 <RingBuffer_Insert+0x8>
     1e4:	1f 92       	push	r1
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
     1ea:	9c 83       	std	Y+4, r25	; 0x04
     1ec:	8b 83       	std	Y+3, r24	; 0x03
     1ee:	6d 83       	std	Y+5, r22	; 0x05
			*Buffer->In = Data;
     1f0:	8b 81       	ldd	r24, Y+3	; 0x03
     1f2:	9c 81       	ldd	r25, Y+4	; 0x04
     1f4:	80 58       	subi	r24, 0x80	; 128
     1f6:	9f 4f       	sbci	r25, 0xFF	; 255
     1f8:	fc 01       	movw	r30, r24
     1fa:	80 81       	ld	r24, Z
     1fc:	91 81       	ldd	r25, Z+1	; 0x01
     1fe:	2d 81       	ldd	r18, Y+5	; 0x05
     200:	fc 01       	movw	r30, r24
     202:	20 83       	st	Z, r18
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
     204:	8b 81       	ldd	r24, Y+3	; 0x03
     206:	9c 81       	ldd	r25, Y+4	; 0x04
     208:	80 58       	subi	r24, 0x80	; 128
     20a:	9f 4f       	sbci	r25, 0xFF	; 255
     20c:	fc 01       	movw	r30, r24
     20e:	80 81       	ld	r24, Z
     210:	91 81       	ldd	r25, Z+1	; 0x01
     212:	9c 01       	movw	r18, r24
     214:	2f 5f       	subi	r18, 0xFF	; 255
     216:	3f 4f       	sbci	r19, 0xFF	; 255
     218:	8b 81       	ldd	r24, Y+3	; 0x03
     21a:	9c 81       	ldd	r25, Y+4	; 0x04
     21c:	80 58       	subi	r24, 0x80	; 128
     21e:	9f 4f       	sbci	r25, 0xFF	; 255
     220:	fc 01       	movw	r30, r24
     222:	31 83       	std	Z+1, r19	; 0x01
     224:	20 83       	st	Z, r18
     226:	8b 81       	ldd	r24, Y+3	; 0x03
     228:	9c 81       	ldd	r25, Y+4	; 0x04
     22a:	80 58       	subi	r24, 0x80	; 128
     22c:	9f 4f       	sbci	r25, 0xFF	; 255
     22e:	fc 01       	movw	r30, r24
     230:	20 81       	ld	r18, Z
     232:	31 81       	ldd	r19, Z+1	; 0x01
     234:	8b 81       	ldd	r24, Y+3	; 0x03
     236:	9c 81       	ldd	r25, Y+4	; 0x04
     238:	80 58       	subi	r24, 0x80	; 128
     23a:	9f 4f       	sbci	r25, 0xFF	; 255
     23c:	28 17       	cp	r18, r24
     23e:	39 07       	cpc	r19, r25
     240:	49 f4       	brne	.+18     	; 0x254 <RingBuffer_Insert+0x78>
			  Buffer->In = Buffer->Buffer;
     242:	2b 81       	ldd	r18, Y+3	; 0x03
     244:	3c 81       	ldd	r19, Y+4	; 0x04
     246:	8b 81       	ldd	r24, Y+3	; 0x03
     248:	9c 81       	ldd	r25, Y+4	; 0x04
     24a:	80 58       	subi	r24, 0x80	; 128
     24c:	9f 4f       	sbci	r25, 0xFF	; 255
     24e:	fc 01       	movw	r30, r24
     250:	31 83       	std	Z+1, r19	; 0x01
     252:	20 83       	st	Z, r18

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     254:	8f e5       	ldi	r24, 0x5F	; 95
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	fc 01       	movw	r30, r24
     25a:	80 81       	ld	r24, Z
     25c:	8a 83       	std	Y+2, r24	; 0x02
     25e:	0e 94 97 00 	call	0x12e	; 0x12e <__iCliRetVal>
     262:	89 83       	std	Y+1, r24	; 0x01
     264:	0f c0       	rjmp	.+30     	; 0x284 <RingBuffer_Insert+0xa8>
			{
				Buffer->Count++;
     266:	8b 81       	ldd	r24, Y+3	; 0x03
     268:	9c 81       	ldd	r25, Y+4	; 0x04
     26a:	8c 57       	subi	r24, 0x7C	; 124
     26c:	9f 4f       	sbci	r25, 0xFF	; 255
     26e:	fc 01       	movw	r30, r24
     270:	80 81       	ld	r24, Z
     272:	21 e0       	ldi	r18, 0x01	; 1
     274:	28 0f       	add	r18, r24
     276:	8b 81       	ldd	r24, Y+3	; 0x03
     278:	9c 81       	ldd	r25, Y+4	; 0x04
     27a:	8c 57       	subi	r24, 0x7C	; 124
     27c:	9f 4f       	sbci	r25, 0xFF	; 255
     27e:	fc 01       	movw	r30, r24
     280:	20 83       	st	Z, r18
			*Buffer->In = Data;
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->In = Buffer->Buffer;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     282:	19 82       	std	Y+1, r1	; 0x01
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	88 23       	and	r24, r24
     288:	71 f7       	brne	.-36     	; 0x266 <RingBuffer_Insert+0x8a>
     28a:	ce 01       	movw	r24, r28
     28c:	02 96       	adiw	r24, 0x02	; 2
     28e:	0e 94 a0 00 	call	0x140	; 0x140 <__iRestore>
			{
				Buffer->Count++;
			}
		}
     292:	00 00       	nop
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0
     29c:	0f 90       	pop	r0
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret

000002a4 <RingBuffer_Remove>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to retrieve from
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	00 d0       	rcall	.+0      	; 0x2aa <RingBuffer_Remove+0x6>
     2aa:	00 d0       	rcall	.+0      	; 0x2ac <RingBuffer_Remove+0x8>
     2ac:	1f 92       	push	r1
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	9d 83       	std	Y+5, r25	; 0x05
     2b4:	8c 83       	std	Y+4, r24	; 0x04
			RingBuff_Data_t Data = *Buffer->Out;
     2b6:	8c 81       	ldd	r24, Y+4	; 0x04
     2b8:	9d 81       	ldd	r25, Y+5	; 0x05
     2ba:	8e 57       	subi	r24, 0x7E	; 126
     2bc:	9f 4f       	sbci	r25, 0xFF	; 255
     2be:	fc 01       	movw	r30, r24
     2c0:	80 81       	ld	r24, Z
     2c2:	91 81       	ldd	r25, Z+1	; 0x01
     2c4:	fc 01       	movw	r30, r24
     2c6:	80 81       	ld	r24, Z
     2c8:	8a 83       	std	Y+2, r24	; 0x02
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
     2ca:	8c 81       	ldd	r24, Y+4	; 0x04
     2cc:	9d 81       	ldd	r25, Y+5	; 0x05
     2ce:	8e 57       	subi	r24, 0x7E	; 126
     2d0:	9f 4f       	sbci	r25, 0xFF	; 255
     2d2:	fc 01       	movw	r30, r24
     2d4:	80 81       	ld	r24, Z
     2d6:	91 81       	ldd	r25, Z+1	; 0x01
     2d8:	9c 01       	movw	r18, r24
     2da:	2f 5f       	subi	r18, 0xFF	; 255
     2dc:	3f 4f       	sbci	r19, 0xFF	; 255
     2de:	8c 81       	ldd	r24, Y+4	; 0x04
     2e0:	9d 81       	ldd	r25, Y+5	; 0x05
     2e2:	8e 57       	subi	r24, 0x7E	; 126
     2e4:	9f 4f       	sbci	r25, 0xFF	; 255
     2e6:	fc 01       	movw	r30, r24
     2e8:	31 83       	std	Z+1, r19	; 0x01
     2ea:	20 83       	st	Z, r18
     2ec:	8c 81       	ldd	r24, Y+4	; 0x04
     2ee:	9d 81       	ldd	r25, Y+5	; 0x05
     2f0:	8e 57       	subi	r24, 0x7E	; 126
     2f2:	9f 4f       	sbci	r25, 0xFF	; 255
     2f4:	fc 01       	movw	r30, r24
     2f6:	20 81       	ld	r18, Z
     2f8:	31 81       	ldd	r19, Z+1	; 0x01
     2fa:	8c 81       	ldd	r24, Y+4	; 0x04
     2fc:	9d 81       	ldd	r25, Y+5	; 0x05
     2fe:	80 58       	subi	r24, 0x80	; 128
     300:	9f 4f       	sbci	r25, 0xFF	; 255
     302:	28 17       	cp	r18, r24
     304:	39 07       	cpc	r19, r25
     306:	49 f4       	brne	.+18     	; 0x31a <RingBuffer_Remove+0x76>
			  Buffer->Out = Buffer->Buffer;
     308:	2c 81       	ldd	r18, Y+4	; 0x04
     30a:	3d 81       	ldd	r19, Y+5	; 0x05
     30c:	8c 81       	ldd	r24, Y+4	; 0x04
     30e:	9d 81       	ldd	r25, Y+5	; 0x05
     310:	8e 57       	subi	r24, 0x7E	; 126
     312:	9f 4f       	sbci	r25, 0xFF	; 255
     314:	fc 01       	movw	r30, r24
     316:	31 83       	std	Z+1, r19	; 0x01
     318:	20 83       	st	Z, r18

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     31a:	8f e5       	ldi	r24, 0x5F	; 95
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	fc 01       	movw	r30, r24
     320:	80 81       	ld	r24, Z
     322:	8b 83       	std	Y+3, r24	; 0x03
     324:	0e 94 97 00 	call	0x12e	; 0x12e <__iCliRetVal>
     328:	89 83       	std	Y+1, r24	; 0x01
     32a:	0f c0       	rjmp	.+30     	; 0x34a <RingBuffer_Remove+0xa6>
			{
				Buffer->Count--;
     32c:	8c 81       	ldd	r24, Y+4	; 0x04
     32e:	9d 81       	ldd	r25, Y+5	; 0x05
     330:	8c 57       	subi	r24, 0x7C	; 124
     332:	9f 4f       	sbci	r25, 0xFF	; 255
     334:	fc 01       	movw	r30, r24
     336:	80 81       	ld	r24, Z
     338:	2f ef       	ldi	r18, 0xFF	; 255
     33a:	28 0f       	add	r18, r24
     33c:	8c 81       	ldd	r24, Y+4	; 0x04
     33e:	9d 81       	ldd	r25, Y+5	; 0x05
     340:	8c 57       	subi	r24, 0x7C	; 124
     342:	9f 4f       	sbci	r25, 0xFF	; 255
     344:	fc 01       	movw	r30, r24
     346:	20 83       	st	Z, r18
			RingBuff_Data_t Data = *Buffer->Out;
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->Out = Buffer->Buffer;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     348:	19 82       	std	Y+1, r1	; 0x01
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	88 23       	and	r24, r24
     34e:	71 f7       	brne	.-36     	; 0x32c <RingBuffer_Remove+0x88>
     350:	ce 01       	movw	r24, r28
     352:	03 96       	adiw	r24, 0x03	; 3
     354:	0e 94 a0 00 	call	0x140	; 0x140 <__iRestore>
			{
				Buffer->Count--;
			}
			
			return Data;
     358:	8a 81       	ldd	r24, Y+2	; 0x02
		}
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	08 95       	ret

0000036a <RingBuffer_CountChar>:
			}
			*(Destination+PeakLength) = 0;
		}

		static inline RingBuff_Count_t RingBuffer_CountChar(RingBuff_t* const Buffer, char charToCheck)
		{
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	00 d0       	rcall	.+0      	; 0x370 <RingBuffer_CountChar+0x6>
     370:	00 d0       	rcall	.+0      	; 0x372 <RingBuffer_CountChar+0x8>
     372:	00 d0       	rcall	.+0      	; 0x374 <RingBuffer_CountChar+0xa>
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
     378:	9d 83       	std	Y+5, r25	; 0x05
     37a:	8c 83       	std	Y+4, r24	; 0x04
     37c:	6e 83       	std	Y+6, r22	; 0x06
			RingBuff_Count_t count = 0;
     37e:	19 82       	std	Y+1, r1	; 0x01

			RingBuff_Data_t* currentRead = Buffer->Out;
     380:	8c 81       	ldd	r24, Y+4	; 0x04
     382:	9d 81       	ldd	r25, Y+5	; 0x05
     384:	8e 57       	subi	r24, 0x7E	; 126
     386:	9f 4f       	sbci	r25, 0xFF	; 255
     388:	fc 01       	movw	r30, r24
     38a:	80 81       	ld	r24, Z
     38c:	91 81       	ldd	r25, Z+1	; 0x01
     38e:	9b 83       	std	Y+3, r25	; 0x03
     390:	8a 83       	std	Y+2, r24	; 0x02

			while(currentRead != Buffer->In)
     392:	1c c0       	rjmp	.+56     	; 0x3cc <RingBuffer_CountChar+0x62>
			{
				if(*currentRead==charToCheck)
     394:	8a 81       	ldd	r24, Y+2	; 0x02
     396:	9b 81       	ldd	r25, Y+3	; 0x03
     398:	fc 01       	movw	r30, r24
     39a:	90 81       	ld	r25, Z
     39c:	8e 81       	ldd	r24, Y+6	; 0x06
     39e:	98 17       	cp	r25, r24
     3a0:	19 f4       	brne	.+6      	; 0x3a8 <RingBuffer_CountChar+0x3e>
				{
					count++;
     3a2:	89 81       	ldd	r24, Y+1	; 0x01
     3a4:	8f 5f       	subi	r24, 0xFF	; 255
     3a6:	89 83       	std	Y+1, r24	; 0x01
				}
				if (++currentRead == &Buffer->Buffer[BUFFER_SIZE]) currentRead = Buffer->Buffer;
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	9b 81       	ldd	r25, Y+3	; 0x03
     3ac:	01 96       	adiw	r24, 0x01	; 1
     3ae:	9b 83       	std	Y+3, r25	; 0x03
     3b0:	8a 83       	std	Y+2, r24	; 0x02
     3b2:	8c 81       	ldd	r24, Y+4	; 0x04
     3b4:	9d 81       	ldd	r25, Y+5	; 0x05
     3b6:	80 58       	subi	r24, 0x80	; 128
     3b8:	9f 4f       	sbci	r25, 0xFF	; 255
     3ba:	2a 81       	ldd	r18, Y+2	; 0x02
     3bc:	3b 81       	ldd	r19, Y+3	; 0x03
     3be:	28 17       	cp	r18, r24
     3c0:	39 07       	cpc	r19, r25
     3c2:	21 f4       	brne	.+8      	; 0x3cc <RingBuffer_CountChar+0x62>
     3c4:	8c 81       	ldd	r24, Y+4	; 0x04
     3c6:	9d 81       	ldd	r25, Y+5	; 0x05
     3c8:	9b 83       	std	Y+3, r25	; 0x03
     3ca:	8a 83       	std	Y+2, r24	; 0x02
		{
			RingBuff_Count_t count = 0;

			RingBuff_Data_t* currentRead = Buffer->Out;

			while(currentRead != Buffer->In)
     3cc:	8c 81       	ldd	r24, Y+4	; 0x04
     3ce:	9d 81       	ldd	r25, Y+5	; 0x05
     3d0:	80 58       	subi	r24, 0x80	; 128
     3d2:	9f 4f       	sbci	r25, 0xFF	; 255
     3d4:	fc 01       	movw	r30, r24
     3d6:	20 81       	ld	r18, Z
     3d8:	31 81       	ldd	r19, Z+1	; 0x01
     3da:	8a 81       	ldd	r24, Y+2	; 0x02
     3dc:	9b 81       	ldd	r25, Y+3	; 0x03
     3de:	28 17       	cp	r18, r24
     3e0:	39 07       	cpc	r19, r25
     3e2:	c1 f6       	brne	.-80     	; 0x394 <RingBuffer_CountChar+0x2a>
				{
					count++;
				}
				if (++currentRead == &Buffer->Buffer[BUFFER_SIZE]) currentRead = Buffer->Buffer;
			}
			return(count);
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
		}
     3e6:	26 96       	adiw	r28, 0x06	; 6
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	cd bf       	out	0x3d, r28	; 61
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <RingBuffer_RemoveUntilChar>:

		static inline void RingBuffer_RemoveUntilChar(RingBuff_t* const Buffer, RingBuff_Data_t* Destination, char endChar, uint8_t includingChar)
		{
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	29 97       	sbiw	r28, 0x09	; 9
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	de bf       	out	0x3e, r29	; 62
     408:	0f be       	out	0x3f, r0	; 63
     40a:	cd bf       	out	0x3d, r28	; 61
     40c:	9d 83       	std	Y+5, r25	; 0x05
     40e:	8c 83       	std	Y+4, r24	; 0x04
     410:	7f 83       	std	Y+7, r23	; 0x07
     412:	6e 83       	std	Y+6, r22	; 0x06
     414:	48 87       	std	Y+8, r20	; 0x08
     416:	29 87       	std	Y+9, r18	; 0x09
			RingBuff_Data_t tempData;
			unsigned int uiDestinationOffset = 0;
     418:	1a 82       	std	Y+2, r1	; 0x02
     41a:	19 82       	std	Y+1, r1	; 0x01
			
			while(1)
			{
				tempData = RingBuffer_Remove(Buffer);
     41c:	8c 81       	ldd	r24, Y+4	; 0x04
     41e:	9d 81       	ldd	r25, Y+5	; 0x05
     420:	0e 94 52 01 	call	0x2a4	; 0x2a4 <RingBuffer_Remove>
     424:	8b 83       	std	Y+3, r24	; 0x03
				if(tempData == endChar)
     426:	9b 81       	ldd	r25, Y+3	; 0x03
     428:	88 85       	ldd	r24, Y+8	; 0x08
     42a:	98 17       	cp	r25, r24
     42c:	d1 f4       	brne	.+52     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
				{
					if(includingChar)
     42e:	89 85       	ldd	r24, Y+9	; 0x09
     430:	88 23       	and	r24, r24
     432:	71 f0       	breq	.+28     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
					{
						*(Destination+uiDestinationOffset) = tempData;
     434:	2e 81       	ldd	r18, Y+6	; 0x06
     436:	3f 81       	ldd	r19, Y+7	; 0x07
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	9a 81       	ldd	r25, Y+2	; 0x02
     43c:	82 0f       	add	r24, r18
     43e:	93 1f       	adc	r25, r19
     440:	2b 81       	ldd	r18, Y+3	; 0x03
     442:	fc 01       	movw	r30, r24
     444:	20 83       	st	Z, r18
						uiDestinationOffset++;
     446:	89 81       	ldd	r24, Y+1	; 0x01
     448:	9a 81       	ldd	r25, Y+2	; 0x02
     44a:	01 96       	adiw	r24, 0x01	; 1
     44c:	9a 83       	std	Y+2, r25	; 0x02
     44e:	89 83       	std	Y+1, r24	; 0x01
					}
					*(Destination+uiDestinationOffset) = 0;
     450:	2e 81       	ldd	r18, Y+6	; 0x06
     452:	3f 81       	ldd	r19, Y+7	; 0x07
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	9a 81       	ldd	r25, Y+2	; 0x02
     458:	82 0f       	add	r24, r18
     45a:	93 1f       	adc	r25, r19
     45c:	fc 01       	movw	r30, r24
     45e:	10 82       	st	Z, r1
					break;
     460:	0f c0       	rjmp	.+30     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
				}
				*(Destination+uiDestinationOffset) = tempData;
     462:	2e 81       	ldd	r18, Y+6	; 0x06
     464:	3f 81       	ldd	r19, Y+7	; 0x07
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	9a 81       	ldd	r25, Y+2	; 0x02
     46a:	82 0f       	add	r24, r18
     46c:	93 1f       	adc	r25, r19
     46e:	2b 81       	ldd	r18, Y+3	; 0x03
     470:	fc 01       	movw	r30, r24
     472:	20 83       	st	Z, r18
				uiDestinationOffset++;
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	9a 81       	ldd	r25, Y+2	; 0x02
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	9a 83       	std	Y+2, r25	; 0x02
     47c:	89 83       	std	Y+1, r24	; 0x01
			}
     47e:	ce cf       	rjmp	.-100    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		}
     480:	00 00       	nop
     482:	29 96       	adiw	r28, 0x09	; 9
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	08 95       	ret

00000494 <__vector_1>:
volatile uint8_t u8Status = 0x00;
volatile uint8_t u8Duty = 0;


ISR(INT0_vect)	// external interrupt (handshake from RGBooster board)
{				// start RGBooster send sequence: reset "ucRGBIdx" and "ucByteIdx" to zero. then start with calling the ISR directly "INT1_vect();"
     494:	1f 92       	push	r1
     496:	0f 92       	push	r0
     498:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     49c:	0f 92       	push	r0
     49e:	11 24       	eor	r1, r1
     4a0:	2f 93       	push	r18
     4a2:	3f 93       	push	r19
     4a4:	4f 93       	push	r20
     4a6:	8f 93       	push	r24
     4a8:	9f 93       	push	r25
     4aa:	ef 93       	push	r30
     4ac:	ff 93       	push	r31
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
	#ifdef TX_DEBUG
	PORTD |= (1<<PORTD1);
     4b6:	8b e2       	ldi	r24, 0x2B	; 43
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	2b e2       	ldi	r18, 0x2B	; 43
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	f9 01       	movw	r30, r18
     4c0:	20 81       	ld	r18, Z
     4c2:	22 60       	ori	r18, 0x02	; 2
     4c4:	fc 01       	movw	r30, r24
     4c6:	20 83       	st	Z, r18
	#endif
	
	if(u8RGBSingleColor)
     4c8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <u8RGBSingleColor>
     4cc:	88 23       	and	r24, r24
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <__vector_1+0x3e>
     4d0:	b5 c0       	rjmp	.+362    	; 0x63c <__vector_1+0x1a8>
	{
		if(u8RGBIdx<(LED_COUNT))
     4d2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8RGBIdx>
     4d6:	84 31       	cpi	r24, 0x14	; 20
     4d8:	08 f0       	brcs	.+2      	; 0x4dc <__vector_1+0x48>
     4da:	ad c0       	rjmp	.+346    	; 0x636 <__vector_1+0x1a2>
		{
			switch(u8RGBByteIdx) // red green and blue are sent in 3 separate bytes. this variable remembers the next color to be sent
     4dc:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     4e0:	88 2f       	mov	r24, r24
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	81 30       	cpi	r24, 0x01	; 1
     4e6:	91 05       	cpc	r25, r1
     4e8:	d9 f1       	breq	.+118    	; 0x560 <__vector_1+0xcc>
     4ea:	82 30       	cpi	r24, 0x02	; 2
     4ec:	91 05       	cpc	r25, r1
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <__vector_1+0x5e>
     4f0:	6b c0       	rjmp	.+214    	; 0x5c8 <__vector_1+0x134>
     4f2:	89 2b       	or	r24, r25
     4f4:	09 f0       	breq	.+2      	; 0x4f8 <__vector_1+0x64>
     4f6:	7b c1       	rjmp	.+758    	; 0x7ee <__vector_1+0x35a>
			{
				case 0:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (u8RGBGreen & DATA_HIGH_BITMASK);
     4f8:	82 e2       	ldi	r24, 0x22	; 34
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	22 e2       	ldi	r18, 0x22	; 34
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	f9 01       	movw	r30, r18
     502:	20 81       	ld	r18, Z
     504:	32 2f       	mov	r19, r18
     506:	3f 70       	andi	r19, 0x0F	; 15
     508:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <u8RGBGreen>
     50c:	20 7f       	andi	r18, 0xF0	; 240
     50e:	23 2b       	or	r18, r19
     510:	fc 01       	movw	r30, r24
     512:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (u8RGBGreen & DATA_LOW_BITMASK);
     514:	85 e2       	ldi	r24, 0x25	; 37
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	25 e2       	ldi	r18, 0x25	; 37
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	f9 01       	movw	r30, r18
     51e:	20 81       	ld	r18, Z
     520:	32 2f       	mov	r19, r18
     522:	30 7f       	andi	r19, 0xF0	; 240
     524:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <u8RGBGreen>
     528:	2f 70       	andi	r18, 0x0F	; 15
     52a:	23 2b       	or	r18, r19
     52c:	fc 01       	movw	r30, r24
     52e:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     530:	8b e2       	ldi	r24, 0x2B	; 43
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	2b e2       	ldi	r18, 0x2B	; 43
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	f9 01       	movw	r30, r18
     53a:	20 81       	ld	r18, Z
     53c:	28 60       	ori	r18, 0x08	; 8
     53e:	fc 01       	movw	r30, r24
     540:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     542:	8b e2       	ldi	r24, 0x2B	; 43
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	2b e2       	ldi	r18, 0x2B	; 43
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	f9 01       	movw	r30, r18
     54c:	20 81       	ld	r18, Z
     54e:	27 7f       	andi	r18, 0xF7	; 247
     550:	fc 01       	movw	r30, r24
     552:	20 83       	st	Z, r18
				u8RGBByteIdx++;
     554:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     558:	8f 5f       	subi	r24, 0xFF	; 255
     55a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
				break;
     55e:	47 c1       	rjmp	.+654    	; 0x7ee <__vector_1+0x35a>

				case 1:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (u8RGBRed & DATA_HIGH_BITMASK);
     560:	82 e2       	ldi	r24, 0x22	; 34
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	22 e2       	ldi	r18, 0x22	; 34
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	f9 01       	movw	r30, r18
     56a:	20 81       	ld	r18, Z
     56c:	32 2f       	mov	r19, r18
     56e:	3f 70       	andi	r19, 0x0F	; 15
     570:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <u8RGBRed>
     574:	20 7f       	andi	r18, 0xF0	; 240
     576:	23 2b       	or	r18, r19
     578:	fc 01       	movw	r30, r24
     57a:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (u8RGBRed & DATA_LOW_BITMASK);
     57c:	85 e2       	ldi	r24, 0x25	; 37
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	25 e2       	ldi	r18, 0x25	; 37
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	f9 01       	movw	r30, r18
     586:	20 81       	ld	r18, Z
     588:	32 2f       	mov	r19, r18
     58a:	30 7f       	andi	r19, 0xF0	; 240
     58c:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <u8RGBRed>
     590:	2f 70       	andi	r18, 0x0F	; 15
     592:	23 2b       	or	r18, r19
     594:	fc 01       	movw	r30, r24
     596:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     598:	8b e2       	ldi	r24, 0x2B	; 43
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	2b e2       	ldi	r18, 0x2B	; 43
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	f9 01       	movw	r30, r18
     5a2:	20 81       	ld	r18, Z
     5a4:	28 60       	ori	r18, 0x08	; 8
     5a6:	fc 01       	movw	r30, r24
     5a8:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     5aa:	8b e2       	ldi	r24, 0x2B	; 43
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	2b e2       	ldi	r18, 0x2B	; 43
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	f9 01       	movw	r30, r18
     5b4:	20 81       	ld	r18, Z
     5b6:	27 7f       	andi	r18, 0xF7	; 247
     5b8:	fc 01       	movw	r30, r24
     5ba:	20 83       	st	Z, r18
				u8RGBByteIdx++;
     5bc:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     5c0:	8f 5f       	subi	r24, 0xFF	; 255
     5c2:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
				break;
     5c6:	13 c1       	rjmp	.+550    	; 0x7ee <__vector_1+0x35a>

				case 2:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (u8RGBBlue & DATA_HIGH_BITMASK);
     5c8:	82 e2       	ldi	r24, 0x22	; 34
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	22 e2       	ldi	r18, 0x22	; 34
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	f9 01       	movw	r30, r18
     5d2:	20 81       	ld	r18, Z
     5d4:	32 2f       	mov	r19, r18
     5d6:	3f 70       	andi	r19, 0x0F	; 15
     5d8:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <u8RGBBlue>
     5dc:	20 7f       	andi	r18, 0xF0	; 240
     5de:	23 2b       	or	r18, r19
     5e0:	fc 01       	movw	r30, r24
     5e2:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (u8RGBBlue & DATA_LOW_BITMASK);
     5e4:	85 e2       	ldi	r24, 0x25	; 37
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	25 e2       	ldi	r18, 0x25	; 37
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	f9 01       	movw	r30, r18
     5ee:	20 81       	ld	r18, Z
     5f0:	32 2f       	mov	r19, r18
     5f2:	30 7f       	andi	r19, 0xF0	; 240
     5f4:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <u8RGBBlue>
     5f8:	2f 70       	andi	r18, 0x0F	; 15
     5fa:	23 2b       	or	r18, r19
     5fc:	fc 01       	movw	r30, r24
     5fe:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     600:	8b e2       	ldi	r24, 0x2B	; 43
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	2b e2       	ldi	r18, 0x2B	; 43
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	f9 01       	movw	r30, r18
     60a:	20 81       	ld	r18, Z
     60c:	28 60       	ori	r18, 0x08	; 8
     60e:	fc 01       	movw	r30, r24
     610:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     612:	8b e2       	ldi	r24, 0x2B	; 43
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	2b e2       	ldi	r18, 0x2B	; 43
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	f9 01       	movw	r30, r18
     61c:	20 81       	ld	r18, Z
     61e:	27 7f       	andi	r18, 0xF7	; 247
     620:	fc 01       	movw	r30, r24
     622:	20 83       	st	Z, r18
				u8RGBByteIdx=0;
     624:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
				u8RGBIdx++;
     628:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8RGBIdx>
     62c:	8f 5f       	subi	r24, 0xFF	; 255
     62e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <u8RGBIdx>
				break;
     632:	00 00       	nop
     634:	dc c0       	rjmp	.+440    	; 0x7ee <__vector_1+0x35a>
			}
		}
		else
		{
			u8RGBDataState = 0;
     636:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <u8RGBDataState>
     63a:	d9 c0       	rjmp	.+434    	; 0x7ee <__vector_1+0x35a>
		}
	}
	else
	{
		if(u8RGBIdx<(LED_COUNT))
     63c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8RGBIdx>
     640:	84 31       	cpi	r24, 0x14	; 20
     642:	08 f0       	brcs	.+2      	; 0x646 <__vector_1+0x1b2>
     644:	d2 c0       	rjmp	.+420    	; 0x7ea <__vector_1+0x356>
		{
			switch(u8RGBByteIdx) // red green and blue are sent in 3 separate bytes. this variable remembers the next color to be sent
     646:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     64a:	88 2f       	mov	r24, r24
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	81 30       	cpi	r24, 0x01	; 1
     650:	91 05       	cpc	r25, r1
     652:	09 f4       	brne	.+2      	; 0x656 <__vector_1+0x1c2>
     654:	47 c0       	rjmp	.+142    	; 0x6e4 <__vector_1+0x250>
     656:	82 30       	cpi	r24, 0x02	; 2
     658:	91 05       	cpc	r25, r1
     65a:	09 f4       	brne	.+2      	; 0x65e <__vector_1+0x1ca>
     65c:	83 c0       	rjmp	.+262    	; 0x764 <__vector_1+0x2d0>
     65e:	89 2b       	or	r24, r25
     660:	09 f0       	breq	.+2      	; 0x664 <__vector_1+0x1d0>
     662:	c5 c0       	rjmp	.+394    	; 0x7ee <__vector_1+0x35a>
			{
				case 0:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (au8Green[u8RGBIdx] & DATA_HIGH_BITMASK);
     664:	82 e2       	ldi	r24, 0x22	; 34
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	22 e2       	ldi	r18, 0x22	; 34
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	f9 01       	movw	r30, r18
     66e:	20 81       	ld	r18, Z
     670:	42 2f       	mov	r20, r18
     672:	4f 70       	andi	r20, 0x0F	; 15
     674:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     678:	22 2f       	mov	r18, r18
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	2c 5e       	subi	r18, 0xEC	; 236
     67e:	3e 4f       	sbci	r19, 0xFE	; 254
     680:	f9 01       	movw	r30, r18
     682:	20 81       	ld	r18, Z
     684:	20 7f       	andi	r18, 0xF0	; 240
     686:	24 2b       	or	r18, r20
     688:	fc 01       	movw	r30, r24
     68a:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (au8Green[u8RGBIdx] & DATA_LOW_BITMASK);
     68c:	85 e2       	ldi	r24, 0x25	; 37
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	25 e2       	ldi	r18, 0x25	; 37
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	f9 01       	movw	r30, r18
     696:	20 81       	ld	r18, Z
     698:	42 2f       	mov	r20, r18
     69a:	40 7f       	andi	r20, 0xF0	; 240
     69c:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     6a0:	22 2f       	mov	r18, r18
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	2c 5e       	subi	r18, 0xEC	; 236
     6a6:	3e 4f       	sbci	r19, 0xFE	; 254
     6a8:	f9 01       	movw	r30, r18
     6aa:	20 81       	ld	r18, Z
     6ac:	2f 70       	andi	r18, 0x0F	; 15
     6ae:	24 2b       	or	r18, r20
     6b0:	fc 01       	movw	r30, r24
     6b2:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     6b4:	8b e2       	ldi	r24, 0x2B	; 43
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	2b e2       	ldi	r18, 0x2B	; 43
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	f9 01       	movw	r30, r18
     6be:	20 81       	ld	r18, Z
     6c0:	28 60       	ori	r18, 0x08	; 8
     6c2:	fc 01       	movw	r30, r24
     6c4:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     6c6:	8b e2       	ldi	r24, 0x2B	; 43
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	2b e2       	ldi	r18, 0x2B	; 43
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	f9 01       	movw	r30, r18
     6d0:	20 81       	ld	r18, Z
     6d2:	27 7f       	andi	r18, 0xF7	; 247
     6d4:	fc 01       	movw	r30, r24
     6d6:	20 83       	st	Z, r18
				u8RGBByteIdx++;
     6d8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     6dc:	8f 5f       	subi	r24, 0xFF	; 255
     6de:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
				break;
     6e2:	85 c0       	rjmp	.+266    	; 0x7ee <__vector_1+0x35a>

				case 1:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (au8Red[u8RGBIdx] & DATA_HIGH_BITMASK);
     6e4:	82 e2       	ldi	r24, 0x22	; 34
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	22 e2       	ldi	r18, 0x22	; 34
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	f9 01       	movw	r30, r18
     6ee:	20 81       	ld	r18, Z
     6f0:	42 2f       	mov	r20, r18
     6f2:	4f 70       	andi	r20, 0x0F	; 15
     6f4:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     6f8:	22 2f       	mov	r18, r18
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	20 50       	subi	r18, 0x00	; 0
     6fe:	3f 4f       	sbci	r19, 0xFF	; 255
     700:	f9 01       	movw	r30, r18
     702:	20 81       	ld	r18, Z
     704:	20 7f       	andi	r18, 0xF0	; 240
     706:	24 2b       	or	r18, r20
     708:	fc 01       	movw	r30, r24
     70a:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (au8Red[u8RGBIdx] & DATA_LOW_BITMASK);
     70c:	85 e2       	ldi	r24, 0x25	; 37
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	25 e2       	ldi	r18, 0x25	; 37
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	f9 01       	movw	r30, r18
     716:	20 81       	ld	r18, Z
     718:	42 2f       	mov	r20, r18
     71a:	40 7f       	andi	r20, 0xF0	; 240
     71c:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     720:	22 2f       	mov	r18, r18
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	20 50       	subi	r18, 0x00	; 0
     726:	3f 4f       	sbci	r19, 0xFF	; 255
     728:	f9 01       	movw	r30, r18
     72a:	20 81       	ld	r18, Z
     72c:	2f 70       	andi	r18, 0x0F	; 15
     72e:	24 2b       	or	r18, r20
     730:	fc 01       	movw	r30, r24
     732:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     734:	8b e2       	ldi	r24, 0x2B	; 43
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	2b e2       	ldi	r18, 0x2B	; 43
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	f9 01       	movw	r30, r18
     73e:	20 81       	ld	r18, Z
     740:	28 60       	ori	r18, 0x08	; 8
     742:	fc 01       	movw	r30, r24
     744:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     746:	8b e2       	ldi	r24, 0x2B	; 43
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	2b e2       	ldi	r18, 0x2B	; 43
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	f9 01       	movw	r30, r18
     750:	20 81       	ld	r18, Z
     752:	27 7f       	andi	r18, 0xF7	; 247
     754:	fc 01       	movw	r30, r24
     756:	20 83       	st	Z, r18
				u8RGBByteIdx++;
     758:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     75c:	8f 5f       	subi	r24, 0xFF	; 255
     75e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
				break;
     762:	45 c0       	rjmp	.+138    	; 0x7ee <__vector_1+0x35a>

				case 2:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (au8Blue[u8RGBIdx] & DATA_HIGH_BITMASK);
     764:	82 e2       	ldi	r24, 0x22	; 34
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	22 e2       	ldi	r18, 0x22	; 34
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	f9 01       	movw	r30, r18
     76e:	20 81       	ld	r18, Z
     770:	42 2f       	mov	r20, r18
     772:	4f 70       	andi	r20, 0x0F	; 15
     774:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     778:	22 2f       	mov	r18, r18
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	28 5d       	subi	r18, 0xD8	; 216
     77e:	3e 4f       	sbci	r19, 0xFE	; 254
     780:	f9 01       	movw	r30, r18
     782:	20 81       	ld	r18, Z
     784:	20 7f       	andi	r18, 0xF0	; 240
     786:	24 2b       	or	r18, r20
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (au8Blue[u8RGBIdx] & DATA_LOW_BITMASK);
     78c:	85 e2       	ldi	r24, 0x25	; 37
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	25 e2       	ldi	r18, 0x25	; 37
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	f9 01       	movw	r30, r18
     796:	20 81       	ld	r18, Z
     798:	42 2f       	mov	r20, r18
     79a:	40 7f       	andi	r20, 0xF0	; 240
     79c:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     7a0:	22 2f       	mov	r18, r18
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	28 5d       	subi	r18, 0xD8	; 216
     7a6:	3e 4f       	sbci	r19, 0xFE	; 254
     7a8:	f9 01       	movw	r30, r18
     7aa:	20 81       	ld	r18, Z
     7ac:	2f 70       	andi	r18, 0x0F	; 15
     7ae:	24 2b       	or	r18, r20
     7b0:	fc 01       	movw	r30, r24
     7b2:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     7b4:	8b e2       	ldi	r24, 0x2B	; 43
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	2b e2       	ldi	r18, 0x2B	; 43
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	f9 01       	movw	r30, r18
     7be:	20 81       	ld	r18, Z
     7c0:	28 60       	ori	r18, 0x08	; 8
     7c2:	fc 01       	movw	r30, r24
     7c4:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     7c6:	8b e2       	ldi	r24, 0x2B	; 43
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	2b e2       	ldi	r18, 0x2B	; 43
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	f9 01       	movw	r30, r18
     7d0:	20 81       	ld	r18, Z
     7d2:	27 7f       	andi	r18, 0xF7	; 247
     7d4:	fc 01       	movw	r30, r24
     7d6:	20 83       	st	Z, r18
				u8RGBByteIdx=0;
     7d8:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
				u8RGBIdx++;
     7dc:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8RGBIdx>
     7e0:	8f 5f       	subi	r24, 0xFF	; 255
     7e2:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <u8RGBIdx>
				break;
     7e6:	00 00       	nop
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <__vector_1+0x35a>
			}
		}
		else
		{
			u8RGBDataState = 0;
     7ea:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <u8RGBDataState>
		}
	}
	
	
	#ifdef TX_DEBUG
	PORTD &= ~(1<<PORTD1);
     7ee:	8b e2       	ldi	r24, 0x2B	; 43
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	2b e2       	ldi	r18, 0x2B	; 43
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	f9 01       	movw	r30, r18
     7f8:	20 81       	ld	r18, Z
     7fa:	2d 7f       	andi	r18, 0xFD	; 253
     7fc:	fc 01       	movw	r30, r24
     7fe:	20 83       	st	Z, r18
	#endif
}
     800:	00 00       	nop
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	ff 91       	pop	r31
     808:	ef 91       	pop	r30
     80a:	9f 91       	pop	r25
     80c:	8f 91       	pop	r24
     80e:	4f 91       	pop	r20
     810:	3f 91       	pop	r19
     812:	2f 91       	pop	r18
     814:	0f 90       	pop	r0
     816:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     81a:	0f 90       	pop	r0
     81c:	1f 90       	pop	r1
     81e:	18 95       	reti

00000820 <__vector_9>:

ISR(TIMER2_COMPA_vect)
{
     820:	1f 92       	push	r1
     822:	0f 92       	push	r0
     824:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     828:	0f 92       	push	r0
     82a:	11 24       	eor	r1, r1
     82c:	af 92       	push	r10
     82e:	bf 92       	push	r11
     830:	cf 92       	push	r12
     832:	df 92       	push	r13
     834:	ef 92       	push	r14
     836:	ff 92       	push	r15
     838:	0f 93       	push	r16
     83a:	1f 93       	push	r17
     83c:	2f 93       	push	r18
     83e:	3f 93       	push	r19
     840:	4f 93       	push	r20
     842:	5f 93       	push	r21
     844:	6f 93       	push	r22
     846:	7f 93       	push	r23
     848:	8f 93       	push	r24
     84a:	9f 93       	push	r25
     84c:	af 93       	push	r26
     84e:	bf 93       	push	r27
     850:	ef 93       	push	r30
     852:	ff 93       	push	r31
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
	#ifdef TX_DEBUG
	PORTD |= (1<<PORTD1);
     85c:	8b e2       	ldi	r24, 0x2B	; 43
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	2b e2       	ldi	r18, 0x2B	; 43
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	f9 01       	movw	r30, r18
     866:	20 81       	ld	r18, Z
     868:	22 60       	ori	r18, 0x02	; 2
     86a:	fc 01       	movw	r30, r24
     86c:	20 83       	st	Z, r18
	#endif
	
	switch(u8PLEDAnimation)
     86e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <u8PLEDAnimation>
     872:	88 2f       	mov	r24, r24
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	81 30       	cpi	r24, 0x01	; 1
     878:	91 05       	cpc	r25, r1
     87a:	21 f0       	breq	.+8      	; 0x884 <__vector_9+0x64>
     87c:	02 97       	sbiw	r24, 0x02	; 2
     87e:	09 f4       	brne	.+2      	; 0x882 <__vector_9+0x62>
     880:	e9 c0       	rjmp	.+466    	; 0xa54 <__stack+0x155>
     882:	14 c1       	rjmp	.+552    	; 0xaac <__stack+0x1ad>
	{
		case 1:
		if(u8PLEDFadeDirection) // rise
     884:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <u8PLEDFadeDirection>
     888:	88 23       	and	r24, r24
     88a:	09 f4       	brne	.+2      	; 0x88e <__vector_9+0x6e>
     88c:	72 c0       	rjmp	.+228    	; 0x972 <__stack+0x73>
		{
			u32PLEDFadeIntCount++;
     88e:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <u32PLEDFadeIntCount>
     892:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <u32PLEDFadeIntCount+0x1>
     896:	a0 91 65 01 	lds	r26, 0x0165	; 0x800165 <u32PLEDFadeIntCount+0x2>
     89a:	b0 91 66 01 	lds	r27, 0x0166	; 0x800166 <u32PLEDFadeIntCount+0x3>
     89e:	01 96       	adiw	r24, 0x01	; 1
     8a0:	a1 1d       	adc	r26, r1
     8a2:	b1 1d       	adc	r27, r1
     8a4:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <u32PLEDFadeIntCount>
     8a8:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <u32PLEDFadeIntCount+0x1>
     8ac:	a0 93 65 01 	sts	0x0165, r26	; 0x800165 <u32PLEDFadeIntCount+0x2>
     8b0:	b0 93 66 01 	sts	0x0166, r27	; 0x800166 <u32PLEDFadeIntCount+0x3>
			if(u32PLEDFadeIntCount>=u32PLEDFadeIntStep)
     8b4:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <u32PLEDFadeIntCount>
     8b8:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <u32PLEDFadeIntCount+0x1>
     8bc:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <u32PLEDFadeIntCount+0x2>
     8c0:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <u32PLEDFadeIntCount+0x3>
     8c4:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <u32PLEDFadeIntStep>
     8c8:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <u32PLEDFadeIntStep+0x1>
     8cc:	a0 91 61 01 	lds	r26, 0x0161	; 0x800161 <u32PLEDFadeIntStep+0x2>
     8d0:	b0 91 62 01 	lds	r27, 0x0162	; 0x800162 <u32PLEDFadeIntStep+0x3>
     8d4:	28 17       	cp	r18, r24
     8d6:	39 07       	cpc	r19, r25
     8d8:	4a 07       	cpc	r20, r26
     8da:	5b 07       	cpc	r21, r27
     8dc:	08 f4       	brcc	.+2      	; 0x8e0 <__vector_9+0xc0>
     8de:	e3 c0       	rjmp	.+454    	; 0xaa6 <__stack+0x1a7>
			{
				u32PLEDFadeIntCount = 0;
     8e0:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <u32PLEDFadeIntCount>
     8e4:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <u32PLEDFadeIntCount+0x1>
     8e8:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <u32PLEDFadeIntCount+0x2>
     8ec:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <u32PLEDFadeIntCount+0x3>
				u16PLEDFadeCurrValue++;
     8f0:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     8f4:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     8fe:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <u16PLEDFadeCurrValue>
				setPWMDuty(u16PLEDFadeCurrValue);
     902:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     906:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     90a:	0e 94 e5 16 	call	0x2dca	; 0x2dca <setPWMDuty>
				u8Duty = Map(u16PLEDFadeCurrValue,0,511,0,100);
     90e:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     912:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     916:	cc 01       	movw	r24, r24
     918:	a0 e0       	ldi	r26, 0x00	; 0
     91a:	b0 e0       	ldi	r27, 0x00	; 0
     91c:	1f 92       	push	r1
     91e:	1f 92       	push	r1
     920:	1f 92       	push	r1
     922:	24 e6       	ldi	r18, 0x64	; 100
     924:	2f 93       	push	r18
     926:	a1 2c       	mov	r10, r1
     928:	b1 2c       	mov	r11, r1
     92a:	65 01       	movw	r12, r10
     92c:	e1 2c       	mov	r14, r1
     92e:	f1 2c       	mov	r15, r1
     930:	87 01       	movw	r16, r14
     932:	ea 94       	dec	r14
     934:	f3 94       	inc	r15
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	a9 01       	movw	r20, r18
     93c:	bc 01       	movw	r22, r24
     93e:	cd 01       	movw	r24, r26
     940:	0e 94 2b 18 	call	0x3056	; 0x3056 <Map>
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	dc 01       	movw	r26, r24
     94e:	cb 01       	movw	r24, r22
     950:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <u8Duty>

				if(u16PLEDFadeCurrValue>=u16PLEDFadeStopValue)
     954:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     958:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     95c:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <u16PLEDFadeStopValue>
     960:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <u16PLEDFadeStopValue+0x1>
     964:	28 17       	cp	r18, r24
     966:	39 07       	cpc	r19, r25
     968:	08 f4       	brcc	.+2      	; 0x96c <__stack+0x6d>
     96a:	9d c0       	rjmp	.+314    	; 0xaa6 <__stack+0x1a7>
				{
					u8PLEDAnimation = 0;
     96c:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <u8PLEDAnimation>
				{
					u8PLEDAnimation = 0;
				}
			}
		}
		break;
     970:	9a c0       	rjmp	.+308    	; 0xaa6 <__stack+0x1a7>
				}
			}
		}
		else // fall
		{
			u32PLEDFadeIntCount++;
     972:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <u32PLEDFadeIntCount>
     976:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <u32PLEDFadeIntCount+0x1>
     97a:	a0 91 65 01 	lds	r26, 0x0165	; 0x800165 <u32PLEDFadeIntCount+0x2>
     97e:	b0 91 66 01 	lds	r27, 0x0166	; 0x800166 <u32PLEDFadeIntCount+0x3>
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	a1 1d       	adc	r26, r1
     986:	b1 1d       	adc	r27, r1
     988:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <u32PLEDFadeIntCount>
     98c:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <u32PLEDFadeIntCount+0x1>
     990:	a0 93 65 01 	sts	0x0165, r26	; 0x800165 <u32PLEDFadeIntCount+0x2>
     994:	b0 93 66 01 	sts	0x0166, r27	; 0x800166 <u32PLEDFadeIntCount+0x3>
			if(u32PLEDFadeIntCount>=u32PLEDFadeIntStep)
     998:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <u32PLEDFadeIntCount>
     99c:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <u32PLEDFadeIntCount+0x1>
     9a0:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <u32PLEDFadeIntCount+0x2>
     9a4:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <u32PLEDFadeIntCount+0x3>
     9a8:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <u32PLEDFadeIntStep>
     9ac:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <u32PLEDFadeIntStep+0x1>
     9b0:	a0 91 61 01 	lds	r26, 0x0161	; 0x800161 <u32PLEDFadeIntStep+0x2>
     9b4:	b0 91 62 01 	lds	r27, 0x0162	; 0x800162 <u32PLEDFadeIntStep+0x3>
     9b8:	28 17       	cp	r18, r24
     9ba:	39 07       	cpc	r19, r25
     9bc:	4a 07       	cpc	r20, r26
     9be:	5b 07       	cpc	r21, r27
     9c0:	08 f4       	brcc	.+2      	; 0x9c4 <__stack+0xc5>
     9c2:	71 c0       	rjmp	.+226    	; 0xaa6 <__stack+0x1a7>
			{
				u32PLEDFadeIntCount = 0;
     9c4:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <u32PLEDFadeIntCount>
     9c8:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <u32PLEDFadeIntCount+0x1>
     9cc:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <u32PLEDFadeIntCount+0x2>
     9d0:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <u32PLEDFadeIntCount+0x3>
				u16PLEDFadeCurrValue--;
     9d4:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     9d8:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     9e2:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <u16PLEDFadeCurrValue>
				setPWMDuty(u16PLEDFadeCurrValue);
     9e6:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     9ea:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     9ee:	0e 94 e5 16 	call	0x2dca	; 0x2dca <setPWMDuty>
				u8Duty = Map(u16PLEDFadeCurrValue,0,511,0,100);
     9f2:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     9f6:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     9fa:	cc 01       	movw	r24, r24
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	1f 92       	push	r1
     a02:	1f 92       	push	r1
     a04:	1f 92       	push	r1
     a06:	24 e6       	ldi	r18, 0x64	; 100
     a08:	2f 93       	push	r18
     a0a:	a1 2c       	mov	r10, r1
     a0c:	b1 2c       	mov	r11, r1
     a0e:	65 01       	movw	r12, r10
     a10:	e1 2c       	mov	r14, r1
     a12:	f1 2c       	mov	r15, r1
     a14:	87 01       	movw	r16, r14
     a16:	ea 94       	dec	r14
     a18:	f3 94       	inc	r15
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	a9 01       	movw	r20, r18
     a20:	bc 01       	movw	r22, r24
     a22:	cd 01       	movw	r24, r26
     a24:	0e 94 2b 18 	call	0x3056	; 0x3056 <Map>
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	dc 01       	movw	r26, r24
     a32:	cb 01       	movw	r24, r22
     a34:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <u8Duty>

				if(u16PLEDFadeCurrValue<=u16PLEDFadeStopValue)
     a38:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <u16PLEDFadeCurrValue>
     a3c:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <u16PLEDFadeCurrValue+0x1>
     a40:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <u16PLEDFadeStopValue>
     a44:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <u16PLEDFadeStopValue+0x1>
     a48:	82 17       	cp	r24, r18
     a4a:	93 07       	cpc	r25, r19
     a4c:	60 f1       	brcs	.+88     	; 0xaa6 <__stack+0x1a7>
				{
					u8PLEDAnimation = 0;
     a4e:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <u8PLEDAnimation>
				}
			}
		}
		break;
     a52:	29 c0       	rjmp	.+82     	; 0xaa6 <__stack+0x1a7>
		
		case 2:
		if(u16PLEDStrobeCount<u16PLEDStrobeOn)
     a54:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <u16PLEDStrobeCount>
     a58:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <u16PLEDStrobeCount+0x1>
     a5c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <u16PLEDStrobeOn>
     a60:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <u16PLEDStrobeOn+0x1>
     a64:	28 17       	cp	r18, r24
     a66:	39 07       	cpc	r19, r25
     a68:	18 f4       	brcc	.+6      	; 0xa70 <__stack+0x171>
		{
			enablePLED();
     a6a:	0e 94 7d 15 	call	0x2afa	; 0x2afa <enablePLED>
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <__stack+0x175>
		}
		else
		{
			disablePLED();
     a70:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <disablePLED>
		}
		
		u16PLEDStrobeCount++;
     a74:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <u16PLEDStrobeCount>
     a78:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <u16PLEDStrobeCount+0x1>
     a7c:	01 96       	adiw	r24, 0x01	; 1
     a7e:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <u16PLEDStrobeCount+0x1>
     a82:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <u16PLEDStrobeCount>
		if(u16PLEDStrobeCount>=u16PLEDStrobeTotal)
     a86:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <u16PLEDStrobeCount>
     a8a:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <u16PLEDStrobeCount+0x1>
     a8e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <u16PLEDStrobeTotal>
     a92:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <u16PLEDStrobeTotal+0x1>
     a96:	28 17       	cp	r18, r24
     a98:	39 07       	cpc	r19, r25
     a9a:	38 f0       	brcs	.+14     	; 0xaaa <__stack+0x1ab>
		{
			u16PLEDStrobeCount = 0;
     a9c:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <u16PLEDStrobeCount+0x1>
     aa0:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <u16PLEDStrobeCount>
		}
		break;
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <__stack+0x1ab>
				{
					u8PLEDAnimation = 0;
				}
			}
		}
		break;
     aa6:	00 00       	nop
     aa8:	01 c0       	rjmp	.+2      	; 0xaac <__stack+0x1ad>
		u16PLEDStrobeCount++;
		if(u16PLEDStrobeCount>=u16PLEDStrobeTotal)
		{
			u16PLEDStrobeCount = 0;
		}
		break;
     aaa:	00 00       	nop
	}
	
	if(u8RGBAnimation)
     aac:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u8RGBAnimation>
     ab0:	88 23       	and	r24, r24
     ab2:	09 f4       	brne	.+2      	; 0xab6 <__stack+0x1b7>
     ab4:	48 c0       	rjmp	.+144    	; 0xb46 <__stack+0x247>
	{
		if(u8RGBBounce)
     ab6:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8RGBBounce>
     aba:	88 23       	and	r24, r24
     abc:	71 f1       	breq	.+92     	; 0xb1a <__stack+0x21b>
		{
			if(u8RGBBounceDirection==0) //normal
     abe:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <u8RGBBounceDirection>
     ac2:	88 23       	and	r24, r24
     ac4:	c1 f4       	brne	.+48     	; 0xaf6 <__stack+0x1f7>
			{
				u16RGBTimeCounter++;
     ac6:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
     aca:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <u16RGBTimeCounter+0x1>
     ad4:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <u16RGBTimeCounter>
				if(u16RGBTimeCounter>=u16RGBTime)
     ad8:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <u16RGBTimeCounter>
     adc:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
     ae0:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
     ae4:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	60 f1       	brcs	.+88     	; 0xb46 <__stack+0x247>
				{
					u8RGBBounceDirection = 1;
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <u8RGBBounceDirection>
     af4:	28 c0       	rjmp	.+80     	; 0xb46 <__stack+0x247>
					//u16RGBTimeCounter--;
				}
			}
			else //reverse
			{
				u16RGBTimeCounter--;
     af6:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
     afa:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <u16RGBTimeCounter+0x1>
     b04:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <u16RGBTimeCounter>
				if(u16RGBTimeCounter==0)
     b08:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
     b0c:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
     b10:	89 2b       	or	r24, r25
     b12:	c9 f4       	brne	.+50     	; 0xb46 <__stack+0x247>
				{
					u8RGBBounceDirection = 0;
     b14:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <u8RGBBounceDirection>
     b18:	16 c0       	rjmp	.+44     	; 0xb46 <__stack+0x247>
				}
			}
		}
		else
		{
			u16RGBTimeCounter++;
     b1a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
     b1e:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
     b22:	01 96       	adiw	r24, 0x01	; 1
     b24:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <u16RGBTimeCounter+0x1>
     b28:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <u16RGBTimeCounter>
			if(u16RGBTimeCounter>=u16RGBTime)
     b2c:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <u16RGBTimeCounter>
     b30:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
     b34:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
     b38:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
     b3c:	28 17       	cp	r18, r24
     b3e:	39 07       	cpc	r19, r25
     b40:	10 f0       	brcs	.+4      	; 0xb46 <__stack+0x247>
			{
				u8RGBAnimation = 0;
     b42:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <u8RGBAnimation>
		}
		
		
	}
	
	if(u8RGBDataState==1)
     b46:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8RGBDataState>
     b4a:	81 30       	cpi	r24, 0x01	; 1
     b4c:	49 f4       	brne	.+18     	; 0xb60 <__stack+0x261>
	{
		u8RGBDataState = 2;
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBDataState>
		
		u8RGBByteIdx = 0;
     b54:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
		u8RGBIdx = 0;
     b58:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <u8RGBIdx>
		INT0_vect();
     b5c:	0e 94 4a 02 	call	0x494	; 0x494 <__vector_1>
	}

	#ifdef TX_DEBUG
	PORTD &= ~(1<<PORTD1);
     b60:	8b e2       	ldi	r24, 0x2B	; 43
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	2b e2       	ldi	r18, 0x2B	; 43
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	f9 01       	movw	r30, r18
     b6a:	20 81       	ld	r18, Z
     b6c:	2d 7f       	andi	r18, 0xFD	; 253
     b6e:	fc 01       	movw	r30, r24
     b70:	20 83       	st	Z, r18
	#endif
}
     b72:	00 00       	nop
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	ff 91       	pop	r31
     b7a:	ef 91       	pop	r30
     b7c:	bf 91       	pop	r27
     b7e:	af 91       	pop	r26
     b80:	9f 91       	pop	r25
     b82:	8f 91       	pop	r24
     b84:	7f 91       	pop	r23
     b86:	6f 91       	pop	r22
     b88:	5f 91       	pop	r21
     b8a:	4f 91       	pop	r20
     b8c:	3f 91       	pop	r19
     b8e:	2f 91       	pop	r18
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	ff 90       	pop	r15
     b96:	ef 90       	pop	r14
     b98:	df 90       	pop	r13
     b9a:	cf 90       	pop	r12
     b9c:	bf 90       	pop	r11
     b9e:	af 90       	pop	r10
     ba0:	0f 90       	pop	r0
     ba2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <__vector_19>:


ISR(SPI_STC_vect)
{
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     bb4:	0f 92       	push	r0
     bb6:	11 24       	eor	r1, r1
     bb8:	2f 93       	push	r18
     bba:	3f 93       	push	r19
     bbc:	4f 93       	push	r20
     bbe:	5f 93       	push	r21
     bc0:	6f 93       	push	r22
     bc2:	7f 93       	push	r23
     bc4:	8f 93       	push	r24
     bc6:	9f 93       	push	r25
     bc8:	af 93       	push	r26
     bca:	bf 93       	push	r27
     bcc:	ef 93       	push	r30
     bce:	ff 93       	push	r31
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	1f 92       	push	r1
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8spiData = SPDR0;
     bda:	8e e4       	ldi	r24, 0x4E	; 78
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	fc 01       	movw	r30, r24
     be0:	80 81       	ld	r24, Z
     be2:	89 83       	std	Y+1, r24	; 0x01
	
	#ifdef TX_DEBUG
	PORTD |= (1<<PORTD1);
     be4:	8b e2       	ldi	r24, 0x2B	; 43
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	2b e2       	ldi	r18, 0x2B	; 43
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	f9 01       	movw	r30, r18
     bee:	20 81       	ld	r18, Z
     bf0:	22 60       	ori	r18, 0x02	; 2
     bf2:	fc 01       	movw	r30, r24
     bf4:	20 83       	st	Z, r18
	#endif
	
	SPDR0 = 0;
     bf6:	8e e4       	ldi	r24, 0x4E	; 78
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	fc 01       	movw	r30, r24
     bfc:	10 82       	st	Z, r1

	switch(SPIBUFFER.spiState)
     bfe:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <SPIBUFFER+0x42>
     c02:	88 2f       	mov	r24, r24
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	09 2e       	mov	r0, r25
     c08:	00 0c       	add	r0, r0
     c0a:	aa 0b       	sbc	r26, r26
     c0c:	bb 0b       	sbc	r27, r27
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	26 e0       	ldi	r18, 0x06	; 6
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	84 1b       	sub	r24, r20
     c18:	95 0b       	sbc	r25, r21
     c1a:	28 17       	cp	r18, r24
     c1c:	39 07       	cpc	r19, r25
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__vector_19+0x76>
     c20:	11 c1       	rjmp	.+546    	; 0xe44 <__vector_19+0x298>
     c22:	82 5c       	subi	r24, 0xC2	; 194
     c24:	9f 4f       	sbci	r25, 0xFF	; 255
     c26:	fc 01       	movw	r30, r24
     c28:	0c 94 4c 19 	jmp	0x3298	; 0x3298 <__tablejump2__>
	{
		case READY:
			if(u8spiData>=3)
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	83 30       	cpi	r24, 0x03	; 3
     c30:	90 f0       	brcs	.+36     	; 0xc56 <__vector_19+0xaa>
			{
				SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
     c32:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     c36:	88 2f       	mov	r24, r24
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	8c 50       	subi	r24, 0x0C	; 12
     c3c:	9e 4f       	sbci	r25, 0xFE	; 254
     c3e:	29 81       	ldd	r18, Y+1	; 0x01
     c40:	fc 01       	movw	r30, r24
     c42:	20 83       	st	Z, r18
				SPIBUFFER.u8Count++;
     c44:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     c48:	8f 5f       	subi	r24, 0xFF	; 255
     c4a:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <SPIBUFFER+0x40>
				SPIBUFFER.spiState = WRITE;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <SPIBUFFER+0x42>
			}
			else
			{
				SPIBUFFER.spiState = READ;
			}
		break;
     c54:	f7 c0       	rjmp	.+494    	; 0xe44 <__vector_19+0x298>
				SPIBUFFER.u8Count++;
				SPIBUFFER.spiState = WRITE;
			}
			else
			{
				SPIBUFFER.spiState = READ;
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <SPIBUFFER+0x42>
			}
		break;
     c5c:	f3 c0       	rjmp	.+486    	; 0xe44 <__vector_19+0x298>

		case WRITE:
			SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
     c5e:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     c62:	88 2f       	mov	r24, r24
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	8c 50       	subi	r24, 0x0C	; 12
     c68:	9e 4f       	sbci	r25, 0xFE	; 254
     c6a:	29 81       	ldd	r18, Y+1	; 0x01
     c6c:	fc 01       	movw	r30, r24
     c6e:	20 83       	st	Z, r18
			SPIBUFFER.u8Count++;
     c70:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     c74:	8f 5f       	subi	r24, 0xFF	; 255
     c76:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <SPIBUFFER+0x40>
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
     c7a:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     c7e:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <SPIBUFFER>
     c82:	98 17       	cp	r25, r24
     c84:	08 f4       	brcc	.+2      	; 0xc88 <__vector_19+0xdc>
     c86:	db c0       	rjmp	.+438    	; 0xe3e <__vector_19+0x292>
			{
				SPIBUFFER.spiState = DONE_WRITE;
     c88:	84 e0       	ldi	r24, 0x04	; 4
     c8a:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <SPIBUFFER+0x42>
			}
		break;
     c8e:	d7 c0       	rjmp	.+430    	; 0xe3e <__vector_19+0x292>

		case READ:
			SPIBUFFER.u8Count = 0;
     c90:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <SPIBUFFER+0x40>
			
			switch(u8spiData)
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	88 2f       	mov	r24, r24
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	82 3f       	cpi	r24, 0xF2	; 242
     c9c:	91 05       	cpc	r25, r1
     c9e:	79 f1       	breq	.+94     	; 0xcfe <__vector_19+0x152>
     ca0:	83 3f       	cpi	r24, 0xF3	; 243
     ca2:	91 05       	cpc	r25, r1
     ca4:	24 f4       	brge	.+8      	; 0xcae <__vector_19+0x102>
     ca6:	81 3f       	cpi	r24, 0xF1	; 241
     ca8:	91 05       	cpc	r25, r1
     caa:	51 f0       	breq	.+20     	; 0xcc0 <__vector_19+0x114>
     cac:	a6 c0       	rjmp	.+332    	; 0xdfa <__vector_19+0x24e>
     cae:	83 3f       	cpi	r24, 0xF3	; 243
     cb0:	91 05       	cpc	r25, r1
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <__vector_19+0x10a>
     cb4:	43 c0       	rjmp	.+134    	; 0xd3c <__vector_19+0x190>
     cb6:	84 3f       	cpi	r24, 0xF4	; 244
     cb8:	91 05       	cpc	r25, r1
     cba:	09 f4       	brne	.+2      	; 0xcbe <__vector_19+0x112>
     cbc:	5e c0       	rjmp	.+188    	; 0xd7a <__vector_19+0x1ce>
     cbe:	9d c0       	rjmp	.+314    	; 0xdfa <__vector_19+0x24e>
			{
				case 0xF1:
					SPDR0 = 0x01;
     cc0:	8e e4       	ldi	r24, 0x4E	; 78
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	21 e0       	ldi	r18, 0x01	; 1
     cc6:	fc 01       	movw	r30, r24
     cc8:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     cca:	84 e0       	ldi	r24, 0x04	; 4
     ccc:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = u8Status;
     cd6:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <u8Status>
     cda:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     cde:	63 e0       	ldi	r22, 0x03	; 3
     ce0:	84 ef       	ldi	r24, 0xF4	; 244
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	0e 94 a2 18 	call	0x3144	; 0x3144 <CRC8>
     ce8:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     cec:	84 e0       	ldi	r24, 0x04	; 4
     cee:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     cf2:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     cf6:	83 e0       	ldi	r24, 0x03	; 3
     cf8:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <SPIBUFFER+0x42>
				break;
     cfc:	82 c0       	rjmp	.+260    	; 0xe02 <__vector_19+0x256>
				
				case 0xF2:
					SPDR0 = 0x01;
     cfe:	8e e4       	ldi	r24, 0x4E	; 78
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	21 e0       	ldi	r18, 0x01	; 1
     d04:	fc 01       	movw	r30, r24
     d06:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     d08:	84 e0       	ldi	r24, 0x04	; 4
     d0a:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = u8Duty;
     d14:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <u8Duty>
     d18:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     d1c:	63 e0       	ldi	r22, 0x03	; 3
     d1e:	84 ef       	ldi	r24, 0xF4	; 244
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	0e 94 a2 18 	call	0x3144	; 0x3144 <CRC8>
     d26:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     d30:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     d34:	83 e0       	ldi	r24, 0x03	; 3
     d36:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <SPIBUFFER+0x42>
				break;
     d3a:	63 c0       	rjmp	.+198    	; 0xe02 <__vector_19+0x256>
				
				case 0xF3:
					SPDR0 = 0x01;
     d3c:	8e e4       	ldi	r24, 0x4E	; 78
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	21 e0       	ldi	r18, 0x01	; 1
     d42:	fc 01       	movw	r30, r24
     d44:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     d46:	84 e0       	ldi	r24, 0x04	; 4
     d48:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = adcGetTemperature();
     d52:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <adcGetTemperature>
     d56:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     d5a:	63 e0       	ldi	r22, 0x03	; 3
     d5c:	84 ef       	ldi	r24, 0xF4	; 244
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	0e 94 a2 18 	call	0x3144	; 0x3144 <CRC8>
     d64:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     d68:	84 e0       	ldi	r24, 0x04	; 4
     d6a:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     d6e:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     d72:	83 e0       	ldi	r24, 0x03	; 3
     d74:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <SPIBUFFER+0x42>
				break;
     d78:	44 c0       	rjmp	.+136    	; 0xe02 <__vector_19+0x256>

				case 0xF4:
					SPDR0 = 0x01;
     d7a:	8e e4       	ldi	r24, 0x4E	; 78
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	21 e0       	ldi	r18, 0x01	; 1
     d80:	fc 01       	movw	r30, r24
     d82:	20 83       	st	Z, r18
					if(u8PLEDAnimation) // ongoing fade
     d84:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <u8PLEDAnimation>
     d88:	88 23       	and	r24, r24
     d8a:	09 f1       	breq	.+66     	; 0xdce <__vector_19+0x222>
					{
						SPIBUFFER.au8Buffer[0] = 7;
     d8c:	87 e0       	ldi	r24, 0x07	; 7
     d8e:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <SPIBUFFER>
						SPIBUFFER.au8Buffer[1] = u8spiData;
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <SPIBUFFER+0x1>
						SPIBUFFER.au8Buffer[2] = u8PLEDFadeStartPercent;
     d98:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <u8PLEDFadeStartPercent>
     d9c:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <SPIBUFFER+0x2>
						SPIBUFFER.au8Buffer[3] = u8PLEDFadeStopPercent;
     da0:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <u8PLEDFadeStopPercent>
     da4:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <SPIBUFFER+0x3>
						SPIBUFFER.au8Buffer[4] = u8PLEDFadeTime;
     da8:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <u8PLEDFadeTime>
     dac:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <SPIBUFFER+0x4>
						SPIBUFFER.au8Buffer[5] = u8Duty;
     db0:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <u8Duty>
     db4:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <SPIBUFFER+0x5>
						SPIBUFFER.au8Buffer[6] = CRC8(&SPIBUFFER.au8Buffer[0],6);
     db8:	66 e0       	ldi	r22, 0x06	; 6
     dba:	84 ef       	ldi	r24, 0xF4	; 244
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	0e 94 a2 18 	call	0x3144	; 0x3144 <CRC8>
     dc2:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <SPIBUFFER+0x6>
						SPIBUFFER.u8Count = 7;
     dc6:	87 e0       	ldi	r24, 0x07	; 7
     dc8:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <SPIBUFFER+0x40>
     dcc:	10 c0       	rjmp	.+32     	; 0xdee <__vector_19+0x242>
					}
					else // no ongoing fade
					{
						SPIBUFFER.au8Buffer[0] = 3;
     dce:	83 e0       	ldi	r24, 0x03	; 3
     dd0:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <SPIBUFFER>
						SPIBUFFER.au8Buffer[1] = u8spiData;
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <SPIBUFFER+0x1>
						SPIBUFFER.au8Buffer[2] = CRC8(&SPIBUFFER.au8Buffer[0],2);
     dda:	62 e0       	ldi	r22, 0x02	; 2
     ddc:	84 ef       	ldi	r24, 0xF4	; 244
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	0e 94 a2 18 	call	0x3144	; 0x3144 <CRC8>
     de4:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <SPIBUFFER+0x2>
						SPIBUFFER.u8Count = 3;
     de8:	83 e0       	ldi	r24, 0x03	; 3
     dea:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <SPIBUFFER+0x40>
					}
					SPIBUFFER.u8ReadReturnCount = 0;
     dee:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     df2:	83 e0       	ldi	r24, 0x03	; 3
     df4:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <SPIBUFFER+0x42>
				break;
     df8:	04 c0       	rjmp	.+8      	; 0xe02 <__vector_19+0x256>
				
				default:
					SPIBUFFER.spiState = IDLE;
     dfa:	86 e0       	ldi	r24, 0x06	; 6
     dfc:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <SPIBUFFER+0x42>
				break;
     e00:	00 00       	nop
			}
		break;
     e02:	20 c0       	rjmp	.+64     	; 0xe44 <__vector_19+0x298>
		
		case READ_RETURN:
			SPDR0 = SPIBUFFER.au8Buffer[SPIBUFFER.u8ReadReturnCount];
     e04:	8e e4       	ldi	r24, 0x4E	; 78
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <SPIBUFFER+0x41>
     e0c:	22 2f       	mov	r18, r18
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	2c 50       	subi	r18, 0x0C	; 12
     e12:	3e 4f       	sbci	r19, 0xFE	; 254
     e14:	f9 01       	movw	r30, r18
     e16:	20 81       	ld	r18, Z
     e18:	fc 01       	movw	r30, r24
     e1a:	20 83       	st	Z, r18
			SPIBUFFER.u8ReadReturnCount++;
     e1c:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <SPIBUFFER+0x41>
     e20:	8f 5f       	subi	r24, 0xFF	; 255
     e22:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <SPIBUFFER+0x41>
			if(SPIBUFFER.u8Count == SPIBUFFER.u8ReadReturnCount)
     e26:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     e2a:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <SPIBUFFER+0x41>
     e2e:	98 17       	cp	r25, r24
     e30:	41 f4       	brne	.+16     	; 0xe42 <__vector_19+0x296>
			{
				SPIBUFFER.spiState = DONE_READ;
     e32:	85 e0       	ldi	r24, 0x05	; 5
     e34:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <SPIBUFFER+0x42>
			}
		break;
     e38:	04 c0       	rjmp	.+8      	; 0xe42 <__vector_19+0x296>
		
		break;

		case IDLE:

		break;
     e3a:	00 00       	nop
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <__vector_19+0x298>
			SPIBUFFER.u8Count++;
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
			{
				SPIBUFFER.spiState = DONE_WRITE;
			}
		break;
     e3e:	00 00       	nop
     e40:	01 c0       	rjmp	.+2      	; 0xe44 <__vector_19+0x298>
			SPIBUFFER.u8ReadReturnCount++;
			if(SPIBUFFER.u8Count == SPIBUFFER.u8ReadReturnCount)
			{
				SPIBUFFER.spiState = DONE_READ;
			}
		break;
     e42:	00 00       	nop
		case IDLE:

		break;
	}
	#ifdef TX_DEBUG
	PORTD &= ~(1<<PORTD1);
     e44:	8b e2       	ldi	r24, 0x2B	; 43
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	2b e2       	ldi	r18, 0x2B	; 43
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	f9 01       	movw	r30, r18
     e4e:	20 81       	ld	r18, Z
     e50:	2d 7f       	andi	r18, 0xFD	; 253
     e52:	fc 01       	movw	r30, r24
     e54:	20 83       	st	Z, r18
	#endif
}
     e56:	00 00       	nop
     e58:	0f 90       	pop	r0
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	ff 91       	pop	r31
     e60:	ef 91       	pop	r30
     e62:	bf 91       	pop	r27
     e64:	af 91       	pop	r26
     e66:	9f 91       	pop	r25
     e68:	8f 91       	pop	r24
     e6a:	7f 91       	pop	r23
     e6c:	6f 91       	pop	r22
     e6e:	5f 91       	pop	r21
     e70:	4f 91       	pop	r20
     e72:	3f 91       	pop	r19
     e74:	2f 91       	pop	r18
     e76:	0f 90       	pop	r0
     e78:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e7c:	0f 90       	pop	r0
     e7e:	1f 90       	pop	r1
     e80:	18 95       	reti

00000e82 <__vector_5>:

ISR(PCINT1_vect)
{
     e82:	1f 92       	push	r1
     e84:	0f 92       	push	r0
     e86:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e8a:	0f 92       	push	r0
     e8c:	11 24       	eor	r1, r1
     e8e:	af 92       	push	r10
     e90:	bf 92       	push	r11
     e92:	cf 92       	push	r12
     e94:	df 92       	push	r13
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
	#ifdef TX_DEBUG
	PORTD |= (1<<PORTD1);
     ebe:	8b e2       	ldi	r24, 0x2B	; 43
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	2b e2       	ldi	r18, 0x2B	; 43
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	f9 01       	movw	r30, r18
     ec8:	20 81       	ld	r18, Z
     eca:	22 60       	ori	r18, 0x02	; 2
     ecc:	fc 01       	movw	r30, r24
     ece:	20 83       	st	Z, r18
	#endif
	
	SPDR0 = 0;
     ed0:	8e e4       	ldi	r24, 0x4E	; 78
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	fc 01       	movw	r30, r24
     ed6:	10 82       	st	Z, r1
	if(PIN_SPI & (1<<SPI_SS)) // SS HIGH
     ed8:	83 e2       	ldi	r24, 0x23	; 35
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	fc 01       	movw	r30, r24
     ede:	80 81       	ld	r24, Z
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	80 71       	andi	r24, 0x10	; 16
     ee6:	99 27       	eor	r25, r25
     ee8:	89 2b       	or	r24, r25
     eea:	09 f4       	brne	.+2      	; 0xeee <__vector_5+0x6c>
     eec:	ea c2       	rjmp	.+1492   	; 0x14c2 <__vector_5+0x640>
	{
		
		if(SPIBUFFER.spiState == DONE_WRITE)
     eee:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <SPIBUFFER+0x42>
     ef2:	84 30       	cpi	r24, 0x04	; 4
     ef4:	09 f0       	breq	.+2      	; 0xef8 <__vector_5+0x76>
     ef6:	ff c2       	rjmp	.+1534   	; 0x14f6 <__vector_5+0x674>
		{
			if(SPIBUFFER.u8Count == SPIBUFFER.au8Buffer[0]) // correct amount of bytes in buffer
     ef8:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     efc:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <SPIBUFFER>
     f00:	98 17       	cp	r25, r24
     f02:	09 f0       	breq	.+2      	; 0xf06 <__vector_5+0x84>
     f04:	f8 c2       	rjmp	.+1520   	; 0x14f6 <__vector_5+0x674>
			{
				if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
     f06:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     f0a:	68 2f       	mov	r22, r24
     f0c:	84 ef       	ldi	r24, 0xF4	; 244
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	0e 94 a2 18 	call	0x3144	; 0x3144 <CRC8>
     f14:	88 23       	and	r24, r24
     f16:	09 f0       	breq	.+2      	; 0xf1a <__vector_5+0x98>
     f18:	ee c2       	rjmp	.+1500   	; 0x14f6 <__vector_5+0x674>
				{
					switch(SPIBUFFER.au8Buffer[1]) // command
     f1a:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SPIBUFFER+0x1>
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	09 2e       	mov	r0, r25
     f24:	00 0c       	add	r0, r0
     f26:	aa 0b       	sbc	r26, r26
     f28:	bb 0b       	sbc	r27, r27
     f2a:	41 e1       	ldi	r20, 0x11	; 17
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	22 e3       	ldi	r18, 0x32	; 50
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	84 1b       	sub	r24, r20
     f34:	95 0b       	sbc	r25, r21
     f36:	28 17       	cp	r18, r24
     f38:	39 07       	cpc	r19, r25
     f3a:	08 f4       	brcc	.+2      	; 0xf3e <__vector_5+0xbc>
     f3c:	dc c2       	rjmp	.+1464   	; 0x14f6 <__vector_5+0x674>
     f3e:	8b 5b       	subi	r24, 0xBB	; 187
     f40:	9f 4f       	sbci	r25, 0xFF	; 255
     f42:	fc 01       	movw	r30, r24
     f44:	0c 94 4c 19 	jmp	0x3298	; 0x3298 <__tablejump2__>
					{
						case 0x11:
						if(SPIBUFFER.u8Count == 3)
     f48:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     f4c:	83 30       	cpi	r24, 0x03	; 3
     f4e:	09 f0       	breq	.+2      	; 0xf52 <__vector_5+0xd0>
     f50:	bd c2       	rjmp	.+1402   	; 0x14cc <__vector_5+0x64a>
						{
							enablePLED();
     f52:	0e 94 7d 15 	call	0x2afa	; 0x2afa <enablePLED>
							u8Status |= (1<<STATUS_PLED);
     f56:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <u8Status>
     f5a:	81 60       	ori	r24, 0x01	; 1
     f5c:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <u8Status>
						}
						break;
     f60:	b5 c2       	rjmp	.+1386   	; 0x14cc <__vector_5+0x64a>

						case 0x12:
						if(SPIBUFFER.u8Count == 3)
     f62:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     f66:	83 30       	cpi	r24, 0x03	; 3
     f68:	09 f0       	breq	.+2      	; 0xf6c <__vector_5+0xea>
     f6a:	b2 c2       	rjmp	.+1380   	; 0x14d0 <__vector_5+0x64e>
						{
							disablePLED();
     f6c:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <disablePLED>
							u8Status &= ~(1<<STATUS_PLED);
     f70:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <u8Status>
     f74:	8e 7f       	andi	r24, 0xFE	; 254
     f76:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <u8Status>
						}
						break;
     f7a:	aa c2       	rjmp	.+1364   	; 0x14d0 <__vector_5+0x64e>

						case 0x13:
						if(SPIBUFFER.u8Count == 4)
     f7c:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     f80:	84 30       	cpi	r24, 0x04	; 4
     f82:	09 f0       	breq	.+2      	; 0xf86 <__vector_5+0x104>
     f84:	a7 c2       	rjmp	.+1358   	; 0x14d4 <__vector_5+0x652>
						{
							if(u8PLEDAnimation == 0)
     f86:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <u8PLEDAnimation>
     f8a:	88 23       	and	r24, r24
     f8c:	09 f0       	breq	.+2      	; 0xf90 <__vector_5+0x10e>
     f8e:	a2 c2       	rjmp	.+1348   	; 0x14d4 <__vector_5+0x652>
							{
								if(SPIBUFFER.au8Buffer[2]>100)
     f90:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
     f94:	85 36       	cpi	r24, 0x65	; 101
     f96:	20 f0       	brcs	.+8      	; 0xfa0 <__vector_5+0x11e>
								{
									u8Duty = 100;
     f98:	84 e6       	ldi	r24, 0x64	; 100
     f9a:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <u8Duty>
     f9e:	04 c0       	rjmp	.+8      	; 0xfa8 <__vector_5+0x126>
								}
								else
								{
									u8Duty = SPIBUFFER.au8Buffer[2];
     fa0:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
     fa4:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <u8Duty>
								}
								setPWMDutyPercent(u8Duty);
     fa8:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <u8Duty>
     fac:	0e 94 99 16 	call	0x2d32	; 0x2d32 <setPWMDutyPercent>
							}
						}
						break;
     fb0:	91 c2       	rjmp	.+1314   	; 0x14d4 <__vector_5+0x652>
						
						case 0x14:
						u8PLEDAnimation = 0;
     fb2:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <u8PLEDAnimation>
						disablePLED();
     fb6:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <disablePLED>
						u8Status &= ~(1<<STATUS_PLED);
     fba:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <u8Status>
     fbe:	8e 7f       	andi	r24, 0xFE	; 254
     fc0:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <u8Status>
						break;
     fc4:	98 c2       	rjmp	.+1328   	; 0x14f6 <__vector_5+0x674>

						case 0x15:
						if(SPIBUFFER.u8Count == 6)
     fc6:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
     fca:	86 30       	cpi	r24, 0x06	; 6
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <__vector_5+0x14e>
     fce:	84 c2       	rjmp	.+1288   	; 0x14d8 <__vector_5+0x656>
						{	
							if(SPIBUFFER.au8Buffer[2]>100)
     fd0:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
     fd4:	85 36       	cpi	r24, 0x65	; 101
     fd6:	20 f0       	brcs	.+8      	; 0xfe0 <__vector_5+0x15e>
							{
								u8PLEDFadeStartPercent=100;
     fd8:	84 e6       	ldi	r24, 0x64	; 100
     fda:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <u8PLEDFadeStartPercent>
     fde:	04 c0       	rjmp	.+8      	; 0xfe8 <__vector_5+0x166>
							}
							else
							{
								u8PLEDFadeStartPercent = SPIBUFFER.au8Buffer[2];
     fe0:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
     fe4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <u8PLEDFadeStartPercent>
							}
							
							if(SPIBUFFER.au8Buffer[3]>100)
     fe8:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <SPIBUFFER+0x3>
     fec:	85 36       	cpi	r24, 0x65	; 101
     fee:	20 f0       	brcs	.+8      	; 0xff8 <__vector_5+0x176>
							{
								u8PLEDFadeStopPercent=100;
     ff0:	84 e6       	ldi	r24, 0x64	; 100
     ff2:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <u8PLEDFadeStopPercent>
     ff6:	04 c0       	rjmp	.+8      	; 0x1000 <__vector_5+0x17e>
							}
							else
							{
								u8PLEDFadeStopPercent = SPIBUFFER.au8Buffer[3];
     ff8:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <SPIBUFFER+0x3>
     ffc:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <u8PLEDFadeStopPercent>
							}
							
							u16PLEDFadeStartValue = Map(u8PLEDFadeStartPercent,0,100,0,511);
    1000:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <u8PLEDFadeStartPercent>
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	a0 e0       	ldi	r26, 0x00	; 0
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	1f 92       	push	r1
    100e:	1f 92       	push	r1
    1010:	21 e0       	ldi	r18, 0x01	; 1
    1012:	2f 93       	push	r18
    1014:	2f ef       	ldi	r18, 0xFF	; 255
    1016:	2f 93       	push	r18
    1018:	a1 2c       	mov	r10, r1
    101a:	b1 2c       	mov	r11, r1
    101c:	65 01       	movw	r12, r10
    101e:	14 e6       	ldi	r17, 0x64	; 100
    1020:	e1 2e       	mov	r14, r17
    1022:	f1 2c       	mov	r15, r1
    1024:	00 e0       	ldi	r16, 0x00	; 0
    1026:	10 e0       	ldi	r17, 0x00	; 0
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	a9 01       	movw	r20, r18
    102e:	bc 01       	movw	r22, r24
    1030:	cd 01       	movw	r24, r26
    1032:	0e 94 2b 18 	call	0x3056	; 0x3056 <Map>
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <u16PLEDFadeStartValue+0x1>
    1046:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <u16PLEDFadeStartValue>
							u16PLEDFadeStopValue = Map(u8PLEDFadeStopPercent,0,100,0,511);
    104a:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <u8PLEDFadeStopPercent>
    104e:	88 2f       	mov	r24, r24
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	a0 e0       	ldi	r26, 0x00	; 0
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	1f 92       	push	r1
    1058:	1f 92       	push	r1
    105a:	21 e0       	ldi	r18, 0x01	; 1
    105c:	2f 93       	push	r18
    105e:	2f ef       	ldi	r18, 0xFF	; 255
    1060:	2f 93       	push	r18
    1062:	a1 2c       	mov	r10, r1
    1064:	b1 2c       	mov	r11, r1
    1066:	65 01       	movw	r12, r10
    1068:	14 e6       	ldi	r17, 0x64	; 100
    106a:	e1 2e       	mov	r14, r17
    106c:	f1 2c       	mov	r15, r1
    106e:	00 e0       	ldi	r16, 0x00	; 0
    1070:	10 e0       	ldi	r17, 0x00	; 0
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	a9 01       	movw	r20, r18
    1078:	bc 01       	movw	r22, r24
    107a:	cd 01       	movw	r24, r26
    107c:	0e 94 2b 18 	call	0x3056	; 0x3056 <Map>
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <u16PLEDFadeStopValue+0x1>
    1090:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <u16PLEDFadeStopValue>
							u8PLEDFadeTime = SPIBUFFER.au8Buffer[4];
    1094:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <SPIBUFFER+0x4>
    1098:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <u8PLEDFadeTime>
							
							setPWMDuty(u16PLEDFadeStartValue);
    109c:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <u16PLEDFadeStartValue>
    10a0:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <u16PLEDFadeStartValue+0x1>
    10a4:	0e 94 e5 16 	call	0x2dca	; 0x2dca <setPWMDuty>
							u8Duty = u8PLEDFadeStartPercent;
    10a8:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <u8PLEDFadeStartPercent>
    10ac:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <u8Duty>
							u16PLEDFadeCurrValue = u16PLEDFadeStartValue;
    10b0:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <u16PLEDFadeStartValue>
    10b4:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <u16PLEDFadeStartValue+0x1>
    10b8:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <u16PLEDFadeCurrValue+0x1>
    10bc:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <u16PLEDFadeCurrValue>
							u32PLEDFadeIntCount = 0;
    10c0:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <u32PLEDFadeIntCount>
    10c4:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <u32PLEDFadeIntCount+0x1>
    10c8:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <u32PLEDFadeIntCount+0x2>
    10cc:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <u32PLEDFadeIntCount+0x3>
							
							if(u8PLEDFadeStartPercent<u8PLEDFadeStopPercent) // PLED rise
    10d0:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <u8PLEDFadeStartPercent>
    10d4:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <u8PLEDFadeStopPercent>
    10d8:	98 17       	cp	r25, r24
    10da:	58 f5       	brcc	.+86     	; 0x1132 <__vector_5+0x2b0>
							{
								u32PLEDFadeIntStep = 6000*u8PLEDFadeTime/(u16PLEDFadeStopValue-u16PLEDFadeStartValue);
    10dc:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <u8PLEDFadeTime>
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	80 e7       	ldi	r24, 0x70	; 112
    10e6:	97 e1       	ldi	r25, 0x17	; 23
    10e8:	28 9f       	mul	r18, r24
    10ea:	a0 01       	movw	r20, r0
    10ec:	29 9f       	mul	r18, r25
    10ee:	50 0d       	add	r21, r0
    10f0:	38 9f       	mul	r19, r24
    10f2:	50 0d       	add	r21, r0
    10f4:	11 24       	eor	r1, r1
    10f6:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <u16PLEDFadeStopValue>
    10fa:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <u16PLEDFadeStopValue+0x1>
    10fe:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <u16PLEDFadeStartValue>
    1102:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <u16PLEDFadeStartValue+0x1>
    1106:	28 1b       	sub	r18, r24
    1108:	39 0b       	sbc	r19, r25
    110a:	ca 01       	movw	r24, r20
    110c:	b9 01       	movw	r22, r18
    110e:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__udivmodhi4>
    1112:	cb 01       	movw	r24, r22
    1114:	cc 01       	movw	r24, r24
    1116:	a0 e0       	ldi	r26, 0x00	; 0
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <u32PLEDFadeIntStep>
    111e:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <u32PLEDFadeIntStep+0x1>
    1122:	a0 93 61 01 	sts	0x0161, r26	; 0x800161 <u32PLEDFadeIntStep+0x2>
    1126:	b0 93 62 01 	sts	0x0162, r27	; 0x800162 <u32PLEDFadeIntStep+0x3>
								u8PLEDFadeDirection = 1;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <u8PLEDFadeDirection>
    1130:	2f c0       	rjmp	.+94     	; 0x1190 <__vector_5+0x30e>
							}
							else if(u8PLEDFadeStartPercent>u8PLEDFadeStopPercent) // PLED fall
    1132:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <u8PLEDFadeStartPercent>
    1136:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <u8PLEDFadeStopPercent>
    113a:	89 17       	cp	r24, r25
    113c:	48 f5       	brcc	.+82     	; 0x1190 <__vector_5+0x30e>
							{
								u32PLEDFadeIntStep = 6000*u8PLEDFadeTime/(u16PLEDFadeStartValue-u16PLEDFadeStopValue);
    113e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <u8PLEDFadeTime>
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	80 e7       	ldi	r24, 0x70	; 112
    1148:	97 e1       	ldi	r25, 0x17	; 23
    114a:	28 9f       	mul	r18, r24
    114c:	a0 01       	movw	r20, r0
    114e:	29 9f       	mul	r18, r25
    1150:	50 0d       	add	r21, r0
    1152:	38 9f       	mul	r19, r24
    1154:	50 0d       	add	r21, r0
    1156:	11 24       	eor	r1, r1
    1158:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <u16PLEDFadeStartValue>
    115c:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <u16PLEDFadeStartValue+0x1>
    1160:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <u16PLEDFadeStopValue>
    1164:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <u16PLEDFadeStopValue+0x1>
    1168:	28 1b       	sub	r18, r24
    116a:	39 0b       	sbc	r19, r25
    116c:	ca 01       	movw	r24, r20
    116e:	b9 01       	movw	r22, r18
    1170:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__udivmodhi4>
    1174:	cb 01       	movw	r24, r22
    1176:	cc 01       	movw	r24, r24
    1178:	a0 e0       	ldi	r26, 0x00	; 0
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <u32PLEDFadeIntStep>
    1180:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <u32PLEDFadeIntStep+0x1>
    1184:	a0 93 61 01 	sts	0x0161, r26	; 0x800161 <u32PLEDFadeIntStep+0x2>
    1188:	b0 93 62 01 	sts	0x0162, r27	; 0x800162 <u32PLEDFadeIntStep+0x3>
								u8PLEDFadeDirection = 0;
    118c:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <u8PLEDFadeDirection>
							}
							enablePLED();
    1190:	0e 94 7d 15 	call	0x2afa	; 0x2afa <enablePLED>
							u8Status |= (1<<STATUS_PLED);
    1194:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <u8Status>
    1198:	81 60       	ori	r24, 0x01	; 1
    119a:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <u8Status>
							u8PLEDAnimation = 1;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <u8PLEDAnimation>
						}
						break;
    11a4:	99 c1       	rjmp	.+818    	; 0x14d8 <__vector_5+0x656>
						
						case 0x16:
						if(SPIBUFFER.u8Count == 6)
    11a6:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
    11aa:	86 30       	cpi	r24, 0x06	; 6
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <__vector_5+0x32e>
    11ae:	96 c1       	rjmp	.+812    	; 0x14dc <__vector_5+0x65a>
						{
							u16PLEDStrobeCount = 0;
    11b0:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <u16PLEDStrobeCount+0x1>
    11b4:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <u16PLEDStrobeCount>
							u16PLEDStrobeOn = 2*((uint16_t)SPIBUFFER.au8Buffer[3]);
    11b8:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <SPIBUFFER+0x3>
    11bc:	88 2f       	mov	r24, r24
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <u16PLEDStrobeOn+0x1>
    11c8:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <u16PLEDStrobeOn>
							u16PLEDStrobeTotal = 2*(((uint16_t)SPIBUFFER.au8Buffer[3])+((uint16_t)SPIBUFFER.au8Buffer[4]));
    11cc:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <SPIBUFFER+0x3>
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <SPIBUFFER+0x4>
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	82 0f       	add	r24, r18
    11de:	93 1f       	adc	r25, r19
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <u16PLEDStrobeTotal+0x1>
    11e8:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <u16PLEDStrobeTotal>
							
							if(SPIBUFFER.au8Buffer[2]>100)
    11ec:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
    11f0:	85 36       	cpi	r24, 0x65	; 101
    11f2:	20 f0       	brcs	.+8      	; 0x11fc <__vector_5+0x37a>
							{
								u8Duty = 100;
    11f4:	84 e6       	ldi	r24, 0x64	; 100
    11f6:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <u8Duty>
    11fa:	04 c0       	rjmp	.+8      	; 0x1204 <__vector_5+0x382>
							}
							else
							{
								u8Duty = SPIBUFFER.au8Buffer[2];
    11fc:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
    1200:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <u8Duty>
							}
							setPWMDutyPercent(u8Duty);
    1204:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <u8Duty>
    1208:	0e 94 99 16 	call	0x2d32	; 0x2d32 <setPWMDutyPercent>
							u8Status |= (1<<STATUS_PLED);
    120c:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <u8Status>
    1210:	81 60       	ori	r24, 0x01	; 1
    1212:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <u8Status>
							u8PLEDAnimation = 2;
    1216:	82 e0       	ldi	r24, 0x02	; 2
    1218:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <u8PLEDAnimation>
						}
						break;
    121c:	5f c1       	rjmp	.+702    	; 0x14dc <__vector_5+0x65a>
					
						case 0x21:
						if(SPIBUFFER.u8Count == 3)
    121e:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
    1222:	83 30       	cpi	r24, 0x03	; 3
    1224:	09 f0       	breq	.+2      	; 0x1228 <__vector_5+0x3a6>
    1226:	5c c1       	rjmp	.+696    	; 0x14e0 <__vector_5+0x65e>
						{
							enableAudio();
    1228:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <enableAudio>
							u8Status |= (1<<STATUS_AUDIO);
    122c:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <u8Status>
    1230:	82 60       	ori	r24, 0x02	; 2
    1232:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <u8Status>
						}
						break;
    1236:	54 c1       	rjmp	.+680    	; 0x14e0 <__vector_5+0x65e>

						case 0x22:
						if(SPIBUFFER.u8Count == 3)
    1238:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
    123c:	83 30       	cpi	r24, 0x03	; 3
    123e:	09 f0       	breq	.+2      	; 0x1242 <__vector_5+0x3c0>
    1240:	51 c1       	rjmp	.+674    	; 0x14e4 <__vector_5+0x662>
						{
							standbyAudio();
    1242:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <standbyAudio>
							u8Status &= ~(1<<STATUS_AUDIO);
    1246:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <u8Status>
    124a:	8d 7f       	andi	r24, 0xFD	; 253
    124c:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <u8Status>
						}
						break;
    1250:	49 c1       	rjmp	.+658    	; 0x14e4 <__vector_5+0x662>
					
						case 0x23:
						if(SPIBUFFER.u8Count == 4)
    1252:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
    1256:	84 30       	cpi	r24, 0x04	; 4
    1258:	09 f0       	breq	.+2      	; 0x125c <__vector_5+0x3da>
    125a:	46 c1       	rjmp	.+652    	; 0x14e8 <__vector_5+0x666>
						{
							setVolume(SPIBUFFER.au8Buffer[2]);
    125c:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
    1260:	0e 94 33 16 	call	0x2c66	; 0x2c66 <setVolume>
						}
						break;
    1264:	41 c1       	rjmp	.+642    	; 0x14e8 <__vector_5+0x666>
						
						case 0x31:
						RingBuffer_Insert(&RINGBUFFER,0x31);
    1266:	61 e3       	ldi	r22, 0x31	; 49
    1268:	8f e6       	ldi	r24, 0x6F	; 111
    126a:	91 e0       	ldi	r25, 0x01	; 1
    126c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
						RingBuffer_Insert(&RINGBUFFER,0xFF);						
    1270:	6f ef       	ldi	r22, 0xFF	; 255
    1272:	8f e6       	ldi	r24, 0x6F	; 111
    1274:	91 e0       	ldi	r25, 0x01	; 1
    1276:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
						break;
    127a:	3d c1       	rjmp	.+634    	; 0x14f6 <__vector_5+0x674>
						
						case 0x32:
						if(SPIBUFFER.u8Count == 6)
    127c:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
    1280:	86 30       	cpi	r24, 0x06	; 6
    1282:	f9 f4       	brne	.+62     	; 0x12c2 <__vector_5+0x440>
						{
							RingBuffer_Insert(&RINGBUFFER,0x32);
    1284:	62 e3       	ldi	r22, 0x32	; 50
    1286:	8f e6       	ldi	r24, 0x6F	; 111
    1288:	91 e0       	ldi	r25, 0x01	; 1
    128a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[2]);
    128e:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
    1292:	68 2f       	mov	r22, r24
    1294:	8f e6       	ldi	r24, 0x6F	; 111
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[3]);
    129c:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <SPIBUFFER+0x3>
    12a0:	68 2f       	mov	r22, r24
    12a2:	8f e6       	ldi	r24, 0x6F	; 111
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[4]);
    12aa:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <SPIBUFFER+0x4>
    12ae:	68 2f       	mov	r22, r24
    12b0:	8f e6       	ldi	r24, 0x6F	; 111
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,0xFF);
    12b8:	6f ef       	ldi	r22, 0xFF	; 255
    12ba:	8f e6       	ldi	r24, 0x6F	; 111
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
						}
						
						case 0x33:
						if(SPIBUFFER.u8Count == 9)
    12c2:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
    12c6:	89 30       	cpi	r24, 0x09	; 9
    12c8:	09 f0       	breq	.+2      	; 0x12cc <__vector_5+0x44a>
    12ca:	10 c1       	rjmp	.+544    	; 0x14ec <__vector_5+0x66a>
						{
							RingBuffer_Insert(&RINGBUFFER,0x33);
    12cc:	63 e3       	ldi	r22, 0x33	; 51
    12ce:	8f e6       	ldi	r24, 0x6F	; 111
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[2]);
    12d6:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
    12da:	68 2f       	mov	r22, r24
    12dc:	8f e6       	ldi	r24, 0x6F	; 111
    12de:	91 e0       	ldi	r25, 0x01	; 1
    12e0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[3]);
    12e4:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <SPIBUFFER+0x3>
    12e8:	68 2f       	mov	r22, r24
    12ea:	8f e6       	ldi	r24, 0x6F	; 111
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[4]);
    12f2:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <SPIBUFFER+0x4>
    12f6:	68 2f       	mov	r22, r24
    12f8:	8f e6       	ldi	r24, 0x6F	; 111
    12fa:	91 e0       	ldi	r25, 0x01	; 1
    12fc:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[5]);
    1300:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <SPIBUFFER+0x5>
    1304:	68 2f       	mov	r22, r24
    1306:	8f e6       	ldi	r24, 0x6F	; 111
    1308:	91 e0       	ldi	r25, 0x01	; 1
    130a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[6]);
    130e:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <SPIBUFFER+0x6>
    1312:	68 2f       	mov	r22, r24
    1314:	8f e6       	ldi	r24, 0x6F	; 111
    1316:	91 e0       	ldi	r25, 0x01	; 1
    1318:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[7]);
    131c:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <SPIBUFFER+0x7>
    1320:	68 2f       	mov	r22, r24
    1322:	8f e6       	ldi	r24, 0x6F	; 111
    1324:	91 e0       	ldi	r25, 0x01	; 1
    1326:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,0xFF);
    132a:	6f ef       	ldi	r22, 0xFF	; 255
    132c:	8f e6       	ldi	r24, 0x6F	; 111
    132e:	91 e0       	ldi	r25, 0x01	; 1
    1330:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
						}
						break;
    1334:	db c0       	rjmp	.+438    	; 0x14ec <__vector_5+0x66a>
						
						case 0x41:
						RingBuffer_Insert(&RINGBUFFER,0x41);
    1336:	61 e4       	ldi	r22, 0x41	; 65
    1338:	8f e6       	ldi	r24, 0x6F	; 111
    133a:	91 e0       	ldi	r25, 0x01	; 1
    133c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
						RingBuffer_Insert(&RINGBUFFER,0xFF);
    1340:	6f ef       	ldi	r22, 0xFF	; 255
    1342:	8f e6       	ldi	r24, 0x6F	; 111
    1344:	91 e0       	ldi	r25, 0x01	; 1
    1346:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
						break;
    134a:	d5 c0       	rjmp	.+426    	; 0x14f6 <__vector_5+0x674>
						
						case 0x42:
						if(SPIBUFFER.u8Count == 11)
    134c:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
    1350:	8b 30       	cpi	r24, 0x0B	; 11
    1352:	09 f0       	breq	.+2      	; 0x1356 <__vector_5+0x4d4>
    1354:	cd c0       	rjmp	.+410    	; 0x14f0 <__vector_5+0x66e>
						{
							RingBuffer_Insert(&RINGBUFFER,0x42);
    1356:	62 e4       	ldi	r22, 0x42	; 66
    1358:	8f e6       	ldi	r24, 0x6F	; 111
    135a:	91 e0       	ldi	r25, 0x01	; 1
    135c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[2]);
    1360:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
    1364:	68 2f       	mov	r22, r24
    1366:	8f e6       	ldi	r24, 0x6F	; 111
    1368:	91 e0       	ldi	r25, 0x01	; 1
    136a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[3]);
    136e:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <SPIBUFFER+0x3>
    1372:	68 2f       	mov	r22, r24
    1374:	8f e6       	ldi	r24, 0x6F	; 111
    1376:	91 e0       	ldi	r25, 0x01	; 1
    1378:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[4]);
    137c:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <SPIBUFFER+0x4>
    1380:	68 2f       	mov	r22, r24
    1382:	8f e6       	ldi	r24, 0x6F	; 111
    1384:	91 e0       	ldi	r25, 0x01	; 1
    1386:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[5]);
    138a:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <SPIBUFFER+0x5>
    138e:	68 2f       	mov	r22, r24
    1390:	8f e6       	ldi	r24, 0x6F	; 111
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[6]);
    1398:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <SPIBUFFER+0x6>
    139c:	68 2f       	mov	r22, r24
    139e:	8f e6       	ldi	r24, 0x6F	; 111
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[7]);
    13a6:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <SPIBUFFER+0x7>
    13aa:	68 2f       	mov	r22, r24
    13ac:	8f e6       	ldi	r24, 0x6F	; 111
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[8]);
    13b4:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <SPIBUFFER+0x8>
    13b8:	68 2f       	mov	r22, r24
    13ba:	8f e6       	ldi	r24, 0x6F	; 111
    13bc:	91 e0       	ldi	r25, 0x01	; 1
    13be:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[9]);
    13c2:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <SPIBUFFER+0x9>
    13c6:	68 2f       	mov	r22, r24
    13c8:	8f e6       	ldi	r24, 0x6F	; 111
    13ca:	91 e0       	ldi	r25, 0x01	; 1
    13cc:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,0xFF);
    13d0:	6f ef       	ldi	r22, 0xFF	; 255
    13d2:	8f e6       	ldi	r24, 0x6F	; 111
    13d4:	91 e0       	ldi	r25, 0x01	; 1
    13d6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
						}
						break;
    13da:	8a c0       	rjmp	.+276    	; 0x14f0 <__vector_5+0x66e>

						case 0x43:
						if(SPIBUFFER.u8Count == 17)
    13dc:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SPIBUFFER+0x40>
    13e0:	81 31       	cpi	r24, 0x11	; 17
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <__vector_5+0x564>
    13e4:	87 c0       	rjmp	.+270    	; 0x14f4 <__vector_5+0x672>
						{
							RingBuffer_Insert(&RINGBUFFER,0x43);
    13e6:	63 e4       	ldi	r22, 0x43	; 67
    13e8:	8f e6       	ldi	r24, 0x6F	; 111
    13ea:	91 e0       	ldi	r25, 0x01	; 1
    13ec:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[2]);
    13f0:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <SPIBUFFER+0x2>
    13f4:	68 2f       	mov	r22, r24
    13f6:	8f e6       	ldi	r24, 0x6F	; 111
    13f8:	91 e0       	ldi	r25, 0x01	; 1
    13fa:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[3]);
    13fe:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <SPIBUFFER+0x3>
    1402:	68 2f       	mov	r22, r24
    1404:	8f e6       	ldi	r24, 0x6F	; 111
    1406:	91 e0       	ldi	r25, 0x01	; 1
    1408:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[4]);
    140c:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <SPIBUFFER+0x4>
    1410:	68 2f       	mov	r22, r24
    1412:	8f e6       	ldi	r24, 0x6F	; 111
    1414:	91 e0       	ldi	r25, 0x01	; 1
    1416:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[5]);
    141a:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <SPIBUFFER+0x5>
    141e:	68 2f       	mov	r22, r24
    1420:	8f e6       	ldi	r24, 0x6F	; 111
    1422:	91 e0       	ldi	r25, 0x01	; 1
    1424:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[6]);
    1428:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <SPIBUFFER+0x6>
    142c:	68 2f       	mov	r22, r24
    142e:	8f e6       	ldi	r24, 0x6F	; 111
    1430:	91 e0       	ldi	r25, 0x01	; 1
    1432:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[7]);
    1436:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <SPIBUFFER+0x7>
    143a:	68 2f       	mov	r22, r24
    143c:	8f e6       	ldi	r24, 0x6F	; 111
    143e:	91 e0       	ldi	r25, 0x01	; 1
    1440:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[8]);
    1444:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <SPIBUFFER+0x8>
    1448:	68 2f       	mov	r22, r24
    144a:	8f e6       	ldi	r24, 0x6F	; 111
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[9]);
    1452:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <SPIBUFFER+0x9>
    1456:	68 2f       	mov	r22, r24
    1458:	8f e6       	ldi	r24, 0x6F	; 111
    145a:	91 e0       	ldi	r25, 0x01	; 1
    145c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[10]);
    1460:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <SPIBUFFER+0xa>
    1464:	68 2f       	mov	r22, r24
    1466:	8f e6       	ldi	r24, 0x6F	; 111
    1468:	91 e0       	ldi	r25, 0x01	; 1
    146a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[11]);
    146e:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SPIBUFFER+0xb>
    1472:	68 2f       	mov	r22, r24
    1474:	8f e6       	ldi	r24, 0x6F	; 111
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[12]);
    147c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <SPIBUFFER+0xc>
    1480:	68 2f       	mov	r22, r24
    1482:	8f e6       	ldi	r24, 0x6F	; 111
    1484:	91 e0       	ldi	r25, 0x01	; 1
    1486:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[13]);
    148a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <SPIBUFFER+0xd>
    148e:	68 2f       	mov	r22, r24
    1490:	8f e6       	ldi	r24, 0x6F	; 111
    1492:	91 e0       	ldi	r25, 0x01	; 1
    1494:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[14]);
    1498:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <SPIBUFFER+0xe>
    149c:	68 2f       	mov	r22, r24
    149e:	8f e6       	ldi	r24, 0x6F	; 111
    14a0:	91 e0       	ldi	r25, 0x01	; 1
    14a2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[15]);
    14a6:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <SPIBUFFER+0xf>
    14aa:	68 2f       	mov	r22, r24
    14ac:	8f e6       	ldi	r24, 0x6F	; 111
    14ae:	91 e0       	ldi	r25, 0x01	; 1
    14b0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,0xFF);
    14b4:	6f ef       	ldi	r22, 0xFF	; 255
    14b6:	8f e6       	ldi	r24, 0x6F	; 111
    14b8:	91 e0       	ldi	r25, 0x01	; 1
    14ba:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
						}
						break;
    14be:	00 00       	nop
    14c0:	19 c0       	rjmp	.+50     	; 0x14f4 <__vector_5+0x672>
			
		}
	}
	else // SS LOW
	{
		SPIBUFFER.u8Count = 0;
    14c2:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <SPIBUFFER+0x40>
		SPIBUFFER.spiState = READY;
    14c6:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <SPIBUFFER+0x42>
    14ca:	15 c0       	rjmp	.+42     	; 0x14f6 <__vector_5+0x674>
						if(SPIBUFFER.u8Count == 3)
						{
							enablePLED();
							u8Status |= (1<<STATUS_PLED);
						}
						break;
    14cc:	00 00       	nop
    14ce:	13 c0       	rjmp	.+38     	; 0x14f6 <__vector_5+0x674>
						if(SPIBUFFER.u8Count == 3)
						{
							disablePLED();
							u8Status &= ~(1<<STATUS_PLED);
						}
						break;
    14d0:	00 00       	nop
    14d2:	11 c0       	rjmp	.+34     	; 0x14f6 <__vector_5+0x674>
									u8Duty = SPIBUFFER.au8Buffer[2];
								}
								setPWMDutyPercent(u8Duty);
							}
						}
						break;
    14d4:	00 00       	nop
    14d6:	0f c0       	rjmp	.+30     	; 0x14f6 <__vector_5+0x674>
							}
							enablePLED();
							u8Status |= (1<<STATUS_PLED);
							u8PLEDAnimation = 1;
						}
						break;
    14d8:	00 00       	nop
    14da:	0d c0       	rjmp	.+26     	; 0x14f6 <__vector_5+0x674>
							}
							setPWMDutyPercent(u8Duty);
							u8Status |= (1<<STATUS_PLED);
							u8PLEDAnimation = 2;
						}
						break;
    14dc:	00 00       	nop
    14de:	0b c0       	rjmp	.+22     	; 0x14f6 <__vector_5+0x674>
						if(SPIBUFFER.u8Count == 3)
						{
							enableAudio();
							u8Status |= (1<<STATUS_AUDIO);
						}
						break;
    14e0:	00 00       	nop
    14e2:	09 c0       	rjmp	.+18     	; 0x14f6 <__vector_5+0x674>
						if(SPIBUFFER.u8Count == 3)
						{
							standbyAudio();
							u8Status &= ~(1<<STATUS_AUDIO);
						}
						break;
    14e4:	00 00       	nop
    14e6:	07 c0       	rjmp	.+14     	; 0x14f6 <__vector_5+0x674>
						case 0x23:
						if(SPIBUFFER.u8Count == 4)
						{
							setVolume(SPIBUFFER.au8Buffer[2]);
						}
						break;
    14e8:	00 00       	nop
    14ea:	05 c0       	rjmp	.+10     	; 0x14f6 <__vector_5+0x674>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[5]);
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[6]);
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[7]);
							RingBuffer_Insert(&RINGBUFFER,0xFF);
						}
						break;
    14ec:	00 00       	nop
    14ee:	03 c0       	rjmp	.+6      	; 0x14f6 <__vector_5+0x674>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[7]);
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[8]);
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[9]);
							RingBuffer_Insert(&RINGBUFFER,0xFF);
						}
						break;
    14f0:	00 00       	nop
    14f2:	01 c0       	rjmp	.+2      	; 0x14f6 <__vector_5+0x674>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[13]);
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[14]);
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[15]);
							RingBuffer_Insert(&RINGBUFFER,0xFF);
						}
						break;
    14f4:	00 00       	nop
	{
		SPIBUFFER.u8Count = 0;
		SPIBUFFER.spiState = READY;
	}
	#ifdef TX_DEBUG
	PORTD &= ~(1<<PORTD1);
    14f6:	8b e2       	ldi	r24, 0x2B	; 43
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	2b e2       	ldi	r18, 0x2B	; 43
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	f9 01       	movw	r30, r18
    1500:	20 81       	ld	r18, Z
    1502:	2d 7f       	andi	r18, 0xFD	; 253
    1504:	fc 01       	movw	r30, r24
    1506:	20 83       	st	Z, r18
	#endif
}
    1508:	00 00       	nop
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	ff 91       	pop	r31
    1510:	ef 91       	pop	r30
    1512:	bf 91       	pop	r27
    1514:	af 91       	pop	r26
    1516:	9f 91       	pop	r25
    1518:	8f 91       	pop	r24
    151a:	7f 91       	pop	r23
    151c:	6f 91       	pop	r22
    151e:	5f 91       	pop	r21
    1520:	4f 91       	pop	r20
    1522:	3f 91       	pop	r19
    1524:	2f 91       	pop	r18
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	df 90       	pop	r13
    1530:	cf 90       	pop	r12
    1532:	bf 90       	pop	r11
    1534:	af 90       	pop	r10
    1536:	0f 90       	pop	r0
    1538:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    153c:	0f 90       	pop	r0
    153e:	1f 90       	pop	r1
    1540:	18 95       	reti

00001542 <main>:
// 		
// 	}
// }

int main(void)
{
    1542:	df 92       	push	r13
    1544:	ef 92       	push	r14
    1546:	ff 92       	push	r15
    1548:	0f 93       	push	r16
    154a:	1f 93       	push	r17
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	2e 97       	sbiw	r28, 0x0e	; 14
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	cd bf       	out	0x3d, r28	; 61
	uint16_t i;
	uint8_t au8Command[8];
	uint8_t u8Temp,u8Count,u8StartTemp,u8StopTemp;
	portInit();
    1560:	0e 94 ef 14 	call	0x29de	; 0x29de <portInit>
	adcInit();
    1564:	0e 94 02 17 	call	0x2e04	; 0x2e04 <adcInit>
	initPWM(0);
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <initPWM>
	startPWM();
    1570:	0e 94 88 16 	call	0x2d10	; 0x2d10 <startPWM>
	spiInitBuffer(&SPIBUFFER);
    1574:	84 ef       	ldi	r24, 0xF4	; 244
    1576:	91 e0       	ldi	r25, 0x01	; 1
    1578:	0e 94 7d 14 	call	0x28fa	; 0x28fa <spiInitBuffer>
	spiSlaveInit();
    157c:	0e 94 9d 14 	call	0x293a	; 0x293a <spiSlaveInit>
 	spiPcInt();
    1580:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <spiPcInt>
	RingBuffer_InitBuffer(&RINGBUFFER);
    1584:	8f e6       	ldi	r24, 0x6F	; 111
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	0e 94 b5 00 	call	0x16a	; 0x16a <RingBuffer_InitBuffer>
	initRGBooster();
    158c:	0e 94 36 14 	call	0x286c	; 0x286c <initRGBooster>
	INT0_Init();
    1590:	0e 94 1b 14 	call	0x2836	; 0x2836 <INT0_Init>
	INT_5ms_Init();
    1594:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <INT_5ms_Init>

	wait_1ms(100);
    1598:	84 e6       	ldi	r24, 0x64	; 100
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <wait_1ms>
	initAudio();
    15a0:	0e 94 49 16 	call	0x2c92	; 0x2c92 <initAudio>
	
	#ifdef TX_DEBUG
	DDRD |= (1<<DDRD1);
    15a4:	8a e2       	ldi	r24, 0x2A	; 42
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	2a e2       	ldi	r18, 0x2A	; 42
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	f9 01       	movw	r30, r18
    15ae:	20 81       	ld	r18, Z
    15b0:	22 60       	ori	r18, 0x02	; 2
    15b2:	fc 01       	movw	r30, r24
    15b4:	20 83       	st	Z, r18
	PORTD &= ~(1<<PORTD1);
    15b6:	8b e2       	ldi	r24, 0x2B	; 43
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	2b e2       	ldi	r18, 0x2B	; 43
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	f9 01       	movw	r30, r18
    15c0:	20 81       	ld	r18, Z
    15c2:	2d 7f       	andi	r18, 0xFD	; 253
    15c4:	fc 01       	movw	r30, r24
    15c6:	20 83       	st	Z, r18
	#endif

	#ifdef RX_DEBUG
	DDRD |= (1<<DDRD0);
    15c8:	8a e2       	ldi	r24, 0x2A	; 42
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	2a e2       	ldi	r18, 0x2A	; 42
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	f9 01       	movw	r30, r18
    15d2:	20 81       	ld	r18, Z
    15d4:	21 60       	ori	r18, 0x01	; 1
    15d6:	fc 01       	movw	r30, r24
    15d8:	20 83       	st	Z, r18
	PORTD &= ~(1<<PORTD0);
    15da:	8b e2       	ldi	r24, 0x2B	; 43
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	2b e2       	ldi	r18, 0x2B	; 43
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	f9 01       	movw	r30, r18
    15e4:	20 81       	ld	r18, Z
    15e6:	2e 7f       	andi	r18, 0xFE	; 254
    15e8:	fc 01       	movw	r30, r24
    15ea:	20 83       	st	Z, r18
	#endif
		
	sei();
    15ec:	78 94       	sei
	
	u8RGBSingleColor = 0;
    15ee:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <u8RGBSingleColor>
	u8RGBByteIdx = 0;
    15f2:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
	u8RGBIdx = 0;
    15f6:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <u8RGBIdx>
	INT0_vect();
    15fa:	0e 94 4a 02 	call	0x494	; 0x494 <__vector_1>
	wait_1ms(100);
    15fe:	84 e6       	ldi	r24, 0x64	; 100
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <wait_1ms>
	
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    1606:	61 e3       	ldi	r22, 0x31	; 49
    1608:	8f e6       	ldi	r24, 0x6F	; 111
    160a:	91 e0       	ldi	r25, 0x01	; 1
    160c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    1610:	6f ef       	ldi	r22, 0xFF	; 255
    1612:	8f e6       	ldi	r24, 0x6F	; 111
    1614:	91 e0       	ldi	r25, 0x01	; 1
    1616:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    161a:	62 e3       	ldi	r22, 0x32	; 50
    161c:	8f e6       	ldi	r24, 0x6F	; 111
    161e:	91 e0       	ldi	r25, 0x01	; 1
    1620:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    1624:	61 e0       	ldi	r22, 0x01	; 1
    1626:	8f e6       	ldi	r24, 0x6F	; 111
    1628:	91 e0       	ldi	r25, 0x01	; 1
    162a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    162e:	61 e0       	ldi	r22, 0x01	; 1
    1630:	8f e6       	ldi	r24, 0x6F	; 111
    1632:	91 e0       	ldi	r25, 0x01	; 1
    1634:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    1638:	60 e1       	ldi	r22, 0x10	; 16
    163a:	8f e6       	ldi	r24, 0x6F	; 111
    163c:	91 e0       	ldi	r25, 0x01	; 1
    163e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    1642:	6f ef       	ldi	r22, 0xFF	; 255
    1644:	8f e6       	ldi	r24, 0x6F	; 111
    1646:	91 e0       	ldi	r25, 0x01	; 1
    1648:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    164c:	61 e3       	ldi	r22, 0x31	; 49
    164e:	8f e6       	ldi	r24, 0x6F	; 111
    1650:	91 e0       	ldi	r25, 0x01	; 1
    1652:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    1656:	6f ef       	ldi	r22, 0xFF	; 255
    1658:	8f e6       	ldi	r24, 0x6F	; 111
    165a:	91 e0       	ldi	r25, 0x01	; 1
    165c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    1660:	62 e3       	ldi	r22, 0x32	; 50
    1662:	8f e6       	ldi	r24, 0x6F	; 111
    1664:	91 e0       	ldi	r25, 0x01	; 1
    1666:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    166a:	61 e0       	ldi	r22, 0x01	; 1
    166c:	8f e6       	ldi	r24, 0x6F	; 111
    166e:	91 e0       	ldi	r25, 0x01	; 1
    1670:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    1674:	61 e0       	ldi	r22, 0x01	; 1
    1676:	8f e6       	ldi	r24, 0x6F	; 111
    1678:	91 e0       	ldi	r25, 0x01	; 1
    167a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    167e:	60 e1       	ldi	r22, 0x10	; 16
    1680:	8f e6       	ldi	r24, 0x6F	; 111
    1682:	91 e0       	ldi	r25, 0x01	; 1
    1684:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    1688:	6f ef       	ldi	r22, 0xFF	; 255
    168a:	8f e6       	ldi	r24, 0x6F	; 111
    168c:	91 e0       	ldi	r25, 0x01	; 1
    168e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    1692:	61 e3       	ldi	r22, 0x31	; 49
    1694:	8f e6       	ldi	r24, 0x6F	; 111
    1696:	91 e0       	ldi	r25, 0x01	; 1
    1698:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    169c:	6f ef       	ldi	r22, 0xFF	; 255
    169e:	8f e6       	ldi	r24, 0x6F	; 111
    16a0:	91 e0       	ldi	r25, 0x01	; 1
    16a2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    16a6:	62 e3       	ldi	r22, 0x32	; 50
    16a8:	8f e6       	ldi	r24, 0x6F	; 111
    16aa:	91 e0       	ldi	r25, 0x01	; 1
    16ac:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    16b0:	61 e0       	ldi	r22, 0x01	; 1
    16b2:	8f e6       	ldi	r24, 0x6F	; 111
    16b4:	91 e0       	ldi	r25, 0x01	; 1
    16b6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    16ba:	61 e0       	ldi	r22, 0x01	; 1
    16bc:	8f e6       	ldi	r24, 0x6F	; 111
    16be:	91 e0       	ldi	r25, 0x01	; 1
    16c0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    16c4:	60 e1       	ldi	r22, 0x10	; 16
    16c6:	8f e6       	ldi	r24, 0x6F	; 111
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    16ce:	6f ef       	ldi	r22, 0xFF	; 255
    16d0:	8f e6       	ldi	r24, 0x6F	; 111
    16d2:	91 e0       	ldi	r25, 0x01	; 1
    16d4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    16d8:	61 e3       	ldi	r22, 0x31	; 49
    16da:	8f e6       	ldi	r24, 0x6F	; 111
    16dc:	91 e0       	ldi	r25, 0x01	; 1
    16de:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    16e2:	6f ef       	ldi	r22, 0xFF	; 255
    16e4:	8f e6       	ldi	r24, 0x6F	; 111
    16e6:	91 e0       	ldi	r25, 0x01	; 1
    16e8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    16ec:	62 e3       	ldi	r22, 0x32	; 50
    16ee:	8f e6       	ldi	r24, 0x6F	; 111
    16f0:	91 e0       	ldi	r25, 0x01	; 1
    16f2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    16f6:	61 e0       	ldi	r22, 0x01	; 1
    16f8:	8f e6       	ldi	r24, 0x6F	; 111
    16fa:	91 e0       	ldi	r25, 0x01	; 1
    16fc:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    1700:	61 e0       	ldi	r22, 0x01	; 1
    1702:	8f e6       	ldi	r24, 0x6F	; 111
    1704:	91 e0       	ldi	r25, 0x01	; 1
    1706:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    170a:	60 e1       	ldi	r22, 0x10	; 16
    170c:	8f e6       	ldi	r24, 0x6F	; 111
    170e:	91 e0       	ldi	r25, 0x01	; 1
    1710:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    1714:	6f ef       	ldi	r22, 0xFF	; 255
    1716:	8f e6       	ldi	r24, 0x6F	; 111
    1718:	91 e0       	ldi	r25, 0x01	; 1
    171a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    171e:	61 e3       	ldi	r22, 0x31	; 49
    1720:	8f e6       	ldi	r24, 0x6F	; 111
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    1728:	6f ef       	ldi	r22, 0xFF	; 255
    172a:	8f e6       	ldi	r24, 0x6F	; 111
    172c:	91 e0       	ldi	r25, 0x01	; 1
    172e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    1732:	62 e3       	ldi	r22, 0x32	; 50
    1734:	8f e6       	ldi	r24, 0x6F	; 111
    1736:	91 e0       	ldi	r25, 0x01	; 1
    1738:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    173c:	61 e0       	ldi	r22, 0x01	; 1
    173e:	8f e6       	ldi	r24, 0x6F	; 111
    1740:	91 e0       	ldi	r25, 0x01	; 1
    1742:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    1746:	61 e0       	ldi	r22, 0x01	; 1
    1748:	8f e6       	ldi	r24, 0x6F	; 111
    174a:	91 e0       	ldi	r25, 0x01	; 1
    174c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    1750:	60 e1       	ldi	r22, 0x10	; 16
    1752:	8f e6       	ldi	r24, 0x6F	; 111
    1754:	91 e0       	ldi	r25, 0x01	; 1
    1756:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    175a:	6f ef       	ldi	r22, 0xFF	; 255
    175c:	8f e6       	ldi	r24, 0x6F	; 111
    175e:	91 e0       	ldi	r25, 0x01	; 1
    1760:	0e 94 ee 00 	call	0x1dc	; 0x1dc <RingBuffer_Insert>
		
	
    while (1) 
    {
		if(u8RGBAnimation)
    1764:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u8RGBAnimation>
    1768:	88 23       	and	r24, r24
    176a:	09 f4       	brne	.+2      	; 0x176e <main+0x22c>
    176c:	d7 c5       	rjmp	.+2990   	; 0x231c <main+0xdda>
		{
			if(RingBuffer_CountChar(&RINGBUFFER,0xFF))
    176e:	6f ef       	ldi	r22, 0xFF	; 255
    1770:	8f e6       	ldi	r24, 0x6F	; 111
    1772:	91 e0       	ldi	r25, 0x01	; 1
    1774:	0e 94 b5 01 	call	0x36a	; 0x36a <RingBuffer_CountChar>
    1778:	88 23       	and	r24, r24
    177a:	09 f4       	brne	.+2      	; 0x177e <main+0x23c>
    177c:	a9 c0       	rjmp	.+338    	; 0x18d0 <main+0x38e>
			{
				RingBuffer_RemoveUntilChar(&RINGBUFFER,au8Command,0xFF,0);
    177e:	ce 01       	movw	r24, r28
    1780:	07 96       	adiw	r24, 0x07	; 7
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	4f ef       	ldi	r20, 0xFF	; 255
    1786:	bc 01       	movw	r22, r24
    1788:	8f e6       	ldi	r24, 0x6F	; 111
    178a:	91 e0       	ldi	r25, 0x01	; 1
    178c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <RingBuffer_RemoveUntilChar>
				
				switch(au8Command[0])
    1790:	8f 81       	ldd	r24, Y+7	; 0x07
    1792:	88 2f       	mov	r24, r24
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	82 34       	cpi	r24, 0x42	; 66
    1798:	91 05       	cpc	r25, r1
    179a:	59 f0       	breq	.+22     	; 0x17b2 <main+0x270>
    179c:	83 34       	cpi	r24, 0x43	; 67
    179e:	91 05       	cpc	r25, r1
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <main+0x262>
    17a2:	41 c0       	rjmp	.+130    	; 0x1826 <main+0x2e4>
    17a4:	81 34       	cpi	r24, 0x41	; 65
    17a6:	91 05       	cpc	r25, r1
    17a8:	09 f0       	breq	.+2      	; 0x17ac <main+0x26a>
    17aa:	92 c0       	rjmp	.+292    	; 0x18d0 <main+0x38e>
				{
					case 0x41:
					u8RGBAnimation = 0;
    17ac:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <u8RGBAnimation>
					break;
    17b0:	8f c0       	rjmp	.+286    	; 0x18d0 <main+0x38e>
					
					case 0x42:
					if(strlen(au8Command) == 9)
    17b2:	ce 01       	movw	r24, r28
    17b4:	07 96       	adiw	r24, 0x07	; 7
    17b6:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <strlen>
    17ba:	09 97       	sbiw	r24, 0x09	; 9
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <main+0x27e>
    17be:	85 c0       	rjmp	.+266    	; 0x18ca <main+0x388>
					{
						u8RGBStartRed = au8Command[1]-1;
    17c0:	88 85       	ldd	r24, Y+8	; 0x08
    17c2:	81 50       	subi	r24, 0x01	; 1
    17c4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8RGBStartRed>
						u8RGBStartGreen = au8Command[2]-1;
    17c8:	89 85       	ldd	r24, Y+9	; 0x09
    17ca:	81 50       	subi	r24, 0x01	; 1
    17cc:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8RGBStartGreen>
						u8RGBStartBlue = au8Command[3]-1;
    17d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    17d2:	81 50       	subi	r24, 0x01	; 1
    17d4:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <u8RGBStartBlue>
						u8RGBStopRed = au8Command[4]-1;
    17d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    17da:	81 50       	subi	r24, 0x01	; 1
    17dc:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8RGBStopRed>
						u8RGBStopGreen = au8Command[5]-1;
    17e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    17e2:	81 50       	subi	r24, 0x01	; 1
    17e4:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <u8RGBStopGreen>
						u8RGBStopBlue = au8Command[6]-1;
    17e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ea:	81 50       	subi	r24, 0x01	; 1
    17ec:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <u8RGBStopBlue>
						u16RGBTime = ((uint16_t)au8Command[7])*200;
    17f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	48 ec       	ldi	r20, 0xC8	; 200
    17f8:	42 9f       	mul	r20, r18
    17fa:	c0 01       	movw	r24, r0
    17fc:	43 9f       	mul	r20, r19
    17fe:	90 0d       	add	r25, r0
    1800:	11 24       	eor	r1, r1
    1802:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <u16RGBTime+0x1>
    1806:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <u16RGBTime>
						u8RGBBounce = au8Command[8]-1;
    180a:	8f 85       	ldd	r24, Y+15	; 0x0f
    180c:	81 50       	subi	r24, 0x01	; 1
    180e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8RGBBounce>
						u8RGBBounceDirection = 0;
    1812:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <u8RGBBounceDirection>
						u16RGBTimeCounter = 0;
    1816:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <u16RGBTimeCounter+0x1>
    181a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <u16RGBTimeCounter>
						u8RGBAnimation = 1;
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <u8RGBAnimation>
					}
					break;
    1824:	52 c0       	rjmp	.+164    	; 0x18ca <main+0x388>

					case 0x43:
					if(strlen(au8Command) == 15)
    1826:	ce 01       	movw	r24, r28
    1828:	07 96       	adiw	r24, 0x07	; 7
    182a:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <strlen>
    182e:	0f 97       	sbiw	r24, 0x0f	; 15
    1830:	09 f0       	breq	.+2      	; 0x1834 <main+0x2f2>
    1832:	4d c0       	rjmp	.+154    	; 0x18ce <main+0x38c>
					{
						u8RGBStartRed = au8Command[1]-1;
    1834:	88 85       	ldd	r24, Y+8	; 0x08
    1836:	81 50       	subi	r24, 0x01	; 1
    1838:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8RGBStartRed>
						u8RGBStartGreen = au8Command[2]-1;
    183c:	89 85       	ldd	r24, Y+9	; 0x09
    183e:	81 50       	subi	r24, 0x01	; 1
    1840:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8RGBStartGreen>
						u8RGBStartBlue = au8Command[3]-1;
    1844:	8a 85       	ldd	r24, Y+10	; 0x0a
    1846:	81 50       	subi	r24, 0x01	; 1
    1848:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <u8RGBStartBlue>
						u8RGBStartMiddleRed = au8Command[4]-1;
    184c:	8b 85       	ldd	r24, Y+11	; 0x0b
    184e:	81 50       	subi	r24, 0x01	; 1
    1850:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <u8RGBStartMiddleRed>
						u8RGBStartMiddleGreen = au8Command[5]-1;
    1854:	8c 85       	ldd	r24, Y+12	; 0x0c
    1856:	81 50       	subi	r24, 0x01	; 1
    1858:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <u8RGBStartMiddleGreen>
						u8RGBStartMiddleBlue = au8Command[6]-1;
    185c:	8d 85       	ldd	r24, Y+13	; 0x0d
    185e:	81 50       	subi	r24, 0x01	; 1
    1860:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8RGBStartMiddleBlue>
						u8RGBStopRed = au8Command[7]-1;
    1864:	8e 85       	ldd	r24, Y+14	; 0x0e
    1866:	81 50       	subi	r24, 0x01	; 1
    1868:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8RGBStopRed>
						u8RGBStopGreen = au8Command[8]-1;
    186c:	8f 85       	ldd	r24, Y+15	; 0x0f
    186e:	81 50       	subi	r24, 0x01	; 1
    1870:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <u8RGBStopGreen>
						u8RGBStopBlue = au8Command[9]-1;
    1874:	88 89       	ldd	r24, Y+16	; 0x10
    1876:	81 50       	subi	r24, 0x01	; 1
    1878:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <u8RGBStopBlue>
						u8RGBStopMiddleRed = au8Command[10]-1;
    187c:	89 89       	ldd	r24, Y+17	; 0x11
    187e:	81 50       	subi	r24, 0x01	; 1
    1880:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <u8RGBStopMiddleRed>
						u8RGBStopMiddleGreen = au8Command[11]-1;
    1884:	8a 89       	ldd	r24, Y+18	; 0x12
    1886:	81 50       	subi	r24, 0x01	; 1
    1888:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <u8RGBStopMiddleGreen>
						u8RGBStopMiddleBlue = au8Command[12]-1;
    188c:	8b 89       	ldd	r24, Y+19	; 0x13
    188e:	81 50       	subi	r24, 0x01	; 1
    1890:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <u8RGBStopMiddleBlue>
						u16RGBTime = ((uint16_t)au8Command[13])*200;
    1894:	8c 89       	ldd	r24, Y+20	; 0x14
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	48 ec       	ldi	r20, 0xC8	; 200
    189c:	42 9f       	mul	r20, r18
    189e:	c0 01       	movw	r24, r0
    18a0:	43 9f       	mul	r20, r19
    18a2:	90 0d       	add	r25, r0
    18a4:	11 24       	eor	r1, r1
    18a6:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <u16RGBTime+0x1>
    18aa:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <u16RGBTime>
						u8RGBBounce = au8Command[14]-1;
    18ae:	8d 89       	ldd	r24, Y+21	; 0x15
    18b0:	81 50       	subi	r24, 0x01	; 1
    18b2:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8RGBBounce>
						u8RGBBounceDirection = 0;
    18b6:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <u8RGBBounceDirection>
						u16RGBTimeCounter = 0;
    18ba:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <u16RGBTimeCounter+0x1>
    18be:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <u16RGBTimeCounter>
						u8RGBAnimation = 2;
    18c2:	82 e0       	ldi	r24, 0x02	; 2
    18c4:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <u8RGBAnimation>
					}
					break;
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <main+0x38c>
						u8RGBBounce = au8Command[8]-1;
						u8RGBBounceDirection = 0;
						u16RGBTimeCounter = 0;
						u8RGBAnimation = 1;
					}
					break;
    18ca:	00 00       	nop
    18cc:	01 c0       	rjmp	.+2      	; 0x18d0 <main+0x38e>
						u8RGBBounce = au8Command[14]-1;
						u8RGBBounceDirection = 0;
						u16RGBTimeCounter = 0;
						u8RGBAnimation = 2;
					}
					break;
    18ce:	00 00       	nop
				}
			}
			
			if(u8RGBDataState==0)
    18d0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8RGBDataState>
    18d4:	88 23       	and	r24, r24
    18d6:	09 f0       	breq	.+2      	; 0x18da <main+0x398>
    18d8:	45 cf       	rjmp	.-374    	; 0x1764 <main+0x222>
			{
				#ifdef RX_DEBUG
				PORTD |= (1<<PORTD0);
    18da:	8b e2       	ldi	r24, 0x2B	; 43
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	2b e2       	ldi	r18, 0x2B	; 43
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	f9 01       	movw	r30, r18
    18e4:	20 81       	ld	r18, Z
    18e6:	21 60       	ori	r18, 0x01	; 1
    18e8:	fc 01       	movw	r30, r24
    18ea:	20 83       	st	Z, r18
				#endif
				
				switch(u8RGBAnimation)
    18ec:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u8RGBAnimation>
    18f0:	88 2f       	mov	r24, r24
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	81 30       	cpi	r24, 0x01	; 1
    18f6:	91 05       	cpc	r25, r1
    18f8:	21 f0       	breq	.+8      	; 0x1902 <main+0x3c0>
    18fa:	02 97       	sbiw	r24, 0x02	; 2
    18fc:	09 f4       	brne	.+2      	; 0x1900 <main+0x3be>
    18fe:	40 c1       	rjmp	.+640    	; 0x1b80 <main+0x63e>
    1900:	03 c5       	rjmp	.+2566   	; 0x2308 <main+0xdc6>
				{
					case 1:
					if(u8RGBStartRed<u8RGBStopRed)
    1902:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <u8RGBStartRed>
    1906:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    190a:	98 17       	cp	r25, r24
    190c:	88 f5       	brcc	.+98     	; 0x1970 <main+0x42e>
					{
						u8RGBRed = (uint8_t)(((uint32_t)(u8RGBStopRed-u8RGBStartRed))*u16RGBTimeCounter/u16RGBTime + u8RGBStartRed);
    190e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    191a:	88 2f       	mov	r24, r24
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	a9 01       	movw	r20, r18
    1920:	48 1b       	sub	r20, r24
    1922:	59 0b       	sbc	r21, r25
    1924:	ca 01       	movw	r24, r20
    1926:	9c 01       	movw	r18, r24
    1928:	99 0f       	add	r25, r25
    192a:	44 0b       	sbc	r20, r20
    192c:	55 0b       	sbc	r21, r21
    192e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    1932:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    1936:	cc 01       	movw	r24, r24
    1938:	a0 e0       	ldi	r26, 0x00	; 0
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	bc 01       	movw	r22, r24
    193e:	cd 01       	movw	r24, r26
    1940:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    1944:	7b 01       	movw	r14, r22
    1946:	8c 01       	movw	r16, r24
    1948:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    194c:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    1950:	9c 01       	movw	r18, r24
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	c8 01       	movw	r24, r16
    1958:	b7 01       	movw	r22, r14
    195a:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    195e:	da 01       	movw	r26, r20
    1960:	c9 01       	movw	r24, r18
    1962:	98 2f       	mov	r25, r24
    1964:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    1968:	89 0f       	add	r24, r25
    196a:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <u8RGBRed>
    196e:	31 c0       	rjmp	.+98     	; 0x19d2 <main+0x490>
					}
					else
					{
						u8RGBRed = (uint8_t)(u8RGBStartRed - ((uint32_t)(u8RGBStartRed-u8RGBStopRed))*u16RGBTimeCounter/u16RGBTime);
    1970:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <u8RGBStartRed>
    1974:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    1980:	88 2f       	mov	r24, r24
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	f9 01       	movw	r30, r18
    1986:	e8 1b       	sub	r30, r24
    1988:	f9 0b       	sbc	r31, r25
    198a:	cf 01       	movw	r24, r30
    198c:	9c 01       	movw	r18, r24
    198e:	99 0f       	add	r25, r25
    1990:	44 0b       	sbc	r20, r20
    1992:	55 0b       	sbc	r21, r21
    1994:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    1998:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    199c:	cc 01       	movw	r24, r24
    199e:	a0 e0       	ldi	r26, 0x00	; 0
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	bc 01       	movw	r22, r24
    19a4:	cd 01       	movw	r24, r26
    19a6:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    19aa:	7b 01       	movw	r14, r22
    19ac:	8c 01       	movw	r16, r24
    19ae:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    19b2:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    19b6:	9c 01       	movw	r18, r24
    19b8:	40 e0       	ldi	r20, 0x00	; 0
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	c8 01       	movw	r24, r16
    19be:	b7 01       	movw	r22, r14
    19c0:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    19c4:	da 01       	movw	r26, r20
    19c6:	c9 01       	movw	r24, r18
    19c8:	fd 2d       	mov	r31, r13
    19ca:	f8 1b       	sub	r31, r24
    19cc:	8f 2f       	mov	r24, r31
    19ce:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <u8RGBRed>
					}
					
					if(u8RGBStartGreen<u8RGBStopGreen)
    19d2:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <u8RGBStartGreen>
    19d6:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    19da:	98 17       	cp	r25, r24
    19dc:	88 f5       	brcc	.+98     	; 0x1a40 <main+0x4fe>
					{
						u8RGBGreen = (uint8_t)(((uint32_t)(u8RGBStopGreen-u8RGBStartGreen))*u16RGBTimeCounter/u16RGBTime + u8RGBStartGreen);
    19de:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    19ea:	88 2f       	mov	r24, r24
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	a9 01       	movw	r20, r18
    19f0:	48 1b       	sub	r20, r24
    19f2:	59 0b       	sbc	r21, r25
    19f4:	ca 01       	movw	r24, r20
    19f6:	9c 01       	movw	r18, r24
    19f8:	99 0f       	add	r25, r25
    19fa:	44 0b       	sbc	r20, r20
    19fc:	55 0b       	sbc	r21, r21
    19fe:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    1a02:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    1a06:	cc 01       	movw	r24, r24
    1a08:	a0 e0       	ldi	r26, 0x00	; 0
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	cd 01       	movw	r24, r26
    1a10:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    1a14:	7b 01       	movw	r14, r22
    1a16:	8c 01       	movw	r16, r24
    1a18:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    1a1c:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    1a20:	9c 01       	movw	r18, r24
    1a22:	40 e0       	ldi	r20, 0x00	; 0
    1a24:	50 e0       	ldi	r21, 0x00	; 0
    1a26:	c8 01       	movw	r24, r16
    1a28:	b7 01       	movw	r22, r14
    1a2a:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    1a2e:	da 01       	movw	r26, r20
    1a30:	c9 01       	movw	r24, r18
    1a32:	98 2f       	mov	r25, r24
    1a34:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    1a38:	89 0f       	add	r24, r25
    1a3a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u8RGBGreen>
    1a3e:	31 c0       	rjmp	.+98     	; 0x1aa2 <main+0x560>
					}
					else
					{
						u8RGBGreen = (uint8_t)(u8RGBStartGreen - ((uint32_t)(u8RGBStartGreen-u8RGBStopGreen))*u16RGBTimeCounter/u16RGBTime);
    1a40:	d0 90 44 01 	lds	r13, 0x0144	; 0x800144 <u8RGBStartGreen>
    1a44:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    1a50:	88 2f       	mov	r24, r24
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	f9 01       	movw	r30, r18
    1a56:	e8 1b       	sub	r30, r24
    1a58:	f9 0b       	sbc	r31, r25
    1a5a:	cf 01       	movw	r24, r30
    1a5c:	9c 01       	movw	r18, r24
    1a5e:	99 0f       	add	r25, r25
    1a60:	44 0b       	sbc	r20, r20
    1a62:	55 0b       	sbc	r21, r21
    1a64:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    1a68:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    1a6c:	cc 01       	movw	r24, r24
    1a6e:	a0 e0       	ldi	r26, 0x00	; 0
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	bc 01       	movw	r22, r24
    1a74:	cd 01       	movw	r24, r26
    1a76:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    1a7a:	7b 01       	movw	r14, r22
    1a7c:	8c 01       	movw	r16, r24
    1a7e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    1a82:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    1a86:	9c 01       	movw	r18, r24
    1a88:	40 e0       	ldi	r20, 0x00	; 0
    1a8a:	50 e0       	ldi	r21, 0x00	; 0
    1a8c:	c8 01       	movw	r24, r16
    1a8e:	b7 01       	movw	r22, r14
    1a90:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    1a94:	da 01       	movw	r26, r20
    1a96:	c9 01       	movw	r24, r18
    1a98:	fd 2d       	mov	r31, r13
    1a9a:	f8 1b       	sub	r31, r24
    1a9c:	8f 2f       	mov	r24, r31
    1a9e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u8RGBGreen>
					}
					
					if(u8RGBStartBlue<u8RGBStopBlue)
    1aa2:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <u8RGBStartBlue>
    1aa6:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    1aaa:	98 17       	cp	r25, r24
    1aac:	88 f5       	brcc	.+98     	; 0x1b10 <main+0x5ce>
					{
						u8RGBBlue = (uint8_t)(((uint32_t)(u8RGBStopBlue-u8RGBStartBlue))*u16RGBTimeCounter/u16RGBTime + u8RGBStartBlue);
    1aae:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    1aba:	88 2f       	mov	r24, r24
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	a9 01       	movw	r20, r18
    1ac0:	48 1b       	sub	r20, r24
    1ac2:	59 0b       	sbc	r21, r25
    1ac4:	ca 01       	movw	r24, r20
    1ac6:	9c 01       	movw	r18, r24
    1ac8:	99 0f       	add	r25, r25
    1aca:	44 0b       	sbc	r20, r20
    1acc:	55 0b       	sbc	r21, r21
    1ace:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    1ad2:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    1ad6:	cc 01       	movw	r24, r24
    1ad8:	a0 e0       	ldi	r26, 0x00	; 0
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	bc 01       	movw	r22, r24
    1ade:	cd 01       	movw	r24, r26
    1ae0:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    1ae4:	7b 01       	movw	r14, r22
    1ae6:	8c 01       	movw	r16, r24
    1ae8:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    1aec:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    1af0:	9c 01       	movw	r18, r24
    1af2:	40 e0       	ldi	r20, 0x00	; 0
    1af4:	50 e0       	ldi	r21, 0x00	; 0
    1af6:	c8 01       	movw	r24, r16
    1af8:	b7 01       	movw	r22, r14
    1afa:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    1afe:	da 01       	movw	r26, r20
    1b00:	c9 01       	movw	r24, r18
    1b02:	98 2f       	mov	r25, r24
    1b04:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    1b08:	89 0f       	add	r24, r25
    1b0a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <u8RGBBlue>
    1b0e:	31 c0       	rjmp	.+98     	; 0x1b72 <main+0x630>
					}
					else
					{
						u8RGBBlue = (uint8_t)(u8RGBStartBlue - ((uint32_t)(u8RGBStartBlue-u8RGBStopBlue))*u16RGBTimeCounter/u16RGBTime);
    1b10:	d0 90 45 01 	lds	r13, 0x0145	; 0x800145 <u8RGBStartBlue>
    1b14:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	f9 01       	movw	r30, r18
    1b26:	e8 1b       	sub	r30, r24
    1b28:	f9 0b       	sbc	r31, r25
    1b2a:	cf 01       	movw	r24, r30
    1b2c:	9c 01       	movw	r18, r24
    1b2e:	99 0f       	add	r25, r25
    1b30:	44 0b       	sbc	r20, r20
    1b32:	55 0b       	sbc	r21, r21
    1b34:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    1b38:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    1b3c:	cc 01       	movw	r24, r24
    1b3e:	a0 e0       	ldi	r26, 0x00	; 0
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	bc 01       	movw	r22, r24
    1b44:	cd 01       	movw	r24, r26
    1b46:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    1b4a:	7b 01       	movw	r14, r22
    1b4c:	8c 01       	movw	r16, r24
    1b4e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    1b52:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    1b56:	9c 01       	movw	r18, r24
    1b58:	40 e0       	ldi	r20, 0x00	; 0
    1b5a:	50 e0       	ldi	r21, 0x00	; 0
    1b5c:	c8 01       	movw	r24, r16
    1b5e:	b7 01       	movw	r22, r14
    1b60:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    1b64:	da 01       	movw	r26, r20
    1b66:	c9 01       	movw	r24, r18
    1b68:	fd 2d       	mov	r31, r13
    1b6a:	f8 1b       	sub	r31, r24
    1b6c:	8f 2f       	mov	r24, r31
    1b6e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <u8RGBBlue>
					}
					u8RGBSingleColor = 1;
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8RGBSingleColor>
					u8RGBDataState = 1;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBDataState>
					break;
    1b7e:	c4 c3       	rjmp	.+1928   	; 0x2308 <main+0xdc6>

					case 2:
					u8Count = LED_COUNT/2;
    1b80:	8a e0       	ldi	r24, 0x0A	; 10
    1b82:	8e 83       	std	Y+6, r24	; 0x06
					for(i=0;i<u8Count;i++)
    1b84:	1a 82       	std	Y+2, r1	; 0x02
    1b86:	19 82       	std	Y+1, r1	; 0x01
    1b88:	b0 c3       	rjmp	.+1888   	; 0x22ea <main+0xda8>
					{
						if(u8RGBStartRed<u8RGBStartMiddleRed)
    1b8a:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <u8RGBStartRed>
    1b8e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u8RGBStartMiddleRed>
    1b92:	98 17       	cp	r25, r24
    1b94:	78 f5       	brcc	.+94     	; 0x1bf4 <main+0x6b2>
						{
							u8StartTemp = (uint8_t)(((uint32_t)(u8RGBStartMiddleRed-u8RGBStartRed))*i/(u8Count-1)+u8RGBStartRed);
    1b96:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u8RGBStartMiddleRed>
    1b9a:	28 2f       	mov	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    1ba2:	88 2f       	mov	r24, r24
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	a9 01       	movw	r20, r18
    1ba8:	48 1b       	sub	r20, r24
    1baa:	59 0b       	sbc	r21, r25
    1bac:	ca 01       	movw	r24, r20
    1bae:	9c 01       	movw	r18, r24
    1bb0:	99 0f       	add	r25, r25
    1bb2:	44 0b       	sbc	r20, r20
    1bb4:	55 0b       	sbc	r21, r21
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bba:	cc 01       	movw	r24, r24
    1bbc:	a0 e0       	ldi	r26, 0x00	; 0
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	cd 01       	movw	r24, r26
    1bc4:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    1bc8:	7b 01       	movw	r14, r22
    1bca:	8c 01       	movw	r16, r24
    1bcc:	8e 81       	ldd	r24, Y+6	; 0x06
    1bce:	88 2f       	mov	r24, r24
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	9c 01       	movw	r18, r24
    1bd6:	99 0f       	add	r25, r25
    1bd8:	44 0b       	sbc	r20, r20
    1bda:	55 0b       	sbc	r21, r21
    1bdc:	c8 01       	movw	r24, r16
    1bde:	b7 01       	movw	r22, r14
    1be0:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    1be4:	da 01       	movw	r26, r20
    1be6:	c9 01       	movw	r24, r18
    1be8:	98 2f       	mov	r25, r24
    1bea:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    1bee:	89 0f       	add	r24, r25
    1bf0:	8c 83       	std	Y+4, r24	; 0x04
    1bf2:	2f c0       	rjmp	.+94     	; 0x1c52 <main+0x710>
						}
						else
						{
							u8StartTemp = (uint8_t)(u8RGBStartRed-((uint32_t)(u8RGBStartRed-u8RGBStartMiddleRed))*i/(u8Count-1));
    1bf4:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <u8RGBStartRed>
    1bf8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u8RGBStartMiddleRed>
    1c04:	88 2f       	mov	r24, r24
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	f9 01       	movw	r30, r18
    1c0a:	e8 1b       	sub	r30, r24
    1c0c:	f9 0b       	sbc	r31, r25
    1c0e:	cf 01       	movw	r24, r30
    1c10:	9c 01       	movw	r18, r24
    1c12:	99 0f       	add	r25, r25
    1c14:	44 0b       	sbc	r20, r20
    1c16:	55 0b       	sbc	r21, r21
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1c:	cc 01       	movw	r24, r24
    1c1e:	a0 e0       	ldi	r26, 0x00	; 0
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	bc 01       	movw	r22, r24
    1c24:	cd 01       	movw	r24, r26
    1c26:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    1c2a:	7b 01       	movw	r14, r22
    1c2c:	8c 01       	movw	r16, r24
    1c2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c30:	88 2f       	mov	r24, r24
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	9c 01       	movw	r18, r24
    1c38:	99 0f       	add	r25, r25
    1c3a:	44 0b       	sbc	r20, r20
    1c3c:	55 0b       	sbc	r21, r21
    1c3e:	c8 01       	movw	r24, r16
    1c40:	b7 01       	movw	r22, r14
    1c42:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    1c46:	da 01       	movw	r26, r20
    1c48:	c9 01       	movw	r24, r18
    1c4a:	fd 2d       	mov	r31, r13
    1c4c:	f8 1b       	sub	r31, r24
    1c4e:	8f 2f       	mov	r24, r31
    1c50:	8c 83       	std	Y+4, r24	; 0x04
						}

						if(u8RGBStopRed<u8RGBStopMiddleRed)
    1c52:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <u8RGBStopRed>
    1c56:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u8RGBStopMiddleRed>
    1c5a:	98 17       	cp	r25, r24
    1c5c:	78 f5       	brcc	.+94     	; 0x1cbc <main+0x77a>
						{
							u8StopTemp = (uint8_t)(((uint32_t)(u8RGBStopMiddleRed-u8RGBStopRed))*i/(u8Count-1)+u8RGBStopRed);
    1c5e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u8RGBStopMiddleRed>
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    1c6a:	88 2f       	mov	r24, r24
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	a9 01       	movw	r20, r18
    1c70:	48 1b       	sub	r20, r24
    1c72:	59 0b       	sbc	r21, r25
    1c74:	ca 01       	movw	r24, r20
    1c76:	9c 01       	movw	r18, r24
    1c78:	99 0f       	add	r25, r25
    1c7a:	44 0b       	sbc	r20, r20
    1c7c:	55 0b       	sbc	r21, r21
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	9a 81       	ldd	r25, Y+2	; 0x02
    1c82:	cc 01       	movw	r24, r24
    1c84:	a0 e0       	ldi	r26, 0x00	; 0
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	bc 01       	movw	r22, r24
    1c8a:	cd 01       	movw	r24, r26
    1c8c:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    1c90:	7b 01       	movw	r14, r22
    1c92:	8c 01       	movw	r16, r24
    1c94:	8e 81       	ldd	r24, Y+6	; 0x06
    1c96:	88 2f       	mov	r24, r24
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	9c 01       	movw	r18, r24
    1c9e:	99 0f       	add	r25, r25
    1ca0:	44 0b       	sbc	r20, r20
    1ca2:	55 0b       	sbc	r21, r21
    1ca4:	c8 01       	movw	r24, r16
    1ca6:	b7 01       	movw	r22, r14
    1ca8:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    1cac:	da 01       	movw	r26, r20
    1cae:	c9 01       	movw	r24, r18
    1cb0:	98 2f       	mov	r25, r24
    1cb2:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    1cb6:	89 0f       	add	r24, r25
    1cb8:	8d 83       	std	Y+5, r24	; 0x05
    1cba:	2f c0       	rjmp	.+94     	; 0x1d1a <main+0x7d8>
						}
						else
						{
							u8StopTemp = (uint8_t)(u8RGBStopRed-((uint32_t)(u8RGBStopRed-u8RGBStopMiddleRed))*i/(u8Count-1));
    1cbc:	d0 90 49 01 	lds	r13, 0x0149	; 0x800149 <u8RGBStopRed>
    1cc0:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u8RGBStopMiddleRed>
    1ccc:	88 2f       	mov	r24, r24
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	f9 01       	movw	r30, r18
    1cd2:	e8 1b       	sub	r30, r24
    1cd4:	f9 0b       	sbc	r31, r25
    1cd6:	cf 01       	movw	r24, r30
    1cd8:	9c 01       	movw	r18, r24
    1cda:	99 0f       	add	r25, r25
    1cdc:	44 0b       	sbc	r20, r20
    1cde:	55 0b       	sbc	r21, r21
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce4:	cc 01       	movw	r24, r24
    1ce6:	a0 e0       	ldi	r26, 0x00	; 0
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	bc 01       	movw	r22, r24
    1cec:	cd 01       	movw	r24, r26
    1cee:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    1cf2:	7b 01       	movw	r14, r22
    1cf4:	8c 01       	movw	r16, r24
    1cf6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf8:	88 2f       	mov	r24, r24
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	9c 01       	movw	r18, r24
    1d00:	99 0f       	add	r25, r25
    1d02:	44 0b       	sbc	r20, r20
    1d04:	55 0b       	sbc	r21, r21
    1d06:	c8 01       	movw	r24, r16
    1d08:	b7 01       	movw	r22, r14
    1d0a:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    1d0e:	da 01       	movw	r26, r20
    1d10:	c9 01       	movw	r24, r18
    1d12:	fd 2d       	mov	r31, r13
    1d14:	f8 1b       	sub	r31, r24
    1d16:	8f 2f       	mov	r24, r31
    1d18:	8d 83       	std	Y+5, r24	; 0x05
						}

						if(u8StartTemp<u8StopTemp)
    1d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1e:	98 17       	cp	r25, r24
    1d20:	68 f5       	brcc	.+90     	; 0x1d7c <main+0x83a>
						{
							u8Temp = (uint8_t)(((uint32_t)(u8StopTemp-u8StartTemp))*u16RGBTimeCounter/u16RGBTime + u8StartTemp);
    1d22:	8d 81       	ldd	r24, Y+5	; 0x05
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2a:	88 2f       	mov	r24, r24
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	a9 01       	movw	r20, r18
    1d30:	48 1b       	sub	r20, r24
    1d32:	59 0b       	sbc	r21, r25
    1d34:	ca 01       	movw	r24, r20
    1d36:	9c 01       	movw	r18, r24
    1d38:	99 0f       	add	r25, r25
    1d3a:	44 0b       	sbc	r20, r20
    1d3c:	55 0b       	sbc	r21, r21
    1d3e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    1d42:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    1d46:	cc 01       	movw	r24, r24
    1d48:	a0 e0       	ldi	r26, 0x00	; 0
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	bc 01       	movw	r22, r24
    1d4e:	cd 01       	movw	r24, r26
    1d50:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    1d54:	7b 01       	movw	r14, r22
    1d56:	8c 01       	movw	r16, r24
    1d58:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    1d5c:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    1d60:	9c 01       	movw	r18, r24
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	50 e0       	ldi	r21, 0x00	; 0
    1d66:	c8 01       	movw	r24, r16
    1d68:	b7 01       	movw	r22, r14
    1d6a:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    1d6e:	da 01       	movw	r26, r20
    1d70:	c9 01       	movw	r24, r18
    1d72:	98 2f       	mov	r25, r24
    1d74:	8c 81       	ldd	r24, Y+4	; 0x04
    1d76:	89 0f       	add	r24, r25
    1d78:	8b 83       	std	Y+3, r24	; 0x03
    1d7a:	2c c0       	rjmp	.+88     	; 0x1dd4 <main+0x892>
						}
						else
						{
							u8Temp = (uint8_t)(u8StartTemp-((uint32_t)(u8StartTemp-u8StopTemp))*u16RGBTimeCounter/u16RGBTime);
    1d7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	8d 81       	ldd	r24, Y+5	; 0x05
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	f9 01       	movw	r30, r18
    1d8a:	e8 1b       	sub	r30, r24
    1d8c:	f9 0b       	sbc	r31, r25
    1d8e:	cf 01       	movw	r24, r30
    1d90:	9c 01       	movw	r18, r24
    1d92:	99 0f       	add	r25, r25
    1d94:	44 0b       	sbc	r20, r20
    1d96:	55 0b       	sbc	r21, r21
    1d98:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    1d9c:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    1da0:	cc 01       	movw	r24, r24
    1da2:	a0 e0       	ldi	r26, 0x00	; 0
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	bc 01       	movw	r22, r24
    1da8:	cd 01       	movw	r24, r26
    1daa:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    1dae:	7b 01       	movw	r14, r22
    1db0:	8c 01       	movw	r16, r24
    1db2:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    1db6:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    1dba:	9c 01       	movw	r18, r24
    1dbc:	40 e0       	ldi	r20, 0x00	; 0
    1dbe:	50 e0       	ldi	r21, 0x00	; 0
    1dc0:	c8 01       	movw	r24, r16
    1dc2:	b7 01       	movw	r22, r14
    1dc4:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    1dc8:	da 01       	movw	r26, r20
    1dca:	c9 01       	movw	r24, r18
    1dcc:	98 2f       	mov	r25, r24
    1dce:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd0:	89 1b       	sub	r24, r25
    1dd2:	8b 83       	std	Y+3, r24	; 0x03
						}
						au8Red[i] = u8Temp;
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd8:	80 50       	subi	r24, 0x00	; 0
    1dda:	9f 4f       	sbci	r25, 0xFF	; 255
    1ddc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dde:	fc 01       	movw	r30, r24
    1de0:	20 83       	st	Z, r18
						au8Red[LED_COUNT-i-1] = u8Temp;
    1de2:	23 e1       	ldi	r18, 0x13	; 19
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dea:	a9 01       	movw	r20, r18
    1dec:	48 1b       	sub	r20, r24
    1dee:	59 0b       	sbc	r21, r25
    1df0:	ca 01       	movw	r24, r20
    1df2:	80 50       	subi	r24, 0x00	; 0
    1df4:	9f 4f       	sbci	r25, 0xFF	; 255
    1df6:	2b 81       	ldd	r18, Y+3	; 0x03
    1df8:	fc 01       	movw	r30, r24
    1dfa:	20 83       	st	Z, r18

						if(u8RGBStartGreen<u8RGBStartMiddleGreen)
    1dfc:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <u8RGBStartGreen>
    1e00:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8RGBStartMiddleGreen>
    1e04:	98 17       	cp	r25, r24
    1e06:	78 f5       	brcc	.+94     	; 0x1e66 <main+0x924>
						{
							u8StartTemp = (uint8_t)(((uint32_t)(u8RGBStartMiddleGreen-u8RGBStartGreen))*i/(u8Count-1)+u8RGBStartGreen);
    1e08:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8RGBStartMiddleGreen>
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    1e14:	88 2f       	mov	r24, r24
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	a9 01       	movw	r20, r18
    1e1a:	48 1b       	sub	r20, r24
    1e1c:	59 0b       	sbc	r21, r25
    1e1e:	ca 01       	movw	r24, r20
    1e20:	9c 01       	movw	r18, r24
    1e22:	99 0f       	add	r25, r25
    1e24:	44 0b       	sbc	r20, r20
    1e26:	55 0b       	sbc	r21, r21
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2c:	cc 01       	movw	r24, r24
    1e2e:	a0 e0       	ldi	r26, 0x00	; 0
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	bc 01       	movw	r22, r24
    1e34:	cd 01       	movw	r24, r26
    1e36:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    1e3a:	7b 01       	movw	r14, r22
    1e3c:	8c 01       	movw	r16, r24
    1e3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e40:	88 2f       	mov	r24, r24
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	9c 01       	movw	r18, r24
    1e48:	99 0f       	add	r25, r25
    1e4a:	44 0b       	sbc	r20, r20
    1e4c:	55 0b       	sbc	r21, r21
    1e4e:	c8 01       	movw	r24, r16
    1e50:	b7 01       	movw	r22, r14
    1e52:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    1e56:	da 01       	movw	r26, r20
    1e58:	c9 01       	movw	r24, r18
    1e5a:	98 2f       	mov	r25, r24
    1e5c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    1e60:	89 0f       	add	r24, r25
    1e62:	8c 83       	std	Y+4, r24	; 0x04
    1e64:	2f c0       	rjmp	.+94     	; 0x1ec4 <main+0x982>
						}
						else
						{
							u8StartTemp = (uint8_t)(u8RGBStartGreen-((uint32_t)(u8RGBStartGreen-u8RGBStartMiddleGreen))*i/(u8Count-1));
    1e66:	d0 90 44 01 	lds	r13, 0x0144	; 0x800144 <u8RGBStartGreen>
    1e6a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8RGBStartMiddleGreen>
    1e76:	88 2f       	mov	r24, r24
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	f9 01       	movw	r30, r18
    1e7c:	e8 1b       	sub	r30, r24
    1e7e:	f9 0b       	sbc	r31, r25
    1e80:	cf 01       	movw	r24, r30
    1e82:	9c 01       	movw	r18, r24
    1e84:	99 0f       	add	r25, r25
    1e86:	44 0b       	sbc	r20, r20
    1e88:	55 0b       	sbc	r21, r21
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8e:	cc 01       	movw	r24, r24
    1e90:	a0 e0       	ldi	r26, 0x00	; 0
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	bc 01       	movw	r22, r24
    1e96:	cd 01       	movw	r24, r26
    1e98:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    1e9c:	7b 01       	movw	r14, r22
    1e9e:	8c 01       	movw	r16, r24
    1ea0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea2:	88 2f       	mov	r24, r24
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	9c 01       	movw	r18, r24
    1eaa:	99 0f       	add	r25, r25
    1eac:	44 0b       	sbc	r20, r20
    1eae:	55 0b       	sbc	r21, r21
    1eb0:	c8 01       	movw	r24, r16
    1eb2:	b7 01       	movw	r22, r14
    1eb4:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    1eb8:	da 01       	movw	r26, r20
    1eba:	c9 01       	movw	r24, r18
    1ebc:	fd 2d       	mov	r31, r13
    1ebe:	f8 1b       	sub	r31, r24
    1ec0:	8f 2f       	mov	r24, r31
    1ec2:	8c 83       	std	Y+4, r24	; 0x04
						}

						if(u8RGBStopGreen<u8RGBStopMiddleGreen)
    1ec4:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <u8RGBStopGreen>
    1ec8:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u8RGBStopMiddleGreen>
    1ecc:	98 17       	cp	r25, r24
    1ece:	78 f5       	brcc	.+94     	; 0x1f2e <main+0x9ec>
						{
							u8StopTemp = (uint8_t)(((uint32_t)(u8RGBStopMiddleGreen-u8RGBStopGreen))*i/(u8Count-1)+u8RGBStopGreen);
    1ed0:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u8RGBStopMiddleGreen>
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    1edc:	88 2f       	mov	r24, r24
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	a9 01       	movw	r20, r18
    1ee2:	48 1b       	sub	r20, r24
    1ee4:	59 0b       	sbc	r21, r25
    1ee6:	ca 01       	movw	r24, r20
    1ee8:	9c 01       	movw	r18, r24
    1eea:	99 0f       	add	r25, r25
    1eec:	44 0b       	sbc	r20, r20
    1eee:	55 0b       	sbc	r21, r21
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef4:	cc 01       	movw	r24, r24
    1ef6:	a0 e0       	ldi	r26, 0x00	; 0
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	bc 01       	movw	r22, r24
    1efc:	cd 01       	movw	r24, r26
    1efe:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    1f02:	7b 01       	movw	r14, r22
    1f04:	8c 01       	movw	r16, r24
    1f06:	8e 81       	ldd	r24, Y+6	; 0x06
    1f08:	88 2f       	mov	r24, r24
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	9c 01       	movw	r18, r24
    1f10:	99 0f       	add	r25, r25
    1f12:	44 0b       	sbc	r20, r20
    1f14:	55 0b       	sbc	r21, r21
    1f16:	c8 01       	movw	r24, r16
    1f18:	b7 01       	movw	r22, r14
    1f1a:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    1f1e:	da 01       	movw	r26, r20
    1f20:	c9 01       	movw	r24, r18
    1f22:	98 2f       	mov	r25, r24
    1f24:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    1f28:	89 0f       	add	r24, r25
    1f2a:	8d 83       	std	Y+5, r24	; 0x05
    1f2c:	2f c0       	rjmp	.+94     	; 0x1f8c <main+0xa4a>
						}
						else
						{
							u8StopTemp = (uint8_t)(u8RGBStopGreen-((uint32_t)(u8RGBStopGreen-u8RGBStopMiddleGreen))*i/(u8Count-1));
    1f2e:	d0 90 4a 01 	lds	r13, 0x014A	; 0x80014a <u8RGBStopGreen>
    1f32:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    1f36:	28 2f       	mov	r18, r24
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u8RGBStopMiddleGreen>
    1f3e:	88 2f       	mov	r24, r24
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	f9 01       	movw	r30, r18
    1f44:	e8 1b       	sub	r30, r24
    1f46:	f9 0b       	sbc	r31, r25
    1f48:	cf 01       	movw	r24, r30
    1f4a:	9c 01       	movw	r18, r24
    1f4c:	99 0f       	add	r25, r25
    1f4e:	44 0b       	sbc	r20, r20
    1f50:	55 0b       	sbc	r21, r21
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	9a 81       	ldd	r25, Y+2	; 0x02
    1f56:	cc 01       	movw	r24, r24
    1f58:	a0 e0       	ldi	r26, 0x00	; 0
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	bc 01       	movw	r22, r24
    1f5e:	cd 01       	movw	r24, r26
    1f60:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    1f64:	7b 01       	movw	r14, r22
    1f66:	8c 01       	movw	r16, r24
    1f68:	8e 81       	ldd	r24, Y+6	; 0x06
    1f6a:	88 2f       	mov	r24, r24
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	9c 01       	movw	r18, r24
    1f72:	99 0f       	add	r25, r25
    1f74:	44 0b       	sbc	r20, r20
    1f76:	55 0b       	sbc	r21, r21
    1f78:	c8 01       	movw	r24, r16
    1f7a:	b7 01       	movw	r22, r14
    1f7c:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    1f80:	da 01       	movw	r26, r20
    1f82:	c9 01       	movw	r24, r18
    1f84:	fd 2d       	mov	r31, r13
    1f86:	f8 1b       	sub	r31, r24
    1f88:	8f 2f       	mov	r24, r31
    1f8a:	8d 83       	std	Y+5, r24	; 0x05
						}

						if(u8StartTemp<u8StopTemp)
    1f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f90:	98 17       	cp	r25, r24
    1f92:	68 f5       	brcc	.+90     	; 0x1fee <main+0xaac>
						{
							u8Temp = (uint8_t)(((uint32_t)(u8StopTemp-u8StartTemp))*u16RGBTimeCounter/u16RGBTime + u8StartTemp);
    1f94:	8d 81       	ldd	r24, Y+5	; 0x05
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9c:	88 2f       	mov	r24, r24
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	a9 01       	movw	r20, r18
    1fa2:	48 1b       	sub	r20, r24
    1fa4:	59 0b       	sbc	r21, r25
    1fa6:	ca 01       	movw	r24, r20
    1fa8:	9c 01       	movw	r18, r24
    1faa:	99 0f       	add	r25, r25
    1fac:	44 0b       	sbc	r20, r20
    1fae:	55 0b       	sbc	r21, r21
    1fb0:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    1fb4:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    1fb8:	cc 01       	movw	r24, r24
    1fba:	a0 e0       	ldi	r26, 0x00	; 0
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	bc 01       	movw	r22, r24
    1fc0:	cd 01       	movw	r24, r26
    1fc2:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    1fc6:	7b 01       	movw	r14, r22
    1fc8:	8c 01       	movw	r16, r24
    1fca:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    1fce:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    1fd2:	9c 01       	movw	r18, r24
    1fd4:	40 e0       	ldi	r20, 0x00	; 0
    1fd6:	50 e0       	ldi	r21, 0x00	; 0
    1fd8:	c8 01       	movw	r24, r16
    1fda:	b7 01       	movw	r22, r14
    1fdc:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    1fe0:	da 01       	movw	r26, r20
    1fe2:	c9 01       	movw	r24, r18
    1fe4:	98 2f       	mov	r25, r24
    1fe6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe8:	89 0f       	add	r24, r25
    1fea:	8b 83       	std	Y+3, r24	; 0x03
    1fec:	2c c0       	rjmp	.+88     	; 0x2046 <main+0xb04>
						}
						else
						{
							u8Temp = (uint8_t)(u8StartTemp-((uint32_t)(u8StartTemp-u8StopTemp))*u16RGBTimeCounter/u16RGBTime);
    1fee:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff0:	28 2f       	mov	r18, r24
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	88 2f       	mov	r24, r24
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	f9 01       	movw	r30, r18
    1ffc:	e8 1b       	sub	r30, r24
    1ffe:	f9 0b       	sbc	r31, r25
    2000:	cf 01       	movw	r24, r30
    2002:	9c 01       	movw	r18, r24
    2004:	99 0f       	add	r25, r25
    2006:	44 0b       	sbc	r20, r20
    2008:	55 0b       	sbc	r21, r21
    200a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    200e:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    2012:	cc 01       	movw	r24, r24
    2014:	a0 e0       	ldi	r26, 0x00	; 0
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    2020:	7b 01       	movw	r14, r22
    2022:	8c 01       	movw	r16, r24
    2024:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    2028:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    202c:	9c 01       	movw	r18, r24
    202e:	40 e0       	ldi	r20, 0x00	; 0
    2030:	50 e0       	ldi	r21, 0x00	; 0
    2032:	c8 01       	movw	r24, r16
    2034:	b7 01       	movw	r22, r14
    2036:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    203a:	da 01       	movw	r26, r20
    203c:	c9 01       	movw	r24, r18
    203e:	98 2f       	mov	r25, r24
    2040:	8c 81       	ldd	r24, Y+4	; 0x04
    2042:	89 1b       	sub	r24, r25
    2044:	8b 83       	std	Y+3, r24	; 0x03
						}
						au8Green[i] = u8Temp;
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	9a 81       	ldd	r25, Y+2	; 0x02
    204a:	8c 5e       	subi	r24, 0xEC	; 236
    204c:	9e 4f       	sbci	r25, 0xFE	; 254
    204e:	2b 81       	ldd	r18, Y+3	; 0x03
    2050:	fc 01       	movw	r30, r24
    2052:	20 83       	st	Z, r18
						au8Green[LED_COUNT-i-1] = u8Temp;
    2054:	23 e1       	ldi	r18, 0x13	; 19
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	9a 81       	ldd	r25, Y+2	; 0x02
    205c:	a9 01       	movw	r20, r18
    205e:	48 1b       	sub	r20, r24
    2060:	59 0b       	sbc	r21, r25
    2062:	ca 01       	movw	r24, r20
    2064:	8c 5e       	subi	r24, 0xEC	; 236
    2066:	9e 4f       	sbci	r25, 0xFE	; 254
    2068:	2b 81       	ldd	r18, Y+3	; 0x03
    206a:	fc 01       	movw	r30, r24
    206c:	20 83       	st	Z, r18
						
						if(u8RGBStartBlue<u8RGBStartMiddleBlue)
    206e:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <u8RGBStartBlue>
    2072:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u8RGBStartMiddleBlue>
    2076:	98 17       	cp	r25, r24
    2078:	78 f5       	brcc	.+94     	; 0x20d8 <main+0xb96>
						{
							u8StartTemp = (uint8_t)(((uint32_t)(u8RGBStartMiddleBlue-u8RGBStartBlue))*i/(u8Count-1)+u8RGBStartBlue);
    207a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u8RGBStartMiddleBlue>
    207e:	28 2f       	mov	r18, r24
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    2086:	88 2f       	mov	r24, r24
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	a9 01       	movw	r20, r18
    208c:	48 1b       	sub	r20, r24
    208e:	59 0b       	sbc	r21, r25
    2090:	ca 01       	movw	r24, r20
    2092:	9c 01       	movw	r18, r24
    2094:	99 0f       	add	r25, r25
    2096:	44 0b       	sbc	r20, r20
    2098:	55 0b       	sbc	r21, r21
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	9a 81       	ldd	r25, Y+2	; 0x02
    209e:	cc 01       	movw	r24, r24
    20a0:	a0 e0       	ldi	r26, 0x00	; 0
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	bc 01       	movw	r22, r24
    20a6:	cd 01       	movw	r24, r26
    20a8:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    20ac:	7b 01       	movw	r14, r22
    20ae:	8c 01       	movw	r16, r24
    20b0:	8e 81       	ldd	r24, Y+6	; 0x06
    20b2:	88 2f       	mov	r24, r24
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	9c 01       	movw	r18, r24
    20ba:	99 0f       	add	r25, r25
    20bc:	44 0b       	sbc	r20, r20
    20be:	55 0b       	sbc	r21, r21
    20c0:	c8 01       	movw	r24, r16
    20c2:	b7 01       	movw	r22, r14
    20c4:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    20c8:	da 01       	movw	r26, r20
    20ca:	c9 01       	movw	r24, r18
    20cc:	98 2f       	mov	r25, r24
    20ce:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    20d2:	89 0f       	add	r24, r25
    20d4:	8c 83       	std	Y+4, r24	; 0x04
    20d6:	2f c0       	rjmp	.+94     	; 0x2136 <main+0xbf4>
						}
						else
						{
							u8StartTemp = (uint8_t)(u8RGBStartBlue-((uint32_t)(u8RGBStartBlue-u8RGBStartMiddleBlue))*i/(u8Count-1));
    20d8:	d0 90 45 01 	lds	r13, 0x0145	; 0x800145 <u8RGBStartBlue>
    20dc:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u8RGBStartMiddleBlue>
    20e8:	88 2f       	mov	r24, r24
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	f9 01       	movw	r30, r18
    20ee:	e8 1b       	sub	r30, r24
    20f0:	f9 0b       	sbc	r31, r25
    20f2:	cf 01       	movw	r24, r30
    20f4:	9c 01       	movw	r18, r24
    20f6:	99 0f       	add	r25, r25
    20f8:	44 0b       	sbc	r20, r20
    20fa:	55 0b       	sbc	r21, r21
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2100:	cc 01       	movw	r24, r24
    2102:	a0 e0       	ldi	r26, 0x00	; 0
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	bc 01       	movw	r22, r24
    2108:	cd 01       	movw	r24, r26
    210a:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    210e:	7b 01       	movw	r14, r22
    2110:	8c 01       	movw	r16, r24
    2112:	8e 81       	ldd	r24, Y+6	; 0x06
    2114:	88 2f       	mov	r24, r24
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	9c 01       	movw	r18, r24
    211c:	99 0f       	add	r25, r25
    211e:	44 0b       	sbc	r20, r20
    2120:	55 0b       	sbc	r21, r21
    2122:	c8 01       	movw	r24, r16
    2124:	b7 01       	movw	r22, r14
    2126:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    212a:	da 01       	movw	r26, r20
    212c:	c9 01       	movw	r24, r18
    212e:	fd 2d       	mov	r31, r13
    2130:	f8 1b       	sub	r31, r24
    2132:	8f 2f       	mov	r24, r31
    2134:	8c 83       	std	Y+4, r24	; 0x04
						}

						if(u8RGBStopBlue<u8RGBStopMiddleBlue)
    2136:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <u8RGBStopBlue>
    213a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <u8RGBStopMiddleBlue>
    213e:	98 17       	cp	r25, r24
    2140:	78 f5       	brcc	.+94     	; 0x21a0 <main+0xc5e>
						{
							u8StopTemp = (uint8_t)(((uint32_t)(u8RGBStopMiddleBlue-u8RGBStopBlue))*i/(u8Count-1)+u8RGBStopBlue);
    2142:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <u8RGBStopMiddleBlue>
    2146:	28 2f       	mov	r18, r24
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    214e:	88 2f       	mov	r24, r24
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	a9 01       	movw	r20, r18
    2154:	48 1b       	sub	r20, r24
    2156:	59 0b       	sbc	r21, r25
    2158:	ca 01       	movw	r24, r20
    215a:	9c 01       	movw	r18, r24
    215c:	99 0f       	add	r25, r25
    215e:	44 0b       	sbc	r20, r20
    2160:	55 0b       	sbc	r21, r21
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	9a 81       	ldd	r25, Y+2	; 0x02
    2166:	cc 01       	movw	r24, r24
    2168:	a0 e0       	ldi	r26, 0x00	; 0
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	bc 01       	movw	r22, r24
    216e:	cd 01       	movw	r24, r26
    2170:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    2174:	7b 01       	movw	r14, r22
    2176:	8c 01       	movw	r16, r24
    2178:	8e 81       	ldd	r24, Y+6	; 0x06
    217a:	88 2f       	mov	r24, r24
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	9c 01       	movw	r18, r24
    2182:	99 0f       	add	r25, r25
    2184:	44 0b       	sbc	r20, r20
    2186:	55 0b       	sbc	r21, r21
    2188:	c8 01       	movw	r24, r16
    218a:	b7 01       	movw	r22, r14
    218c:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    2190:	da 01       	movw	r26, r20
    2192:	c9 01       	movw	r24, r18
    2194:	98 2f       	mov	r25, r24
    2196:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    219a:	89 0f       	add	r24, r25
    219c:	8d 83       	std	Y+5, r24	; 0x05
    219e:	2f c0       	rjmp	.+94     	; 0x21fe <main+0xcbc>
						}
						else
						{
							u8StopTemp = (uint8_t)(u8RGBStopBlue-((uint32_t)(u8RGBStopBlue-u8RGBStopMiddleBlue))*i/(u8Count-1));
    21a0:	d0 90 4b 01 	lds	r13, 0x014B	; 0x80014b <u8RGBStopBlue>
    21a4:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    21a8:	28 2f       	mov	r18, r24
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <u8RGBStopMiddleBlue>
    21b0:	88 2f       	mov	r24, r24
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	f9 01       	movw	r30, r18
    21b6:	e8 1b       	sub	r30, r24
    21b8:	f9 0b       	sbc	r31, r25
    21ba:	cf 01       	movw	r24, r30
    21bc:	9c 01       	movw	r18, r24
    21be:	99 0f       	add	r25, r25
    21c0:	44 0b       	sbc	r20, r20
    21c2:	55 0b       	sbc	r21, r21
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	9a 81       	ldd	r25, Y+2	; 0x02
    21c8:	cc 01       	movw	r24, r24
    21ca:	a0 e0       	ldi	r26, 0x00	; 0
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	bc 01       	movw	r22, r24
    21d0:	cd 01       	movw	r24, r26
    21d2:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    21d6:	7b 01       	movw	r14, r22
    21d8:	8c 01       	movw	r16, r24
    21da:	8e 81       	ldd	r24, Y+6	; 0x06
    21dc:	88 2f       	mov	r24, r24
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	9c 01       	movw	r18, r24
    21e4:	99 0f       	add	r25, r25
    21e6:	44 0b       	sbc	r20, r20
    21e8:	55 0b       	sbc	r21, r21
    21ea:	c8 01       	movw	r24, r16
    21ec:	b7 01       	movw	r22, r14
    21ee:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    21f2:	da 01       	movw	r26, r20
    21f4:	c9 01       	movw	r24, r18
    21f6:	fd 2d       	mov	r31, r13
    21f8:	f8 1b       	sub	r31, r24
    21fa:	8f 2f       	mov	r24, r31
    21fc:	8d 83       	std	Y+5, r24	; 0x05
						}

						if(u8StartTemp<u8StopTemp)
    21fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2200:	8d 81       	ldd	r24, Y+5	; 0x05
    2202:	98 17       	cp	r25, r24
    2204:	68 f5       	brcc	.+90     	; 0x2260 <main+0xd1e>
						{
							u8Temp = (uint8_t)(((uint32_t)(u8StopTemp-u8StartTemp))*u16RGBTimeCounter/u16RGBTime + u8StartTemp);
    2206:	8d 81       	ldd	r24, Y+5	; 0x05
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	8c 81       	ldd	r24, Y+4	; 0x04
    220e:	88 2f       	mov	r24, r24
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	a9 01       	movw	r20, r18
    2214:	48 1b       	sub	r20, r24
    2216:	59 0b       	sbc	r21, r25
    2218:	ca 01       	movw	r24, r20
    221a:	9c 01       	movw	r18, r24
    221c:	99 0f       	add	r25, r25
    221e:	44 0b       	sbc	r20, r20
    2220:	55 0b       	sbc	r21, r21
    2222:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    2226:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    222a:	cc 01       	movw	r24, r24
    222c:	a0 e0       	ldi	r26, 0x00	; 0
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	bc 01       	movw	r22, r24
    2232:	cd 01       	movw	r24, r26
    2234:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    2238:	7b 01       	movw	r14, r22
    223a:	8c 01       	movw	r16, r24
    223c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    2240:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    2244:	9c 01       	movw	r18, r24
    2246:	40 e0       	ldi	r20, 0x00	; 0
    2248:	50 e0       	ldi	r21, 0x00	; 0
    224a:	c8 01       	movw	r24, r16
    224c:	b7 01       	movw	r22, r14
    224e:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    2252:	da 01       	movw	r26, r20
    2254:	c9 01       	movw	r24, r18
    2256:	98 2f       	mov	r25, r24
    2258:	8c 81       	ldd	r24, Y+4	; 0x04
    225a:	89 0f       	add	r24, r25
    225c:	8b 83       	std	Y+3, r24	; 0x03
    225e:	2c c0       	rjmp	.+88     	; 0x22b8 <main+0xd76>
						}
						else
						{
							u8Temp = (uint8_t)(u8StartTemp-((uint32_t)(u8StartTemp-u8StopTemp))*u16RGBTimeCounter/u16RGBTime);
    2260:	8c 81       	ldd	r24, Y+4	; 0x04
    2262:	28 2f       	mov	r18, r24
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	8d 81       	ldd	r24, Y+5	; 0x05
    2268:	88 2f       	mov	r24, r24
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	f9 01       	movw	r30, r18
    226e:	e8 1b       	sub	r30, r24
    2270:	f9 0b       	sbc	r31, r25
    2272:	cf 01       	movw	r24, r30
    2274:	9c 01       	movw	r18, r24
    2276:	99 0f       	add	r25, r25
    2278:	44 0b       	sbc	r20, r20
    227a:	55 0b       	sbc	r21, r21
    227c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16RGBTimeCounter>
    2280:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16RGBTimeCounter+0x1>
    2284:	cc 01       	movw	r24, r24
    2286:	a0 e0       	ldi	r26, 0x00	; 0
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	bc 01       	movw	r22, r24
    228c:	cd 01       	movw	r24, r26
    228e:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    2292:	7b 01       	movw	r14, r22
    2294:	8c 01       	movw	r16, r24
    2296:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u16RGBTime>
    229a:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u16RGBTime+0x1>
    229e:	9c 01       	movw	r18, r24
    22a0:	40 e0       	ldi	r20, 0x00	; 0
    22a2:	50 e0       	ldi	r21, 0x00	; 0
    22a4:	c8 01       	movw	r24, r16
    22a6:	b7 01       	movw	r22, r14
    22a8:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    22ac:	da 01       	movw	r26, r20
    22ae:	c9 01       	movw	r24, r18
    22b0:	98 2f       	mov	r25, r24
    22b2:	8c 81       	ldd	r24, Y+4	; 0x04
    22b4:	89 1b       	sub	r24, r25
    22b6:	8b 83       	std	Y+3, r24	; 0x03
						}
						au8Blue[i] = u8Temp;
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	9a 81       	ldd	r25, Y+2	; 0x02
    22bc:	88 5d       	subi	r24, 0xD8	; 216
    22be:	9e 4f       	sbci	r25, 0xFE	; 254
    22c0:	2b 81       	ldd	r18, Y+3	; 0x03
    22c2:	fc 01       	movw	r30, r24
    22c4:	20 83       	st	Z, r18
						au8Blue[LED_COUNT-i-1] = u8Temp;
    22c6:	23 e1       	ldi	r18, 0x13	; 19
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
    22cc:	9a 81       	ldd	r25, Y+2	; 0x02
    22ce:	a9 01       	movw	r20, r18
    22d0:	48 1b       	sub	r20, r24
    22d2:	59 0b       	sbc	r21, r25
    22d4:	ca 01       	movw	r24, r20
    22d6:	88 5d       	subi	r24, 0xD8	; 216
    22d8:	9e 4f       	sbci	r25, 0xFE	; 254
    22da:	2b 81       	ldd	r18, Y+3	; 0x03
    22dc:	fc 01       	movw	r30, r24
    22de:	20 83       	st	Z, r18
					u8RGBDataState = 1;
					break;

					case 2:
					u8Count = LED_COUNT/2;
					for(i=0;i<u8Count;i++)
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	9a 81       	ldd	r25, Y+2	; 0x02
    22e4:	01 96       	adiw	r24, 0x01	; 1
    22e6:	9a 83       	std	Y+2, r25	; 0x02
    22e8:	89 83       	std	Y+1, r24	; 0x01
    22ea:	8e 81       	ldd	r24, Y+6	; 0x06
    22ec:	28 2f       	mov	r18, r24
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	9a 81       	ldd	r25, Y+2	; 0x02
    22f4:	82 17       	cp	r24, r18
    22f6:	93 07       	cpc	r25, r19
    22f8:	08 f4       	brcc	.+2      	; 0x22fc <main+0xdba>
    22fa:	47 cc       	rjmp	.-1906   	; 0x1b8a <main+0x648>
							u8Temp = (uint8_t)(u8StartTemp-((uint32_t)(u8StartTemp-u8StopTemp))*u16RGBTimeCounter/u16RGBTime);
						}
						au8Blue[i] = u8Temp;
						au8Blue[LED_COUNT-i-1] = u8Temp;
					}
					u8RGBSingleColor = 0;
    22fc:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <u8RGBSingleColor>
					u8RGBDataState = 1;
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBDataState>
					break;
    2306:	00 00       	nop
				}

				#ifdef RX_DEBUG
				PORTD &= ~(1<<PORTD0);
    2308:	8b e2       	ldi	r24, 0x2B	; 43
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	2b e2       	ldi	r18, 0x2B	; 43
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	f9 01       	movw	r30, r18
    2312:	20 81       	ld	r18, Z
    2314:	2e 7f       	andi	r18, 0xFE	; 254
    2316:	fc 01       	movw	r30, r24
    2318:	20 83       	st	Z, r18
    231a:	24 ca       	rjmp	.-3000   	; 0x1764 <main+0x222>
				#endif
			}
		}
		else // no animation active
		{
			if(RingBuffer_CountChar(&RINGBUFFER,0xFF) && (u8RGBDataState==0))
    231c:	6f ef       	ldi	r22, 0xFF	; 255
    231e:	8f e6       	ldi	r24, 0x6F	; 111
    2320:	91 e0       	ldi	r25, 0x01	; 1
    2322:	0e 94 b5 01 	call	0x36a	; 0x36a <RingBuffer_CountChar>
    2326:	88 23       	and	r24, r24
    2328:	09 f4       	brne	.+2      	; 0x232c <main+0xdea>
    232a:	1c ca       	rjmp	.-3016   	; 0x1764 <main+0x222>
    232c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8RGBDataState>
    2330:	88 23       	and	r24, r24
    2332:	09 f0       	breq	.+2      	; 0x2336 <main+0xdf4>
    2334:	17 ca       	rjmp	.-3026   	; 0x1764 <main+0x222>
			{
				RingBuffer_RemoveUntilChar(&RINGBUFFER,au8Command,0xFF,0);
    2336:	ce 01       	movw	r24, r28
    2338:	07 96       	adiw	r24, 0x07	; 7
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	4f ef       	ldi	r20, 0xFF	; 255
    233e:	bc 01       	movw	r22, r24
    2340:	8f e6       	ldi	r24, 0x6F	; 111
    2342:	91 e0       	ldi	r25, 0x01	; 1
    2344:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <RingBuffer_RemoveUntilChar>
				
				switch(au8Command[0])
    2348:	8f 81       	ldd	r24, Y+7	; 0x07
    234a:	88 2f       	mov	r24, r24
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	83 33       	cpi	r24, 0x33	; 51
    2350:	91 05       	cpc	r25, r1
    2352:	c9 f1       	breq	.+114    	; 0x23c6 <main+0xe84>
    2354:	84 33       	cpi	r24, 0x34	; 52
    2356:	91 05       	cpc	r25, r1
    2358:	34 f4       	brge	.+12     	; 0x2366 <main+0xe24>
    235a:	81 33       	cpi	r24, 0x31	; 49
    235c:	91 05       	cpc	r25, r1
    235e:	61 f0       	breq	.+24     	; 0x2378 <main+0xe36>
    2360:	c2 97       	sbiw	r24, 0x32	; 50
    2362:	b9 f0       	breq	.+46     	; 0x2392 <main+0xe50>
    2364:	66 c2       	rjmp	.+1228   	; 0x2832 <main+0x12f0>
    2366:	82 34       	cpi	r24, 0x42	; 66
    2368:	91 05       	cpc	r25, r1
    236a:	09 f4       	brne	.+2      	; 0x236e <main+0xe2c>
    236c:	cc c1       	rjmp	.+920    	; 0x2706 <main+0x11c4>
    236e:	83 34       	cpi	r24, 0x43	; 67
    2370:	91 05       	cpc	r25, r1
    2372:	09 f4       	brne	.+2      	; 0x2376 <main+0xe34>
    2374:	02 c2       	rjmp	.+1028   	; 0x277a <main+0x1238>
    2376:	5d c2       	rjmp	.+1210   	; 0x2832 <main+0x12f0>
				{
					case 0x31:
					u8RGBRed = 0;
    2378:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <u8RGBRed>
					u8RGBGreen = 0;
    237c:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <u8RGBGreen>
					u8RGBBlue = 0;
    2380:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <u8RGBBlue>
					u8RGBSingleColor = 1;
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8RGBSingleColor>
					u8RGBDataState = 1;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBDataState>
					break;
    2390:	50 c2       	rjmp	.+1184   	; 0x2832 <main+0x12f0>
					
					case 0x32:
					if(strlen(au8Command) == 4)
    2392:	ce 01       	movw	r24, r28
    2394:	07 96       	adiw	r24, 0x07	; 7
    2396:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <strlen>
    239a:	04 97       	sbiw	r24, 0x04	; 4
    239c:	09 f0       	breq	.+2      	; 0x23a0 <main+0xe5e>
    239e:	3f c2       	rjmp	.+1150   	; 0x281e <main+0x12dc>
					{
						u8RGBRed = au8Command[1]-1;
    23a0:	88 85       	ldd	r24, Y+8	; 0x08
    23a2:	81 50       	subi	r24, 0x01	; 1
    23a4:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <u8RGBRed>
						u8RGBGreen = au8Command[2]-1;
    23a8:	89 85       	ldd	r24, Y+9	; 0x09
    23aa:	81 50       	subi	r24, 0x01	; 1
    23ac:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u8RGBGreen>
						u8RGBBlue = au8Command[3]-1;
    23b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    23b2:	81 50       	subi	r24, 0x01	; 1
    23b4:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <u8RGBBlue>
						u8RGBSingleColor = 1;
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8RGBSingleColor>
						u8RGBDataState = 1;
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBDataState>
					}
					break;
    23c4:	2c c2       	rjmp	.+1112   	; 0x281e <main+0x12dc>
					
					case 0x33:
					if(strlen(au8Command) == 7)
    23c6:	ce 01       	movw	r24, r28
    23c8:	07 96       	adiw	r24, 0x07	; 7
    23ca:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <strlen>
    23ce:	07 97       	sbiw	r24, 0x07	; 7
    23d0:	09 f0       	breq	.+2      	; 0x23d4 <main+0xe92>
    23d2:	28 c2       	rjmp	.+1104   	; 0x2824 <main+0x12e2>
					{
						u8RGBStartRed = au8Command[1]-1;
    23d4:	88 85       	ldd	r24, Y+8	; 0x08
    23d6:	81 50       	subi	r24, 0x01	; 1
    23d8:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8RGBStartRed>
						u8RGBStartGreen = au8Command[2]-1;
    23dc:	89 85       	ldd	r24, Y+9	; 0x09
    23de:	81 50       	subi	r24, 0x01	; 1
    23e0:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8RGBStartGreen>
						u8RGBStartBlue = au8Command[3]-1;
    23e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    23e6:	81 50       	subi	r24, 0x01	; 1
    23e8:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <u8RGBStartBlue>
						u8RGBStopRed = au8Command[4]-1;
    23ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    23ee:	81 50       	subi	r24, 0x01	; 1
    23f0:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8RGBStopRed>
						u8RGBStopGreen = au8Command[5]-1;
    23f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    23f6:	81 50       	subi	r24, 0x01	; 1
    23f8:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <u8RGBStopGreen>
						u8RGBStopBlue = au8Command[6]-1;
    23fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23fe:	81 50       	subi	r24, 0x01	; 1
    2400:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <u8RGBStopBlue>
						
						
						u8Count = LED_COUNT/2;
    2404:	8a e0       	ldi	r24, 0x0A	; 10
    2406:	8e 83       	std	Y+6, r24	; 0x06
						for(i=0;i<u8Count;i++)
    2408:	1a 82       	std	Y+2, r1	; 0x02
    240a:	19 82       	std	Y+1, r1	; 0x01
    240c:	6d c1       	rjmp	.+730    	; 0x26e8 <main+0x11a6>
						{
							if(u8RGBStartRed<u8RGBStopRed)
    240e:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <u8RGBStartRed>
    2412:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    2416:	98 17       	cp	r25, r24
    2418:	78 f5       	brcc	.+94     	; 0x2478 <main+0xf36>
							{
								u8Temp = (uint8_t)(((uint32_t)(u8RGBStopRed-u8RGBStartRed))*i/(u8Count-1) + u8RGBStartRed);
    241a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    2426:	88 2f       	mov	r24, r24
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	a9 01       	movw	r20, r18
    242c:	48 1b       	sub	r20, r24
    242e:	59 0b       	sbc	r21, r25
    2430:	ca 01       	movw	r24, r20
    2432:	9c 01       	movw	r18, r24
    2434:	99 0f       	add	r25, r25
    2436:	44 0b       	sbc	r20, r20
    2438:	55 0b       	sbc	r21, r21
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	9a 81       	ldd	r25, Y+2	; 0x02
    243e:	cc 01       	movw	r24, r24
    2440:	a0 e0       	ldi	r26, 0x00	; 0
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	bc 01       	movw	r22, r24
    2446:	cd 01       	movw	r24, r26
    2448:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    244c:	7b 01       	movw	r14, r22
    244e:	8c 01       	movw	r16, r24
    2450:	8e 81       	ldd	r24, Y+6	; 0x06
    2452:	88 2f       	mov	r24, r24
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	9c 01       	movw	r18, r24
    245a:	99 0f       	add	r25, r25
    245c:	44 0b       	sbc	r20, r20
    245e:	55 0b       	sbc	r21, r21
    2460:	c8 01       	movw	r24, r16
    2462:	b7 01       	movw	r22, r14
    2464:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    2468:	da 01       	movw	r26, r20
    246a:	c9 01       	movw	r24, r18
    246c:	98 2f       	mov	r25, r24
    246e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    2472:	89 0f       	add	r24, r25
    2474:	8b 83       	std	Y+3, r24	; 0x03
    2476:	2f c0       	rjmp	.+94     	; 0x24d6 <main+0xf94>
							}
							else
							{
								u8Temp = (uint8_t)(u8RGBStartRed - ((uint32_t)(u8RGBStartRed-u8RGBStopRed))*i/(u8Count-1));
    2478:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <u8RGBStartRed>
    247c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    2480:	28 2f       	mov	r18, r24
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBStopRed>
    2488:	88 2f       	mov	r24, r24
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	f9 01       	movw	r30, r18
    248e:	e8 1b       	sub	r30, r24
    2490:	f9 0b       	sbc	r31, r25
    2492:	cf 01       	movw	r24, r30
    2494:	9c 01       	movw	r18, r24
    2496:	99 0f       	add	r25, r25
    2498:	44 0b       	sbc	r20, r20
    249a:	55 0b       	sbc	r21, r21
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	9a 81       	ldd	r25, Y+2	; 0x02
    24a0:	cc 01       	movw	r24, r24
    24a2:	a0 e0       	ldi	r26, 0x00	; 0
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	bc 01       	movw	r22, r24
    24a8:	cd 01       	movw	r24, r26
    24aa:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    24ae:	7b 01       	movw	r14, r22
    24b0:	8c 01       	movw	r16, r24
    24b2:	8e 81       	ldd	r24, Y+6	; 0x06
    24b4:	88 2f       	mov	r24, r24
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	9c 01       	movw	r18, r24
    24bc:	99 0f       	add	r25, r25
    24be:	44 0b       	sbc	r20, r20
    24c0:	55 0b       	sbc	r21, r21
    24c2:	c8 01       	movw	r24, r16
    24c4:	b7 01       	movw	r22, r14
    24c6:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    24ca:	da 01       	movw	r26, r20
    24cc:	c9 01       	movw	r24, r18
    24ce:	fd 2d       	mov	r31, r13
    24d0:	f8 1b       	sub	r31, r24
    24d2:	8f 2f       	mov	r24, r31
    24d4:	8b 83       	std	Y+3, r24	; 0x03
							}
							au8Red[i] = u8Temp;
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	9a 81       	ldd	r25, Y+2	; 0x02
    24da:	80 50       	subi	r24, 0x00	; 0
    24dc:	9f 4f       	sbci	r25, 0xFF	; 255
    24de:	2b 81       	ldd	r18, Y+3	; 0x03
    24e0:	fc 01       	movw	r30, r24
    24e2:	20 83       	st	Z, r18
							au8Red[LED_COUNT-i-1] = u8Temp;
    24e4:	23 e1       	ldi	r18, 0x13	; 19
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	9a 81       	ldd	r25, Y+2	; 0x02
    24ec:	a9 01       	movw	r20, r18
    24ee:	48 1b       	sub	r20, r24
    24f0:	59 0b       	sbc	r21, r25
    24f2:	ca 01       	movw	r24, r20
    24f4:	80 50       	subi	r24, 0x00	; 0
    24f6:	9f 4f       	sbci	r25, 0xFF	; 255
    24f8:	2b 81       	ldd	r18, Y+3	; 0x03
    24fa:	fc 01       	movw	r30, r24
    24fc:	20 83       	st	Z, r18
							
							if(u8RGBStartGreen<u8RGBStopGreen)
    24fe:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <u8RGBStartGreen>
    2502:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    2506:	98 17       	cp	r25, r24
    2508:	78 f5       	brcc	.+94     	; 0x2568 <main+0x1026>
							{
								u8Temp = (uint8_t)(((uint32_t)(u8RGBStopGreen-u8RGBStartGreen))*i/(u8Count-1) + u8RGBStartGreen);
    250a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    250e:	28 2f       	mov	r18, r24
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    2516:	88 2f       	mov	r24, r24
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	a9 01       	movw	r20, r18
    251c:	48 1b       	sub	r20, r24
    251e:	59 0b       	sbc	r21, r25
    2520:	ca 01       	movw	r24, r20
    2522:	9c 01       	movw	r18, r24
    2524:	99 0f       	add	r25, r25
    2526:	44 0b       	sbc	r20, r20
    2528:	55 0b       	sbc	r21, r21
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	9a 81       	ldd	r25, Y+2	; 0x02
    252e:	cc 01       	movw	r24, r24
    2530:	a0 e0       	ldi	r26, 0x00	; 0
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	bc 01       	movw	r22, r24
    2536:	cd 01       	movw	r24, r26
    2538:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    253c:	7b 01       	movw	r14, r22
    253e:	8c 01       	movw	r16, r24
    2540:	8e 81       	ldd	r24, Y+6	; 0x06
    2542:	88 2f       	mov	r24, r24
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	9c 01       	movw	r18, r24
    254a:	99 0f       	add	r25, r25
    254c:	44 0b       	sbc	r20, r20
    254e:	55 0b       	sbc	r21, r21
    2550:	c8 01       	movw	r24, r16
    2552:	b7 01       	movw	r22, r14
    2554:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    2558:	da 01       	movw	r26, r20
    255a:	c9 01       	movw	r24, r18
    255c:	98 2f       	mov	r25, r24
    255e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    2562:	89 0f       	add	r24, r25
    2564:	8b 83       	std	Y+3, r24	; 0x03
    2566:	2f c0       	rjmp	.+94     	; 0x25c6 <main+0x1084>
							}
							else
							{
								u8Temp = (uint8_t)(u8RGBStartGreen - ((uint32_t)(u8RGBStartGreen-u8RGBStopGreen))*i/(u8Count-1));
    2568:	d0 90 44 01 	lds	r13, 0x0144	; 0x800144 <u8RGBStartGreen>
    256c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    2570:	28 2f       	mov	r18, r24
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBStopGreen>
    2578:	88 2f       	mov	r24, r24
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	f9 01       	movw	r30, r18
    257e:	e8 1b       	sub	r30, r24
    2580:	f9 0b       	sbc	r31, r25
    2582:	cf 01       	movw	r24, r30
    2584:	9c 01       	movw	r18, r24
    2586:	99 0f       	add	r25, r25
    2588:	44 0b       	sbc	r20, r20
    258a:	55 0b       	sbc	r21, r21
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	9a 81       	ldd	r25, Y+2	; 0x02
    2590:	cc 01       	movw	r24, r24
    2592:	a0 e0       	ldi	r26, 0x00	; 0
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	bc 01       	movw	r22, r24
    2598:	cd 01       	movw	r24, r26
    259a:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    259e:	7b 01       	movw	r14, r22
    25a0:	8c 01       	movw	r16, r24
    25a2:	8e 81       	ldd	r24, Y+6	; 0x06
    25a4:	88 2f       	mov	r24, r24
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	9c 01       	movw	r18, r24
    25ac:	99 0f       	add	r25, r25
    25ae:	44 0b       	sbc	r20, r20
    25b0:	55 0b       	sbc	r21, r21
    25b2:	c8 01       	movw	r24, r16
    25b4:	b7 01       	movw	r22, r14
    25b6:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    25ba:	da 01       	movw	r26, r20
    25bc:	c9 01       	movw	r24, r18
    25be:	fd 2d       	mov	r31, r13
    25c0:	f8 1b       	sub	r31, r24
    25c2:	8f 2f       	mov	r24, r31
    25c4:	8b 83       	std	Y+3, r24	; 0x03
							}
							au8Green[i] = u8Temp;
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ca:	8c 5e       	subi	r24, 0xEC	; 236
    25cc:	9e 4f       	sbci	r25, 0xFE	; 254
    25ce:	2b 81       	ldd	r18, Y+3	; 0x03
    25d0:	fc 01       	movw	r30, r24
    25d2:	20 83       	st	Z, r18
							au8Green[LED_COUNT-i-1] = u8Temp;
    25d4:	23 e1       	ldi	r18, 0x13	; 19
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	9a 81       	ldd	r25, Y+2	; 0x02
    25dc:	a9 01       	movw	r20, r18
    25de:	48 1b       	sub	r20, r24
    25e0:	59 0b       	sbc	r21, r25
    25e2:	ca 01       	movw	r24, r20
    25e4:	8c 5e       	subi	r24, 0xEC	; 236
    25e6:	9e 4f       	sbci	r25, 0xFE	; 254
    25e8:	2b 81       	ldd	r18, Y+3	; 0x03
    25ea:	fc 01       	movw	r30, r24
    25ec:	20 83       	st	Z, r18
							
							if(u8RGBStartBlue<u8RGBStopBlue)
    25ee:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <u8RGBStartBlue>
    25f2:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    25f6:	98 17       	cp	r25, r24
    25f8:	78 f5       	brcc	.+94     	; 0x2658 <main+0x1116>
							{
								u8Temp = (uint8_t)(((uint32_t)(u8RGBStopBlue-u8RGBStartBlue))*i/(u8Count-1) + u8RGBStartBlue);
    25fa:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    25fe:	28 2f       	mov	r18, r24
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    2606:	88 2f       	mov	r24, r24
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	a9 01       	movw	r20, r18
    260c:	48 1b       	sub	r20, r24
    260e:	59 0b       	sbc	r21, r25
    2610:	ca 01       	movw	r24, r20
    2612:	9c 01       	movw	r18, r24
    2614:	99 0f       	add	r25, r25
    2616:	44 0b       	sbc	r20, r20
    2618:	55 0b       	sbc	r21, r21
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	9a 81       	ldd	r25, Y+2	; 0x02
    261e:	cc 01       	movw	r24, r24
    2620:	a0 e0       	ldi	r26, 0x00	; 0
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	bc 01       	movw	r22, r24
    2626:	cd 01       	movw	r24, r26
    2628:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    262c:	7b 01       	movw	r14, r22
    262e:	8c 01       	movw	r16, r24
    2630:	8e 81       	ldd	r24, Y+6	; 0x06
    2632:	88 2f       	mov	r24, r24
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	9c 01       	movw	r18, r24
    263a:	99 0f       	add	r25, r25
    263c:	44 0b       	sbc	r20, r20
    263e:	55 0b       	sbc	r21, r21
    2640:	c8 01       	movw	r24, r16
    2642:	b7 01       	movw	r22, r14
    2644:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    2648:	da 01       	movw	r26, r20
    264a:	c9 01       	movw	r24, r18
    264c:	98 2f       	mov	r25, r24
    264e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    2652:	89 0f       	add	r24, r25
    2654:	8b 83       	std	Y+3, r24	; 0x03
    2656:	2f c0       	rjmp	.+94     	; 0x26b6 <main+0x1174>
							}
							else
							{
								u8Temp = (uint8_t)(u8RGBStartBlue - ((uint32_t)(u8RGBStartBlue-u8RGBStopBlue))*i/(u8Count-1));
    2658:	d0 90 45 01 	lds	r13, 0x0145	; 0x800145 <u8RGBStartBlue>
    265c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    2660:	28 2f       	mov	r18, r24
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8RGBStopBlue>
    2668:	88 2f       	mov	r24, r24
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	f9 01       	movw	r30, r18
    266e:	e8 1b       	sub	r30, r24
    2670:	f9 0b       	sbc	r31, r25
    2672:	cf 01       	movw	r24, r30
    2674:	9c 01       	movw	r18, r24
    2676:	99 0f       	add	r25, r25
    2678:	44 0b       	sbc	r20, r20
    267a:	55 0b       	sbc	r21, r21
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	9a 81       	ldd	r25, Y+2	; 0x02
    2680:	cc 01       	movw	r24, r24
    2682:	a0 e0       	ldi	r26, 0x00	; 0
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	bc 01       	movw	r22, r24
    2688:	cd 01       	movw	r24, r26
    268a:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    268e:	7b 01       	movw	r14, r22
    2690:	8c 01       	movw	r16, r24
    2692:	8e 81       	ldd	r24, Y+6	; 0x06
    2694:	88 2f       	mov	r24, r24
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	9c 01       	movw	r18, r24
    269c:	99 0f       	add	r25, r25
    269e:	44 0b       	sbc	r20, r20
    26a0:	55 0b       	sbc	r21, r21
    26a2:	c8 01       	movw	r24, r16
    26a4:	b7 01       	movw	r22, r14
    26a6:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    26aa:	da 01       	movw	r26, r20
    26ac:	c9 01       	movw	r24, r18
    26ae:	fd 2d       	mov	r31, r13
    26b0:	f8 1b       	sub	r31, r24
    26b2:	8f 2f       	mov	r24, r31
    26b4:	8b 83       	std	Y+3, r24	; 0x03
							}
							au8Blue[i] = u8Temp;
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ba:	88 5d       	subi	r24, 0xD8	; 216
    26bc:	9e 4f       	sbci	r25, 0xFE	; 254
    26be:	2b 81       	ldd	r18, Y+3	; 0x03
    26c0:	fc 01       	movw	r30, r24
    26c2:	20 83       	st	Z, r18
							au8Blue[LED_COUNT-i-1] = u8Temp;
    26c4:	23 e1       	ldi	r18, 0x13	; 19
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	9a 81       	ldd	r25, Y+2	; 0x02
    26cc:	a9 01       	movw	r20, r18
    26ce:	48 1b       	sub	r20, r24
    26d0:	59 0b       	sbc	r21, r25
    26d2:	ca 01       	movw	r24, r20
    26d4:	88 5d       	subi	r24, 0xD8	; 216
    26d6:	9e 4f       	sbci	r25, 0xFE	; 254
    26d8:	2b 81       	ldd	r18, Y+3	; 0x03
    26da:	fc 01       	movw	r30, r24
    26dc:	20 83       	st	Z, r18
						u8RGBStopGreen = au8Command[5]-1;
						u8RGBStopBlue = au8Command[6]-1;
						
						
						u8Count = LED_COUNT/2;
						for(i=0;i<u8Count;i++)
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	9a 81       	ldd	r25, Y+2	; 0x02
    26e2:	01 96       	adiw	r24, 0x01	; 1
    26e4:	9a 83       	std	Y+2, r25	; 0x02
    26e6:	89 83       	std	Y+1, r24	; 0x01
    26e8:	8e 81       	ldd	r24, Y+6	; 0x06
    26ea:	28 2f       	mov	r18, r24
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	9a 81       	ldd	r25, Y+2	; 0x02
    26f2:	82 17       	cp	r24, r18
    26f4:	93 07       	cpc	r25, r19
    26f6:	08 f4       	brcc	.+2      	; 0x26fa <main+0x11b8>
    26f8:	8a ce       	rjmp	.-748    	; 0x240e <main+0xecc>
								u8Temp = (uint8_t)(u8RGBStartBlue - ((uint32_t)(u8RGBStartBlue-u8RGBStopBlue))*i/(u8Count-1));
							}
							au8Blue[i] = u8Temp;
							au8Blue[LED_COUNT-i-1] = u8Temp;
						}
						u8RGBSingleColor = 0;
    26fa:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <u8RGBSingleColor>
						u8RGBDataState = 1;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBDataState>
					}
					break;
    2704:	8f c0       	rjmp	.+286    	; 0x2824 <main+0x12e2>
					
					case 0x42:
					if(strlen(au8Command) == 9)
    2706:	ce 01       	movw	r24, r28
    2708:	07 96       	adiw	r24, 0x07	; 7
    270a:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <strlen>
    270e:	09 97       	sbiw	r24, 0x09	; 9
    2710:	09 f0       	breq	.+2      	; 0x2714 <main+0x11d2>
    2712:	8b c0       	rjmp	.+278    	; 0x282a <main+0x12e8>
					{
						u8RGBStartRed = au8Command[1]-1;
    2714:	88 85       	ldd	r24, Y+8	; 0x08
    2716:	81 50       	subi	r24, 0x01	; 1
    2718:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8RGBStartRed>
						u8RGBStartGreen = au8Command[2]-1;
    271c:	89 85       	ldd	r24, Y+9	; 0x09
    271e:	81 50       	subi	r24, 0x01	; 1
    2720:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8RGBStartGreen>
						u8RGBStartBlue = au8Command[3]-1;
    2724:	8a 85       	ldd	r24, Y+10	; 0x0a
    2726:	81 50       	subi	r24, 0x01	; 1
    2728:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <u8RGBStartBlue>
						u8RGBStopRed = au8Command[4]-1;
    272c:	8b 85       	ldd	r24, Y+11	; 0x0b
    272e:	81 50       	subi	r24, 0x01	; 1
    2730:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8RGBStopRed>
						u8RGBStopGreen = au8Command[5]-1;
    2734:	8c 85       	ldd	r24, Y+12	; 0x0c
    2736:	81 50       	subi	r24, 0x01	; 1
    2738:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <u8RGBStopGreen>
						u8RGBStopBlue = au8Command[6]-1;
    273c:	8d 85       	ldd	r24, Y+13	; 0x0d
    273e:	81 50       	subi	r24, 0x01	; 1
    2740:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <u8RGBStopBlue>
						u16RGBTime = ((uint16_t)au8Command[7])*200;
    2744:	8e 85       	ldd	r24, Y+14	; 0x0e
    2746:	28 2f       	mov	r18, r24
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	48 ec       	ldi	r20, 0xC8	; 200
    274c:	42 9f       	mul	r20, r18
    274e:	c0 01       	movw	r24, r0
    2750:	43 9f       	mul	r20, r19
    2752:	90 0d       	add	r25, r0
    2754:	11 24       	eor	r1, r1
    2756:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <u16RGBTime+0x1>
    275a:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <u16RGBTime>
						u8RGBBounce = au8Command[8]-1;
    275e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2760:	81 50       	subi	r24, 0x01	; 1
    2762:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8RGBBounce>
						u8RGBBounceDirection = 0;
    2766:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <u8RGBBounceDirection>
						u16RGBTimeCounter = 0;
    276a:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <u16RGBTimeCounter+0x1>
    276e:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <u16RGBTimeCounter>
						u8RGBAnimation = 1;
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <u8RGBAnimation>
					}
					break;
    2778:	58 c0       	rjmp	.+176    	; 0x282a <main+0x12e8>

					case 0x43:
					if(strlen(au8Command) == 15)
    277a:	ce 01       	movw	r24, r28
    277c:	07 96       	adiw	r24, 0x07	; 7
    277e:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <strlen>
    2782:	0f 97       	sbiw	r24, 0x0f	; 15
    2784:	09 f0       	breq	.+2      	; 0x2788 <main+0x1246>
    2786:	54 c0       	rjmp	.+168    	; 0x2830 <main+0x12ee>
					{
						u8RGBStartRed = au8Command[1]-1;
    2788:	88 85       	ldd	r24, Y+8	; 0x08
    278a:	81 50       	subi	r24, 0x01	; 1
    278c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8RGBStartRed>
						u8RGBStartGreen = au8Command[2]-1;
    2790:	89 85       	ldd	r24, Y+9	; 0x09
    2792:	81 50       	subi	r24, 0x01	; 1
    2794:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8RGBStartGreen>
						u8RGBStartBlue = au8Command[3]-1;
    2798:	8a 85       	ldd	r24, Y+10	; 0x0a
    279a:	81 50       	subi	r24, 0x01	; 1
    279c:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <u8RGBStartBlue>
						u8RGBStartMiddleRed = au8Command[4]-1;
    27a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    27a2:	81 50       	subi	r24, 0x01	; 1
    27a4:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <u8RGBStartMiddleRed>
						u8RGBStartMiddleGreen = au8Command[5]-1;
    27a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    27aa:	81 50       	subi	r24, 0x01	; 1
    27ac:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <u8RGBStartMiddleGreen>
						u8RGBStartMiddleBlue = au8Command[6]-1;
    27b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b2:	81 50       	subi	r24, 0x01	; 1
    27b4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8RGBStartMiddleBlue>
						u8RGBStopRed = au8Command[7]-1;
    27b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    27ba:	81 50       	subi	r24, 0x01	; 1
    27bc:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8RGBStopRed>
						u8RGBStopGreen = au8Command[8]-1;
    27c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27c2:	81 50       	subi	r24, 0x01	; 1
    27c4:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <u8RGBStopGreen>
						u8RGBStopBlue = au8Command[9]-1;
    27c8:	88 89       	ldd	r24, Y+16	; 0x10
    27ca:	81 50       	subi	r24, 0x01	; 1
    27cc:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <u8RGBStopBlue>
						u8RGBStopMiddleRed = au8Command[10]-1;
    27d0:	89 89       	ldd	r24, Y+17	; 0x11
    27d2:	81 50       	subi	r24, 0x01	; 1
    27d4:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <u8RGBStopMiddleRed>
						u8RGBStopMiddleGreen = au8Command[11]-1;
    27d8:	8a 89       	ldd	r24, Y+18	; 0x12
    27da:	81 50       	subi	r24, 0x01	; 1
    27dc:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <u8RGBStopMiddleGreen>
						u8RGBStopMiddleBlue = au8Command[12]-1;
    27e0:	8b 89       	ldd	r24, Y+19	; 0x13
    27e2:	81 50       	subi	r24, 0x01	; 1
    27e4:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <u8RGBStopMiddleBlue>
						u16RGBTime = ((uint16_t)au8Command[13])*200;
    27e8:	8c 89       	ldd	r24, Y+20	; 0x14
    27ea:	28 2f       	mov	r18, r24
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	48 ec       	ldi	r20, 0xC8	; 200
    27f0:	42 9f       	mul	r20, r18
    27f2:	c0 01       	movw	r24, r0
    27f4:	43 9f       	mul	r20, r19
    27f6:	90 0d       	add	r25, r0
    27f8:	11 24       	eor	r1, r1
    27fa:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <u16RGBTime+0x1>
    27fe:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <u16RGBTime>
						u8RGBBounce = au8Command[14]-1;
    2802:	8d 89       	ldd	r24, Y+21	; 0x15
    2804:	81 50       	subi	r24, 0x01	; 1
    2806:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8RGBBounce>
						u8RGBBounceDirection = 0;
    280a:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <u8RGBBounceDirection>
						u16RGBTimeCounter = 0;
    280e:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <u16RGBTimeCounter+0x1>
    2812:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <u16RGBTimeCounter>
						u8RGBAnimation = 2;
    2816:	82 e0       	ldi	r24, 0x02	; 2
    2818:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <u8RGBAnimation>
					}
					break;
    281c:	09 c0       	rjmp	.+18     	; 0x2830 <main+0x12ee>
						u8RGBGreen = au8Command[2]-1;
						u8RGBBlue = au8Command[3]-1;
						u8RGBSingleColor = 1;
						u8RGBDataState = 1;
					}
					break;
    281e:	00 00       	nop
    2820:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <main+0x222>
							au8Blue[LED_COUNT-i-1] = u8Temp;
						}
						u8RGBSingleColor = 0;
						u8RGBDataState = 1;
					}
					break;
    2824:	00 00       	nop
    2826:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <main+0x222>
						u8RGBBounce = au8Command[8]-1;
						u8RGBBounceDirection = 0;
						u16RGBTimeCounter = 0;
						u8RGBAnimation = 1;
					}
					break;
    282a:	00 00       	nop
    282c:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <main+0x222>
						u8RGBBounce = au8Command[14]-1;
						u8RGBBounceDirection = 0;
						u16RGBTimeCounter = 0;
						u8RGBAnimation = 2;
					}
					break;
    2830:	00 00       	nop
				}
			}
		}
    }
    2832:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <main+0x222>

00002836 <INT0_Init>:
#include "utils.h"
#include "rgbooster.h"


void INT0_Init(void)
{
    2836:	cf 93       	push	r28
    2838:	df 93       	push	r29
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
	EICRA |= (1<<ISC01); // interrupt on falling edge
    283e:	89 e6       	ldi	r24, 0x69	; 105
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	29 e6       	ldi	r18, 0x69	; 105
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	f9 01       	movw	r30, r18
    2848:	20 81       	ld	r18, Z
    284a:	22 60       	ori	r18, 0x02	; 2
    284c:	fc 01       	movw	r30, r24
    284e:	20 83       	st	Z, r18
	EIFR  = (1<<INTF0); // clear flag
    2850:	8c e3       	ldi	r24, 0x3C	; 60
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	21 e0       	ldi	r18, 0x01	; 1
    2856:	fc 01       	movw	r30, r24
    2858:	20 83       	st	Z, r18
	EIMSK = (1<<INT0);  // INT1 enable
    285a:	8d e3       	ldi	r24, 0x3D	; 61
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	21 e0       	ldi	r18, 0x01	; 1
    2860:	fc 01       	movw	r30, r24
    2862:	20 83       	st	Z, r18
}
    2864:	00 00       	nop
    2866:	df 91       	pop	r29
    2868:	cf 91       	pop	r28
    286a:	08 95       	ret

0000286c <initRGBooster>:

void initRGBooster(void)
{
    286c:	cf 93       	push	r28
    286e:	df 93       	push	r29
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
	DDR_DATA_LOW |= DATA_LOW_BITMASK; //RGB DATA LOWER NIBBLE -> OUTPUT
    2874:	84 e2       	ldi	r24, 0x24	; 36
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	24 e2       	ldi	r18, 0x24	; 36
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	f9 01       	movw	r30, r18
    287e:	20 81       	ld	r18, Z
    2880:	2f 60       	ori	r18, 0x0F	; 15
    2882:	fc 01       	movw	r30, r24
    2884:	20 83       	st	Z, r18
	PORT_DATA_LOW &= ~DATA_LOW_BITMASK; //RGB DATA LOWER NIBBLE -> LOW
    2886:	85 e2       	ldi	r24, 0x25	; 37
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	25 e2       	ldi	r18, 0x25	; 37
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	f9 01       	movw	r30, r18
    2890:	20 81       	ld	r18, Z
    2892:	20 7f       	andi	r18, 0xF0	; 240
    2894:	fc 01       	movw	r30, r24
    2896:	20 83       	st	Z, r18
	DDR_DATA_HIGH |= DATA_HIGH_BITMASK; //RGB DATA HIGHER NIBBLE -> OUTPUT
    2898:	81 e2       	ldi	r24, 0x21	; 33
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	21 e2       	ldi	r18, 0x21	; 33
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	f9 01       	movw	r30, r18
    28a2:	20 81       	ld	r18, Z
    28a4:	20 6f       	ori	r18, 0xF0	; 240
    28a6:	fc 01       	movw	r30, r24
    28a8:	20 83       	st	Z, r18
	PORT_DATA_HIGH &= ~DATA_HIGH_BITMASK; //RGB DATA HIGHER NIBBLE -> LOW
    28aa:	82 e2       	ldi	r24, 0x22	; 34
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	22 e2       	ldi	r18, 0x22	; 34
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	f9 01       	movw	r30, r18
    28b4:	20 81       	ld	r18, Z
    28b6:	2f 70       	andi	r18, 0x0F	; 15
    28b8:	fc 01       	movw	r30, r24
    28ba:	20 83       	st	Z, r18

	DDR_CONTROL |= (1<<SEND); //SEND PIN -> OUTPUT
    28bc:	8a e2       	ldi	r24, 0x2A	; 42
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	2a e2       	ldi	r18, 0x2A	; 42
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	f9 01       	movw	r30, r18
    28c6:	20 81       	ld	r18, Z
    28c8:	28 60       	ori	r18, 0x08	; 8
    28ca:	fc 01       	movw	r30, r24
    28cc:	20 83       	st	Z, r18
	PORT_CONTROL &= ~(1<<SEND); //SEND PIN LOW
    28ce:	8b e2       	ldi	r24, 0x2B	; 43
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	2b e2       	ldi	r18, 0x2B	; 43
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	f9 01       	movw	r30, r18
    28d8:	20 81       	ld	r18, Z
    28da:	27 7f       	andi	r18, 0xF7	; 247
    28dc:	fc 01       	movw	r30, r24
    28de:	20 83       	st	Z, r18
	DDR_CONTROL &= ~(1<<DONE_BUSY); //DONE BUSY PIN -> INPUT
    28e0:	8a e2       	ldi	r24, 0x2A	; 42
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	2a e2       	ldi	r18, 0x2A	; 42
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	f9 01       	movw	r30, r18
    28ea:	20 81       	ld	r18, Z
    28ec:	2b 7f       	andi	r18, 0xFB	; 251
    28ee:	fc 01       	movw	r30, r24
    28f0:	20 83       	st	Z, r18
    28f2:	00 00       	nop
    28f4:	df 91       	pop	r29
    28f6:	cf 91       	pop	r28
    28f8:	08 95       	ret

000028fa <spiInitBuffer>:
#include <avr/io.h>
#include "spi.h"


void spiInitBuffer(SpiBuf_t* Buffer)
{
    28fa:	cf 93       	push	r28
    28fc:	df 93       	push	r29
    28fe:	00 d0       	rcall	.+0      	; 0x2900 <spiInitBuffer+0x6>
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
    2904:	9a 83       	std	Y+2, r25	; 0x02
    2906:	89 83       	std	Y+1, r24	; 0x01
	Buffer->u8Count = 0;
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	9a 81       	ldd	r25, Y+2	; 0x02
    290c:	80 5c       	subi	r24, 0xC0	; 192
    290e:	9f 4f       	sbci	r25, 0xFF	; 255
    2910:	fc 01       	movw	r30, r24
    2912:	10 82       	st	Z, r1
	Buffer->u8ReadReturnCount = 0;
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	9a 81       	ldd	r25, Y+2	; 0x02
    2918:	8f 5b       	subi	r24, 0xBF	; 191
    291a:	9f 4f       	sbci	r25, 0xFF	; 255
    291c:	fc 01       	movw	r30, r24
    291e:	10 82       	st	Z, r1
	Buffer->spiState = IDLE;
    2920:	89 81       	ldd	r24, Y+1	; 0x01
    2922:	9a 81       	ldd	r25, Y+2	; 0x02
    2924:	8e 5b       	subi	r24, 0xBE	; 190
    2926:	9f 4f       	sbci	r25, 0xFF	; 255
    2928:	26 e0       	ldi	r18, 0x06	; 6
    292a:	fc 01       	movw	r30, r24
    292c:	20 83       	st	Z, r18
}
    292e:	00 00       	nop
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	df 91       	pop	r29
    2936:	cf 91       	pop	r28
    2938:	08 95       	ret

0000293a <spiSlaveInit>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiSlaveInit(void)
{
    293a:	cf 93       	push	r28
    293c:	df 93       	push	r29
    293e:	1f 92       	push	r1
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t ucTemp;
	SPSR0 = 0;
    2944:	8d e4       	ldi	r24, 0x4D	; 77
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	fc 01       	movw	r30, r24
    294a:	10 82       	st	Z, r1
	SPCR0 = (1<<SPIE0);
    294c:	8c e4       	ldi	r24, 0x4C	; 76
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	20 e8       	ldi	r18, 0x80	; 128
    2952:	fc 01       	movw	r30, r24
    2954:	20 83       	st	Z, r18
	
	ucTemp = SPSR0;					
    2956:	8d e4       	ldi	r24, 0x4D	; 77
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	fc 01       	movw	r30, r24
    295c:	80 81       	ld	r24, Z
    295e:	89 83       	std	Y+1, r24	; 0x01
	ucTemp = SPDR0;
    2960:	8e e4       	ldi	r24, 0x4E	; 78
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	fc 01       	movw	r30, r24
    2966:	80 81       	ld	r24, Z
    2968:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0;
    296a:	8e e4       	ldi	r24, 0x4E	; 78
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	fc 01       	movw	r30, r24
    2970:	10 82       	st	Z, r1
	
	DDRB |= (1<<PINB6);				// MISO needs to be an output
    2972:	84 e2       	ldi	r24, 0x24	; 36
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	24 e2       	ldi	r18, 0x24	; 36
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	f9 01       	movw	r30, r18
    297c:	20 81       	ld	r18, Z
    297e:	20 64       	ori	r18, 0x40	; 64
    2980:	fc 01       	movw	r30, r24
    2982:	20 83       	st	Z, r18
	
	SPCR0 |= (1<<SPE0);
    2984:	8c e4       	ldi	r24, 0x4C	; 76
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	2c e4       	ldi	r18, 0x4C	; 76
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	f9 01       	movw	r30, r18
    298e:	20 81       	ld	r18, Z
    2990:	20 64       	ori	r18, 0x40	; 64
    2992:	fc 01       	movw	r30, r24
    2994:	20 83       	st	Z, r18
}
    2996:	00 00       	nop
    2998:	0f 90       	pop	r0
    299a:	df 91       	pop	r29
    299c:	cf 91       	pop	r28
    299e:	08 95       	ret

000029a0 <spiPcInt>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiPcInt(void)
{
    29a0:	cf 93       	push	r28
    29a2:	df 93       	push	r29
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
	PCICR |= (1<<PCIE1);
    29a8:	88 e6       	ldi	r24, 0x68	; 104
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	28 e6       	ldi	r18, 0x68	; 104
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	f9 01       	movw	r30, r18
    29b2:	20 81       	ld	r18, Z
    29b4:	22 60       	ori	r18, 0x02	; 2
    29b6:	fc 01       	movw	r30, r24
    29b8:	20 83       	st	Z, r18
	PCIFR = (1<<PCIF1);
    29ba:	8b e3       	ldi	r24, 0x3B	; 59
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	22 e0       	ldi	r18, 0x02	; 2
    29c0:	fc 01       	movw	r30, r24
    29c2:	20 83       	st	Z, r18
	PCMSK1 |= (1<<PCINT12);
    29c4:	8c e6       	ldi	r24, 0x6C	; 108
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	2c e6       	ldi	r18, 0x6C	; 108
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	f9 01       	movw	r30, r18
    29ce:	20 81       	ld	r18, Z
    29d0:	20 61       	ori	r18, 0x10	; 16
    29d2:	fc 01       	movw	r30, r24
    29d4:	20 83       	st	Z, r18
    29d6:	00 00       	nop
    29d8:	df 91       	pop	r29
    29da:	cf 91       	pop	r28
    29dc:	08 95       	ret

000029de <portInit>:
 * @return 8bit analog value
 *****************************************************************************/
uint8_t adcGetValue(void)
{
	return(ADCH);
}
    29de:	cf 93       	push	r28
    29e0:	df 93       	push	r29
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
    29e6:	8a e2       	ldi	r24, 0x2A	; 42
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	2a e2       	ldi	r18, 0x2A	; 42
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	f9 01       	movw	r30, r18
    29f0:	20 81       	ld	r18, Z
    29f2:	20 63       	ori	r18, 0x30	; 48
    29f4:	fc 01       	movw	r30, r24
    29f6:	20 83       	st	Z, r18
    29f8:	8b e2       	ldi	r24, 0x2B	; 43
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	2b e2       	ldi	r18, 0x2B	; 43
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	f9 01       	movw	r30, r18
    2a02:	20 81       	ld	r18, Z
    2a04:	20 62       	ori	r18, 0x20	; 32
    2a06:	fc 01       	movw	r30, r24
    2a08:	20 83       	st	Z, r18
    2a0a:	8b e2       	ldi	r24, 0x2B	; 43
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	2b e2       	ldi	r18, 0x2B	; 43
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	f9 01       	movw	r30, r18
    2a14:	20 81       	ld	r18, Z
    2a16:	2f 7e       	andi	r18, 0xEF	; 239
    2a18:	fc 01       	movw	r30, r24
    2a1a:	20 83       	st	Z, r18
    2a1c:	8a e2       	ldi	r24, 0x2A	; 42
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	2a e2       	ldi	r18, 0x2A	; 42
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	f9 01       	movw	r30, r18
    2a26:	20 81       	ld	r18, Z
    2a28:	20 68       	ori	r18, 0x80	; 128
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	20 83       	st	Z, r18
    2a2e:	8b e2       	ldi	r24, 0x2B	; 43
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	2b e2       	ldi	r18, 0x2B	; 43
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	f9 01       	movw	r30, r18
    2a38:	20 81       	ld	r18, Z
    2a3a:	20 68       	ori	r18, 0x80	; 128
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	20 83       	st	Z, r18
    2a40:	8a e2       	ldi	r24, 0x2A	; 42
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	2a e2       	ldi	r18, 0x2A	; 42
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	f9 01       	movw	r30, r18
    2a4a:	20 81       	ld	r18, Z
    2a4c:	2f 7b       	andi	r18, 0xBF	; 191
    2a4e:	fc 01       	movw	r30, r24
    2a50:	20 83       	st	Z, r18
    2a52:	8a e2       	ldi	r24, 0x2A	; 42
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	2a e2       	ldi	r18, 0x2A	; 42
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	f9 01       	movw	r30, r18
    2a5c:	20 81       	ld	r18, Z
    2a5e:	2c 7f       	andi	r18, 0xFC	; 252
    2a60:	fc 01       	movw	r30, r24
    2a62:	20 83       	st	Z, r18
    2a64:	8b e2       	ldi	r24, 0x2B	; 43
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	2b e2       	ldi	r18, 0x2B	; 43
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	f9 01       	movw	r30, r18
    2a6e:	20 81       	ld	r18, Z
    2a70:	21 60       	ori	r18, 0x01	; 1
    2a72:	fc 01       	movw	r30, r24
    2a74:	20 83       	st	Z, r18
    2a76:	81 e2       	ldi	r24, 0x21	; 33
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	21 e2       	ldi	r18, 0x21	; 33
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	f9 01       	movw	r30, r18
    2a80:	20 81       	ld	r18, Z
    2a82:	2e 7f       	andi	r18, 0xFE	; 254
    2a84:	fc 01       	movw	r30, r24
    2a86:	20 83       	st	Z, r18
    2a88:	82 e2       	ldi	r24, 0x22	; 34
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	22 e2       	ldi	r18, 0x22	; 34
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	f9 01       	movw	r30, r18
    2a92:	20 81       	ld	r18, Z
    2a94:	2e 7f       	andi	r18, 0xFE	; 254
    2a96:	fc 01       	movw	r30, r24
    2a98:	20 83       	st	Z, r18
    2a9a:	8e e7       	ldi	r24, 0x7E	; 126
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	2e e7       	ldi	r18, 0x7E	; 126
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	f9 01       	movw	r30, r18
    2aa4:	20 81       	ld	r18, Z
    2aa6:	21 60       	ori	r18, 0x01	; 1
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	20 83       	st	Z, r18
    2aac:	81 e2       	ldi	r24, 0x21	; 33
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	21 e2       	ldi	r18, 0x21	; 33
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	f9 01       	movw	r30, r18
    2ab6:	20 81       	ld	r18, Z
    2ab8:	21 7f       	andi	r18, 0xF1	; 241
    2aba:	fc 01       	movw	r30, r24
    2abc:	20 83       	st	Z, r18
    2abe:	82 e2       	ldi	r24, 0x22	; 34
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	22 e2       	ldi	r18, 0x22	; 34
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	f9 01       	movw	r30, r18
    2ac8:	20 81       	ld	r18, Z
    2aca:	2e 60       	ori	r18, 0x0E	; 14
    2acc:	fc 01       	movw	r30, r24
    2ace:	20 83       	st	Z, r18
    2ad0:	87 e2       	ldi	r24, 0x27	; 39
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	80 81       	ld	r24, Z
    2ad8:	87 e2       	ldi	r24, 0x27	; 39
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	fc 01       	movw	r30, r24
    2ade:	10 82       	st	Z, r1
    2ae0:	88 e2       	ldi	r24, 0x28	; 40
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	fc 01       	movw	r30, r24
    2ae6:	80 81       	ld	r24, Z
    2ae8:	88 e2       	ldi	r24, 0x28	; 40
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	2f ef       	ldi	r18, 0xFF	; 255
    2aee:	fc 01       	movw	r30, r24
    2af0:	20 83       	st	Z, r18
    2af2:	00 00       	nop
    2af4:	df 91       	pop	r29
    2af6:	cf 91       	pop	r28
    2af8:	08 95       	ret

00002afa <enablePLED>:
    2afa:	cf 93       	push	r28
    2afc:	df 93       	push	r29
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	8b e2       	ldi	r24, 0x2B	; 43
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	2b e2       	ldi	r18, 0x2B	; 43
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	f9 01       	movw	r30, r18
    2b0c:	20 81       	ld	r18, Z
    2b0e:	2f 7d       	andi	r18, 0xDF	; 223
    2b10:	fc 01       	movw	r30, r24
    2b12:	20 83       	st	Z, r18
    2b14:	00 00       	nop
    2b16:	df 91       	pop	r29
    2b18:	cf 91       	pop	r28
    2b1a:	08 95       	ret

00002b1c <disablePLED>:
    2b1c:	cf 93       	push	r28
    2b1e:	df 93       	push	r29
    2b20:	cd b7       	in	r28, 0x3d	; 61
    2b22:	de b7       	in	r29, 0x3e	; 62
    2b24:	8b e2       	ldi	r24, 0x2B	; 43
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	2b e2       	ldi	r18, 0x2B	; 43
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	f9 01       	movw	r30, r18
    2b2e:	20 81       	ld	r18, Z
    2b30:	20 62       	ori	r18, 0x20	; 32
    2b32:	fc 01       	movw	r30, r24
    2b34:	20 83       	st	Z, r18
    2b36:	00 00       	nop
    2b38:	df 91       	pop	r29
    2b3a:	cf 91       	pop	r28
    2b3c:	08 95       	ret

00002b3e <standbyAudio>:
    2b3e:	cf 93       	push	r28
    2b40:	df 93       	push	r29
    2b42:	cd b7       	in	r28, 0x3d	; 61
    2b44:	de b7       	in	r29, 0x3e	; 62
    2b46:	8b e2       	ldi	r24, 0x2B	; 43
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	2b e2       	ldi	r18, 0x2B	; 43
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	f9 01       	movw	r30, r18
    2b50:	20 81       	ld	r18, Z
    2b52:	20 68       	ori	r18, 0x80	; 128
    2b54:	fc 01       	movw	r30, r24
    2b56:	20 83       	st	Z, r18
    2b58:	8a e2       	ldi	r24, 0x2A	; 42
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	2a e2       	ldi	r18, 0x2A	; 42
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	f9 01       	movw	r30, r18
    2b62:	20 81       	ld	r18, Z
    2b64:	20 68       	ori	r18, 0x80	; 128
    2b66:	fc 01       	movw	r30, r24
    2b68:	20 83       	st	Z, r18
    2b6a:	00 00       	nop
    2b6c:	df 91       	pop	r29
    2b6e:	cf 91       	pop	r28
    2b70:	08 95       	ret

00002b72 <enableAudio>:
    2b72:	cf 93       	push	r28
    2b74:	df 93       	push	r29
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
    2b7a:	8b e2       	ldi	r24, 0x2B	; 43
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	2b e2       	ldi	r18, 0x2B	; 43
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	f9 01       	movw	r30, r18
    2b84:	20 81       	ld	r18, Z
    2b86:	2f 77       	andi	r18, 0x7F	; 127
    2b88:	fc 01       	movw	r30, r24
    2b8a:	20 83       	st	Z, r18
    2b8c:	8a e2       	ldi	r24, 0x2A	; 42
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	2a e2       	ldi	r18, 0x2A	; 42
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	f9 01       	movw	r30, r18
    2b96:	20 81       	ld	r18, Z
    2b98:	20 68       	ori	r18, 0x80	; 128
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	20 83       	st	Z, r18
    2b9e:	00 00       	nop
    2ba0:	df 91       	pop	r29
    2ba2:	cf 91       	pop	r28
    2ba4:	08 95       	ret

00002ba6 <incVolume>:
    2ba6:	cf 93       	push	r28
    2ba8:	df 93       	push	r29
    2baa:	00 d0       	rcall	.+0      	; 0x2bac <incVolume+0x6>
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	8a 83       	std	Y+2, r24	; 0x02
    2bb2:	8b e2       	ldi	r24, 0x2B	; 43
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	2b e2       	ldi	r18, 0x2B	; 43
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	f9 01       	movw	r30, r18
    2bbc:	20 81       	ld	r18, Z
    2bbe:	20 64       	ori	r18, 0x40	; 64
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	20 83       	st	Z, r18
    2bc4:	19 82       	std	Y+1, r1	; 0x01
    2bc6:	15 c0       	rjmp	.+42     	; 0x2bf2 <incVolume+0x4c>
    2bc8:	8a e2       	ldi	r24, 0x2A	; 42
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	2a e2       	ldi	r18, 0x2A	; 42
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	f9 01       	movw	r30, r18
    2bd2:	20 81       	ld	r18, Z
    2bd4:	20 64       	ori	r18, 0x40	; 64
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	20 83       	st	Z, r18
    2bda:	8a e2       	ldi	r24, 0x2A	; 42
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	2a e2       	ldi	r18, 0x2A	; 42
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	f9 01       	movw	r30, r18
    2be4:	20 81       	ld	r18, Z
    2be6:	2f 7b       	andi	r18, 0xBF	; 191
    2be8:	fc 01       	movw	r30, r24
    2bea:	20 83       	st	Z, r18
    2bec:	89 81       	ldd	r24, Y+1	; 0x01
    2bee:	8f 5f       	subi	r24, 0xFF	; 255
    2bf0:	89 83       	std	Y+1, r24	; 0x01
    2bf2:	99 81       	ldd	r25, Y+1	; 0x01
    2bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf6:	98 17       	cp	r25, r24
    2bf8:	38 f3       	brcs	.-50     	; 0x2bc8 <incVolume+0x22>
    2bfa:	00 00       	nop
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	df 91       	pop	r29
    2c02:	cf 91       	pop	r28
    2c04:	08 95       	ret

00002c06 <decVolume>:
    2c06:	cf 93       	push	r28
    2c08:	df 93       	push	r29
    2c0a:	00 d0       	rcall	.+0      	; 0x2c0c <decVolume+0x6>
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
    2c10:	8a 83       	std	Y+2, r24	; 0x02
    2c12:	8b e2       	ldi	r24, 0x2B	; 43
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	2b e2       	ldi	r18, 0x2B	; 43
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	f9 01       	movw	r30, r18
    2c1c:	20 81       	ld	r18, Z
    2c1e:	2f 7b       	andi	r18, 0xBF	; 191
    2c20:	fc 01       	movw	r30, r24
    2c22:	20 83       	st	Z, r18
    2c24:	19 82       	std	Y+1, r1	; 0x01
    2c26:	15 c0       	rjmp	.+42     	; 0x2c52 <decVolume+0x4c>
    2c28:	8a e2       	ldi	r24, 0x2A	; 42
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	2a e2       	ldi	r18, 0x2A	; 42
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	f9 01       	movw	r30, r18
    2c32:	20 81       	ld	r18, Z
    2c34:	20 64       	ori	r18, 0x40	; 64
    2c36:	fc 01       	movw	r30, r24
    2c38:	20 83       	st	Z, r18
    2c3a:	8a e2       	ldi	r24, 0x2A	; 42
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	2a e2       	ldi	r18, 0x2A	; 42
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	f9 01       	movw	r30, r18
    2c44:	20 81       	ld	r18, Z
    2c46:	2f 7b       	andi	r18, 0xBF	; 191
    2c48:	fc 01       	movw	r30, r24
    2c4a:	20 83       	st	Z, r18
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
    2c4e:	8f 5f       	subi	r24, 0xFF	; 255
    2c50:	89 83       	std	Y+1, r24	; 0x01
    2c52:	99 81       	ldd	r25, Y+1	; 0x01
    2c54:	8a 81       	ldd	r24, Y+2	; 0x02
    2c56:	98 17       	cp	r25, r24
    2c58:	38 f3       	brcs	.-50     	; 0x2c28 <decVolume+0x22>
    2c5a:	00 00       	nop
    2c5c:	0f 90       	pop	r0
    2c5e:	0f 90       	pop	r0
    2c60:	df 91       	pop	r29
    2c62:	cf 91       	pop	r28
    2c64:	08 95       	ret

00002c66 <setVolume>:
    2c66:	cf 93       	push	r28
    2c68:	df 93       	push	r29
    2c6a:	1f 92       	push	r1
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
    2c70:	89 83       	std	Y+1, r24	; 0x01
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	81 34       	cpi	r24, 0x41	; 65
    2c76:	10 f0       	brcs	.+4      	; 0x2c7c <setVolume+0x16>
    2c78:	80 e4       	ldi	r24, 0x40	; 64
    2c7a:	89 83       	std	Y+1, r24	; 0x01
    2c7c:	80 e4       	ldi	r24, 0x40	; 64
    2c7e:	0e 94 03 16 	call	0x2c06	; 0x2c06 <decVolume>
    2c82:	89 81       	ldd	r24, Y+1	; 0x01
    2c84:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <incVolume>
    2c88:	00 00       	nop
    2c8a:	0f 90       	pop	r0
    2c8c:	df 91       	pop	r29
    2c8e:	cf 91       	pop	r28
    2c90:	08 95       	ret

00002c92 <initAudio>:
    2c92:	cf 93       	push	r28
    2c94:	df 93       	push	r29
    2c96:	cd b7       	in	r28, 0x3d	; 61
    2c98:	de b7       	in	r29, 0x3e	; 62
    2c9a:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <enableAudio>
    2c9e:	80 e4       	ldi	r24, 0x40	; 64
    2ca0:	0e 94 03 16 	call	0x2c06	; 0x2c06 <decVolume>
    2ca4:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <standbyAudio>
    2ca8:	00 00       	nop
    2caa:	df 91       	pop	r29
    2cac:	cf 91       	pop	r28
    2cae:	08 95       	ret

00002cb0 <initPWM>:
    2cb0:	cf 93       	push	r28
    2cb2:	df 93       	push	r29
    2cb4:	00 d0       	rcall	.+0      	; 0x2cb6 <initPWM+0x6>
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
    2cba:	9a 83       	std	Y+2, r25	; 0x02
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc2:	81 15       	cp	r24, r1
    2cc4:	92 40       	sbci	r25, 0x02	; 2
    2cc6:	20 f0       	brcs	.+8      	; 0x2cd0 <initPWM+0x20>
    2cc8:	8f ef       	ldi	r24, 0xFF	; 255
    2cca:	91 e0       	ldi	r25, 0x01	; 1
    2ccc:	9a 83       	std	Y+2, r25	; 0x02
    2cce:	89 83       	std	Y+1, r24	; 0x01
    2cd0:	80 e8       	ldi	r24, 0x80	; 128
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	22 e2       	ldi	r18, 0x22	; 34
    2cd6:	fc 01       	movw	r30, r24
    2cd8:	20 83       	st	Z, r18
    2cda:	81 e8       	ldi	r24, 0x81	; 129
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	28 e0       	ldi	r18, 0x08	; 8
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	20 83       	st	Z, r18
    2ce4:	84 e8       	ldi	r24, 0x84	; 132
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	fc 01       	movw	r30, r24
    2cea:	11 82       	std	Z+1, r1	; 0x01
    2cec:	10 82       	st	Z, r1
    2cee:	8a e8       	ldi	r24, 0x8A	; 138
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	29 81       	ldd	r18, Y+1	; 0x01
    2cf4:	3a 81       	ldd	r19, Y+2	; 0x02
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	31 83       	std	Z+1, r19	; 0x01
    2cfa:	20 83       	st	Z, r18
    2cfc:	8f e6       	ldi	r24, 0x6F	; 111
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	fc 01       	movw	r30, r24
    2d02:	10 82       	st	Z, r1
    2d04:	00 00       	nop
    2d06:	0f 90       	pop	r0
    2d08:	0f 90       	pop	r0
    2d0a:	df 91       	pop	r29
    2d0c:	cf 91       	pop	r28
    2d0e:	08 95       	ret

00002d10 <startPWM>:
    2d10:	cf 93       	push	r28
    2d12:	df 93       	push	r29
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    2d18:	81 e8       	ldi	r24, 0x81	; 129
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	21 e8       	ldi	r18, 0x81	; 129
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	f9 01       	movw	r30, r18
    2d22:	20 81       	ld	r18, Z
    2d24:	21 60       	ori	r18, 0x01	; 1
    2d26:	fc 01       	movw	r30, r24
    2d28:	20 83       	st	Z, r18
    2d2a:	00 00       	nop
    2d2c:	df 91       	pop	r29
    2d2e:	cf 91       	pop	r28
    2d30:	08 95       	ret

00002d32 <setPWMDutyPercent>:
    2d32:	8f 92       	push	r8
    2d34:	9f 92       	push	r9
    2d36:	af 92       	push	r10
    2d38:	bf 92       	push	r11
    2d3a:	cf 92       	push	r12
    2d3c:	df 92       	push	r13
    2d3e:	ef 92       	push	r14
    2d40:	ff 92       	push	r15
    2d42:	0f 93       	push	r16
    2d44:	1f 93       	push	r17
    2d46:	cf 93       	push	r28
    2d48:	df 93       	push	r29
    2d4a:	1f 92       	push	r1
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
    2d50:	89 83       	std	Y+1, r24	; 0x01
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	85 36       	cpi	r24, 0x65	; 101
    2d56:	10 f0       	brcs	.+4      	; 0x2d5c <setPWMDutyPercent+0x2a>
    2d58:	84 e6       	ldi	r24, 0x64	; 100
    2d5a:	89 83       	std	Y+1, r24	; 0x01
    2d5c:	0f 2e       	mov	r0, r31
    2d5e:	fa e8       	ldi	r31, 0x8A	; 138
    2d60:	8f 2e       	mov	r8, r31
    2d62:	91 2c       	mov	r9, r1
    2d64:	f0 2d       	mov	r31, r0
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	88 2f       	mov	r24, r24
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	a0 e0       	ldi	r26, 0x00	; 0
    2d6e:	b0 e0       	ldi	r27, 0x00	; 0
    2d70:	1f 92       	push	r1
    2d72:	1f 92       	push	r1
    2d74:	21 e0       	ldi	r18, 0x01	; 1
    2d76:	2f 93       	push	r18
    2d78:	2f ef       	ldi	r18, 0xFF	; 255
    2d7a:	2f 93       	push	r18
    2d7c:	a1 2c       	mov	r10, r1
    2d7e:	b1 2c       	mov	r11, r1
    2d80:	65 01       	movw	r12, r10
    2d82:	14 e6       	ldi	r17, 0x64	; 100
    2d84:	e1 2e       	mov	r14, r17
    2d86:	f1 2c       	mov	r15, r1
    2d88:	00 e0       	ldi	r16, 0x00	; 0
    2d8a:	10 e0       	ldi	r17, 0x00	; 0
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	a9 01       	movw	r20, r18
    2d92:	bc 01       	movw	r22, r24
    2d94:	cd 01       	movw	r24, r26
    2d96:	0e 94 2b 18 	call	0x3056	; 0x3056 <Map>
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	dc 01       	movw	r26, r24
    2da4:	cb 01       	movw	r24, r22
    2da6:	f4 01       	movw	r30, r8
    2da8:	91 83       	std	Z+1, r25	; 0x01
    2daa:	80 83       	st	Z, r24
    2dac:	00 00       	nop
    2dae:	0f 90       	pop	r0
    2db0:	df 91       	pop	r29
    2db2:	cf 91       	pop	r28
    2db4:	1f 91       	pop	r17
    2db6:	0f 91       	pop	r16
    2db8:	ff 90       	pop	r15
    2dba:	ef 90       	pop	r14
    2dbc:	df 90       	pop	r13
    2dbe:	cf 90       	pop	r12
    2dc0:	bf 90       	pop	r11
    2dc2:	af 90       	pop	r10
    2dc4:	9f 90       	pop	r9
    2dc6:	8f 90       	pop	r8
    2dc8:	08 95       	ret

00002dca <setPWMDuty>:
    2dca:	cf 93       	push	r28
    2dcc:	df 93       	push	r29
    2dce:	00 d0       	rcall	.+0      	; 0x2dd0 <setPWMDuty+0x6>
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
    2dd4:	9a 83       	std	Y+2, r25	; 0x02
    2dd6:	89 83       	std	Y+1, r24	; 0x01
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
    2dda:	9a 81       	ldd	r25, Y+2	; 0x02
    2ddc:	81 15       	cp	r24, r1
    2dde:	92 40       	sbci	r25, 0x02	; 2
    2de0:	20 f0       	brcs	.+8      	; 0x2dea <setPWMDuty+0x20>
    2de2:	8f ef       	ldi	r24, 0xFF	; 255
    2de4:	91 e0       	ldi	r25, 0x01	; 1
    2de6:	9a 83       	std	Y+2, r25	; 0x02
    2de8:	89 83       	std	Y+1, r24	; 0x01
    2dea:	8a e8       	ldi	r24, 0x8A	; 138
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	29 81       	ldd	r18, Y+1	; 0x01
    2df0:	3a 81       	ldd	r19, Y+2	; 0x02
    2df2:	fc 01       	movw	r30, r24
    2df4:	31 83       	std	Z+1, r19	; 0x01
    2df6:	20 83       	st	Z, r18
    2df8:	00 00       	nop
    2dfa:	0f 90       	pop	r0
    2dfc:	0f 90       	pop	r0
    2dfe:	df 91       	pop	r29
    2e00:	cf 91       	pop	r28
    2e02:	08 95       	ret

00002e04 <adcInit>:
    2e04:	cf 93       	push	r28
    2e06:	df 93       	push	r29
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
    2e0c:	81 e2       	ldi	r24, 0x21	; 33
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	21 e2       	ldi	r18, 0x21	; 33
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	f9 01       	movw	r30, r18
    2e16:	20 81       	ld	r18, Z
    2e18:	2e 7f       	andi	r18, 0xFE	; 254
    2e1a:	fc 01       	movw	r30, r24
    2e1c:	20 83       	st	Z, r18
    2e1e:	8e e7       	ldi	r24, 0x7E	; 126
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	2e e7       	ldi	r18, 0x7E	; 126
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	f9 01       	movw	r30, r18
    2e28:	20 81       	ld	r18, Z
    2e2a:	21 60       	ori	r18, 0x01	; 1
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	20 83       	st	Z, r18
    2e30:	8c e7       	ldi	r24, 0x7C	; 124
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	20 e6       	ldi	r18, 0x60	; 96
    2e36:	fc 01       	movw	r30, r24
    2e38:	20 83       	st	Z, r18
    2e3a:	8a e7       	ldi	r24, 0x7A	; 122
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	27 e3       	ldi	r18, 0x37	; 55
    2e40:	fc 01       	movw	r30, r24
    2e42:	20 83       	st	Z, r18
    2e44:	8b e7       	ldi	r24, 0x7B	; 123
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	fc 01       	movw	r30, r24
    2e4a:	10 82       	st	Z, r1
    2e4c:	8a e7       	ldi	r24, 0x7A	; 122
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	2a e7       	ldi	r18, 0x7A	; 122
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	f9 01       	movw	r30, r18
    2e56:	20 81       	ld	r18, Z
    2e58:	20 68       	ori	r18, 0x80	; 128
    2e5a:	fc 01       	movw	r30, r24
    2e5c:	20 83       	st	Z, r18
    2e5e:	8a e7       	ldi	r24, 0x7A	; 122
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	2a e7       	ldi	r18, 0x7A	; 122
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	f9 01       	movw	r30, r18
    2e68:	20 81       	ld	r18, Z
    2e6a:	20 64       	ori	r18, 0x40	; 64
    2e6c:	fc 01       	movw	r30, r24
    2e6e:	20 83       	st	Z, r18
    2e70:	00 00       	nop
    2e72:	df 91       	pop	r29
    2e74:	cf 91       	pop	r28
    2e76:	08 95       	ret

00002e78 <adcGetTemperature>:

uint8_t adcGetTemperature(void)
{
    2e78:	af 92       	push	r10
    2e7a:	bf 92       	push	r11
    2e7c:	cf 92       	push	r12
    2e7e:	df 92       	push	r13
    2e80:	ef 92       	push	r14
    2e82:	ff 92       	push	r15
    2e84:	0f 93       	push	r16
    2e86:	1f 93       	push	r17
    2e88:	cf 93       	push	r28
    2e8a:	df 93       	push	r29
    2e8c:	00 d0       	rcall	.+0      	; 0x2e8e <adcGetTemperature+0x16>
    2e8e:	00 d0       	rcall	.+0      	; 0x2e90 <adcGetTemperature+0x18>
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
	int32_t s32Temp;
	
	s32Temp = Map((int32_t)ADCH,0,255,-50,450);
    2e94:	89 e7       	ldi	r24, 0x79	; 121
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	fc 01       	movw	r30, r24
    2e9a:	80 81       	ld	r24, Z
    2e9c:	88 2f       	mov	r24, r24
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	a0 e0       	ldi	r26, 0x00	; 0
    2ea2:	b0 e0       	ldi	r27, 0x00	; 0
    2ea4:	1f 92       	push	r1
    2ea6:	1f 92       	push	r1
    2ea8:	21 e0       	ldi	r18, 0x01	; 1
    2eaa:	2f 93       	push	r18
    2eac:	22 ec       	ldi	r18, 0xC2	; 194
    2eae:	2f 93       	push	r18
    2eb0:	0f 2e       	mov	r0, r31
    2eb2:	fe ec       	ldi	r31, 0xCE	; 206
    2eb4:	af 2e       	mov	r10, r31
    2eb6:	bb 24       	eor	r11, r11
    2eb8:	ba 94       	dec	r11
    2eba:	cb 2c       	mov	r12, r11
    2ebc:	db 2c       	mov	r13, r11
    2ebe:	f0 2d       	mov	r31, r0
    2ec0:	e1 2c       	mov	r14, r1
    2ec2:	f1 2c       	mov	r15, r1
    2ec4:	87 01       	movw	r16, r14
    2ec6:	ea 94       	dec	r14
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	a9 01       	movw	r20, r18
    2ece:	bc 01       	movw	r22, r24
    2ed0:	cd 01       	movw	r24, r26
    2ed2:	0e 94 2b 18 	call	0x3056	; 0x3056 <Map>
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	0f 90       	pop	r0
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	89 83       	std	Y+1, r24	; 0x01
    2ee4:	9a 83       	std	Y+2, r25	; 0x02
    2ee6:	ab 83       	std	Y+3, r26	; 0x03
    2ee8:	bc 83       	std	Y+4, r27	; 0x04
	if(s32Temp<0)
    2eea:	89 81       	ldd	r24, Y+1	; 0x01
    2eec:	9a 81       	ldd	r25, Y+2	; 0x02
    2eee:	ab 81       	ldd	r26, Y+3	; 0x03
    2ef0:	bc 81       	ldd	r27, Y+4	; 0x04
    2ef2:	bb 23       	and	r27, r27
    2ef4:	2c f4       	brge	.+10     	; 0x2f00 <adcGetTemperature+0x88>
	{
		s32Temp = 0;
    2ef6:	19 82       	std	Y+1, r1	; 0x01
    2ef8:	1a 82       	std	Y+2, r1	; 0x02
    2efa:	1b 82       	std	Y+3, r1	; 0x03
    2efc:	1c 82       	std	Y+4, r1	; 0x04
    2efe:	12 c0       	rjmp	.+36     	; 0x2f24 <adcGetTemperature+0xac>
	}
	else if(s32Temp>255)
    2f00:	89 81       	ldd	r24, Y+1	; 0x01
    2f02:	9a 81       	ldd	r25, Y+2	; 0x02
    2f04:	ab 81       	ldd	r26, Y+3	; 0x03
    2f06:	bc 81       	ldd	r27, Y+4	; 0x04
    2f08:	8f 3f       	cpi	r24, 0xFF	; 255
    2f0a:	91 05       	cpc	r25, r1
    2f0c:	a1 05       	cpc	r26, r1
    2f0e:	b1 05       	cpc	r27, r1
    2f10:	49 f0       	breq	.+18     	; 0x2f24 <adcGetTemperature+0xac>
    2f12:	44 f0       	brlt	.+16     	; 0x2f24 <adcGetTemperature+0xac>
	{
		s32Temp = 255;
    2f14:	8f ef       	ldi	r24, 0xFF	; 255
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	a0 e0       	ldi	r26, 0x00	; 0
    2f1a:	b0 e0       	ldi	r27, 0x00	; 0
    2f1c:	89 83       	std	Y+1, r24	; 0x01
    2f1e:	9a 83       	std	Y+2, r25	; 0x02
    2f20:	ab 83       	std	Y+3, r26	; 0x03
    2f22:	bc 83       	std	Y+4, r27	; 0x04
	}
	return (uint8_t)s32Temp;
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f26:	0f 90       	pop	r0
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	0f 90       	pop	r0
    2f2e:	df 91       	pop	r29
    2f30:	cf 91       	pop	r28
    2f32:	1f 91       	pop	r17
    2f34:	0f 91       	pop	r16
    2f36:	ff 90       	pop	r15
    2f38:	ef 90       	pop	r14
    2f3a:	df 90       	pop	r13
    2f3c:	cf 90       	pop	r12
    2f3e:	bf 90       	pop	r11
    2f40:	af 90       	pop	r10
    2f42:	08 95       	ret

00002f44 <INT_5ms_Init>:

///////////////////////////////////////////////////////////////////////////////
// UTILITIES
///////////////////////////////////////////////////////////////////////////////
void INT_5ms_Init(void)
{
    2f44:	cf 93       	push	r28
    2f46:	df 93       	push	r29
    2f48:	cd b7       	in	r28, 0x3d	; 61
    2f4a:	de b7       	in	r29, 0x3e	; 62
	TCCR2A = (1<<WGM21);	// mode: CTC
    2f4c:	80 eb       	ldi	r24, 0xB0	; 176
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	22 e0       	ldi	r18, 0x02	; 2
    2f52:	fc 01       	movw	r30, r24
    2f54:	20 83       	st	Z, r18
	TCCR2B = 0;				// mode: CTC, clock off
    2f56:	81 eb       	ldi	r24, 0xB1	; 177
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	fc 01       	movw	r30, r24
    2f5c:	10 82       	st	Z, r1
	TCNT2 = 0;
    2f5e:	82 eb       	ldi	r24, 0xB2	; 178
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	fc 01       	movw	r30, r24
    2f64:	10 82       	st	Z, r1
	OCR2A = 96;
    2f66:	83 eb       	ldi	r24, 0xB3	; 179
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	20 e6       	ldi	r18, 0x60	; 96
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	20 83       	st	Z, r18
	TIMSK2 = (1<<OCIE2A);
    2f70:	80 e7       	ldi	r24, 0x70	; 112
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	22 e0       	ldi	r18, 0x02	; 2
    2f76:	fc 01       	movw	r30, r24
    2f78:	20 83       	st	Z, r18
	TIFR2 = (1<<OCF2A);
    2f7a:	87 e3       	ldi	r24, 0x37	; 55
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	22 e0       	ldi	r18, 0x02	; 2
    2f80:	fc 01       	movw	r30, r24
    2f82:	20 83       	st	Z, r18

	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);
    2f84:	81 eb       	ldi	r24, 0xB1	; 177
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	21 eb       	ldi	r18, 0xB1	; 177
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	f9 01       	movw	r30, r18
    2f8e:	20 81       	ld	r18, Z
    2f90:	27 60       	ori	r18, 0x07	; 7
    2f92:	fc 01       	movw	r30, r24
    2f94:	20 83       	st	Z, r18
}
    2f96:	00 00       	nop
    2f98:	df 91       	pop	r29
    2f9a:	cf 91       	pop	r28
    2f9c:	08 95       	ret

00002f9e <wait_1ms>:
 *
 * @param [in] uiFactor: 1ms multiplier
 * @return no return value
 *****************************************************************************/
void wait_1ms(uint16_t uiFactor)
{
    2f9e:	cf 93       	push	r28
    2fa0:	df 93       	push	r29
    2fa2:	00 d0       	rcall	.+0      	; 0x2fa4 <wait_1ms+0x6>
    2fa4:	00 d0       	rcall	.+0      	; 0x2fa6 <wait_1ms+0x8>
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
    2faa:	9c 83       	std	Y+4, r25	; 0x04
    2fac:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t i;
	TCCR0A = (1<<WGM01);	// mode: CTC
    2fae:	84 e4       	ldi	r24, 0x44	; 68
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	22 e0       	ldi	r18, 0x02	; 2
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	20 83       	st	Z, r18
	TCCR0B = 0;				// mode: CTC
    2fb8:	85 e4       	ldi	r24, 0x45	; 69
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	10 82       	st	Z, r1
	TIFR0 =  (1<<OCF0A);	// only OCFA flag needs to be cleared
    2fc0:	85 e3       	ldi	r24, 0x35	; 53
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	22 e0       	ldi	r18, 0x02	; 2
    2fc6:	fc 01       	movw	r30, r24
    2fc8:	20 83       	st	Z, r18
	TIMSK0 = 0;				// no interrupts
    2fca:	8e e6       	ldi	r24, 0x6E	; 110
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	fc 01       	movw	r30, r24
    2fd0:	10 82       	st	Z, r1
	TCNT0 = 0;
    2fd2:	86 e4       	ldi	r24, 0x46	; 70
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	fc 01       	movw	r30, r24
    2fd8:	10 82       	st	Z, r1
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
    2fda:	87 e4       	ldi	r24, 0x47	; 71
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	2d e4       	ldi	r18, 0x4D	; 77
    2fe0:	fc 01       	movw	r30, r24
    2fe2:	20 83       	st	Z, r18
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
    2fe4:	85 e4       	ldi	r24, 0x45	; 69
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	25 e4       	ldi	r18, 0x45	; 69
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	f9 01       	movw	r30, r18
    2fee:	20 81       	ld	r18, Z
    2ff0:	24 60       	ori	r18, 0x04	; 4
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	20 83       	st	Z, r18
	
	for(i=0;i<uiFactor;i++)
    2ff6:	1a 82       	std	Y+2, r1	; 0x02
    2ff8:	19 82       	std	Y+1, r1	; 0x01
    2ffa:	15 c0       	rjmp	.+42     	; 0x3026 <wait_1ms+0x88>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
    2ffc:	00 00       	nop
    2ffe:	85 e3       	ldi	r24, 0x35	; 53
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	fc 01       	movw	r30, r24
    3004:	80 81       	ld	r24, Z
    3006:	88 2f       	mov	r24, r24
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	82 70       	andi	r24, 0x02	; 2
    300c:	99 27       	eor	r25, r25
    300e:	89 2b       	or	r24, r25
    3010:	b1 f3       	breq	.-20     	; 0x2ffe <wait_1ms+0x60>
		TIFR0 =  (1<<OCF0A);		// clear flag
    3012:	85 e3       	ldi	r24, 0x35	; 53
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	22 e0       	ldi	r18, 0x02	; 2
    3018:	fc 01       	movw	r30, r24
    301a:	20 83       	st	Z, r18
	TCNT0 = 0;
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
	
	for(i=0;i<uiFactor;i++)
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	9a 81       	ldd	r25, Y+2	; 0x02
    3020:	01 96       	adiw	r24, 0x01	; 1
    3022:	9a 83       	std	Y+2, r25	; 0x02
    3024:	89 83       	std	Y+1, r24	; 0x01
    3026:	29 81       	ldd	r18, Y+1	; 0x01
    3028:	3a 81       	ldd	r19, Y+2	; 0x02
    302a:	8b 81       	ldd	r24, Y+3	; 0x03
    302c:	9c 81       	ldd	r25, Y+4	; 0x04
    302e:	28 17       	cp	r18, r24
    3030:	39 07       	cpc	r19, r25
    3032:	20 f3       	brcs	.-56     	; 0x2ffc <wait_1ms+0x5e>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
		TIFR0 =  (1<<OCF0A);		// clear flag
	}
	TCCR0B &= ~(0x07);	// set prescaler to 0 (stop timer)
    3034:	85 e4       	ldi	r24, 0x45	; 69
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	25 e4       	ldi	r18, 0x45	; 69
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	f9 01       	movw	r30, r18
    303e:	20 81       	ld	r18, Z
    3040:	28 7f       	andi	r18, 0xF8	; 248
    3042:	fc 01       	movw	r30, r24
    3044:	20 83       	st	Z, r18
}
    3046:	00 00       	nop
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	df 91       	pop	r29
    3052:	cf 91       	pop	r28
    3054:	08 95       	ret

00003056 <Map>:
 * @param [in] s32OutMin: minimal value of output range
 * @param [in] s32OutMax: maximal value of output range
 * @return data in new number range
 *****************************************************************************/
int32_t Map(int32_t s32Data, int32_t s32InMin, int32_t s32InMax, int32_t s32OutMin, int32_t s32OutMax)
{
    3056:	af 92       	push	r10
    3058:	bf 92       	push	r11
    305a:	cf 92       	push	r12
    305c:	df 92       	push	r13
    305e:	ef 92       	push	r14
    3060:	ff 92       	push	r15
    3062:	0f 93       	push	r16
    3064:	1f 93       	push	r17
    3066:	cf 93       	push	r28
    3068:	df 93       	push	r29
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
    306e:	60 97       	sbiw	r28, 0x10	; 16
    3070:	0f b6       	in	r0, 0x3f	; 63
    3072:	f8 94       	cli
    3074:	de bf       	out	0x3e, r29	; 62
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	cd bf       	out	0x3d, r28	; 61
    307a:	69 83       	std	Y+1, r22	; 0x01
    307c:	7a 83       	std	Y+2, r23	; 0x02
    307e:	8b 83       	std	Y+3, r24	; 0x03
    3080:	9c 83       	std	Y+4, r25	; 0x04
    3082:	2d 83       	std	Y+5, r18	; 0x05
    3084:	3e 83       	std	Y+6, r19	; 0x06
    3086:	4f 83       	std	Y+7, r20	; 0x07
    3088:	58 87       	std	Y+8, r21	; 0x08
    308a:	e9 86       	std	Y+9, r14	; 0x09
    308c:	fa 86       	std	Y+10, r15	; 0x0a
    308e:	0b 87       	std	Y+11, r16	; 0x0b
    3090:	1c 87       	std	Y+12, r17	; 0x0c
    3092:	ad 86       	std	Y+13, r10	; 0x0d
    3094:	be 86       	std	Y+14, r11	; 0x0e
    3096:	cf 86       	std	Y+15, r12	; 0x0f
    3098:	d8 8a       	std	Y+16, r13	; 0x10
	return((s32Data-s32InMin)*(s32OutMax-s32OutMin)/(s32InMax-s32InMin)+s32OutMin);
    309a:	29 81       	ldd	r18, Y+1	; 0x01
    309c:	3a 81       	ldd	r19, Y+2	; 0x02
    309e:	4b 81       	ldd	r20, Y+3	; 0x03
    30a0:	5c 81       	ldd	r21, Y+4	; 0x04
    30a2:	8d 81       	ldd	r24, Y+5	; 0x05
    30a4:	9e 81       	ldd	r25, Y+6	; 0x06
    30a6:	af 81       	ldd	r26, Y+7	; 0x07
    30a8:	b8 85       	ldd	r27, Y+8	; 0x08
    30aa:	79 01       	movw	r14, r18
    30ac:	8a 01       	movw	r16, r20
    30ae:	e8 1a       	sub	r14, r24
    30b0:	f9 0a       	sbc	r15, r25
    30b2:	0a 0b       	sbc	r16, r26
    30b4:	1b 0b       	sbc	r17, r27
    30b6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    30b8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    30ba:	4f 8d       	ldd	r20, Y+31	; 0x1f
    30bc:	58 a1       	ldd	r21, Y+32	; 0x20
    30be:	8d 85       	ldd	r24, Y+13	; 0x0d
    30c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    30c2:	af 85       	ldd	r26, Y+15	; 0x0f
    30c4:	b8 89       	ldd	r27, Y+16	; 0x10
    30c6:	59 01       	movw	r10, r18
    30c8:	6a 01       	movw	r12, r20
    30ca:	a8 1a       	sub	r10, r24
    30cc:	b9 0a       	sbc	r11, r25
    30ce:	ca 0a       	sbc	r12, r26
    30d0:	db 0a       	sbc	r13, r27
    30d2:	d6 01       	movw	r26, r12
    30d4:	c5 01       	movw	r24, r10
    30d6:	a8 01       	movw	r20, r16
    30d8:	97 01       	movw	r18, r14
    30da:	bc 01       	movw	r22, r24
    30dc:	cd 01       	movw	r24, r26
    30de:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsi3>
    30e2:	7b 01       	movw	r14, r22
    30e4:	8c 01       	movw	r16, r24
    30e6:	29 85       	ldd	r18, Y+9	; 0x09
    30e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    30ea:	4b 85       	ldd	r20, Y+11	; 0x0b
    30ec:	5c 85       	ldd	r21, Y+12	; 0x0c
    30ee:	8d 81       	ldd	r24, Y+5	; 0x05
    30f0:	9e 81       	ldd	r25, Y+6	; 0x06
    30f2:	af 81       	ldd	r26, Y+7	; 0x07
    30f4:	b8 85       	ldd	r27, Y+8	; 0x08
    30f6:	28 1b       	sub	r18, r24
    30f8:	39 0b       	sbc	r19, r25
    30fa:	4a 0b       	sbc	r20, r26
    30fc:	5b 0b       	sbc	r21, r27
    30fe:	c8 01       	movw	r24, r16
    3100:	b7 01       	movw	r22, r14
    3102:	0e 94 2d 19 	call	0x325a	; 0x325a <__divmodsi4>
    3106:	da 01       	movw	r26, r20
    3108:	c9 01       	movw	r24, r18
    310a:	9c 01       	movw	r18, r24
    310c:	ad 01       	movw	r20, r26
    310e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3110:	9e 85       	ldd	r25, Y+14	; 0x0e
    3112:	af 85       	ldd	r26, Y+15	; 0x0f
    3114:	b8 89       	ldd	r27, Y+16	; 0x10
    3116:	82 0f       	add	r24, r18
    3118:	93 1f       	adc	r25, r19
    311a:	a4 1f       	adc	r26, r20
    311c:	b5 1f       	adc	r27, r21
}
    311e:	bc 01       	movw	r22, r24
    3120:	cd 01       	movw	r24, r26
    3122:	60 96       	adiw	r28, 0x10	; 16
    3124:	0f b6       	in	r0, 0x3f	; 63
    3126:	f8 94       	cli
    3128:	de bf       	out	0x3e, r29	; 62
    312a:	0f be       	out	0x3f, r0	; 63
    312c:	cd bf       	out	0x3d, r28	; 61
    312e:	df 91       	pop	r29
    3130:	cf 91       	pop	r28
    3132:	1f 91       	pop	r17
    3134:	0f 91       	pop	r16
    3136:	ff 90       	pop	r15
    3138:	ef 90       	pop	r14
    313a:	df 90       	pop	r13
    313c:	cf 90       	pop	r12
    313e:	bf 90       	pop	r11
    3140:	af 90       	pop	r10
    3142:	08 95       	ret

00003144 <CRC8>:

uint8_t CRC8(uint8_t* au8Data, uint8_t u8Length)
{
    3144:	cf 93       	push	r28
    3146:	df 93       	push	r29
    3148:	cd b7       	in	r28, 0x3d	; 61
    314a:	de b7       	in	r29, 0x3e	; 62
    314c:	28 97       	sbiw	r28, 0x08	; 8
    314e:	0f b6       	in	r0, 0x3f	; 63
    3150:	f8 94       	cli
    3152:	de bf       	out	0x3e, r29	; 62
    3154:	0f be       	out	0x3f, r0	; 63
    3156:	cd bf       	out	0x3d, r28	; 61
    3158:	9f 83       	std	Y+7, r25	; 0x07
    315a:	8e 83       	std	Y+6, r24	; 0x06
    315c:	68 87       	std	Y+8, r22	; 0x08
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;
    315e:	19 82       	std	Y+1, r1	; 0x01

	for(i=0;i<u8Length;i++)
    3160:	1a 82       	std	Y+2, r1	; 0x02
    3162:	27 c0       	rjmp	.+78     	; 0x31b2 <CRC8+0x6e>
	{
		u8InByte = au8Data[i];
    3164:	8a 81       	ldd	r24, Y+2	; 0x02
    3166:	88 2f       	mov	r24, r24
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	2e 81       	ldd	r18, Y+6	; 0x06
    316c:	3f 81       	ldd	r19, Y+7	; 0x07
    316e:	82 0f       	add	r24, r18
    3170:	93 1f       	adc	r25, r19
    3172:	fc 01       	movw	r30, r24
    3174:	80 81       	ld	r24, Z
    3176:	8c 83       	std	Y+4, r24	; 0x04
		for(j=0;j<8;j++)
    3178:	1b 82       	std	Y+3, r1	; 0x03
    317a:	15 c0       	rjmp	.+42     	; 0x31a6 <CRC8+0x62>
		{
			u8Temp = (u8CRC^u8InByte)&0x80;
    317c:	99 81       	ldd	r25, Y+1	; 0x01
    317e:	8c 81       	ldd	r24, Y+4	; 0x04
    3180:	89 27       	eor	r24, r25
    3182:	80 78       	andi	r24, 0x80	; 128
    3184:	8d 83       	std	Y+5, r24	; 0x05
			u8CRC <<= 1;
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	88 0f       	add	r24, r24
    318a:	89 83       	std	Y+1, r24	; 0x01
			if(u8Temp!=0)
    318c:	8d 81       	ldd	r24, Y+5	; 0x05
    318e:	88 23       	and	r24, r24
    3190:	21 f0       	breq	.+8      	; 0x319a <CRC8+0x56>
			{
				u8CRC ^= 0x07;
    3192:	99 81       	ldd	r25, Y+1	; 0x01
    3194:	87 e0       	ldi	r24, 0x07	; 7
    3196:	89 27       	eor	r24, r25
    3198:	89 83       	std	Y+1, r24	; 0x01
			}
			u8InByte<<=1;
    319a:	8c 81       	ldd	r24, Y+4	; 0x04
    319c:	88 0f       	add	r24, r24
    319e:	8c 83       	std	Y+4, r24	; 0x04
	u8CRC = 0;

	for(i=0;i<u8Length;i++)
	{
		u8InByte = au8Data[i];
		for(j=0;j<8;j++)
    31a0:	8b 81       	ldd	r24, Y+3	; 0x03
    31a2:	8f 5f       	subi	r24, 0xFF	; 255
    31a4:	8b 83       	std	Y+3, r24	; 0x03
    31a6:	8b 81       	ldd	r24, Y+3	; 0x03
    31a8:	88 30       	cpi	r24, 0x08	; 8
    31aa:	40 f3       	brcs	.-48     	; 0x317c <CRC8+0x38>
{
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;

	for(i=0;i<u8Length;i++)
    31ac:	8a 81       	ldd	r24, Y+2	; 0x02
    31ae:	8f 5f       	subi	r24, 0xFF	; 255
    31b0:	8a 83       	std	Y+2, r24	; 0x02
    31b2:	9a 81       	ldd	r25, Y+2	; 0x02
    31b4:	88 85       	ldd	r24, Y+8	; 0x08
    31b6:	98 17       	cp	r25, r24
    31b8:	a8 f2       	brcs	.-86     	; 0x3164 <CRC8+0x20>
			}
			u8InByte<<=1;
		}
	}

	return u8CRC;
    31ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    31bc:	28 96       	adiw	r28, 0x08	; 8
    31be:	0f b6       	in	r0, 0x3f	; 63
    31c0:	f8 94       	cli
    31c2:	de bf       	out	0x3e, r29	; 62
    31c4:	0f be       	out	0x3f, r0	; 63
    31c6:	cd bf       	out	0x3d, r28	; 61
    31c8:	df 91       	pop	r29
    31ca:	cf 91       	pop	r28
    31cc:	08 95       	ret

000031ce <__mulsi3>:
    31ce:	db 01       	movw	r26, r22
    31d0:	8f 93       	push	r24
    31d2:	9f 93       	push	r25
    31d4:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__muluhisi3>
    31d8:	bf 91       	pop	r27
    31da:	af 91       	pop	r26
    31dc:	a2 9f       	mul	r26, r18
    31de:	80 0d       	add	r24, r0
    31e0:	91 1d       	adc	r25, r1
    31e2:	a3 9f       	mul	r26, r19
    31e4:	90 0d       	add	r25, r0
    31e6:	b2 9f       	mul	r27, r18
    31e8:	90 0d       	add	r25, r0
    31ea:	11 24       	eor	r1, r1
    31ec:	08 95       	ret

000031ee <__udivmodhi4>:
    31ee:	aa 1b       	sub	r26, r26
    31f0:	bb 1b       	sub	r27, r27
    31f2:	51 e1       	ldi	r21, 0x11	; 17
    31f4:	07 c0       	rjmp	.+14     	; 0x3204 <__udivmodhi4_ep>

000031f6 <__udivmodhi4_loop>:
    31f6:	aa 1f       	adc	r26, r26
    31f8:	bb 1f       	adc	r27, r27
    31fa:	a6 17       	cp	r26, r22
    31fc:	b7 07       	cpc	r27, r23
    31fe:	10 f0       	brcs	.+4      	; 0x3204 <__udivmodhi4_ep>
    3200:	a6 1b       	sub	r26, r22
    3202:	b7 0b       	sbc	r27, r23

00003204 <__udivmodhi4_ep>:
    3204:	88 1f       	adc	r24, r24
    3206:	99 1f       	adc	r25, r25
    3208:	5a 95       	dec	r21
    320a:	a9 f7       	brne	.-22     	; 0x31f6 <__udivmodhi4_loop>
    320c:	80 95       	com	r24
    320e:	90 95       	com	r25
    3210:	bc 01       	movw	r22, r24
    3212:	cd 01       	movw	r24, r26
    3214:	08 95       	ret

00003216 <__udivmodsi4>:
    3216:	a1 e2       	ldi	r26, 0x21	; 33
    3218:	1a 2e       	mov	r1, r26
    321a:	aa 1b       	sub	r26, r26
    321c:	bb 1b       	sub	r27, r27
    321e:	fd 01       	movw	r30, r26
    3220:	0d c0       	rjmp	.+26     	; 0x323c <__udivmodsi4_ep>

00003222 <__udivmodsi4_loop>:
    3222:	aa 1f       	adc	r26, r26
    3224:	bb 1f       	adc	r27, r27
    3226:	ee 1f       	adc	r30, r30
    3228:	ff 1f       	adc	r31, r31
    322a:	a2 17       	cp	r26, r18
    322c:	b3 07       	cpc	r27, r19
    322e:	e4 07       	cpc	r30, r20
    3230:	f5 07       	cpc	r31, r21
    3232:	20 f0       	brcs	.+8      	; 0x323c <__udivmodsi4_ep>
    3234:	a2 1b       	sub	r26, r18
    3236:	b3 0b       	sbc	r27, r19
    3238:	e4 0b       	sbc	r30, r20
    323a:	f5 0b       	sbc	r31, r21

0000323c <__udivmodsi4_ep>:
    323c:	66 1f       	adc	r22, r22
    323e:	77 1f       	adc	r23, r23
    3240:	88 1f       	adc	r24, r24
    3242:	99 1f       	adc	r25, r25
    3244:	1a 94       	dec	r1
    3246:	69 f7       	brne	.-38     	; 0x3222 <__udivmodsi4_loop>
    3248:	60 95       	com	r22
    324a:	70 95       	com	r23
    324c:	80 95       	com	r24
    324e:	90 95       	com	r25
    3250:	9b 01       	movw	r18, r22
    3252:	ac 01       	movw	r20, r24
    3254:	bd 01       	movw	r22, r26
    3256:	cf 01       	movw	r24, r30
    3258:	08 95       	ret

0000325a <__divmodsi4>:
    325a:	05 2e       	mov	r0, r21
    325c:	97 fb       	bst	r25, 7
    325e:	1e f4       	brtc	.+6      	; 0x3266 <__divmodsi4+0xc>
    3260:	00 94       	com	r0
    3262:	0e 94 44 19 	call	0x3288	; 0x3288 <__negsi2>
    3266:	57 fd       	sbrc	r21, 7
    3268:	07 d0       	rcall	.+14     	; 0x3278 <__divmodsi4_neg2>
    326a:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivmodsi4>
    326e:	07 fc       	sbrc	r0, 7
    3270:	03 d0       	rcall	.+6      	; 0x3278 <__divmodsi4_neg2>
    3272:	4e f4       	brtc	.+18     	; 0x3286 <__divmodsi4_exit>
    3274:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__negsi2>

00003278 <__divmodsi4_neg2>:
    3278:	50 95       	com	r21
    327a:	40 95       	com	r20
    327c:	30 95       	com	r19
    327e:	21 95       	neg	r18
    3280:	3f 4f       	sbci	r19, 0xFF	; 255
    3282:	4f 4f       	sbci	r20, 0xFF	; 255
    3284:	5f 4f       	sbci	r21, 0xFF	; 255

00003286 <__divmodsi4_exit>:
    3286:	08 95       	ret

00003288 <__negsi2>:
    3288:	90 95       	com	r25
    328a:	80 95       	com	r24
    328c:	70 95       	com	r23
    328e:	61 95       	neg	r22
    3290:	7f 4f       	sbci	r23, 0xFF	; 255
    3292:	8f 4f       	sbci	r24, 0xFF	; 255
    3294:	9f 4f       	sbci	r25, 0xFF	; 255
    3296:	08 95       	ret

00003298 <__tablejump2__>:
    3298:	ee 0f       	add	r30, r30
    329a:	ff 1f       	adc	r31, r31
    329c:	05 90       	lpm	r0, Z+
    329e:	f4 91       	lpm	r31, Z
    32a0:	e0 2d       	mov	r30, r0
    32a2:	09 94       	ijmp

000032a4 <__muluhisi3>:
    32a4:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__umulhisi3>
    32a8:	a5 9f       	mul	r26, r21
    32aa:	90 0d       	add	r25, r0
    32ac:	b4 9f       	mul	r27, r20
    32ae:	90 0d       	add	r25, r0
    32b0:	a4 9f       	mul	r26, r20
    32b2:	80 0d       	add	r24, r0
    32b4:	91 1d       	adc	r25, r1
    32b6:	11 24       	eor	r1, r1
    32b8:	08 95       	ret

000032ba <__umulhisi3>:
    32ba:	a2 9f       	mul	r26, r18
    32bc:	b0 01       	movw	r22, r0
    32be:	b3 9f       	mul	r27, r19
    32c0:	c0 01       	movw	r24, r0
    32c2:	a3 9f       	mul	r26, r19
    32c4:	70 0d       	add	r23, r0
    32c6:	81 1d       	adc	r24, r1
    32c8:	11 24       	eor	r1, r1
    32ca:	91 1d       	adc	r25, r1
    32cc:	b2 9f       	mul	r27, r18
    32ce:	70 0d       	add	r23, r0
    32d0:	81 1d       	adc	r24, r1
    32d2:	11 24       	eor	r1, r1
    32d4:	91 1d       	adc	r25, r1
    32d6:	08 95       	ret

000032d8 <strlen>:
    32d8:	fc 01       	movw	r30, r24
    32da:	01 90       	ld	r0, Z+
    32dc:	00 20       	and	r0, r0
    32de:	e9 f7       	brne	.-6      	; 0x32da <strlen+0x2>
    32e0:	80 95       	com	r24
    32e2:	90 95       	com	r25
    32e4:	8e 0f       	add	r24, r30
    32e6:	9f 1f       	adc	r25, r31
    32e8:	08 95       	ret

000032ea <_exit>:
    32ea:	f8 94       	cli

000032ec <__stop_program>:
    32ec:	ff cf       	rjmp	.-2      	; 0x32ec <__stop_program>
