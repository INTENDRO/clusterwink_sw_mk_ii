
clusterwink_mk_ii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000c86  00000d1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  00800102  00800102  00000d1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e26  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d0  00000000  00000000  00001cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a3a  00000000  00000000  00002692  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000478  00000000  00000000  000030cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d0  00000000  00000000  00003544  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000935  00000000  00000000  00003b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004449  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  10:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  14:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__vector_5>
  18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_19>
  50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  54:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  58:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  5c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  60:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  68:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  6c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  70:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  74:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  7c:	9b 00       	.word	0x009b	; ????
  7e:	b4 00       	.word	0x00b4	; ????
  80:	cd 00       	.word	0x00cd	; ????
  82:	2c 01       	movw	r4, r24
  84:	40 01       	movw	r8, r0
  86:	40 01       	movw	r8, r0
  88:	40 01       	movw	r8, r0

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
  96:	11 e0       	ldi	r17, 0x01	; 1
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	e6 e8       	ldi	r30, 0x86	; 134
  9e:	fc e0       	ldi	r31, 0x0C	; 12
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
  a2:	05 90       	lpm	r0, Z+
  a4:	0d 92       	st	X+, r0
  a6:	a2 30       	cpi	r26, 0x02	; 2
  a8:	b1 07       	cpc	r27, r17
  aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	a2 e0       	ldi	r26, 0x02	; 2
  b0:	b1 e0       	ldi	r27, 0x01	; 1
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
  b6:	a5 34       	cpi	r26, 0x45	; 69
  b8:	b2 07       	cpc	r27, r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
  bc:	0e 94 0a 02 	call	0x414	; 0x414 <main>
  c0:	0c 94 41 06 	jmp	0xc82	; 0xc82 <_exit>

000000c4 <__bad_interrupt>:
  c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <__vector_19>:
volatile uint8_t u8Status = 0x11;
volatile uint8_t u8Duty = 0;
volatile uint8_t u8Temperature = 0x33;

ISR(SPI_STC_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	3f 93       	push	r19
  d8:	4f 93       	push	r20
  da:	5f 93       	push	r21
  dc:	6f 93       	push	r22
  de:	7f 93       	push	r23
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	af 93       	push	r26
  e6:	bf 93       	push	r27
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	1f 92       	push	r1
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8spiData = SPDR0;
  f6:	8e e4       	ldi	r24, 0x4E	; 78
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	fc 01       	movw	r30, r24
  fc:	80 81       	ld	r24, Z
  fe:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0;
 100:	8e e4       	ldi	r24, 0x4E	; 78
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	fc 01       	movw	r30, r24
 106:	10 82       	st	Z, r1

	switch(SPIBUFFER.spiState)
 108:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__data_end+0x41>
 10c:	88 2f       	mov	r24, r24
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	09 2e       	mov	r0, r25
 112:	00 0c       	add	r0, r0
 114:	aa 0b       	sbc	r26, r26
 116:	bb 0b       	sbc	r27, r27
 118:	40 e0       	ldi	r20, 0x00	; 0
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	26 e0       	ldi	r18, 0x06	; 6
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	84 1b       	sub	r24, r20
 122:	95 0b       	sbc	r25, r21
 124:	28 17       	cp	r18, r24
 126:	39 07       	cpc	r19, r25
 128:	08 f4       	brcc	.+2      	; 0x12c <__vector_19+0x64>
 12a:	ad c0       	rjmp	.+346    	; 0x286 <__vector_19+0x1be>
 12c:	82 5c       	subi	r24, 0xC2	; 194
 12e:	9f 4f       	sbci	r25, 0xFF	; 255
 130:	fc 01       	movw	r30, r24
 132:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__tablejump2__>
	{
		case READY:
			if(u8spiData>=3)
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	90 f0       	brcs	.+36     	; 0x160 <__vector_19+0x98>
			{
				SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
 13c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 140:	88 2f       	mov	r24, r24
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	8e 5f       	subi	r24, 0xFE	; 254
 146:	9e 4f       	sbci	r25, 0xFE	; 254
 148:	29 81       	ldd	r18, Y+1	; 0x01
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
				SPIBUFFER.u8Count++;
 14e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 152:	8f 5f       	subi	r24, 0xFF	; 255
 154:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end+0x40>
				SPIBUFFER.spiState = WRITE;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__data_end+0x41>
			}
			else
			{
				SPIBUFFER.spiState = READ;
			}
		break;
 15e:	93 c0       	rjmp	.+294    	; 0x286 <__vector_19+0x1be>
				SPIBUFFER.u8Count++;
				SPIBUFFER.spiState = WRITE;
			}
			else
			{
				SPIBUFFER.spiState = READ;
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__data_end+0x41>
			}
		break;
 166:	8f c0       	rjmp	.+286    	; 0x286 <__vector_19+0x1be>

		case WRITE:
			SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
 168:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 16c:	88 2f       	mov	r24, r24
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	8e 5f       	subi	r24, 0xFE	; 254
 172:	9e 4f       	sbci	r25, 0xFE	; 254
 174:	29 81       	ldd	r18, Y+1	; 0x01
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
			SPIBUFFER.u8Count++;
 17a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 17e:	8f 5f       	subi	r24, 0xFF	; 255
 180:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end+0x40>
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
 184:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__data_end+0x40>
 188:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 18c:	98 17       	cp	r25, r24
 18e:	08 f4       	brcc	.+2      	; 0x192 <__vector_19+0xca>
 190:	79 c0       	rjmp	.+242    	; 0x284 <__vector_19+0x1bc>
			{
				SPIBUFFER.spiState = DONE_WRITE;
 192:	84 e0       	ldi	r24, 0x04	; 4
 194:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__data_end+0x41>
			}
		break;
 198:	75 c0       	rjmp	.+234    	; 0x284 <__vector_19+0x1bc>

		case READ:
			SPIBUFFER.u8Count = 0;
 19a:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end+0x40>
			
			switch(u8spiData)
 19e:	89 81       	ldd	r24, Y+1	; 0x01
 1a0:	88 2f       	mov	r24, r24
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	82 3c       	cpi	r24, 0xC2	; 194
 1a6:	91 05       	cpc	r25, r1
 1a8:	09 f1       	breq	.+66     	; 0x1ec <__vector_19+0x124>
 1aa:	83 3c       	cpi	r24, 0xC3	; 195
 1ac:	91 05       	cpc	r25, r1
 1ae:	c1 f1       	breq	.+112    	; 0x220 <__vector_19+0x158>
 1b0:	81 3c       	cpi	r24, 0xC1	; 193
 1b2:	91 05       	cpc	r25, r1
 1b4:	09 f0       	breq	.+2      	; 0x1b8 <__vector_19+0xf0>
 1b6:	4e c0       	rjmp	.+156    	; 0x254 <__vector_19+0x18c>
			{
				case 0xC1:
					SPDR0 = 0x01;
 1b8:	8e e4       	ldi	r24, 0x4E	; 78
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	21 e0       	ldi	r18, 0x01	; 1
 1be:	fc 01       	movw	r30, r24
 1c0:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[3] = 4;
 1c2:	84 e0       	ldi	r24, 0x04	; 4
 1c4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__data_end+0x3>
					SPIBUFFER.au8Buffer[2] = u8spiData;
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end+0x2>
					SPIBUFFER.au8Buffer[1] = u8Status;
 1ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1d2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__data_end+0x1>
					SPIBUFFER.au8Buffer[0] = CRC8(&SPIBUFFER.au8Buffer[0],3);
 1d6:	63 e0       	ldi	r22, 0x03	; 3
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	0e 94 8b 05 	call	0xb16	; 0xb16 <CRC8>
 1e0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
					SPIBUFFER.u8Count = 4;
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end+0x40>
					SPIBUFFER.spiState == READ_RETURN;
				break;
 1ea:	35 c0       	rjmp	.+106    	; 0x256 <__vector_19+0x18e>
				
				case 0xC2:
					SPDR0 = 0x01;
 1ec:	8e e4       	ldi	r24, 0x4E	; 78
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	fc 01       	movw	r30, r24
 1f4:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[3] = 4;
 1f6:	84 e0       	ldi	r24, 0x04	; 4
 1f8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__data_end+0x3>
					SPIBUFFER.au8Buffer[2] = u8spiData;
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end+0x2>
					SPIBUFFER.au8Buffer[1] = u8Duty;
 202:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8Duty>
 206:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__data_end+0x1>
					SPIBUFFER.au8Buffer[0] = CRC8(&SPIBUFFER.au8Buffer[0],3);
 20a:	63 e0       	ldi	r22, 0x03	; 3
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	0e 94 8b 05 	call	0xb16	; 0xb16 <CRC8>
 214:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
					SPIBUFFER.u8Count = 4;
 218:	84 e0       	ldi	r24, 0x04	; 4
 21a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end+0x40>
					SPIBUFFER.spiState == READ_RETURN;
				break;
 21e:	1b c0       	rjmp	.+54     	; 0x256 <__vector_19+0x18e>
				
				case 0xC3:
					SPDR0 = 0x01;
 220:	8e e4       	ldi	r24, 0x4E	; 78
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	21 e0       	ldi	r18, 0x01	; 1
 226:	fc 01       	movw	r30, r24
 228:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[3] = 4;
 22a:	84 e0       	ldi	r24, 0x04	; 4
 22c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__data_end+0x3>
					SPIBUFFER.au8Buffer[2] = u8spiData;
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end+0x2>
					SPIBUFFER.au8Buffer[1] = u8Temperature;
 236:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <u8Temperature>
 23a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__data_end+0x1>
					SPIBUFFER.au8Buffer[0] = CRC8(&SPIBUFFER.au8Buffer[0],3);
 23e:	63 e0       	ldi	r22, 0x03	; 3
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	0e 94 8b 05 	call	0xb16	; 0xb16 <CRC8>
 248:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
					SPIBUFFER.u8Count = 4;
 24c:	84 e0       	ldi	r24, 0x04	; 4
 24e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end+0x40>
					SPIBUFFER.spiState == READ_RETURN;
				break;
 252:	01 c0       	rjmp	.+2      	; 0x256 <__vector_19+0x18e>
				
				default:
					SPIBUFFER.spiState == IDLE;
				break;
 254:	00 00       	nop
			}
		break;
 256:	17 c0       	rjmp	.+46     	; 0x286 <__vector_19+0x1be>
		
		case READ_RETURN:
			SPDR0 = SPIBUFFER.au8Buffer[SPIBUFFER.u8Count-1];
 258:	8e e4       	ldi	r24, 0x4E	; 78
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__data_end+0x40>
 260:	22 2f       	mov	r18, r18
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	21 50       	subi	r18, 0x01	; 1
 266:	31 09       	sbc	r19, r1
 268:	2e 5f       	subi	r18, 0xFE	; 254
 26a:	3e 4f       	sbci	r19, 0xFE	; 254
 26c:	f9 01       	movw	r30, r18
 26e:	20 81       	ld	r18, Z
 270:	fc 01       	movw	r30, r24
 272:	20 83       	st	Z, r18
			SPIBUFFER.u8Count--;
 274:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 278:	81 50       	subi	r24, 0x01	; 1
 27a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end+0x40>
			if(SPIBUFFER.u8Count == 0);
			{
				SPIBUFFER.spiState == DONE_READ;
			}
		break;
 27e:	03 c0       	rjmp	.+6      	; 0x286 <__vector_19+0x1be>
		
		break;

		case IDLE:

		break;
 280:	00 00       	nop
 282:	01 c0       	rjmp	.+2      	; 0x286 <__vector_19+0x1be>
			SPIBUFFER.u8Count++;
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
			{
				SPIBUFFER.spiState = DONE_WRITE;
			}
		break;
 284:	00 00       	nop
		case IDLE:

		break;
	}

}
 286:	00 00       	nop
 288:	0f 90       	pop	r0
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	bf 91       	pop	r27
 294:	af 91       	pop	r26
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	7f 91       	pop	r23
 29c:	6f 91       	pop	r22
 29e:	5f 91       	pop	r21
 2a0:	4f 91       	pop	r20
 2a2:	3f 91       	pop	r19
 2a4:	2f 91       	pop	r18
 2a6:	0f 90       	pop	r0
 2a8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2ac:	0f 90       	pop	r0
 2ae:	1f 90       	pop	r1
 2b0:	18 95       	reti

000002b2 <__vector_5>:

ISR(PCINT1_vect)
{
 2b2:	1f 92       	push	r1
 2b4:	0f 92       	push	r0
 2b6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	2f 93       	push	r18
 2c0:	3f 93       	push	r19
 2c2:	4f 93       	push	r20
 2c4:	5f 93       	push	r21
 2c6:	6f 93       	push	r22
 2c8:	7f 93       	push	r23
 2ca:	8f 93       	push	r24
 2cc:	9f 93       	push	r25
 2ce:	af 93       	push	r26
 2d0:	bf 93       	push	r27
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8CRC;
	
	if(PIN_SPI & (1<<SPI_SS)) // SS HIGH
 2de:	83 e2       	ldi	r24, 0x23	; 35
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	fc 01       	movw	r30, r24
 2e4:	80 81       	ld	r24, Z
 2e6:	88 2f       	mov	r24, r24
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	80 71       	andi	r24, 0x10	; 16
 2ec:	99 27       	eor	r25, r25
 2ee:	89 2b       	or	r24, r25
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <__vector_5+0x42>
 2f2:	6b c0       	rjmp	.+214    	; 0x3ca <__vector_5+0x118>
	{
		if(SPIBUFFER.spiState == DONE_WRITE)
 2f4:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__data_end+0x41>
 2f8:	84 30       	cpi	r24, 0x04	; 4
 2fa:	09 f0       	breq	.+2      	; 0x2fe <__vector_5+0x4c>
 2fc:	76 c0       	rjmp	.+236    	; 0x3ea <__vector_5+0x138>
		{
			if(SPIBUFFER.u8Count == SPIBUFFER.au8Buffer[0]) // correct amount of bytes in buffer
 2fe:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__data_end+0x40>
 302:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 306:	98 17       	cp	r25, r24
 308:	09 f0       	breq	.+2      	; 0x30c <__vector_5+0x5a>
 30a:	6f c0       	rjmp	.+222    	; 0x3ea <__vector_5+0x138>
			{
				if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
 30c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 310:	68 2f       	mov	r22, r24
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	0e 94 8b 05 	call	0xb16	; 0xb16 <CRC8>
 31a:	88 23       	and	r24, r24
 31c:	09 f0       	breq	.+2      	; 0x320 <__vector_5+0x6e>
 31e:	65 c0       	rjmp	.+202    	; 0x3ea <__vector_5+0x138>
				{
					switch(SPIBUFFER.au8Buffer[1]) // command
 320:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_end+0x1>
 324:	88 2f       	mov	r24, r24
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	83 30       	cpi	r24, 0x03	; 3
 32a:	91 05       	cpc	r25, r1
 32c:	09 f1       	breq	.+66     	; 0x370 <__vector_5+0xbe>
 32e:	84 30       	cpi	r24, 0x04	; 4
 330:	91 05       	cpc	r25, r1
 332:	34 f4       	brge	.+12     	; 0x340 <__vector_5+0x8e>
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	91 05       	cpc	r25, r1
 338:	61 f0       	breq	.+24     	; 0x352 <__vector_5+0xa0>
 33a:	02 97       	sbiw	r24, 0x02	; 2
 33c:	91 f0       	breq	.+36     	; 0x362 <__vector_5+0xb0>
	{
		SPIBUFFER.u8Count = 0;
		SPIBUFFER.spiState = READY;
	}
	
}
 33e:	55 c0       	rjmp	.+170    	; 0x3ea <__vector_5+0x138>
		{
			if(SPIBUFFER.u8Count == SPIBUFFER.au8Buffer[0]) // correct amount of bytes in buffer
			{
				if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
				{
					switch(SPIBUFFER.au8Buffer[1]) // command
 340:	85 30       	cpi	r24, 0x05	; 5
 342:	91 05       	cpc	r25, r1
 344:	89 f1       	breq	.+98     	; 0x3a8 <__vector_5+0xf6>
 346:	85 30       	cpi	r24, 0x05	; 5
 348:	91 05       	cpc	r25, r1
 34a:	3c f1       	brlt	.+78     	; 0x39a <__vector_5+0xe8>
 34c:	06 97       	sbiw	r24, 0x06	; 6
 34e:	99 f1       	breq	.+102    	; 0x3b6 <__vector_5+0x104>
	{
		SPIBUFFER.u8Count = 0;
		SPIBUFFER.spiState = READY;
	}
	
}
 350:	4c c0       	rjmp	.+152    	; 0x3ea <__vector_5+0x138>
				if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
				{
					switch(SPIBUFFER.au8Buffer[1]) // command
					{
						case 0x01:
						if(SPIBUFFER.u8Count == 3)
 352:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 356:	83 30       	cpi	r24, 0x03	; 3
 358:	09 f0       	breq	.+2      	; 0x35c <__vector_5+0xaa>
 35a:	3c c0       	rjmp	.+120    	; 0x3d4 <__vector_5+0x122>
						{
							enablePLED();
 35c:	0e 94 21 03 	call	0x642	; 0x642 <enablePLED>
						}
						break;
 360:	39 c0       	rjmp	.+114    	; 0x3d4 <__vector_5+0x122>

						case 0x02:
						if(SPIBUFFER.u8Count == 3)
 362:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 366:	83 30       	cpi	r24, 0x03	; 3
 368:	b9 f5       	brne	.+110    	; 0x3d8 <__vector_5+0x126>
						{
							disablePLED();
 36a:	0e 94 32 03 	call	0x664	; 0x664 <disablePLED>
						}
						break;
 36e:	34 c0       	rjmp	.+104    	; 0x3d8 <__vector_5+0x126>

						case 0x03:
						if(SPIBUFFER.u8Count == 4)
 370:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 374:	84 30       	cpi	r24, 0x04	; 4
 376:	91 f5       	brne	.+100    	; 0x3dc <__vector_5+0x12a>
						{
							if(SPIBUFFER.au8Buffer[2]>100)
 378:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end+0x2>
 37c:	85 36       	cpi	r24, 0x65	; 101
 37e:	20 f0       	brcs	.+8      	; 0x388 <__vector_5+0xd6>
							{
								u8Duty = 100;
 380:	84 e6       	ldi	r24, 0x64	; 100
 382:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8Duty>
 386:	04 c0       	rjmp	.+8      	; 0x390 <__vector_5+0xde>
							}
							else
							{
								u8Duty = SPIBUFFER.au8Buffer[2];
 388:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end+0x2>
 38c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8Duty>
							}
						
							setDuty(u8Duty);
 390:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8Duty>
 394:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <setDuty>
						}
						break;
 398:	21 c0       	rjmp	.+66     	; 0x3dc <__vector_5+0x12a>
					
						case 0x04:
						if(SPIBUFFER.u8Count == 3)
 39a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 39e:	83 30       	cpi	r24, 0x03	; 3
 3a0:	f9 f4       	brne	.+62     	; 0x3e0 <__vector_5+0x12e>
						{
							enableAudio();
 3a2:	0e 94 5d 03 	call	0x6ba	; 0x6ba <enableAudio>
						}
						break;
 3a6:	1c c0       	rjmp	.+56     	; 0x3e0 <__vector_5+0x12e>

						case 0x05:
						if(SPIBUFFER.u8Count == 3)
 3a8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 3ac:	83 30       	cpi	r24, 0x03	; 3
 3ae:	d1 f4       	brne	.+52     	; 0x3e4 <__vector_5+0x132>
						{
							standbyAudio();
 3b0:	0e 94 43 03 	call	0x686	; 0x686 <standbyAudio>
						}
						break;
 3b4:	17 c0       	rjmp	.+46     	; 0x3e4 <__vector_5+0x132>
					
						case 0x06:
						if(SPIBUFFER.u8Count == 4)
 3b6:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x40>
 3ba:	84 30       	cpi	r24, 0x04	; 4
 3bc:	a9 f4       	brne	.+42     	; 0x3e8 <__vector_5+0x136>
						{
							setVolume(SPIBUFFER.au8Buffer[2]);
 3be:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end+0x2>
 3c2:	0e 94 d7 03 	call	0x7ae	; 0x7ae <setVolume>
						}
						break;
 3c6:	00 00       	nop
 3c8:	0f c0       	rjmp	.+30     	; 0x3e8 <__vector_5+0x136>
			
		}
	}
	else // SS LOW
	{
		SPIBUFFER.u8Count = 0;
 3ca:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end+0x40>
		SPIBUFFER.spiState = READY;
 3ce:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <__data_end+0x41>
	}
	
}
 3d2:	0b c0       	rjmp	.+22     	; 0x3ea <__vector_5+0x138>
						case 0x01:
						if(SPIBUFFER.u8Count == 3)
						{
							enablePLED();
						}
						break;
 3d4:	00 00       	nop
 3d6:	09 c0       	rjmp	.+18     	; 0x3ea <__vector_5+0x138>
						case 0x02:
						if(SPIBUFFER.u8Count == 3)
						{
							disablePLED();
						}
						break;
 3d8:	00 00       	nop
 3da:	07 c0       	rjmp	.+14     	; 0x3ea <__vector_5+0x138>
								u8Duty = SPIBUFFER.au8Buffer[2];
							}
						
							setDuty(u8Duty);
						}
						break;
 3dc:	00 00       	nop
 3de:	05 c0       	rjmp	.+10     	; 0x3ea <__vector_5+0x138>
						case 0x04:
						if(SPIBUFFER.u8Count == 3)
						{
							enableAudio();
						}
						break;
 3e0:	00 00       	nop
 3e2:	03 c0       	rjmp	.+6      	; 0x3ea <__vector_5+0x138>
						case 0x05:
						if(SPIBUFFER.u8Count == 3)
						{
							standbyAudio();
						}
						break;
 3e4:	00 00       	nop
 3e6:	01 c0       	rjmp	.+2      	; 0x3ea <__vector_5+0x138>
						case 0x06:
						if(SPIBUFFER.u8Count == 4)
						{
							setVolume(SPIBUFFER.au8Buffer[2]);
						}
						break;
 3e8:	00 00       	nop
	{
		SPIBUFFER.u8Count = 0;
		SPIBUFFER.spiState = READY;
	}
	
}
 3ea:	00 00       	nop
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	ff 91       	pop	r31
 3f2:	ef 91       	pop	r30
 3f4:	bf 91       	pop	r27
 3f6:	af 91       	pop	r26
 3f8:	9f 91       	pop	r25
 3fa:	8f 91       	pop	r24
 3fc:	7f 91       	pop	r23
 3fe:	6f 91       	pop	r22
 400:	5f 91       	pop	r21
 402:	4f 91       	pop	r20
 404:	3f 91       	pop	r19
 406:	2f 91       	pop	r18
 408:	0f 90       	pop	r0
 40a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <main>:



int main(void)
{
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	1f 92       	push	r1
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
    uint8_t u8Duty = 0;
 41e:	19 82       	std	Y+1, r1	; 0x01
	uint16_t i;
	
	portInit();
 420:	0e 94 93 02 	call	0x526	; 0x526 <portInit>
	initPWM(u8Duty);
 424:	89 81       	ldd	r24, Y+1	; 0x01
 426:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <initPWM>
	startPWM();
 42a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <startPWM>
	spiInitBuffer(&SPIBUFFER);
 42e:	82 e0       	ldi	r24, 0x02	; 2
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	0e 94 27 02 	call	0x44e	; 0x44e <spiInitBuffer>
	spiSlaveInit();
 436:	0e 94 41 02 	call	0x482	; 0x482 <spiSlaveInit>
	spiPcInt();
 43a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <spiPcInt>

	wait_1ms(100);
 43e:	84 e6       	ldi	r24, 0x64	; 100
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 b8 04 	call	0x970	; 0x970 <wait_1ms>
	initAudio();
 446:	0e 94 ed 03 	call	0x7da	; 0x7da <initAudio>

	
	
	sei();
 44a:	78 94       	sei
	
	
    while (1) 
    {

    }
 44c:	ff cf       	rjmp	.-2      	; 0x44c <main+0x38>

0000044e <spiInitBuffer>:
#include <avr/io.h>
#include "spi.h"


void spiInitBuffer(SpiBuf_t* Buffer)
{
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	00 d0       	rcall	.+0      	; 0x454 <spiInitBuffer+0x6>
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	9a 83       	std	Y+2, r25	; 0x02
 45a:	89 83       	std	Y+1, r24	; 0x01
	Buffer->u8Count = 0;
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	9a 81       	ldd	r25, Y+2	; 0x02
 460:	80 5c       	subi	r24, 0xC0	; 192
 462:	9f 4f       	sbci	r25, 0xFF	; 255
 464:	fc 01       	movw	r30, r24
 466:	10 82       	st	Z, r1
	Buffer->spiState = IDLE;
 468:	89 81       	ldd	r24, Y+1	; 0x01
 46a:	9a 81       	ldd	r25, Y+2	; 0x02
 46c:	8f 5b       	subi	r24, 0xBF	; 191
 46e:	9f 4f       	sbci	r25, 0xFF	; 255
 470:	26 e0       	ldi	r18, 0x06	; 6
 472:	fc 01       	movw	r30, r24
 474:	20 83       	st	Z, r18
}
 476:	00 00       	nop
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <spiSlaveInit>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiSlaveInit(void)
{
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	1f 92       	push	r1
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t ucTemp;
	SPSR0 = 0;
 48c:	8d e4       	ldi	r24, 0x4D	; 77
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	fc 01       	movw	r30, r24
 492:	10 82       	st	Z, r1
	SPCR0 = (1<<SPIE0);
 494:	8c e4       	ldi	r24, 0x4C	; 76
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	20 e8       	ldi	r18, 0x80	; 128
 49a:	fc 01       	movw	r30, r24
 49c:	20 83       	st	Z, r18
	
	ucTemp = SPSR0;					
 49e:	8d e4       	ldi	r24, 0x4D	; 77
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	fc 01       	movw	r30, r24
 4a4:	80 81       	ld	r24, Z
 4a6:	89 83       	std	Y+1, r24	; 0x01
	ucTemp = SPDR0;
 4a8:	8e e4       	ldi	r24, 0x4E	; 78
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	fc 01       	movw	r30, r24
 4ae:	80 81       	ld	r24, Z
 4b0:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0;
 4b2:	8e e4       	ldi	r24, 0x4E	; 78
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	fc 01       	movw	r30, r24
 4b8:	10 82       	st	Z, r1
	
	DDRB |= (1<<PINB6);				// MISO needs to be an output
 4ba:	84 e2       	ldi	r24, 0x24	; 36
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	24 e2       	ldi	r18, 0x24	; 36
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	f9 01       	movw	r30, r18
 4c4:	20 81       	ld	r18, Z
 4c6:	20 64       	ori	r18, 0x40	; 64
 4c8:	fc 01       	movw	r30, r24
 4ca:	20 83       	st	Z, r18
	
	SPCR0 |= (1<<SPE0);
 4cc:	8c e4       	ldi	r24, 0x4C	; 76
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	2c e4       	ldi	r18, 0x4C	; 76
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	f9 01       	movw	r30, r18
 4d6:	20 81       	ld	r18, Z
 4d8:	20 64       	ori	r18, 0x40	; 64
 4da:	fc 01       	movw	r30, r24
 4dc:	20 83       	st	Z, r18
}
 4de:	00 00       	nop
 4e0:	0f 90       	pop	r0
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <spiPcInt>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiPcInt(void)
{
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	cd b7       	in	r28, 0x3d	; 61
 4ee:	de b7       	in	r29, 0x3e	; 62
	PCICR |= (1<<PCIE1);
 4f0:	88 e6       	ldi	r24, 0x68	; 104
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	28 e6       	ldi	r18, 0x68	; 104
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	f9 01       	movw	r30, r18
 4fa:	20 81       	ld	r18, Z
 4fc:	22 60       	ori	r18, 0x02	; 2
 4fe:	fc 01       	movw	r30, r24
 500:	20 83       	st	Z, r18
	PCIFR = (1<<PCIF1);
 502:	8b e3       	ldi	r24, 0x3B	; 59
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	22 e0       	ldi	r18, 0x02	; 2
 508:	fc 01       	movw	r30, r24
 50a:	20 83       	st	Z, r18
	PCMSK1 |= (1<<PCINT12);
 50c:	8c e6       	ldi	r24, 0x6C	; 108
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	2c e6       	ldi	r18, 0x6C	; 108
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	f9 01       	movw	r30, r18
 516:	20 81       	ld	r18, Z
 518:	20 61       	ori	r18, 0x10	; 16
 51a:	fc 01       	movw	r30, r24
 51c:	20 83       	st	Z, r18
 51e:	00 00       	nop
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	08 95       	ret

00000526 <portInit>:
 * @return 8bit analog value
 *****************************************************************************/
uint8_t adcGetValue(void)
{
	return(ADCH);
}
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	cd b7       	in	r28, 0x3d	; 61
 52c:	de b7       	in	r29, 0x3e	; 62
 52e:	8a e2       	ldi	r24, 0x2A	; 42
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	2a e2       	ldi	r18, 0x2A	; 42
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	f9 01       	movw	r30, r18
 538:	20 81       	ld	r18, Z
 53a:	20 63       	ori	r18, 0x30	; 48
 53c:	fc 01       	movw	r30, r24
 53e:	20 83       	st	Z, r18
 540:	8b e2       	ldi	r24, 0x2B	; 43
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	2b e2       	ldi	r18, 0x2B	; 43
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	f9 01       	movw	r30, r18
 54a:	20 81       	ld	r18, Z
 54c:	20 62       	ori	r18, 0x20	; 32
 54e:	fc 01       	movw	r30, r24
 550:	20 83       	st	Z, r18
 552:	8b e2       	ldi	r24, 0x2B	; 43
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	2b e2       	ldi	r18, 0x2B	; 43
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	f9 01       	movw	r30, r18
 55c:	20 81       	ld	r18, Z
 55e:	2f 7e       	andi	r18, 0xEF	; 239
 560:	fc 01       	movw	r30, r24
 562:	20 83       	st	Z, r18
 564:	8a e2       	ldi	r24, 0x2A	; 42
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	2a e2       	ldi	r18, 0x2A	; 42
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	f9 01       	movw	r30, r18
 56e:	20 81       	ld	r18, Z
 570:	20 68       	ori	r18, 0x80	; 128
 572:	fc 01       	movw	r30, r24
 574:	20 83       	st	Z, r18
 576:	8b e2       	ldi	r24, 0x2B	; 43
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	2b e2       	ldi	r18, 0x2B	; 43
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	f9 01       	movw	r30, r18
 580:	20 81       	ld	r18, Z
 582:	20 68       	ori	r18, 0x80	; 128
 584:	fc 01       	movw	r30, r24
 586:	20 83       	st	Z, r18
 588:	8a e2       	ldi	r24, 0x2A	; 42
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	2a e2       	ldi	r18, 0x2A	; 42
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	f9 01       	movw	r30, r18
 592:	20 81       	ld	r18, Z
 594:	2f 7b       	andi	r18, 0xBF	; 191
 596:	fc 01       	movw	r30, r24
 598:	20 83       	st	Z, r18
 59a:	8a e2       	ldi	r24, 0x2A	; 42
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	2a e2       	ldi	r18, 0x2A	; 42
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	f9 01       	movw	r30, r18
 5a4:	20 81       	ld	r18, Z
 5a6:	2c 7f       	andi	r18, 0xFC	; 252
 5a8:	fc 01       	movw	r30, r24
 5aa:	20 83       	st	Z, r18
 5ac:	8b e2       	ldi	r24, 0x2B	; 43
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	2b e2       	ldi	r18, 0x2B	; 43
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	f9 01       	movw	r30, r18
 5b6:	20 81       	ld	r18, Z
 5b8:	21 60       	ori	r18, 0x01	; 1
 5ba:	fc 01       	movw	r30, r24
 5bc:	20 83       	st	Z, r18
 5be:	81 e2       	ldi	r24, 0x21	; 33
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	21 e2       	ldi	r18, 0x21	; 33
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	f9 01       	movw	r30, r18
 5c8:	20 81       	ld	r18, Z
 5ca:	2e 7f       	andi	r18, 0xFE	; 254
 5cc:	fc 01       	movw	r30, r24
 5ce:	20 83       	st	Z, r18
 5d0:	82 e2       	ldi	r24, 0x22	; 34
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	22 e2       	ldi	r18, 0x22	; 34
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	f9 01       	movw	r30, r18
 5da:	20 81       	ld	r18, Z
 5dc:	2e 7f       	andi	r18, 0xFE	; 254
 5de:	fc 01       	movw	r30, r24
 5e0:	20 83       	st	Z, r18
 5e2:	8e e7       	ldi	r24, 0x7E	; 126
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	2e e7       	ldi	r18, 0x7E	; 126
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	f9 01       	movw	r30, r18
 5ec:	20 81       	ld	r18, Z
 5ee:	21 60       	ori	r18, 0x01	; 1
 5f0:	fc 01       	movw	r30, r24
 5f2:	20 83       	st	Z, r18
 5f4:	81 e2       	ldi	r24, 0x21	; 33
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	21 e2       	ldi	r18, 0x21	; 33
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	f9 01       	movw	r30, r18
 5fe:	20 81       	ld	r18, Z
 600:	21 7f       	andi	r18, 0xF1	; 241
 602:	fc 01       	movw	r30, r24
 604:	20 83       	st	Z, r18
 606:	82 e2       	ldi	r24, 0x22	; 34
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	22 e2       	ldi	r18, 0x22	; 34
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	f9 01       	movw	r30, r18
 610:	20 81       	ld	r18, Z
 612:	2e 60       	ori	r18, 0x0E	; 14
 614:	fc 01       	movw	r30, r24
 616:	20 83       	st	Z, r18
 618:	87 e2       	ldi	r24, 0x27	; 39
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	fc 01       	movw	r30, r24
 61e:	80 81       	ld	r24, Z
 620:	87 e2       	ldi	r24, 0x27	; 39
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	fc 01       	movw	r30, r24
 626:	10 82       	st	Z, r1
 628:	88 e2       	ldi	r24, 0x28	; 40
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	fc 01       	movw	r30, r24
 62e:	80 81       	ld	r24, Z
 630:	88 e2       	ldi	r24, 0x28	; 40
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	2f ef       	ldi	r18, 0xFF	; 255
 636:	fc 01       	movw	r30, r24
 638:	20 83       	st	Z, r18
 63a:	00 00       	nop
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	08 95       	ret

00000642 <enablePLED>:
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	cd b7       	in	r28, 0x3d	; 61
 648:	de b7       	in	r29, 0x3e	; 62
 64a:	8b e2       	ldi	r24, 0x2B	; 43
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	2b e2       	ldi	r18, 0x2B	; 43
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	f9 01       	movw	r30, r18
 654:	20 81       	ld	r18, Z
 656:	2f 7d       	andi	r18, 0xDF	; 223
 658:	fc 01       	movw	r30, r24
 65a:	20 83       	st	Z, r18
 65c:	00 00       	nop
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	08 95       	ret

00000664 <disablePLED>:
 664:	cf 93       	push	r28
 666:	df 93       	push	r29
 668:	cd b7       	in	r28, 0x3d	; 61
 66a:	de b7       	in	r29, 0x3e	; 62
 66c:	8b e2       	ldi	r24, 0x2B	; 43
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	2b e2       	ldi	r18, 0x2B	; 43
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	f9 01       	movw	r30, r18
 676:	20 81       	ld	r18, Z
 678:	20 62       	ori	r18, 0x20	; 32
 67a:	fc 01       	movw	r30, r24
 67c:	20 83       	st	Z, r18
 67e:	00 00       	nop
 680:	df 91       	pop	r29
 682:	cf 91       	pop	r28
 684:	08 95       	ret

00000686 <standbyAudio>:
 686:	cf 93       	push	r28
 688:	df 93       	push	r29
 68a:	cd b7       	in	r28, 0x3d	; 61
 68c:	de b7       	in	r29, 0x3e	; 62
 68e:	8b e2       	ldi	r24, 0x2B	; 43
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	2b e2       	ldi	r18, 0x2B	; 43
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	f9 01       	movw	r30, r18
 698:	20 81       	ld	r18, Z
 69a:	20 68       	ori	r18, 0x80	; 128
 69c:	fc 01       	movw	r30, r24
 69e:	20 83       	st	Z, r18
 6a0:	8a e2       	ldi	r24, 0x2A	; 42
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	2a e2       	ldi	r18, 0x2A	; 42
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	f9 01       	movw	r30, r18
 6aa:	20 81       	ld	r18, Z
 6ac:	27 60       	ori	r18, 0x07	; 7
 6ae:	fc 01       	movw	r30, r24
 6b0:	20 83       	st	Z, r18
 6b2:	00 00       	nop
 6b4:	df 91       	pop	r29
 6b6:	cf 91       	pop	r28
 6b8:	08 95       	ret

000006ba <enableAudio>:
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
 6be:	cd b7       	in	r28, 0x3d	; 61
 6c0:	de b7       	in	r29, 0x3e	; 62
 6c2:	8b e2       	ldi	r24, 0x2B	; 43
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	2b e2       	ldi	r18, 0x2B	; 43
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	f9 01       	movw	r30, r18
 6cc:	20 81       	ld	r18, Z
 6ce:	2f 77       	andi	r18, 0x7F	; 127
 6d0:	fc 01       	movw	r30, r24
 6d2:	20 83       	st	Z, r18
 6d4:	8a e2       	ldi	r24, 0x2A	; 42
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	2a e2       	ldi	r18, 0x2A	; 42
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	f9 01       	movw	r30, r18
 6de:	20 81       	ld	r18, Z
 6e0:	27 60       	ori	r18, 0x07	; 7
 6e2:	fc 01       	movw	r30, r24
 6e4:	20 83       	st	Z, r18
 6e6:	00 00       	nop
 6e8:	df 91       	pop	r29
 6ea:	cf 91       	pop	r28
 6ec:	08 95       	ret

000006ee <incVolume>:
 6ee:	cf 93       	push	r28
 6f0:	df 93       	push	r29
 6f2:	00 d0       	rcall	.+0      	; 0x6f4 <incVolume+0x6>
 6f4:	cd b7       	in	r28, 0x3d	; 61
 6f6:	de b7       	in	r29, 0x3e	; 62
 6f8:	8a 83       	std	Y+2, r24	; 0x02
 6fa:	8b e2       	ldi	r24, 0x2B	; 43
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	2b e2       	ldi	r18, 0x2B	; 43
 700:	30 e0       	ldi	r19, 0x00	; 0
 702:	f9 01       	movw	r30, r18
 704:	20 81       	ld	r18, Z
 706:	20 64       	ori	r18, 0x40	; 64
 708:	fc 01       	movw	r30, r24
 70a:	20 83       	st	Z, r18
 70c:	19 82       	std	Y+1, r1	; 0x01
 70e:	15 c0       	rjmp	.+42     	; 0x73a <incVolume+0x4c>
 710:	8a e2       	ldi	r24, 0x2A	; 42
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	2a e2       	ldi	r18, 0x2A	; 42
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	f9 01       	movw	r30, r18
 71a:	20 81       	ld	r18, Z
 71c:	20 64       	ori	r18, 0x40	; 64
 71e:	fc 01       	movw	r30, r24
 720:	20 83       	st	Z, r18
 722:	8a e2       	ldi	r24, 0x2A	; 42
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	2a e2       	ldi	r18, 0x2A	; 42
 728:	30 e0       	ldi	r19, 0x00	; 0
 72a:	f9 01       	movw	r30, r18
 72c:	20 81       	ld	r18, Z
 72e:	2f 7b       	andi	r18, 0xBF	; 191
 730:	fc 01       	movw	r30, r24
 732:	20 83       	st	Z, r18
 734:	89 81       	ldd	r24, Y+1	; 0x01
 736:	8f 5f       	subi	r24, 0xFF	; 255
 738:	89 83       	std	Y+1, r24	; 0x01
 73a:	99 81       	ldd	r25, Y+1	; 0x01
 73c:	8a 81       	ldd	r24, Y+2	; 0x02
 73e:	98 17       	cp	r25, r24
 740:	38 f3       	brcs	.-50     	; 0x710 <incVolume+0x22>
 742:	00 00       	nop
 744:	0f 90       	pop	r0
 746:	0f 90       	pop	r0
 748:	df 91       	pop	r29
 74a:	cf 91       	pop	r28
 74c:	08 95       	ret

0000074e <decVolume>:
 74e:	cf 93       	push	r28
 750:	df 93       	push	r29
 752:	00 d0       	rcall	.+0      	; 0x754 <decVolume+0x6>
 754:	cd b7       	in	r28, 0x3d	; 61
 756:	de b7       	in	r29, 0x3e	; 62
 758:	8a 83       	std	Y+2, r24	; 0x02
 75a:	8b e2       	ldi	r24, 0x2B	; 43
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	2b e2       	ldi	r18, 0x2B	; 43
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	f9 01       	movw	r30, r18
 764:	20 81       	ld	r18, Z
 766:	2f 7b       	andi	r18, 0xBF	; 191
 768:	fc 01       	movw	r30, r24
 76a:	20 83       	st	Z, r18
 76c:	19 82       	std	Y+1, r1	; 0x01
 76e:	15 c0       	rjmp	.+42     	; 0x79a <decVolume+0x4c>
 770:	8a e2       	ldi	r24, 0x2A	; 42
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	2a e2       	ldi	r18, 0x2A	; 42
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	f9 01       	movw	r30, r18
 77a:	20 81       	ld	r18, Z
 77c:	20 64       	ori	r18, 0x40	; 64
 77e:	fc 01       	movw	r30, r24
 780:	20 83       	st	Z, r18
 782:	8a e2       	ldi	r24, 0x2A	; 42
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	2a e2       	ldi	r18, 0x2A	; 42
 788:	30 e0       	ldi	r19, 0x00	; 0
 78a:	f9 01       	movw	r30, r18
 78c:	20 81       	ld	r18, Z
 78e:	2f 7b       	andi	r18, 0xBF	; 191
 790:	fc 01       	movw	r30, r24
 792:	20 83       	st	Z, r18
 794:	89 81       	ldd	r24, Y+1	; 0x01
 796:	8f 5f       	subi	r24, 0xFF	; 255
 798:	89 83       	std	Y+1, r24	; 0x01
 79a:	99 81       	ldd	r25, Y+1	; 0x01
 79c:	8a 81       	ldd	r24, Y+2	; 0x02
 79e:	98 17       	cp	r25, r24
 7a0:	38 f3       	brcs	.-50     	; 0x770 <decVolume+0x22>
 7a2:	00 00       	nop
 7a4:	0f 90       	pop	r0
 7a6:	0f 90       	pop	r0
 7a8:	df 91       	pop	r29
 7aa:	cf 91       	pop	r28
 7ac:	08 95       	ret

000007ae <setVolume>:
 7ae:	cf 93       	push	r28
 7b0:	df 93       	push	r29
 7b2:	1f 92       	push	r1
 7b4:	cd b7       	in	r28, 0x3d	; 61
 7b6:	de b7       	in	r29, 0x3e	; 62
 7b8:	89 83       	std	Y+1, r24	; 0x01
 7ba:	89 81       	ldd	r24, Y+1	; 0x01
 7bc:	81 34       	cpi	r24, 0x41	; 65
 7be:	10 f0       	brcs	.+4      	; 0x7c4 <setVolume+0x16>
 7c0:	80 e4       	ldi	r24, 0x40	; 64
 7c2:	89 83       	std	Y+1, r24	; 0x01
 7c4:	80 e4       	ldi	r24, 0x40	; 64
 7c6:	0e 94 a7 03 	call	0x74e	; 0x74e <decVolume>
 7ca:	89 81       	ldd	r24, Y+1	; 0x01
 7cc:	0e 94 77 03 	call	0x6ee	; 0x6ee <incVolume>
 7d0:	00 00       	nop
 7d2:	0f 90       	pop	r0
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	08 95       	ret

000007da <initAudio>:
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	cd b7       	in	r28, 0x3d	; 61
 7e0:	de b7       	in	r29, 0x3e	; 62
 7e2:	0e 94 5d 03 	call	0x6ba	; 0x6ba <enableAudio>
 7e6:	80 e4       	ldi	r24, 0x40	; 64
 7e8:	0e 94 a7 03 	call	0x74e	; 0x74e <decVolume>
 7ec:	0e 94 43 03 	call	0x686	; 0x686 <standbyAudio>
 7f0:	00 00       	nop
 7f2:	df 91       	pop	r29
 7f4:	cf 91       	pop	r28
 7f6:	08 95       	ret

000007f8 <initPWM>:
 7f8:	8f 92       	push	r8
 7fa:	9f 92       	push	r9
 7fc:	af 92       	push	r10
 7fe:	bf 92       	push	r11
 800:	cf 92       	push	r12
 802:	df 92       	push	r13
 804:	ef 92       	push	r14
 806:	ff 92       	push	r15
 808:	0f 93       	push	r16
 80a:	1f 93       	push	r17
 80c:	cf 93       	push	r28
 80e:	df 93       	push	r29
 810:	1f 92       	push	r1
 812:	cd b7       	in	r28, 0x3d	; 61
 814:	de b7       	in	r29, 0x3e	; 62
 816:	89 83       	std	Y+1, r24	; 0x01
 818:	89 81       	ldd	r24, Y+1	; 0x01
 81a:	85 36       	cpi	r24, 0x65	; 101
 81c:	10 f0       	brcs	.+4      	; 0x822 <initPWM+0x2a>
 81e:	84 e6       	ldi	r24, 0x64	; 100
 820:	89 83       	std	Y+1, r24	; 0x01
 822:	80 e8       	ldi	r24, 0x80	; 128
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	22 e2       	ldi	r18, 0x22	; 34
 828:	fc 01       	movw	r30, r24
 82a:	20 83       	st	Z, r18
 82c:	81 e8       	ldi	r24, 0x81	; 129
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	28 e0       	ldi	r18, 0x08	; 8
 832:	fc 01       	movw	r30, r24
 834:	20 83       	st	Z, r18
 836:	84 e8       	ldi	r24, 0x84	; 132
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	fc 01       	movw	r30, r24
 83c:	11 82       	std	Z+1, r1	; 0x01
 83e:	10 82       	st	Z, r1
 840:	0f 2e       	mov	r0, r31
 842:	fa e8       	ldi	r31, 0x8A	; 138
 844:	8f 2e       	mov	r8, r31
 846:	91 2c       	mov	r9, r1
 848:	f0 2d       	mov	r31, r0
 84a:	89 81       	ldd	r24, Y+1	; 0x01
 84c:	88 2f       	mov	r24, r24
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	a0 e0       	ldi	r26, 0x00	; 0
 852:	b0 e0       	ldi	r27, 0x00	; 0
 854:	1f 92       	push	r1
 856:	1f 92       	push	r1
 858:	21 e0       	ldi	r18, 0x01	; 1
 85a:	2f 93       	push	r18
 85c:	2f ef       	ldi	r18, 0xFF	; 255
 85e:	2f 93       	push	r18
 860:	a1 2c       	mov	r10, r1
 862:	b1 2c       	mov	r11, r1
 864:	65 01       	movw	r12, r10
 866:	14 e6       	ldi	r17, 0x64	; 100
 868:	e1 2e       	mov	r14, r17
 86a:	f1 2c       	mov	r15, r1
 86c:	00 e0       	ldi	r16, 0x00	; 0
 86e:	10 e0       	ldi	r17, 0x00	; 0
 870:	20 e0       	ldi	r18, 0x00	; 0
 872:	30 e0       	ldi	r19, 0x00	; 0
 874:	a9 01       	movw	r20, r18
 876:	bc 01       	movw	r22, r24
 878:	cd 01       	movw	r24, r26
 87a:	0e 94 14 05 	call	0xa28	; 0xa28 <Map>
 87e:	0f 90       	pop	r0
 880:	0f 90       	pop	r0
 882:	0f 90       	pop	r0
 884:	0f 90       	pop	r0
 886:	dc 01       	movw	r26, r24
 888:	cb 01       	movw	r24, r22
 88a:	f4 01       	movw	r30, r8
 88c:	91 83       	std	Z+1, r25	; 0x01
 88e:	80 83       	st	Z, r24
 890:	8f e6       	ldi	r24, 0x6F	; 111
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	fc 01       	movw	r30, r24
 896:	10 82       	st	Z, r1
 898:	00 00       	nop
 89a:	0f 90       	pop	r0
 89c:	df 91       	pop	r29
 89e:	cf 91       	pop	r28
 8a0:	1f 91       	pop	r17
 8a2:	0f 91       	pop	r16
 8a4:	ff 90       	pop	r15
 8a6:	ef 90       	pop	r14
 8a8:	df 90       	pop	r13
 8aa:	cf 90       	pop	r12
 8ac:	bf 90       	pop	r11
 8ae:	af 90       	pop	r10
 8b0:	9f 90       	pop	r9
 8b2:	8f 90       	pop	r8
 8b4:	08 95       	ret

000008b6 <startPWM>:
 8b6:	cf 93       	push	r28
 8b8:	df 93       	push	r29
 8ba:	cd b7       	in	r28, 0x3d	; 61
 8bc:	de b7       	in	r29, 0x3e	; 62
 8be:	81 e8       	ldi	r24, 0x81	; 129
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	21 e8       	ldi	r18, 0x81	; 129
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	f9 01       	movw	r30, r18
 8c8:	20 81       	ld	r18, Z
 8ca:	21 60       	ori	r18, 0x01	; 1
 8cc:	fc 01       	movw	r30, r24
 8ce:	20 83       	st	Z, r18
 8d0:	00 00       	nop
 8d2:	df 91       	pop	r29
 8d4:	cf 91       	pop	r28
 8d6:	08 95       	ret

000008d8 <setDuty>:
 8d8:	8f 92       	push	r8
 8da:	9f 92       	push	r9
 8dc:	af 92       	push	r10
 8de:	bf 92       	push	r11
 8e0:	cf 92       	push	r12
 8e2:	df 92       	push	r13
 8e4:	ef 92       	push	r14
 8e6:	ff 92       	push	r15
 8e8:	0f 93       	push	r16
 8ea:	1f 93       	push	r17
 8ec:	cf 93       	push	r28
 8ee:	df 93       	push	r29
 8f0:	1f 92       	push	r1
 8f2:	cd b7       	in	r28, 0x3d	; 61
 8f4:	de b7       	in	r29, 0x3e	; 62
 8f6:	89 83       	std	Y+1, r24	; 0x01
 8f8:	89 81       	ldd	r24, Y+1	; 0x01
 8fa:	85 36       	cpi	r24, 0x65	; 101
 8fc:	10 f0       	brcs	.+4      	; 0x902 <__stack+0x3>
 8fe:	84 e6       	ldi	r24, 0x64	; 100
 900:	89 83       	std	Y+1, r24	; 0x01
 902:	0f 2e       	mov	r0, r31
 904:	fa e8       	ldi	r31, 0x8A	; 138
 906:	8f 2e       	mov	r8, r31
 908:	91 2c       	mov	r9, r1
 90a:	f0 2d       	mov	r31, r0
 90c:	89 81       	ldd	r24, Y+1	; 0x01
 90e:	88 2f       	mov	r24, r24
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	a0 e0       	ldi	r26, 0x00	; 0
 914:	b0 e0       	ldi	r27, 0x00	; 0
 916:	1f 92       	push	r1
 918:	1f 92       	push	r1
 91a:	21 e0       	ldi	r18, 0x01	; 1
 91c:	2f 93       	push	r18
 91e:	2f ef       	ldi	r18, 0xFF	; 255
 920:	2f 93       	push	r18
 922:	a1 2c       	mov	r10, r1
 924:	b1 2c       	mov	r11, r1
 926:	65 01       	movw	r12, r10
 928:	14 e6       	ldi	r17, 0x64	; 100
 92a:	e1 2e       	mov	r14, r17
 92c:	f1 2c       	mov	r15, r1
 92e:	00 e0       	ldi	r16, 0x00	; 0
 930:	10 e0       	ldi	r17, 0x00	; 0
 932:	20 e0       	ldi	r18, 0x00	; 0
 934:	30 e0       	ldi	r19, 0x00	; 0
 936:	a9 01       	movw	r20, r18
 938:	bc 01       	movw	r22, r24
 93a:	cd 01       	movw	r24, r26
 93c:	0e 94 14 05 	call	0xa28	; 0xa28 <Map>
 940:	0f 90       	pop	r0
 942:	0f 90       	pop	r0
 944:	0f 90       	pop	r0
 946:	0f 90       	pop	r0
 948:	dc 01       	movw	r26, r24
 94a:	cb 01       	movw	r24, r22
 94c:	f4 01       	movw	r30, r8
 94e:	91 83       	std	Z+1, r25	; 0x01
 950:	80 83       	st	Z, r24
 952:	00 00       	nop
 954:	0f 90       	pop	r0
 956:	df 91       	pop	r29
 958:	cf 91       	pop	r28
 95a:	1f 91       	pop	r17
 95c:	0f 91       	pop	r16
 95e:	ff 90       	pop	r15
 960:	ef 90       	pop	r14
 962:	df 90       	pop	r13
 964:	cf 90       	pop	r12
 966:	bf 90       	pop	r11
 968:	af 90       	pop	r10
 96a:	9f 90       	pop	r9
 96c:	8f 90       	pop	r8
 96e:	08 95       	ret

00000970 <wait_1ms>:
 *
 * @param [in] uiFactor: 1ms multiplier
 * @return no return value
 *****************************************************************************/
void wait_1ms(uint16_t uiFactor)
{
 970:	cf 93       	push	r28
 972:	df 93       	push	r29
 974:	00 d0       	rcall	.+0      	; 0x976 <wait_1ms+0x6>
 976:	00 d0       	rcall	.+0      	; 0x978 <wait_1ms+0x8>
 978:	cd b7       	in	r28, 0x3d	; 61
 97a:	de b7       	in	r29, 0x3e	; 62
 97c:	9c 83       	std	Y+4, r25	; 0x04
 97e:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t i;
	TCCR0A = (1<<WGM01);	// mode: CTC
 980:	84 e4       	ldi	r24, 0x44	; 68
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	22 e0       	ldi	r18, 0x02	; 2
 986:	fc 01       	movw	r30, r24
 988:	20 83       	st	Z, r18
	TCCR0B = 0;				// mode: CTC
 98a:	85 e4       	ldi	r24, 0x45	; 69
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	fc 01       	movw	r30, r24
 990:	10 82       	st	Z, r1
	TIFR0 =  (1<<OCF0A);	// only OCFA flag needs to be cleared
 992:	85 e3       	ldi	r24, 0x35	; 53
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	22 e0       	ldi	r18, 0x02	; 2
 998:	fc 01       	movw	r30, r24
 99a:	20 83       	st	Z, r18
	TIMSK0 = 0;				// no interrupts
 99c:	8e e6       	ldi	r24, 0x6E	; 110
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	fc 01       	movw	r30, r24
 9a2:	10 82       	st	Z, r1
	TCNT0 = 0;
 9a4:	86 e4       	ldi	r24, 0x46	; 70
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	fc 01       	movw	r30, r24
 9aa:	10 82       	st	Z, r1
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
 9ac:	87 e4       	ldi	r24, 0x47	; 71
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	2d e4       	ldi	r18, 0x4D	; 77
 9b2:	fc 01       	movw	r30, r24
 9b4:	20 83       	st	Z, r18
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
 9b6:	85 e4       	ldi	r24, 0x45	; 69
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	25 e4       	ldi	r18, 0x45	; 69
 9bc:	30 e0       	ldi	r19, 0x00	; 0
 9be:	f9 01       	movw	r30, r18
 9c0:	20 81       	ld	r18, Z
 9c2:	24 60       	ori	r18, 0x04	; 4
 9c4:	fc 01       	movw	r30, r24
 9c6:	20 83       	st	Z, r18
	
	for(i=0;i<uiFactor;i++)
 9c8:	1a 82       	std	Y+2, r1	; 0x02
 9ca:	19 82       	std	Y+1, r1	; 0x01
 9cc:	15 c0       	rjmp	.+42     	; 0x9f8 <wait_1ms+0x88>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
 9ce:	00 00       	nop
 9d0:	85 e3       	ldi	r24, 0x35	; 53
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	fc 01       	movw	r30, r24
 9d6:	80 81       	ld	r24, Z
 9d8:	88 2f       	mov	r24, r24
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	82 70       	andi	r24, 0x02	; 2
 9de:	99 27       	eor	r25, r25
 9e0:	89 2b       	or	r24, r25
 9e2:	b1 f3       	breq	.-20     	; 0x9d0 <wait_1ms+0x60>
		TIFR0 =  (1<<OCF0A);		// clear flag
 9e4:	85 e3       	ldi	r24, 0x35	; 53
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	22 e0       	ldi	r18, 0x02	; 2
 9ea:	fc 01       	movw	r30, r24
 9ec:	20 83       	st	Z, r18
	TCNT0 = 0;
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
	
	for(i=0;i<uiFactor;i++)
 9ee:	89 81       	ldd	r24, Y+1	; 0x01
 9f0:	9a 81       	ldd	r25, Y+2	; 0x02
 9f2:	01 96       	adiw	r24, 0x01	; 1
 9f4:	9a 83       	std	Y+2, r25	; 0x02
 9f6:	89 83       	std	Y+1, r24	; 0x01
 9f8:	29 81       	ldd	r18, Y+1	; 0x01
 9fa:	3a 81       	ldd	r19, Y+2	; 0x02
 9fc:	8b 81       	ldd	r24, Y+3	; 0x03
 9fe:	9c 81       	ldd	r25, Y+4	; 0x04
 a00:	28 17       	cp	r18, r24
 a02:	39 07       	cpc	r19, r25
 a04:	20 f3       	brcs	.-56     	; 0x9ce <wait_1ms+0x5e>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
		TIFR0 =  (1<<OCF0A);		// clear flag
	}
	TCCR0B &= ~(0x07);	// set prescaler to 0 (stop timer)
 a06:	85 e4       	ldi	r24, 0x45	; 69
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	25 e4       	ldi	r18, 0x45	; 69
 a0c:	30 e0       	ldi	r19, 0x00	; 0
 a0e:	f9 01       	movw	r30, r18
 a10:	20 81       	ld	r18, Z
 a12:	28 7f       	andi	r18, 0xF8	; 248
 a14:	fc 01       	movw	r30, r24
 a16:	20 83       	st	Z, r18
}
 a18:	00 00       	nop
 a1a:	0f 90       	pop	r0
 a1c:	0f 90       	pop	r0
 a1e:	0f 90       	pop	r0
 a20:	0f 90       	pop	r0
 a22:	df 91       	pop	r29
 a24:	cf 91       	pop	r28
 a26:	08 95       	ret

00000a28 <Map>:
 * @param [in] OutMin: minimal value of output range
 * @param [in] OutMax: maximal value of output range
 * @return data in new number range
 *****************************************************************************/
int32_t Map(int32_t lData, int32_t InMin, int32_t InMax, int32_t OutMin, int32_t OutMax)
{
 a28:	af 92       	push	r10
 a2a:	bf 92       	push	r11
 a2c:	cf 92       	push	r12
 a2e:	df 92       	push	r13
 a30:	ef 92       	push	r14
 a32:	ff 92       	push	r15
 a34:	0f 93       	push	r16
 a36:	1f 93       	push	r17
 a38:	cf 93       	push	r28
 a3a:	df 93       	push	r29
 a3c:	cd b7       	in	r28, 0x3d	; 61
 a3e:	de b7       	in	r29, 0x3e	; 62
 a40:	60 97       	sbiw	r28, 0x10	; 16
 a42:	0f b6       	in	r0, 0x3f	; 63
 a44:	f8 94       	cli
 a46:	de bf       	out	0x3e, r29	; 62
 a48:	0f be       	out	0x3f, r0	; 63
 a4a:	cd bf       	out	0x3d, r28	; 61
 a4c:	69 83       	std	Y+1, r22	; 0x01
 a4e:	7a 83       	std	Y+2, r23	; 0x02
 a50:	8b 83       	std	Y+3, r24	; 0x03
 a52:	9c 83       	std	Y+4, r25	; 0x04
 a54:	2d 83       	std	Y+5, r18	; 0x05
 a56:	3e 83       	std	Y+6, r19	; 0x06
 a58:	4f 83       	std	Y+7, r20	; 0x07
 a5a:	58 87       	std	Y+8, r21	; 0x08
 a5c:	e9 86       	std	Y+9, r14	; 0x09
 a5e:	fa 86       	std	Y+10, r15	; 0x0a
 a60:	0b 87       	std	Y+11, r16	; 0x0b
 a62:	1c 87       	std	Y+12, r17	; 0x0c
 a64:	ad 86       	std	Y+13, r10	; 0x0d
 a66:	be 86       	std	Y+14, r11	; 0x0e
 a68:	cf 86       	std	Y+15, r12	; 0x0f
 a6a:	d8 8a       	std	Y+16, r13	; 0x10
	return((lData-InMin)*(OutMax-OutMin)/(InMax-InMin)+OutMin);
 a6c:	29 81       	ldd	r18, Y+1	; 0x01
 a6e:	3a 81       	ldd	r19, Y+2	; 0x02
 a70:	4b 81       	ldd	r20, Y+3	; 0x03
 a72:	5c 81       	ldd	r21, Y+4	; 0x04
 a74:	8d 81       	ldd	r24, Y+5	; 0x05
 a76:	9e 81       	ldd	r25, Y+6	; 0x06
 a78:	af 81       	ldd	r26, Y+7	; 0x07
 a7a:	b8 85       	ldd	r27, Y+8	; 0x08
 a7c:	79 01       	movw	r14, r18
 a7e:	8a 01       	movw	r16, r20
 a80:	e8 1a       	sub	r14, r24
 a82:	f9 0a       	sbc	r15, r25
 a84:	0a 0b       	sbc	r16, r26
 a86:	1b 0b       	sbc	r17, r27
 a88:	2d 8d       	ldd	r18, Y+29	; 0x1d
 a8a:	3e 8d       	ldd	r19, Y+30	; 0x1e
 a8c:	4f 8d       	ldd	r20, Y+31	; 0x1f
 a8e:	58 a1       	ldd	r21, Y+32	; 0x20
 a90:	8d 85       	ldd	r24, Y+13	; 0x0d
 a92:	9e 85       	ldd	r25, Y+14	; 0x0e
 a94:	af 85       	ldd	r26, Y+15	; 0x0f
 a96:	b8 89       	ldd	r27, Y+16	; 0x10
 a98:	59 01       	movw	r10, r18
 a9a:	6a 01       	movw	r12, r20
 a9c:	a8 1a       	sub	r10, r24
 a9e:	b9 0a       	sbc	r11, r25
 aa0:	ca 0a       	sbc	r12, r26
 aa2:	db 0a       	sbc	r13, r27
 aa4:	d6 01       	movw	r26, r12
 aa6:	c5 01       	movw	r24, r10
 aa8:	a8 01       	movw	r20, r16
 aaa:	97 01       	movw	r18, r14
 aac:	bc 01       	movw	r22, r24
 aae:	cd 01       	movw	r24, r26
 ab0:	0e 94 d0 05 	call	0xba0	; 0xba0 <__mulsi3>
 ab4:	7b 01       	movw	r14, r22
 ab6:	8c 01       	movw	r16, r24
 ab8:	29 85       	ldd	r18, Y+9	; 0x09
 aba:	3a 85       	ldd	r19, Y+10	; 0x0a
 abc:	4b 85       	ldd	r20, Y+11	; 0x0b
 abe:	5c 85       	ldd	r21, Y+12	; 0x0c
 ac0:	8d 81       	ldd	r24, Y+5	; 0x05
 ac2:	9e 81       	ldd	r25, Y+6	; 0x06
 ac4:	af 81       	ldd	r26, Y+7	; 0x07
 ac6:	b8 85       	ldd	r27, Y+8	; 0x08
 ac8:	28 1b       	sub	r18, r24
 aca:	39 0b       	sbc	r19, r25
 acc:	4a 0b       	sbc	r20, r26
 ace:	5b 0b       	sbc	r21, r27
 ad0:	c8 01       	movw	r24, r16
 ad2:	b7 01       	movw	r22, r14
 ad4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__divmodsi4>
 ad8:	da 01       	movw	r26, r20
 ada:	c9 01       	movw	r24, r18
 adc:	9c 01       	movw	r18, r24
 ade:	ad 01       	movw	r20, r26
 ae0:	8d 85       	ldd	r24, Y+13	; 0x0d
 ae2:	9e 85       	ldd	r25, Y+14	; 0x0e
 ae4:	af 85       	ldd	r26, Y+15	; 0x0f
 ae6:	b8 89       	ldd	r27, Y+16	; 0x10
 ae8:	82 0f       	add	r24, r18
 aea:	93 1f       	adc	r25, r19
 aec:	a4 1f       	adc	r26, r20
 aee:	b5 1f       	adc	r27, r21
}
 af0:	bc 01       	movw	r22, r24
 af2:	cd 01       	movw	r24, r26
 af4:	60 96       	adiw	r28, 0x10	; 16
 af6:	0f b6       	in	r0, 0x3f	; 63
 af8:	f8 94       	cli
 afa:	de bf       	out	0x3e, r29	; 62
 afc:	0f be       	out	0x3f, r0	; 63
 afe:	cd bf       	out	0x3d, r28	; 61
 b00:	df 91       	pop	r29
 b02:	cf 91       	pop	r28
 b04:	1f 91       	pop	r17
 b06:	0f 91       	pop	r16
 b08:	ff 90       	pop	r15
 b0a:	ef 90       	pop	r14
 b0c:	df 90       	pop	r13
 b0e:	cf 90       	pop	r12
 b10:	bf 90       	pop	r11
 b12:	af 90       	pop	r10
 b14:	08 95       	ret

00000b16 <CRC8>:

uint8_t CRC8(uint8_t* au8Data, uint8_t u8Length)
{
 b16:	cf 93       	push	r28
 b18:	df 93       	push	r29
 b1a:	cd b7       	in	r28, 0x3d	; 61
 b1c:	de b7       	in	r29, 0x3e	; 62
 b1e:	28 97       	sbiw	r28, 0x08	; 8
 b20:	0f b6       	in	r0, 0x3f	; 63
 b22:	f8 94       	cli
 b24:	de bf       	out	0x3e, r29	; 62
 b26:	0f be       	out	0x3f, r0	; 63
 b28:	cd bf       	out	0x3d, r28	; 61
 b2a:	9f 83       	std	Y+7, r25	; 0x07
 b2c:	8e 83       	std	Y+6, r24	; 0x06
 b2e:	68 87       	std	Y+8, r22	; 0x08
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;
 b30:	19 82       	std	Y+1, r1	; 0x01

	for(i=0;i<u8Length;i++)
 b32:	1a 82       	std	Y+2, r1	; 0x02
 b34:	27 c0       	rjmp	.+78     	; 0xb84 <CRC8+0x6e>
	{
		u8InByte = au8Data[i];
 b36:	8a 81       	ldd	r24, Y+2	; 0x02
 b38:	88 2f       	mov	r24, r24
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	2e 81       	ldd	r18, Y+6	; 0x06
 b3e:	3f 81       	ldd	r19, Y+7	; 0x07
 b40:	82 0f       	add	r24, r18
 b42:	93 1f       	adc	r25, r19
 b44:	fc 01       	movw	r30, r24
 b46:	80 81       	ld	r24, Z
 b48:	8c 83       	std	Y+4, r24	; 0x04
		for(j=0;j<8;j++)
 b4a:	1b 82       	std	Y+3, r1	; 0x03
 b4c:	15 c0       	rjmp	.+42     	; 0xb78 <CRC8+0x62>
		{
			u8Temp = (u8CRC^u8InByte)&0x80;
 b4e:	99 81       	ldd	r25, Y+1	; 0x01
 b50:	8c 81       	ldd	r24, Y+4	; 0x04
 b52:	89 27       	eor	r24, r25
 b54:	80 78       	andi	r24, 0x80	; 128
 b56:	8d 83       	std	Y+5, r24	; 0x05
			u8CRC <<= 1;
 b58:	89 81       	ldd	r24, Y+1	; 0x01
 b5a:	88 0f       	add	r24, r24
 b5c:	89 83       	std	Y+1, r24	; 0x01
			if(u8Temp!=0)
 b5e:	8d 81       	ldd	r24, Y+5	; 0x05
 b60:	88 23       	and	r24, r24
 b62:	21 f0       	breq	.+8      	; 0xb6c <CRC8+0x56>
			{
				u8CRC ^= 0x07;
 b64:	99 81       	ldd	r25, Y+1	; 0x01
 b66:	87 e0       	ldi	r24, 0x07	; 7
 b68:	89 27       	eor	r24, r25
 b6a:	89 83       	std	Y+1, r24	; 0x01
			}
			u8InByte<<=1;
 b6c:	8c 81       	ldd	r24, Y+4	; 0x04
 b6e:	88 0f       	add	r24, r24
 b70:	8c 83       	std	Y+4, r24	; 0x04
	u8CRC = 0;

	for(i=0;i<u8Length;i++)
	{
		u8InByte = au8Data[i];
		for(j=0;j<8;j++)
 b72:	8b 81       	ldd	r24, Y+3	; 0x03
 b74:	8f 5f       	subi	r24, 0xFF	; 255
 b76:	8b 83       	std	Y+3, r24	; 0x03
 b78:	8b 81       	ldd	r24, Y+3	; 0x03
 b7a:	88 30       	cpi	r24, 0x08	; 8
 b7c:	40 f3       	brcs	.-48     	; 0xb4e <CRC8+0x38>
{
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;

	for(i=0;i<u8Length;i++)
 b7e:	8a 81       	ldd	r24, Y+2	; 0x02
 b80:	8f 5f       	subi	r24, 0xFF	; 255
 b82:	8a 83       	std	Y+2, r24	; 0x02
 b84:	9a 81       	ldd	r25, Y+2	; 0x02
 b86:	88 85       	ldd	r24, Y+8	; 0x08
 b88:	98 17       	cp	r25, r24
 b8a:	a8 f2       	brcs	.-86     	; 0xb36 <CRC8+0x20>
			}
			u8InByte<<=1;
		}
	}

	return u8CRC;
 b8c:	89 81       	ldd	r24, Y+1	; 0x01
}
 b8e:	28 96       	adiw	r28, 0x08	; 8
 b90:	0f b6       	in	r0, 0x3f	; 63
 b92:	f8 94       	cli
 b94:	de bf       	out	0x3e, r29	; 62
 b96:	0f be       	out	0x3f, r0	; 63
 b98:	cd bf       	out	0x3d, r28	; 61
 b9a:	df 91       	pop	r29
 b9c:	cf 91       	pop	r28
 b9e:	08 95       	ret

00000ba0 <__mulsi3>:
 ba0:	db 01       	movw	r26, r22
 ba2:	8f 93       	push	r24
 ba4:	9f 93       	push	r25
 ba6:	0e 94 05 06 	call	0xc0a	; 0xc0a <__muluhisi3>
 baa:	bf 91       	pop	r27
 bac:	af 91       	pop	r26
 bae:	a2 9f       	mul	r26, r18
 bb0:	80 0d       	add	r24, r0
 bb2:	91 1d       	adc	r25, r1
 bb4:	a3 9f       	mul	r26, r19
 bb6:	90 0d       	add	r25, r0
 bb8:	b2 9f       	mul	r27, r18
 bba:	90 0d       	add	r25, r0
 bbc:	11 24       	eor	r1, r1
 bbe:	08 95       	ret

00000bc0 <__divmodsi4>:
 bc0:	05 2e       	mov	r0, r21
 bc2:	97 fb       	bst	r25, 7
 bc4:	1e f4       	brtc	.+6      	; 0xbcc <__divmodsi4+0xc>
 bc6:	00 94       	com	r0
 bc8:	0e 94 f7 05 	call	0xbee	; 0xbee <__negsi2>
 bcc:	57 fd       	sbrc	r21, 7
 bce:	07 d0       	rcall	.+14     	; 0xbde <__divmodsi4_neg2>
 bd0:	0e 94 10 06 	call	0xc20	; 0xc20 <__udivmodsi4>
 bd4:	07 fc       	sbrc	r0, 7
 bd6:	03 d0       	rcall	.+6      	; 0xbde <__divmodsi4_neg2>
 bd8:	4e f4       	brtc	.+18     	; 0xbec <__divmodsi4_exit>
 bda:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__negsi2>

00000bde <__divmodsi4_neg2>:
 bde:	50 95       	com	r21
 be0:	40 95       	com	r20
 be2:	30 95       	com	r19
 be4:	21 95       	neg	r18
 be6:	3f 4f       	sbci	r19, 0xFF	; 255
 be8:	4f 4f       	sbci	r20, 0xFF	; 255
 bea:	5f 4f       	sbci	r21, 0xFF	; 255

00000bec <__divmodsi4_exit>:
 bec:	08 95       	ret

00000bee <__negsi2>:
 bee:	90 95       	com	r25
 bf0:	80 95       	com	r24
 bf2:	70 95       	com	r23
 bf4:	61 95       	neg	r22
 bf6:	7f 4f       	sbci	r23, 0xFF	; 255
 bf8:	8f 4f       	sbci	r24, 0xFF	; 255
 bfa:	9f 4f       	sbci	r25, 0xFF	; 255
 bfc:	08 95       	ret

00000bfe <__tablejump2__>:
 bfe:	ee 0f       	add	r30, r30
 c00:	ff 1f       	adc	r31, r31
 c02:	05 90       	lpm	r0, Z+
 c04:	f4 91       	lpm	r31, Z
 c06:	e0 2d       	mov	r30, r0
 c08:	09 94       	ijmp

00000c0a <__muluhisi3>:
 c0a:	0e 94 32 06 	call	0xc64	; 0xc64 <__umulhisi3>
 c0e:	a5 9f       	mul	r26, r21
 c10:	90 0d       	add	r25, r0
 c12:	b4 9f       	mul	r27, r20
 c14:	90 0d       	add	r25, r0
 c16:	a4 9f       	mul	r26, r20
 c18:	80 0d       	add	r24, r0
 c1a:	91 1d       	adc	r25, r1
 c1c:	11 24       	eor	r1, r1
 c1e:	08 95       	ret

00000c20 <__udivmodsi4>:
 c20:	a1 e2       	ldi	r26, 0x21	; 33
 c22:	1a 2e       	mov	r1, r26
 c24:	aa 1b       	sub	r26, r26
 c26:	bb 1b       	sub	r27, r27
 c28:	fd 01       	movw	r30, r26
 c2a:	0d c0       	rjmp	.+26     	; 0xc46 <__udivmodsi4_ep>

00000c2c <__udivmodsi4_loop>:
 c2c:	aa 1f       	adc	r26, r26
 c2e:	bb 1f       	adc	r27, r27
 c30:	ee 1f       	adc	r30, r30
 c32:	ff 1f       	adc	r31, r31
 c34:	a2 17       	cp	r26, r18
 c36:	b3 07       	cpc	r27, r19
 c38:	e4 07       	cpc	r30, r20
 c3a:	f5 07       	cpc	r31, r21
 c3c:	20 f0       	brcs	.+8      	; 0xc46 <__udivmodsi4_ep>
 c3e:	a2 1b       	sub	r26, r18
 c40:	b3 0b       	sbc	r27, r19
 c42:	e4 0b       	sbc	r30, r20
 c44:	f5 0b       	sbc	r31, r21

00000c46 <__udivmodsi4_ep>:
 c46:	66 1f       	adc	r22, r22
 c48:	77 1f       	adc	r23, r23
 c4a:	88 1f       	adc	r24, r24
 c4c:	99 1f       	adc	r25, r25
 c4e:	1a 94       	dec	r1
 c50:	69 f7       	brne	.-38     	; 0xc2c <__udivmodsi4_loop>
 c52:	60 95       	com	r22
 c54:	70 95       	com	r23
 c56:	80 95       	com	r24
 c58:	90 95       	com	r25
 c5a:	9b 01       	movw	r18, r22
 c5c:	ac 01       	movw	r20, r24
 c5e:	bd 01       	movw	r22, r26
 c60:	cf 01       	movw	r24, r30
 c62:	08 95       	ret

00000c64 <__umulhisi3>:
 c64:	a2 9f       	mul	r26, r18
 c66:	b0 01       	movw	r22, r0
 c68:	b3 9f       	mul	r27, r19
 c6a:	c0 01       	movw	r24, r0
 c6c:	a3 9f       	mul	r26, r19
 c6e:	70 0d       	add	r23, r0
 c70:	81 1d       	adc	r24, r1
 c72:	11 24       	eor	r1, r1
 c74:	91 1d       	adc	r25, r1
 c76:	b2 9f       	mul	r27, r18
 c78:	70 0d       	add	r23, r0
 c7a:	81 1d       	adc	r24, r1
 c7c:	11 24       	eor	r1, r1
 c7e:	91 1d       	adc	r25, r1
 c80:	08 95       	ret

00000c82 <_exit>:
 c82:	f8 94       	cli

00000c84 <__stop_program>:
 c84:	ff cf       	rjmp	.-2      	; 0xc84 <__stop_program>
