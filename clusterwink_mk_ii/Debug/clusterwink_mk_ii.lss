
clusterwink_mk_ii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  0000231c  000023b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000231c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ef  0080013e  0080013e  000023ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002420  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013f6  00000000  00000000  000025f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b31  00000000  00000000  000039ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014e1  00000000  00000000  0000451f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000071c  00000000  00000000  00005a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000943  00000000  00000000  0000611c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ef7  00000000  00000000  00006a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00007956  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 77 00 	jmp	0xee	; 0xee <__ctors_end>
       4:	0c 94 49 02 	jmp	0x492	; 0x492 <__vector_1>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__vector_5>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__vector_9>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 77 05 	jmp	0xaee	; 0xaee <__vector_19>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	ae 05       	cpc	r26, r14
      7e:	c7 05       	cpc	r28, r7
      80:	e0 05       	cpc	r30, r0
      82:	9a 06       	cpc	r9, r26
      84:	b5 06       	cpc	r11, r21
      86:	b5 06       	cpc	r11, r21
      88:	b5 06       	cpc	r11, r21
      8a:	2a 07       	cpc	r18, r26
      8c:	37 07       	cpc	r19, r23
      8e:	44 07       	cpc	r20, r20
      90:	5f 07       	cpc	r21, r31
      92:	62 07       	cpc	r22, r18
      94:	02 09       	sbc	r16, r2
      96:	02 09       	sbc	r16, r2
      98:	02 09       	sbc	r16, r2
      9a:	02 09       	sbc	r16, r2
      9c:	02 09       	sbc	r16, r2
      9e:	02 09       	sbc	r16, r2
      a0:	02 09       	sbc	r16, r2
      a2:	02 09       	sbc	r16, r2
      a4:	02 09       	sbc	r16, r2
      a6:	02 09       	sbc	r16, r2
      a8:	02 09       	sbc	r16, r2
      aa:	4b 08       	sbc	r4, r11
      ac:	58 08       	sbc	r5, r8
      ae:	65 08       	sbc	r6, r5
      b0:	02 09       	sbc	r16, r2
      b2:	02 09       	sbc	r16, r2
      b4:	02 09       	sbc	r16, r2
      b6:	02 09       	sbc	r16, r2
      b8:	02 09       	sbc	r16, r2
      ba:	02 09       	sbc	r16, r2
      bc:	02 09       	sbc	r16, r2
      be:	02 09       	sbc	r16, r2
      c0:	02 09       	sbc	r16, r2
      c2:	02 09       	sbc	r16, r2
      c4:	02 09       	sbc	r16, r2
      c6:	02 09       	sbc	r16, r2
      c8:	02 09       	sbc	r16, r2
      ca:	6f 08       	sbc	r6, r15
      cc:	7a 08       	sbc	r7, r10
      ce:	02 09       	sbc	r16, r2
      d0:	02 09       	sbc	r16, r2
      d2:	02 09       	sbc	r16, r2
      d4:	02 09       	sbc	r16, r2
      d6:	02 09       	sbc	r16, r2
      d8:	02 09       	sbc	r16, r2
      da:	02 09       	sbc	r16, r2
      dc:	02 09       	sbc	r16, r2
      de:	02 09       	sbc	r16, r2
      e0:	02 09       	sbc	r16, r2
      e2:	02 09       	sbc	r16, r2
      e4:	02 09       	sbc	r16, r2
      e6:	02 09       	sbc	r16, r2
      e8:	02 09       	sbc	r16, r2
      ea:	9d 08       	sbc	r9, r13
      ec:	a8 08       	sbc	r10, r8

000000ee <__ctors_end>:
      ee:	11 24       	eor	r1, r1
      f0:	1f be       	out	0x3f, r1	; 63
      f2:	cf ef       	ldi	r28, 0xFF	; 255
      f4:	d8 e0       	ldi	r29, 0x08	; 8
      f6:	de bf       	out	0x3e, r29	; 62
      f8:	cd bf       	out	0x3d, r28	; 61

000000fa <__do_copy_data>:
      fa:	11 e0       	ldi	r17, 0x01	; 1
      fc:	a0 e0       	ldi	r26, 0x00	; 0
      fe:	b1 e0       	ldi	r27, 0x01	; 1
     100:	ec e1       	ldi	r30, 0x1C	; 28
     102:	f3 e2       	ldi	r31, 0x23	; 35
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x10>
     106:	05 90       	lpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	ae 33       	cpi	r26, 0x3E	; 62
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0xc>

00000110 <__do_clear_bss>:
     110:	22 e0       	ldi	r18, 0x02	; 2
     112:	ae e3       	ldi	r26, 0x3E	; 62
     114:	b1 e0       	ldi	r27, 0x01	; 1
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	ad 32       	cpi	r26, 0x2D	; 45
     11c:	b2 07       	cpc	r27, r18
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 1f 09 	call	0x123e	; 0x123e <main>
     124:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
    cli();
     134:	f8 94       	cli
    return 1;
     136:	81 e0       	ldi	r24, 0x01	; 1
}
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret

0000013e <__iRestore>:
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	00 d0       	rcall	.+0      	; 0x144 <__iRestore+0x6>
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
     148:	9a 83       	std	Y+2, r25	; 0x02
     14a:	89 83       	std	Y+1, r24	; 0x01
    SREG = *__s;
     14c:	8f e5       	ldi	r24, 0x5F	; 95
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	29 81       	ldd	r18, Y+1	; 0x01
     152:	3a 81       	ldd	r19, Y+2	; 0x02
     154:	f9 01       	movw	r30, r18
     156:	20 81       	ld	r18, Z
     158:	fc 01       	movw	r30, r24
     15a:	20 83       	st	Z, r18
    __asm__ volatile ("" ::: "memory");
}
     15c:	00 00       	nop
     15e:	0f 90       	pop	r0
     160:	0f 90       	pop	r0
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <RingBuffer_InitBuffer>:
		 *  by re-initializing them using this function.
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	00 d0       	rcall	.+0      	; 0x16e <RingBuffer_InitBuffer+0x6>
     16e:	00 d0       	rcall	.+0      	; 0x170 <RingBuffer_InitBuffer+0x8>
     170:	cd b7       	in	r28, 0x3d	; 61
     172:	de b7       	in	r29, 0x3e	; 62
     174:	9c 83       	std	Y+4, r25	; 0x04
     176:	8b 83       	std	Y+3, r24	; 0x03
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     178:	8f e5       	ldi	r24, 0x5F	; 95
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	fc 01       	movw	r30, r24
     17e:	80 81       	ld	r24, Z
     180:	8a 83       	std	Y+2, r24	; 0x02
     182:	0e 94 96 00 	call	0x12c	; 0x12c <__iCliRetVal>
     186:	89 83       	std	Y+1, r24	; 0x01
     188:	19 c0       	rjmp	.+50     	; 0x1bc <RingBuffer_InitBuffer+0x54>
			{
				Buffer->In    = Buffer->Buffer;
     18a:	2b 81       	ldd	r18, Y+3	; 0x03
     18c:	3c 81       	ldd	r19, Y+4	; 0x04
     18e:	8b 81       	ldd	r24, Y+3	; 0x03
     190:	9c 81       	ldd	r25, Y+4	; 0x04
     192:	80 58       	subi	r24, 0x80	; 128
     194:	9f 4f       	sbci	r25, 0xFF	; 255
     196:	fc 01       	movw	r30, r24
     198:	31 83       	std	Z+1, r19	; 0x01
     19a:	20 83       	st	Z, r18
				Buffer->Out   = Buffer->Buffer;
     19c:	2b 81       	ldd	r18, Y+3	; 0x03
     19e:	3c 81       	ldd	r19, Y+4	; 0x04
     1a0:	8b 81       	ldd	r24, Y+3	; 0x03
     1a2:	9c 81       	ldd	r25, Y+4	; 0x04
     1a4:	8e 57       	subi	r24, 0x7E	; 126
     1a6:	9f 4f       	sbci	r25, 0xFF	; 255
     1a8:	fc 01       	movw	r30, r24
     1aa:	31 83       	std	Z+1, r19	; 0x01
     1ac:	20 83       	st	Z, r18
				Buffer->Count = 0;
     1ae:	8b 81       	ldd	r24, Y+3	; 0x03
     1b0:	9c 81       	ldd	r25, Y+4	; 0x04
     1b2:	8c 57       	subi	r24, 0x7C	; 124
     1b4:	9f 4f       	sbci	r25, 0xFF	; 255
     1b6:	fc 01       	movw	r30, r24
     1b8:	10 82       	st	Z, r1
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     1ba:	19 82       	std	Y+1, r1	; 0x01
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	88 23       	and	r24, r24
     1c0:	21 f7       	brne	.-56     	; 0x18a <RingBuffer_InitBuffer+0x22>
     1c2:	ce 01       	movw	r24, r28
     1c4:	02 96       	adiw	r24, 0x02	; 2
     1c6:	0e 94 9f 00 	call	0x13e	; 0x13e <__iRestore>
			{
				Buffer->In    = Buffer->Buffer;
				Buffer->Out   = Buffer->Buffer;
				Buffer->Count = 0;
			}
		}
     1ca:	00 00       	nop
     1cc:	0f 90       	pop	r0
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	0f 90       	pop	r0
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <RingBuffer_Insert>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29
     1de:	00 d0       	rcall	.+0      	; 0x1e0 <RingBuffer_Insert+0x6>
     1e0:	00 d0       	rcall	.+0      	; 0x1e2 <RingBuffer_Insert+0x8>
     1e2:	1f 92       	push	r1
     1e4:	cd b7       	in	r28, 0x3d	; 61
     1e6:	de b7       	in	r29, 0x3e	; 62
     1e8:	9c 83       	std	Y+4, r25	; 0x04
     1ea:	8b 83       	std	Y+3, r24	; 0x03
     1ec:	6d 83       	std	Y+5, r22	; 0x05
			*Buffer->In = Data;
     1ee:	8b 81       	ldd	r24, Y+3	; 0x03
     1f0:	9c 81       	ldd	r25, Y+4	; 0x04
     1f2:	80 58       	subi	r24, 0x80	; 128
     1f4:	9f 4f       	sbci	r25, 0xFF	; 255
     1f6:	fc 01       	movw	r30, r24
     1f8:	80 81       	ld	r24, Z
     1fa:	91 81       	ldd	r25, Z+1	; 0x01
     1fc:	2d 81       	ldd	r18, Y+5	; 0x05
     1fe:	fc 01       	movw	r30, r24
     200:	20 83       	st	Z, r18
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
     202:	8b 81       	ldd	r24, Y+3	; 0x03
     204:	9c 81       	ldd	r25, Y+4	; 0x04
     206:	80 58       	subi	r24, 0x80	; 128
     208:	9f 4f       	sbci	r25, 0xFF	; 255
     20a:	fc 01       	movw	r30, r24
     20c:	80 81       	ld	r24, Z
     20e:	91 81       	ldd	r25, Z+1	; 0x01
     210:	9c 01       	movw	r18, r24
     212:	2f 5f       	subi	r18, 0xFF	; 255
     214:	3f 4f       	sbci	r19, 0xFF	; 255
     216:	8b 81       	ldd	r24, Y+3	; 0x03
     218:	9c 81       	ldd	r25, Y+4	; 0x04
     21a:	80 58       	subi	r24, 0x80	; 128
     21c:	9f 4f       	sbci	r25, 0xFF	; 255
     21e:	fc 01       	movw	r30, r24
     220:	31 83       	std	Z+1, r19	; 0x01
     222:	20 83       	st	Z, r18
     224:	8b 81       	ldd	r24, Y+3	; 0x03
     226:	9c 81       	ldd	r25, Y+4	; 0x04
     228:	80 58       	subi	r24, 0x80	; 128
     22a:	9f 4f       	sbci	r25, 0xFF	; 255
     22c:	fc 01       	movw	r30, r24
     22e:	20 81       	ld	r18, Z
     230:	31 81       	ldd	r19, Z+1	; 0x01
     232:	8b 81       	ldd	r24, Y+3	; 0x03
     234:	9c 81       	ldd	r25, Y+4	; 0x04
     236:	80 58       	subi	r24, 0x80	; 128
     238:	9f 4f       	sbci	r25, 0xFF	; 255
     23a:	28 17       	cp	r18, r24
     23c:	39 07       	cpc	r19, r25
     23e:	49 f4       	brne	.+18     	; 0x252 <RingBuffer_Insert+0x78>
			  Buffer->In = Buffer->Buffer;
     240:	2b 81       	ldd	r18, Y+3	; 0x03
     242:	3c 81       	ldd	r19, Y+4	; 0x04
     244:	8b 81       	ldd	r24, Y+3	; 0x03
     246:	9c 81       	ldd	r25, Y+4	; 0x04
     248:	80 58       	subi	r24, 0x80	; 128
     24a:	9f 4f       	sbci	r25, 0xFF	; 255
     24c:	fc 01       	movw	r30, r24
     24e:	31 83       	std	Z+1, r19	; 0x01
     250:	20 83       	st	Z, r18

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     252:	8f e5       	ldi	r24, 0x5F	; 95
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	fc 01       	movw	r30, r24
     258:	80 81       	ld	r24, Z
     25a:	8a 83       	std	Y+2, r24	; 0x02
     25c:	0e 94 96 00 	call	0x12c	; 0x12c <__iCliRetVal>
     260:	89 83       	std	Y+1, r24	; 0x01
     262:	0f c0       	rjmp	.+30     	; 0x282 <RingBuffer_Insert+0xa8>
			{
				Buffer->Count++;
     264:	8b 81       	ldd	r24, Y+3	; 0x03
     266:	9c 81       	ldd	r25, Y+4	; 0x04
     268:	8c 57       	subi	r24, 0x7C	; 124
     26a:	9f 4f       	sbci	r25, 0xFF	; 255
     26c:	fc 01       	movw	r30, r24
     26e:	80 81       	ld	r24, Z
     270:	21 e0       	ldi	r18, 0x01	; 1
     272:	28 0f       	add	r18, r24
     274:	8b 81       	ldd	r24, Y+3	; 0x03
     276:	9c 81       	ldd	r25, Y+4	; 0x04
     278:	8c 57       	subi	r24, 0x7C	; 124
     27a:	9f 4f       	sbci	r25, 0xFF	; 255
     27c:	fc 01       	movw	r30, r24
     27e:	20 83       	st	Z, r18
			*Buffer->In = Data;
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->In = Buffer->Buffer;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     280:	19 82       	std	Y+1, r1	; 0x01
     282:	89 81       	ldd	r24, Y+1	; 0x01
     284:	88 23       	and	r24, r24
     286:	71 f7       	brne	.-36     	; 0x264 <RingBuffer_Insert+0x8a>
     288:	ce 01       	movw	r24, r28
     28a:	02 96       	adiw	r24, 0x02	; 2
     28c:	0e 94 9f 00 	call	0x13e	; 0x13e <__iRestore>
			{
				Buffer->Count++;
			}
		}
     290:	00 00       	nop
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	08 95       	ret

000002a2 <RingBuffer_Remove>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to retrieve from
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <RingBuffer_Remove+0x6>
     2a8:	00 d0       	rcall	.+0      	; 0x2aa <RingBuffer_Remove+0x8>
     2aa:	1f 92       	push	r1
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
     2b0:	9d 83       	std	Y+5, r25	; 0x05
     2b2:	8c 83       	std	Y+4, r24	; 0x04
			RingBuff_Data_t Data = *Buffer->Out;
     2b4:	8c 81       	ldd	r24, Y+4	; 0x04
     2b6:	9d 81       	ldd	r25, Y+5	; 0x05
     2b8:	8e 57       	subi	r24, 0x7E	; 126
     2ba:	9f 4f       	sbci	r25, 0xFF	; 255
     2bc:	fc 01       	movw	r30, r24
     2be:	80 81       	ld	r24, Z
     2c0:	91 81       	ldd	r25, Z+1	; 0x01
     2c2:	fc 01       	movw	r30, r24
     2c4:	80 81       	ld	r24, Z
     2c6:	8a 83       	std	Y+2, r24	; 0x02
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
     2c8:	8c 81       	ldd	r24, Y+4	; 0x04
     2ca:	9d 81       	ldd	r25, Y+5	; 0x05
     2cc:	8e 57       	subi	r24, 0x7E	; 126
     2ce:	9f 4f       	sbci	r25, 0xFF	; 255
     2d0:	fc 01       	movw	r30, r24
     2d2:	80 81       	ld	r24, Z
     2d4:	91 81       	ldd	r25, Z+1	; 0x01
     2d6:	9c 01       	movw	r18, r24
     2d8:	2f 5f       	subi	r18, 0xFF	; 255
     2da:	3f 4f       	sbci	r19, 0xFF	; 255
     2dc:	8c 81       	ldd	r24, Y+4	; 0x04
     2de:	9d 81       	ldd	r25, Y+5	; 0x05
     2e0:	8e 57       	subi	r24, 0x7E	; 126
     2e2:	9f 4f       	sbci	r25, 0xFF	; 255
     2e4:	fc 01       	movw	r30, r24
     2e6:	31 83       	std	Z+1, r19	; 0x01
     2e8:	20 83       	st	Z, r18
     2ea:	8c 81       	ldd	r24, Y+4	; 0x04
     2ec:	9d 81       	ldd	r25, Y+5	; 0x05
     2ee:	8e 57       	subi	r24, 0x7E	; 126
     2f0:	9f 4f       	sbci	r25, 0xFF	; 255
     2f2:	fc 01       	movw	r30, r24
     2f4:	20 81       	ld	r18, Z
     2f6:	31 81       	ldd	r19, Z+1	; 0x01
     2f8:	8c 81       	ldd	r24, Y+4	; 0x04
     2fa:	9d 81       	ldd	r25, Y+5	; 0x05
     2fc:	80 58       	subi	r24, 0x80	; 128
     2fe:	9f 4f       	sbci	r25, 0xFF	; 255
     300:	28 17       	cp	r18, r24
     302:	39 07       	cpc	r19, r25
     304:	49 f4       	brne	.+18     	; 0x318 <RingBuffer_Remove+0x76>
			  Buffer->Out = Buffer->Buffer;
     306:	2c 81       	ldd	r18, Y+4	; 0x04
     308:	3d 81       	ldd	r19, Y+5	; 0x05
     30a:	8c 81       	ldd	r24, Y+4	; 0x04
     30c:	9d 81       	ldd	r25, Y+5	; 0x05
     30e:	8e 57       	subi	r24, 0x7E	; 126
     310:	9f 4f       	sbci	r25, 0xFF	; 255
     312:	fc 01       	movw	r30, r24
     314:	31 83       	std	Z+1, r19	; 0x01
     316:	20 83       	st	Z, r18

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     318:	8f e5       	ldi	r24, 0x5F	; 95
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	fc 01       	movw	r30, r24
     31e:	80 81       	ld	r24, Z
     320:	8b 83       	std	Y+3, r24	; 0x03
     322:	0e 94 96 00 	call	0x12c	; 0x12c <__iCliRetVal>
     326:	89 83       	std	Y+1, r24	; 0x01
     328:	0f c0       	rjmp	.+30     	; 0x348 <RingBuffer_Remove+0xa6>
			{
				Buffer->Count--;
     32a:	8c 81       	ldd	r24, Y+4	; 0x04
     32c:	9d 81       	ldd	r25, Y+5	; 0x05
     32e:	8c 57       	subi	r24, 0x7C	; 124
     330:	9f 4f       	sbci	r25, 0xFF	; 255
     332:	fc 01       	movw	r30, r24
     334:	80 81       	ld	r24, Z
     336:	2f ef       	ldi	r18, 0xFF	; 255
     338:	28 0f       	add	r18, r24
     33a:	8c 81       	ldd	r24, Y+4	; 0x04
     33c:	9d 81       	ldd	r25, Y+5	; 0x05
     33e:	8c 57       	subi	r24, 0x7C	; 124
     340:	9f 4f       	sbci	r25, 0xFF	; 255
     342:	fc 01       	movw	r30, r24
     344:	20 83       	st	Z, r18
			RingBuff_Data_t Data = *Buffer->Out;
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->Out = Buffer->Buffer;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     346:	19 82       	std	Y+1, r1	; 0x01
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	88 23       	and	r24, r24
     34c:	71 f7       	brne	.-36     	; 0x32a <RingBuffer_Remove+0x88>
     34e:	ce 01       	movw	r24, r28
     350:	03 96       	adiw	r24, 0x03	; 3
     352:	0e 94 9f 00 	call	0x13e	; 0x13e <__iRestore>
			{
				Buffer->Count--;
			}
			
			return Data;
     356:	8a 81       	ldd	r24, Y+2	; 0x02
		}
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <RingBuffer_CountChar>:
			}
			*(Destination+PeakLength) = 0;
		}

		static inline RingBuff_Count_t RingBuffer_CountChar(RingBuff_t* const Buffer, char charToCheck)
		{
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	00 d0       	rcall	.+0      	; 0x36e <RingBuffer_CountChar+0x6>
     36e:	00 d0       	rcall	.+0      	; 0x370 <RingBuffer_CountChar+0x8>
     370:	00 d0       	rcall	.+0      	; 0x372 <RingBuffer_CountChar+0xa>
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	9d 83       	std	Y+5, r25	; 0x05
     378:	8c 83       	std	Y+4, r24	; 0x04
     37a:	6e 83       	std	Y+6, r22	; 0x06
			RingBuff_Count_t count = 0;
     37c:	19 82       	std	Y+1, r1	; 0x01

			RingBuff_Data_t* currentRead = Buffer->Out;
     37e:	8c 81       	ldd	r24, Y+4	; 0x04
     380:	9d 81       	ldd	r25, Y+5	; 0x05
     382:	8e 57       	subi	r24, 0x7E	; 126
     384:	9f 4f       	sbci	r25, 0xFF	; 255
     386:	fc 01       	movw	r30, r24
     388:	80 81       	ld	r24, Z
     38a:	91 81       	ldd	r25, Z+1	; 0x01
     38c:	9b 83       	std	Y+3, r25	; 0x03
     38e:	8a 83       	std	Y+2, r24	; 0x02

			while(currentRead != Buffer->In)
     390:	1c c0       	rjmp	.+56     	; 0x3ca <RingBuffer_CountChar+0x62>
			{
				if(*currentRead==charToCheck)
     392:	8a 81       	ldd	r24, Y+2	; 0x02
     394:	9b 81       	ldd	r25, Y+3	; 0x03
     396:	fc 01       	movw	r30, r24
     398:	90 81       	ld	r25, Z
     39a:	8e 81       	ldd	r24, Y+6	; 0x06
     39c:	98 17       	cp	r25, r24
     39e:	19 f4       	brne	.+6      	; 0x3a6 <RingBuffer_CountChar+0x3e>
				{
					count++;
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	8f 5f       	subi	r24, 0xFF	; 255
     3a4:	89 83       	std	Y+1, r24	; 0x01
				}
				if (++currentRead == &Buffer->Buffer[BUFFER_SIZE]) currentRead = Buffer->Buffer;
     3a6:	8a 81       	ldd	r24, Y+2	; 0x02
     3a8:	9b 81       	ldd	r25, Y+3	; 0x03
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	9b 83       	std	Y+3, r25	; 0x03
     3ae:	8a 83       	std	Y+2, r24	; 0x02
     3b0:	8c 81       	ldd	r24, Y+4	; 0x04
     3b2:	9d 81       	ldd	r25, Y+5	; 0x05
     3b4:	80 58       	subi	r24, 0x80	; 128
     3b6:	9f 4f       	sbci	r25, 0xFF	; 255
     3b8:	2a 81       	ldd	r18, Y+2	; 0x02
     3ba:	3b 81       	ldd	r19, Y+3	; 0x03
     3bc:	28 17       	cp	r18, r24
     3be:	39 07       	cpc	r19, r25
     3c0:	21 f4       	brne	.+8      	; 0x3ca <RingBuffer_CountChar+0x62>
     3c2:	8c 81       	ldd	r24, Y+4	; 0x04
     3c4:	9d 81       	ldd	r25, Y+5	; 0x05
     3c6:	9b 83       	std	Y+3, r25	; 0x03
     3c8:	8a 83       	std	Y+2, r24	; 0x02
		{
			RingBuff_Count_t count = 0;

			RingBuff_Data_t* currentRead = Buffer->Out;

			while(currentRead != Buffer->In)
     3ca:	8c 81       	ldd	r24, Y+4	; 0x04
     3cc:	9d 81       	ldd	r25, Y+5	; 0x05
     3ce:	80 58       	subi	r24, 0x80	; 128
     3d0:	9f 4f       	sbci	r25, 0xFF	; 255
     3d2:	fc 01       	movw	r30, r24
     3d4:	20 81       	ld	r18, Z
     3d6:	31 81       	ldd	r19, Z+1	; 0x01
     3d8:	8a 81       	ldd	r24, Y+2	; 0x02
     3da:	9b 81       	ldd	r25, Y+3	; 0x03
     3dc:	28 17       	cp	r18, r24
     3de:	39 07       	cpc	r19, r25
     3e0:	c1 f6       	brne	.-80     	; 0x392 <RingBuffer_CountChar+0x2a>
				{
					count++;
				}
				if (++currentRead == &Buffer->Buffer[BUFFER_SIZE]) currentRead = Buffer->Buffer;
			}
			return(count);
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
		}
     3e4:	26 96       	adiw	r28, 0x06	; 6
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	de bf       	out	0x3e, r29	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <RingBuffer_RemoveUntilChar>:

		static inline void RingBuffer_RemoveUntilChar(RingBuff_t* const Buffer, RingBuff_Data_t* Destination, char endChar, uint8_t includingChar)
		{
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	29 97       	sbiw	r28, 0x09	; 9
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	f8 94       	cli
     404:	de bf       	out	0x3e, r29	; 62
     406:	0f be       	out	0x3f, r0	; 63
     408:	cd bf       	out	0x3d, r28	; 61
     40a:	9d 83       	std	Y+5, r25	; 0x05
     40c:	8c 83       	std	Y+4, r24	; 0x04
     40e:	7f 83       	std	Y+7, r23	; 0x07
     410:	6e 83       	std	Y+6, r22	; 0x06
     412:	48 87       	std	Y+8, r20	; 0x08
     414:	29 87       	std	Y+9, r18	; 0x09
			RingBuff_Data_t tempData;
			unsigned int uiDestinationOffset = 0;
     416:	1a 82       	std	Y+2, r1	; 0x02
     418:	19 82       	std	Y+1, r1	; 0x01
			
			while(1)
			{
				tempData = RingBuffer_Remove(Buffer);
     41a:	8c 81       	ldd	r24, Y+4	; 0x04
     41c:	9d 81       	ldd	r25, Y+5	; 0x05
     41e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <RingBuffer_Remove>
     422:	8b 83       	std	Y+3, r24	; 0x03
				if(tempData == endChar)
     424:	9b 81       	ldd	r25, Y+3	; 0x03
     426:	88 85       	ldd	r24, Y+8	; 0x08
     428:	98 17       	cp	r25, r24
     42a:	d1 f4       	brne	.+52     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
				{
					if(includingChar)
     42c:	89 85       	ldd	r24, Y+9	; 0x09
     42e:	88 23       	and	r24, r24
     430:	71 f0       	breq	.+28     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
					{
						*(Destination+uiDestinationOffset) = tempData;
     432:	2e 81       	ldd	r18, Y+6	; 0x06
     434:	3f 81       	ldd	r19, Y+7	; 0x07
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	9a 81       	ldd	r25, Y+2	; 0x02
     43a:	82 0f       	add	r24, r18
     43c:	93 1f       	adc	r25, r19
     43e:	2b 81       	ldd	r18, Y+3	; 0x03
     440:	fc 01       	movw	r30, r24
     442:	20 83       	st	Z, r18
						uiDestinationOffset++;
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	9a 81       	ldd	r25, Y+2	; 0x02
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	9a 83       	std	Y+2, r25	; 0x02
     44c:	89 83       	std	Y+1, r24	; 0x01
					}
					*(Destination+uiDestinationOffset) = 0;
     44e:	2e 81       	ldd	r18, Y+6	; 0x06
     450:	3f 81       	ldd	r19, Y+7	; 0x07
     452:	89 81       	ldd	r24, Y+1	; 0x01
     454:	9a 81       	ldd	r25, Y+2	; 0x02
     456:	82 0f       	add	r24, r18
     458:	93 1f       	adc	r25, r19
     45a:	fc 01       	movw	r30, r24
     45c:	10 82       	st	Z, r1
					break;
     45e:	0f c0       	rjmp	.+30     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
				}
				*(Destination+uiDestinationOffset) = tempData;
     460:	2e 81       	ldd	r18, Y+6	; 0x06
     462:	3f 81       	ldd	r19, Y+7	; 0x07
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	9a 81       	ldd	r25, Y+2	; 0x02
     468:	82 0f       	add	r24, r18
     46a:	93 1f       	adc	r25, r19
     46c:	2b 81       	ldd	r18, Y+3	; 0x03
     46e:	fc 01       	movw	r30, r24
     470:	20 83       	st	Z, r18
				uiDestinationOffset++;
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	9a 81       	ldd	r25, Y+2	; 0x02
     476:	01 96       	adiw	r24, 0x01	; 1
     478:	9a 83       	std	Y+2, r25	; 0x02
     47a:	89 83       	std	Y+1, r24	; 0x01
			}
     47c:	ce cf       	rjmp	.-100    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		}
     47e:	00 00       	nop
     480:	29 96       	adiw	r28, 0x09	; 9
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	f8 94       	cli
     486:	de bf       	out	0x3e, r29	; 62
     488:	0f be       	out	0x3f, r0	; 63
     48a:	cd bf       	out	0x3d, r28	; 61
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	08 95       	ret

00000492 <__vector_1>:
volatile uint8_t u8Status = 0x00;
volatile uint8_t u8Duty = 0;


ISR(INT0_vect)	// external interrupt (handshake from RGBooster board)
{				// start RGBooster send sequence: reset "ucRGBIdx" and "ucByteIdx" to zero. then start with calling the ISR directly "INT1_vect();"
     492:	1f 92       	push	r1
     494:	0f 92       	push	r0
     496:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     49a:	0f 92       	push	r0
     49c:	11 24       	eor	r1, r1
     49e:	2f 93       	push	r18
     4a0:	3f 93       	push	r19
     4a2:	4f 93       	push	r20
     4a4:	8f 93       	push	r24
     4a6:	9f 93       	push	r25
     4a8:	ef 93       	push	r30
     4aa:	ff 93       	push	r31
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
	#endif
	
	if(u8RGBSingleColor)
     4b4:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <u8RGBSingleColor>
     4b8:	88 23       	and	r24, r24
     4ba:	09 f4       	brne	.+2      	; 0x4be <__vector_1+0x2c>
     4bc:	b2 c0       	rjmp	.+356    	; 0x622 <__vector_1+0x190>
	{
		if(u8RGBIdx<(LED_COUNT))
     4be:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8RGBIdx>
     4c2:	84 31       	cpi	r24, 0x14	; 20
     4c4:	08 f0       	brcs	.+2      	; 0x4c8 <__vector_1+0x36>
     4c6:	83 c1       	rjmp	.+774    	; 0x7ce <__vector_1+0x33c>
		{
			switch(u8RGBByteIdx) // red green and blue are sent in 3 separate bytes. this variable remembers the next color to be sent
     4c8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     4cc:	88 2f       	mov	r24, r24
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	81 30       	cpi	r24, 0x01	; 1
     4d2:	91 05       	cpc	r25, r1
     4d4:	d9 f1       	breq	.+118    	; 0x54c <__vector_1+0xba>
     4d6:	82 30       	cpi	r24, 0x02	; 2
     4d8:	91 05       	cpc	r25, r1
     4da:	09 f4       	brne	.+2      	; 0x4de <__vector_1+0x4c>
     4dc:	6b c0       	rjmp	.+214    	; 0x5b4 <__vector_1+0x122>
     4de:	89 2b       	or	r24, r25
     4e0:	09 f0       	breq	.+2      	; 0x4e4 <__vector_1+0x52>
	
	
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
	#endif
}
     4e2:	75 c1       	rjmp	.+746    	; 0x7ce <__vector_1+0x33c>
		if(u8RGBIdx<(LED_COUNT))
		{
			switch(u8RGBByteIdx) // red green and blue are sent in 3 separate bytes. this variable remembers the next color to be sent
			{
				case 0:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (u8RGBGreen & DATA_HIGH_BITMASK);
     4e4:	82 e2       	ldi	r24, 0x22	; 34
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	22 e2       	ldi	r18, 0x22	; 34
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	f9 01       	movw	r30, r18
     4ee:	20 81       	ld	r18, Z
     4f0:	32 2f       	mov	r19, r18
     4f2:	3f 70       	andi	r19, 0x0F	; 15
     4f4:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <u8RGBGreen>
     4f8:	20 7f       	andi	r18, 0xF0	; 240
     4fa:	23 2b       	or	r18, r19
     4fc:	fc 01       	movw	r30, r24
     4fe:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (u8RGBGreen & DATA_LOW_BITMASK);
     500:	85 e2       	ldi	r24, 0x25	; 37
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	25 e2       	ldi	r18, 0x25	; 37
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	f9 01       	movw	r30, r18
     50a:	20 81       	ld	r18, Z
     50c:	32 2f       	mov	r19, r18
     50e:	30 7f       	andi	r19, 0xF0	; 240
     510:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <u8RGBGreen>
     514:	2f 70       	andi	r18, 0x0F	; 15
     516:	23 2b       	or	r18, r19
     518:	fc 01       	movw	r30, r24
     51a:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     51c:	8b e2       	ldi	r24, 0x2B	; 43
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	2b e2       	ldi	r18, 0x2B	; 43
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	f9 01       	movw	r30, r18
     526:	20 81       	ld	r18, Z
     528:	28 60       	ori	r18, 0x08	; 8
     52a:	fc 01       	movw	r30, r24
     52c:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     52e:	8b e2       	ldi	r24, 0x2B	; 43
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	2b e2       	ldi	r18, 0x2B	; 43
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	f9 01       	movw	r30, r18
     538:	20 81       	ld	r18, Z
     53a:	27 7f       	andi	r18, 0xF7	; 247
     53c:	fc 01       	movw	r30, r24
     53e:	20 83       	st	Z, r18
				u8RGBByteIdx++;
     540:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     544:	8f 5f       	subi	r24, 0xFF	; 255
     546:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
				break;
     54a:	41 c1       	rjmp	.+642    	; 0x7ce <__vector_1+0x33c>

				case 1:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (u8RGBRed & DATA_HIGH_BITMASK);
     54c:	82 e2       	ldi	r24, 0x22	; 34
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	22 e2       	ldi	r18, 0x22	; 34
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	f9 01       	movw	r30, r18
     556:	20 81       	ld	r18, Z
     558:	32 2f       	mov	r19, r18
     55a:	3f 70       	andi	r19, 0x0F	; 15
     55c:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <u8RGBRed>
     560:	20 7f       	andi	r18, 0xF0	; 240
     562:	23 2b       	or	r18, r19
     564:	fc 01       	movw	r30, r24
     566:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (u8RGBRed & DATA_LOW_BITMASK);
     568:	85 e2       	ldi	r24, 0x25	; 37
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	25 e2       	ldi	r18, 0x25	; 37
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	f9 01       	movw	r30, r18
     572:	20 81       	ld	r18, Z
     574:	32 2f       	mov	r19, r18
     576:	30 7f       	andi	r19, 0xF0	; 240
     578:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <u8RGBRed>
     57c:	2f 70       	andi	r18, 0x0F	; 15
     57e:	23 2b       	or	r18, r19
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     584:	8b e2       	ldi	r24, 0x2B	; 43
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	2b e2       	ldi	r18, 0x2B	; 43
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	f9 01       	movw	r30, r18
     58e:	20 81       	ld	r18, Z
     590:	28 60       	ori	r18, 0x08	; 8
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     596:	8b e2       	ldi	r24, 0x2B	; 43
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	2b e2       	ldi	r18, 0x2B	; 43
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	f9 01       	movw	r30, r18
     5a0:	20 81       	ld	r18, Z
     5a2:	27 7f       	andi	r18, 0xF7	; 247
     5a4:	fc 01       	movw	r30, r24
     5a6:	20 83       	st	Z, r18
				u8RGBByteIdx++;
     5a8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     5ac:	8f 5f       	subi	r24, 0xFF	; 255
     5ae:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
				break;
     5b2:	0d c1       	rjmp	.+538    	; 0x7ce <__vector_1+0x33c>

				case 2:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (u8RGBBlue & DATA_HIGH_BITMASK);
     5b4:	82 e2       	ldi	r24, 0x22	; 34
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	22 e2       	ldi	r18, 0x22	; 34
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	f9 01       	movw	r30, r18
     5be:	20 81       	ld	r18, Z
     5c0:	32 2f       	mov	r19, r18
     5c2:	3f 70       	andi	r19, 0x0F	; 15
     5c4:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <u8RGBBlue>
     5c8:	20 7f       	andi	r18, 0xF0	; 240
     5ca:	23 2b       	or	r18, r19
     5cc:	fc 01       	movw	r30, r24
     5ce:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (u8RGBBlue & DATA_LOW_BITMASK);
     5d0:	85 e2       	ldi	r24, 0x25	; 37
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	25 e2       	ldi	r18, 0x25	; 37
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	f9 01       	movw	r30, r18
     5da:	20 81       	ld	r18, Z
     5dc:	32 2f       	mov	r19, r18
     5de:	30 7f       	andi	r19, 0xF0	; 240
     5e0:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <u8RGBBlue>
     5e4:	2f 70       	andi	r18, 0x0F	; 15
     5e6:	23 2b       	or	r18, r19
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     5ec:	8b e2       	ldi	r24, 0x2B	; 43
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	2b e2       	ldi	r18, 0x2B	; 43
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	f9 01       	movw	r30, r18
     5f6:	20 81       	ld	r18, Z
     5f8:	28 60       	ori	r18, 0x08	; 8
     5fa:	fc 01       	movw	r30, r24
     5fc:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     5fe:	8b e2       	ldi	r24, 0x2B	; 43
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	2b e2       	ldi	r18, 0x2B	; 43
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	f9 01       	movw	r30, r18
     608:	20 81       	ld	r18, Z
     60a:	27 7f       	andi	r18, 0xF7	; 247
     60c:	fc 01       	movw	r30, r24
     60e:	20 83       	st	Z, r18
				u8RGBByteIdx=0;
     610:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
				u8RGBIdx++;
     614:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8RGBIdx>
     618:	8f 5f       	subi	r24, 0xFF	; 255
     61a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <u8RGBIdx>
				break;
     61e:	00 00       	nop
     620:	d6 c0       	rjmp	.+428    	; 0x7ce <__vector_1+0x33c>
			}
		}
	}
	else
	{
		if(u8RGBIdx<(LED_COUNT))
     622:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8RGBIdx>
     626:	84 31       	cpi	r24, 0x14	; 20
     628:	08 f0       	brcs	.+2      	; 0x62c <__vector_1+0x19a>
     62a:	d1 c0       	rjmp	.+418    	; 0x7ce <__vector_1+0x33c>
		{
			switch(u8RGBByteIdx) // red green and blue are sent in 3 separate bytes. this variable remembers the next color to be sent
     62c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     630:	88 2f       	mov	r24, r24
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	81 30       	cpi	r24, 0x01	; 1
     636:	91 05       	cpc	r25, r1
     638:	09 f4       	brne	.+2      	; 0x63c <__vector_1+0x1aa>
     63a:	47 c0       	rjmp	.+142    	; 0x6ca <__vector_1+0x238>
     63c:	82 30       	cpi	r24, 0x02	; 2
     63e:	91 05       	cpc	r25, r1
     640:	09 f4       	brne	.+2      	; 0x644 <__vector_1+0x1b2>
     642:	83 c0       	rjmp	.+262    	; 0x74a <__vector_1+0x2b8>
     644:	89 2b       	or	r24, r25
     646:	09 f0       	breq	.+2      	; 0x64a <__vector_1+0x1b8>
	
	
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
	#endif
}
     648:	c2 c0       	rjmp	.+388    	; 0x7ce <__vector_1+0x33c>
		if(u8RGBIdx<(LED_COUNT))
		{
			switch(u8RGBByteIdx) // red green and blue are sent in 3 separate bytes. this variable remembers the next color to be sent
			{
				case 0:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (au8Green[u8RGBIdx] & DATA_HIGH_BITMASK);
     64a:	82 e2       	ldi	r24, 0x22	; 34
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	22 e2       	ldi	r18, 0x22	; 34
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	f9 01       	movw	r30, r18
     654:	20 81       	ld	r18, Z
     656:	42 2f       	mov	r20, r18
     658:	4f 70       	andi	r20, 0x0F	; 15
     65a:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     65e:	22 2f       	mov	r18, r18
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	2c 5e       	subi	r18, 0xEC	; 236
     664:	3e 4f       	sbci	r19, 0xFE	; 254
     666:	f9 01       	movw	r30, r18
     668:	20 81       	ld	r18, Z
     66a:	20 7f       	andi	r18, 0xF0	; 240
     66c:	24 2b       	or	r18, r20
     66e:	fc 01       	movw	r30, r24
     670:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (au8Green[u8RGBIdx] & DATA_LOW_BITMASK);
     672:	85 e2       	ldi	r24, 0x25	; 37
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	25 e2       	ldi	r18, 0x25	; 37
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	f9 01       	movw	r30, r18
     67c:	20 81       	ld	r18, Z
     67e:	42 2f       	mov	r20, r18
     680:	40 7f       	andi	r20, 0xF0	; 240
     682:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     686:	22 2f       	mov	r18, r18
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	2c 5e       	subi	r18, 0xEC	; 236
     68c:	3e 4f       	sbci	r19, 0xFE	; 254
     68e:	f9 01       	movw	r30, r18
     690:	20 81       	ld	r18, Z
     692:	2f 70       	andi	r18, 0x0F	; 15
     694:	24 2b       	or	r18, r20
     696:	fc 01       	movw	r30, r24
     698:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     69a:	8b e2       	ldi	r24, 0x2B	; 43
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	2b e2       	ldi	r18, 0x2B	; 43
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	f9 01       	movw	r30, r18
     6a4:	20 81       	ld	r18, Z
     6a6:	28 60       	ori	r18, 0x08	; 8
     6a8:	fc 01       	movw	r30, r24
     6aa:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     6ac:	8b e2       	ldi	r24, 0x2B	; 43
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	2b e2       	ldi	r18, 0x2B	; 43
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	f9 01       	movw	r30, r18
     6b6:	20 81       	ld	r18, Z
     6b8:	27 7f       	andi	r18, 0xF7	; 247
     6ba:	fc 01       	movw	r30, r24
     6bc:	20 83       	st	Z, r18
				u8RGBByteIdx++;
     6be:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     6c2:	8f 5f       	subi	r24, 0xFF	; 255
     6c4:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
				break;
     6c8:	82 c0       	rjmp	.+260    	; 0x7ce <__vector_1+0x33c>

				case 1:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (au8Red[u8RGBIdx] & DATA_HIGH_BITMASK);
     6ca:	82 e2       	ldi	r24, 0x22	; 34
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	22 e2       	ldi	r18, 0x22	; 34
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	f9 01       	movw	r30, r18
     6d4:	20 81       	ld	r18, Z
     6d6:	42 2f       	mov	r20, r18
     6d8:	4f 70       	andi	r20, 0x0F	; 15
     6da:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     6de:	22 2f       	mov	r18, r18
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	20 50       	subi	r18, 0x00	; 0
     6e4:	3f 4f       	sbci	r19, 0xFF	; 255
     6e6:	f9 01       	movw	r30, r18
     6e8:	20 81       	ld	r18, Z
     6ea:	20 7f       	andi	r18, 0xF0	; 240
     6ec:	24 2b       	or	r18, r20
     6ee:	fc 01       	movw	r30, r24
     6f0:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (au8Red[u8RGBIdx] & DATA_LOW_BITMASK);
     6f2:	85 e2       	ldi	r24, 0x25	; 37
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	25 e2       	ldi	r18, 0x25	; 37
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	f9 01       	movw	r30, r18
     6fc:	20 81       	ld	r18, Z
     6fe:	42 2f       	mov	r20, r18
     700:	40 7f       	andi	r20, 0xF0	; 240
     702:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     706:	22 2f       	mov	r18, r18
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	20 50       	subi	r18, 0x00	; 0
     70c:	3f 4f       	sbci	r19, 0xFF	; 255
     70e:	f9 01       	movw	r30, r18
     710:	20 81       	ld	r18, Z
     712:	2f 70       	andi	r18, 0x0F	; 15
     714:	24 2b       	or	r18, r20
     716:	fc 01       	movw	r30, r24
     718:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     71a:	8b e2       	ldi	r24, 0x2B	; 43
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	2b e2       	ldi	r18, 0x2B	; 43
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	f9 01       	movw	r30, r18
     724:	20 81       	ld	r18, Z
     726:	28 60       	ori	r18, 0x08	; 8
     728:	fc 01       	movw	r30, r24
     72a:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     72c:	8b e2       	ldi	r24, 0x2B	; 43
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	2b e2       	ldi	r18, 0x2B	; 43
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	f9 01       	movw	r30, r18
     736:	20 81       	ld	r18, Z
     738:	27 7f       	andi	r18, 0xF7	; 247
     73a:	fc 01       	movw	r30, r24
     73c:	20 83       	st	Z, r18
				u8RGBByteIdx++;
     73e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     742:	8f 5f       	subi	r24, 0xFF	; 255
     744:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
				break;
     748:	42 c0       	rjmp	.+132    	; 0x7ce <__vector_1+0x33c>

				case 2:
				PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (au8Blue[u8RGBIdx] & DATA_HIGH_BITMASK);
     74a:	82 e2       	ldi	r24, 0x22	; 34
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	22 e2       	ldi	r18, 0x22	; 34
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	f9 01       	movw	r30, r18
     754:	20 81       	ld	r18, Z
     756:	42 2f       	mov	r20, r18
     758:	4f 70       	andi	r20, 0x0F	; 15
     75a:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     75e:	22 2f       	mov	r18, r18
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	28 5d       	subi	r18, 0xD8	; 216
     764:	3e 4f       	sbci	r19, 0xFE	; 254
     766:	f9 01       	movw	r30, r18
     768:	20 81       	ld	r18, Z
     76a:	20 7f       	andi	r18, 0xF0	; 240
     76c:	24 2b       	or	r18, r20
     76e:	fc 01       	movw	r30, r24
     770:	20 83       	st	Z, r18
				PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (au8Blue[u8RGBIdx] & DATA_LOW_BITMASK);
     772:	85 e2       	ldi	r24, 0x25	; 37
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	25 e2       	ldi	r18, 0x25	; 37
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	f9 01       	movw	r30, r18
     77c:	20 81       	ld	r18, Z
     77e:	42 2f       	mov	r20, r18
     780:	40 7f       	andi	r20, 0xF0	; 240
     782:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <u8RGBIdx>
     786:	22 2f       	mov	r18, r18
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	28 5d       	subi	r18, 0xD8	; 216
     78c:	3e 4f       	sbci	r19, 0xFE	; 254
     78e:	f9 01       	movw	r30, r18
     790:	20 81       	ld	r18, Z
     792:	2f 70       	andi	r18, 0x0F	; 15
     794:	24 2b       	or	r18, r20
     796:	fc 01       	movw	r30, r24
     798:	20 83       	st	Z, r18
				PORT_CONTROL |= (1<<SEND); // generate send impulse
     79a:	8b e2       	ldi	r24, 0x2B	; 43
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	2b e2       	ldi	r18, 0x2B	; 43
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	f9 01       	movw	r30, r18
     7a4:	20 81       	ld	r18, Z
     7a6:	28 60       	ori	r18, 0x08	; 8
     7a8:	fc 01       	movw	r30, r24
     7aa:	20 83       	st	Z, r18
				PORT_CONTROL &= ~(1<<SEND);
     7ac:	8b e2       	ldi	r24, 0x2B	; 43
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	2b e2       	ldi	r18, 0x2B	; 43
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	f9 01       	movw	r30, r18
     7b6:	20 81       	ld	r18, Z
     7b8:	27 7f       	andi	r18, 0xF7	; 247
     7ba:	fc 01       	movw	r30, r24
     7bc:	20 83       	st	Z, r18
				u8RGBByteIdx=0;
     7be:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
				u8RGBIdx++;
     7c2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8RGBIdx>
     7c6:	8f 5f       	subi	r24, 0xFF	; 255
     7c8:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <u8RGBIdx>
				break;
     7cc:	00 00       	nop
	
	
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
	#endif
}
     7ce:	00 00       	nop
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	ff 91       	pop	r31
     7d6:	ef 91       	pop	r30
     7d8:	9f 91       	pop	r25
     7da:	8f 91       	pop	r24
     7dc:	4f 91       	pop	r20
     7de:	3f 91       	pop	r19
     7e0:	2f 91       	pop	r18
     7e2:	0f 90       	pop	r0
     7e4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     7e8:	0f 90       	pop	r0
     7ea:	1f 90       	pop	r1
     7ec:	18 95       	reti

000007ee <__vector_9>:

ISR(TIMER2_COMPA_vect)
{
     7ee:	1f 92       	push	r1
     7f0:	0f 92       	push	r0
     7f2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     7f6:	0f 92       	push	r0
     7f8:	11 24       	eor	r1, r1
     7fa:	af 92       	push	r10
     7fc:	bf 92       	push	r11
     7fe:	cf 92       	push	r12
     800:	df 92       	push	r13
     802:	ef 92       	push	r14
     804:	ff 92       	push	r15
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	2f 93       	push	r18
     80c:	3f 93       	push	r19
     80e:	4f 93       	push	r20
     810:	5f 93       	push	r21
     812:	6f 93       	push	r22
     814:	7f 93       	push	r23
     816:	8f 93       	push	r24
     818:	9f 93       	push	r25
     81a:	af 93       	push	r26
     81c:	bf 93       	push	r27
     81e:	ef 93       	push	r30
     820:	ff 93       	push	r31
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
	#endif
	
	if(u8PLEDFadeActive)
     82a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <u8PLEDFadeActive>
     82e:	88 23       	and	r24, r24
     830:	09 f4       	brne	.+2      	; 0x834 <__vector_9+0x46>
     832:	e7 c0       	rjmp	.+462    	; 0xa02 <__stack+0x103>
	{
		if(u8PLEDFadeDirection) // rise
     834:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <u8PLEDFadeDirection>
     838:	88 23       	and	r24, r24
     83a:	09 f4       	brne	.+2      	; 0x83e <__vector_9+0x50>
     83c:	72 c0       	rjmp	.+228    	; 0x922 <__stack+0x23>
		{
			u32PLEDFadeIntCount++;
     83e:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <u32PLEDFadeIntCount>
     842:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <u32PLEDFadeIntCount+0x1>
     846:	a0 91 5f 01 	lds	r26, 0x015F	; 0x80015f <u32PLEDFadeIntCount+0x2>
     84a:	b0 91 60 01 	lds	r27, 0x0160	; 0x800160 <u32PLEDFadeIntCount+0x3>
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	a1 1d       	adc	r26, r1
     852:	b1 1d       	adc	r27, r1
     854:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <u32PLEDFadeIntCount>
     858:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <u32PLEDFadeIntCount+0x1>
     85c:	a0 93 5f 01 	sts	0x015F, r26	; 0x80015f <u32PLEDFadeIntCount+0x2>
     860:	b0 93 60 01 	sts	0x0160, r27	; 0x800160 <u32PLEDFadeIntCount+0x3>
			if(u32PLEDFadeIntCount>=u32PLEDFadeIntStep)
     864:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <u32PLEDFadeIntCount>
     868:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <u32PLEDFadeIntCount+0x1>
     86c:	40 91 5f 01 	lds	r20, 0x015F	; 0x80015f <u32PLEDFadeIntCount+0x2>
     870:	50 91 60 01 	lds	r21, 0x0160	; 0x800160 <u32PLEDFadeIntCount+0x3>
     874:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <u32PLEDFadeIntStep>
     878:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <u32PLEDFadeIntStep+0x1>
     87c:	a0 91 5b 01 	lds	r26, 0x015B	; 0x80015b <u32PLEDFadeIntStep+0x2>
     880:	b0 91 5c 01 	lds	r27, 0x015C	; 0x80015c <u32PLEDFadeIntStep+0x3>
     884:	28 17       	cp	r18, r24
     886:	39 07       	cpc	r19, r25
     888:	4a 07       	cpc	r20, r26
     88a:	5b 07       	cpc	r21, r27
     88c:	08 f4       	brcc	.+2      	; 0x890 <__vector_9+0xa2>
     88e:	b9 c0       	rjmp	.+370    	; 0xa02 <__stack+0x103>
			{
				u32PLEDFadeIntCount = 0;
     890:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <u32PLEDFadeIntCount>
     894:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <u32PLEDFadeIntCount+0x1>
     898:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <u32PLEDFadeIntCount+0x2>
     89c:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <u32PLEDFadeIntCount+0x3>
				u16PLEDFadeCurrValue++;
     8a0:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <u16PLEDFadeCurrValue>
     8a4:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <u16PLEDFadeCurrValue+0x1>
     8a8:	01 96       	adiw	r24, 0x01	; 1
     8aa:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <u16PLEDFadeCurrValue+0x1>
     8ae:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <u16PLEDFadeCurrValue>
				setPWMDuty(u16PLEDFadeCurrValue);
     8b2:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <u16PLEDFadeCurrValue>
     8b6:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <u16PLEDFadeCurrValue+0x1>
     8ba:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <setPWMDuty>
				u8Duty = Map(u16PLEDFadeCurrValue,0,511,0,100);
     8be:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <u16PLEDFadeCurrValue>
     8c2:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <u16PLEDFadeCurrValue+0x1>
     8c6:	cc 01       	movw	r24, r24
     8c8:	a0 e0       	ldi	r26, 0x00	; 0
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	1f 92       	push	r1
     8ce:	1f 92       	push	r1
     8d0:	1f 92       	push	r1
     8d2:	24 e6       	ldi	r18, 0x64	; 100
     8d4:	2f 93       	push	r18
     8d6:	a1 2c       	mov	r10, r1
     8d8:	b1 2c       	mov	r11, r1
     8da:	65 01       	movw	r12, r10
     8dc:	e1 2c       	mov	r14, r1
     8de:	f1 2c       	mov	r15, r1
     8e0:	87 01       	movw	r16, r14
     8e2:	ea 94       	dec	r14
     8e4:	f3 94       	inc	r15
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	a9 01       	movw	r20, r18
     8ec:	bc 01       	movw	r22, r24
     8ee:	cd 01       	movw	r24, r26
     8f0:	0e 94 42 10 	call	0x2084	; 0x2084 <Map>
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	dc 01       	movw	r26, r24
     8fe:	cb 01       	movw	r24, r22
     900:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <u8Duty>

				if(u16PLEDFadeCurrValue>=u16PLEDFadeStopValue)
     904:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <u16PLEDFadeCurrValue>
     908:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <u16PLEDFadeCurrValue+0x1>
     90c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16PLEDFadeStopValue>
     910:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16PLEDFadeStopValue+0x1>
     914:	28 17       	cp	r18, r24
     916:	39 07       	cpc	r19, r25
     918:	08 f4       	brcc	.+2      	; 0x91c <__stack+0x1d>
     91a:	73 c0       	rjmp	.+230    	; 0xa02 <__stack+0x103>
				{
					u8PLEDFadeActive = 0;
     91c:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <u8PLEDFadeActive>
     920:	70 c0       	rjmp	.+224    	; 0xa02 <__stack+0x103>
				}
			}
		}
		else // fall
		{
			u32PLEDFadeIntCount++;
     922:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <u32PLEDFadeIntCount>
     926:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <u32PLEDFadeIntCount+0x1>
     92a:	a0 91 5f 01 	lds	r26, 0x015F	; 0x80015f <u32PLEDFadeIntCount+0x2>
     92e:	b0 91 60 01 	lds	r27, 0x0160	; 0x800160 <u32PLEDFadeIntCount+0x3>
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	a1 1d       	adc	r26, r1
     936:	b1 1d       	adc	r27, r1
     938:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <u32PLEDFadeIntCount>
     93c:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <u32PLEDFadeIntCount+0x1>
     940:	a0 93 5f 01 	sts	0x015F, r26	; 0x80015f <u32PLEDFadeIntCount+0x2>
     944:	b0 93 60 01 	sts	0x0160, r27	; 0x800160 <u32PLEDFadeIntCount+0x3>
			if(u32PLEDFadeIntCount>=u32PLEDFadeIntStep)
     948:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <u32PLEDFadeIntCount>
     94c:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <u32PLEDFadeIntCount+0x1>
     950:	40 91 5f 01 	lds	r20, 0x015F	; 0x80015f <u32PLEDFadeIntCount+0x2>
     954:	50 91 60 01 	lds	r21, 0x0160	; 0x800160 <u32PLEDFadeIntCount+0x3>
     958:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <u32PLEDFadeIntStep>
     95c:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <u32PLEDFadeIntStep+0x1>
     960:	a0 91 5b 01 	lds	r26, 0x015B	; 0x80015b <u32PLEDFadeIntStep+0x2>
     964:	b0 91 5c 01 	lds	r27, 0x015C	; 0x80015c <u32PLEDFadeIntStep+0x3>
     968:	28 17       	cp	r18, r24
     96a:	39 07       	cpc	r19, r25
     96c:	4a 07       	cpc	r20, r26
     96e:	5b 07       	cpc	r21, r27
     970:	08 f4       	brcc	.+2      	; 0x974 <__stack+0x75>
     972:	47 c0       	rjmp	.+142    	; 0xa02 <__stack+0x103>
			{
				u32PLEDFadeIntCount = 0;
     974:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <u32PLEDFadeIntCount>
     978:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <u32PLEDFadeIntCount+0x1>
     97c:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <u32PLEDFadeIntCount+0x2>
     980:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <u32PLEDFadeIntCount+0x3>
				u16PLEDFadeCurrValue--;
     984:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <u16PLEDFadeCurrValue>
     988:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <u16PLEDFadeCurrValue+0x1>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <u16PLEDFadeCurrValue+0x1>
     992:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <u16PLEDFadeCurrValue>
				setPWMDuty(u16PLEDFadeCurrValue);
     996:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <u16PLEDFadeCurrValue>
     99a:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <u16PLEDFadeCurrValue+0x1>
     99e:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <setPWMDuty>
				u8Duty = Map(u16PLEDFadeCurrValue,0,511,0,100);
     9a2:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <u16PLEDFadeCurrValue>
     9a6:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <u16PLEDFadeCurrValue+0x1>
     9aa:	cc 01       	movw	r24, r24
     9ac:	a0 e0       	ldi	r26, 0x00	; 0
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	1f 92       	push	r1
     9b2:	1f 92       	push	r1
     9b4:	1f 92       	push	r1
     9b6:	24 e6       	ldi	r18, 0x64	; 100
     9b8:	2f 93       	push	r18
     9ba:	a1 2c       	mov	r10, r1
     9bc:	b1 2c       	mov	r11, r1
     9be:	65 01       	movw	r12, r10
     9c0:	e1 2c       	mov	r14, r1
     9c2:	f1 2c       	mov	r15, r1
     9c4:	87 01       	movw	r16, r14
     9c6:	ea 94       	dec	r14
     9c8:	f3 94       	inc	r15
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	a9 01       	movw	r20, r18
     9d0:	bc 01       	movw	r22, r24
     9d2:	cd 01       	movw	r24, r26
     9d4:	0e 94 42 10 	call	0x2084	; 0x2084 <Map>
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	dc 01       	movw	r26, r24
     9e2:	cb 01       	movw	r24, r22
     9e4:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <u8Duty>

				if(u16PLEDFadeCurrValue<=u16PLEDFadeStopValue)
     9e8:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <u16PLEDFadeCurrValue>
     9ec:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <u16PLEDFadeCurrValue+0x1>
     9f0:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16PLEDFadeStopValue>
     9f4:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16PLEDFadeStopValue+0x1>
     9f8:	82 17       	cp	r24, r18
     9fa:	93 07       	cpc	r25, r19
     9fc:	10 f0       	brcs	.+4      	; 0xa02 <__stack+0x103>
				{
					u8PLEDFadeActive = 0;
     9fe:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <u8PLEDFadeActive>
				}
			}
		}
	}
	
	if(u8RGBAnimationActive)
     a02:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8RGBAnimationActive>
     a06:	88 23       	and	r24, r24
     a08:	09 f4       	brne	.+2      	; 0xa0c <__stack+0x10d>
     a0a:	48 c0       	rjmp	.+144    	; 0xa9c <__stack+0x19d>
	{
		if(u8RGBBounce)
     a0c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <u8RGBBounce>
     a10:	88 23       	and	r24, r24
     a12:	71 f1       	breq	.+92     	; 0xa70 <__stack+0x171>
		{
			if(u8RGBBounceDirection==0) //normal
     a14:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8RGBBounceDirection>
     a18:	88 23       	and	r24, r24
     a1a:	c1 f4       	brne	.+48     	; 0xa4c <__stack+0x14d>
			{
				u16RGBTimeCounter++;
     a1c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u16RGBTimeCounter>
     a20:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <u16RGBTimeCounter+0x1>
     a24:	01 96       	adiw	r24, 0x01	; 1
     a26:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <u16RGBTimeCounter+0x1>
     a2a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <u16RGBTimeCounter>
				if(u16RGBTimeCounter>=u16RGBTime)
     a2e:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <u16RGBTimeCounter>
     a32:	30 91 4e 01 	lds	r19, 0x014E	; 0x80014e <u16RGBTimeCounter+0x1>
     a36:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u16RGBTime>
     a3a:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <u16RGBTime+0x1>
     a3e:	28 17       	cp	r18, r24
     a40:	39 07       	cpc	r19, r25
     a42:	60 f1       	brcs	.+88     	; 0xa9c <__stack+0x19d>
				{
					u8RGBBounceDirection = 1;
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <u8RGBBounceDirection>
     a4a:	28 c0       	rjmp	.+80     	; 0xa9c <__stack+0x19d>
					//u16RGBTimeCounter--;
				}
			}
			else //reverse
			{
				u16RGBTimeCounter--;
     a4c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u16RGBTimeCounter>
     a50:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <u16RGBTimeCounter+0x1>
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <u16RGBTimeCounter+0x1>
     a5a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <u16RGBTimeCounter>
				if(u16RGBTimeCounter==0)
     a5e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u16RGBTimeCounter>
     a62:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <u16RGBTimeCounter+0x1>
     a66:	89 2b       	or	r24, r25
     a68:	c9 f4       	brne	.+50     	; 0xa9c <__stack+0x19d>
				{
					u8RGBBounceDirection = 0;
     a6a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <u8RGBBounceDirection>
     a6e:	16 c0       	rjmp	.+44     	; 0xa9c <__stack+0x19d>
				}
			}
		}
		else
		{
			u16RGBTimeCounter++;
     a70:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u16RGBTimeCounter>
     a74:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <u16RGBTimeCounter+0x1>
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <u16RGBTimeCounter+0x1>
     a7e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <u16RGBTimeCounter>
			if(u16RGBTimeCounter>=u16RGBTime)
     a82:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <u16RGBTimeCounter>
     a86:	30 91 4e 01 	lds	r19, 0x014E	; 0x80014e <u16RGBTimeCounter+0x1>
     a8a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u16RGBTime>
     a8e:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <u16RGBTime+0x1>
     a92:	28 17       	cp	r18, r24
     a94:	39 07       	cpc	r19, r25
     a96:	10 f0       	brcs	.+4      	; 0xa9c <__stack+0x19d>
			{
				u8RGBAnimationActive = 0;
     a98:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <u8RGBAnimationActive>
		}
		
		
	}
	
	if(u8RGBNewDataReady)
     a9c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8RGBNewDataReady>
     aa0:	88 23       	and	r24, r24
     aa2:	41 f0       	breq	.+16     	; 0xab4 <__stack+0x1b5>
	{
		u8RGBNewDataReady = 0;
     aa4:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <u8RGBNewDataReady>
		
		u8RGBByteIdx = 0;
     aa8:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
		u8RGBIdx = 0;
     aac:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <u8RGBIdx>
		INT0_vect();
     ab0:	0e 94 49 02 	call	0x492	; 0x492 <__vector_1>
	}

	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
	#endif
}
     ab4:	00 00       	nop
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	ff 91       	pop	r31
     abc:	ef 91       	pop	r30
     abe:	bf 91       	pop	r27
     ac0:	af 91       	pop	r26
     ac2:	9f 91       	pop	r25
     ac4:	8f 91       	pop	r24
     ac6:	7f 91       	pop	r23
     ac8:	6f 91       	pop	r22
     aca:	5f 91       	pop	r21
     acc:	4f 91       	pop	r20
     ace:	3f 91       	pop	r19
     ad0:	2f 91       	pop	r18
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	ff 90       	pop	r15
     ad8:	ef 90       	pop	r14
     ada:	df 90       	pop	r13
     adc:	cf 90       	pop	r12
     ade:	bf 90       	pop	r11
     ae0:	af 90       	pop	r10
     ae2:	0f 90       	pop	r0
     ae4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ae8:	0f 90       	pop	r0
     aea:	1f 90       	pop	r1
     aec:	18 95       	reti

00000aee <__vector_19>:


ISR(SPI_STC_vect)
{
     aee:	1f 92       	push	r1
     af0:	0f 92       	push	r0
     af2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     af6:	0f 92       	push	r0
     af8:	11 24       	eor	r1, r1
     afa:	2f 93       	push	r18
     afc:	3f 93       	push	r19
     afe:	4f 93       	push	r20
     b00:	5f 93       	push	r21
     b02:	6f 93       	push	r22
     b04:	7f 93       	push	r23
     b06:	8f 93       	push	r24
     b08:	9f 93       	push	r25
     b0a:	af 93       	push	r26
     b0c:	bf 93       	push	r27
     b0e:	ef 93       	push	r30
     b10:	ff 93       	push	r31
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	1f 92       	push	r1
     b18:	cd b7       	in	r28, 0x3d	; 61
     b1a:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8spiData = SPDR0;
     b1c:	8e e4       	ldi	r24, 0x4E	; 78
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	fc 01       	movw	r30, r24
     b22:	80 81       	ld	r24, Z
     b24:	89 83       	std	Y+1, r24	; 0x01
	
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
	#endif
	
	SPDR0 = 0;
     b26:	8e e4       	ldi	r24, 0x4E	; 78
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	fc 01       	movw	r30, r24
     b2c:	10 82       	st	Z, r1

	switch(SPIBUFFER.spiState)
     b2e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <SPIBUFFER+0x42>
     b32:	88 2f       	mov	r24, r24
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	09 2e       	mov	r0, r25
     b38:	00 0c       	add	r0, r0
     b3a:	aa 0b       	sbc	r26, r26
     b3c:	bb 0b       	sbc	r27, r27
     b3e:	40 e0       	ldi	r20, 0x00	; 0
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	26 e0       	ldi	r18, 0x06	; 6
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	84 1b       	sub	r24, r20
     b48:	95 0b       	sbc	r25, r21
     b4a:	28 17       	cp	r18, r24
     b4c:	39 07       	cpc	r19, r25
     b4e:	08 f4       	brcc	.+2      	; 0xb52 <__vector_19+0x64>
     b50:	11 c1       	rjmp	.+546    	; 0xd74 <__vector_19+0x286>
     b52:	82 5c       	subi	r24, 0xC2	; 194
     b54:	9f 4f       	sbci	r25, 0xFF	; 255
     b56:	fc 01       	movw	r30, r24
     b58:	0c 94 63 11 	jmp	0x22c6	; 0x22c6 <__tablejump2__>
	{
		case READY:
			if(u8spiData>=3)
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	83 30       	cpi	r24, 0x03	; 3
     b60:	90 f0       	brcs	.+36     	; 0xb86 <__vector_19+0x98>
			{
				SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
     b62:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <SPIBUFFER+0x40>
     b66:	88 2f       	mov	r24, r24
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	88 51       	subi	r24, 0x18	; 24
     b6c:	9e 4f       	sbci	r25, 0xFE	; 254
     b6e:	29 81       	ldd	r18, Y+1	; 0x01
     b70:	fc 01       	movw	r30, r24
     b72:	20 83       	st	Z, r18
				SPIBUFFER.u8Count++;
     b74:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <SPIBUFFER+0x40>
     b78:	8f 5f       	subi	r24, 0xFF	; 255
     b7a:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <SPIBUFFER+0x40>
				SPIBUFFER.spiState = WRITE;
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <SPIBUFFER+0x42>
			}
			else
			{
				SPIBUFFER.spiState = READ;
			}
		break;
     b84:	f7 c0       	rjmp	.+494    	; 0xd74 <__vector_19+0x286>
				SPIBUFFER.u8Count++;
				SPIBUFFER.spiState = WRITE;
			}
			else
			{
				SPIBUFFER.spiState = READ;
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <SPIBUFFER+0x42>
			}
		break;
     b8c:	f3 c0       	rjmp	.+486    	; 0xd74 <__vector_19+0x286>

		case WRITE:
			SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
     b8e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <SPIBUFFER+0x40>
     b92:	88 2f       	mov	r24, r24
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	88 51       	subi	r24, 0x18	; 24
     b98:	9e 4f       	sbci	r25, 0xFE	; 254
     b9a:	29 81       	ldd	r18, Y+1	; 0x01
     b9c:	fc 01       	movw	r30, r24
     b9e:	20 83       	st	Z, r18
			SPIBUFFER.u8Count++;
     ba0:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <SPIBUFFER+0x40>
     ba4:	8f 5f       	subi	r24, 0xFF	; 255
     ba6:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <SPIBUFFER+0x40>
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
     baa:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <SPIBUFFER+0x40>
     bae:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <SPIBUFFER>
     bb2:	98 17       	cp	r25, r24
     bb4:	08 f4       	brcc	.+2      	; 0xbb8 <__vector_19+0xca>
     bb6:	db c0       	rjmp	.+438    	; 0xd6e <__vector_19+0x280>
			{
				SPIBUFFER.spiState = DONE_WRITE;
     bb8:	84 e0       	ldi	r24, 0x04	; 4
     bba:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <SPIBUFFER+0x42>
			}
		break;
     bbe:	d7 c0       	rjmp	.+430    	; 0xd6e <__vector_19+0x280>

		case READ:
			SPIBUFFER.u8Count = 0;
     bc0:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <SPIBUFFER+0x40>
			
			switch(u8spiData)
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	88 2f       	mov	r24, r24
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	82 3f       	cpi	r24, 0xF2	; 242
     bcc:	91 05       	cpc	r25, r1
     bce:	79 f1       	breq	.+94     	; 0xc2e <__vector_19+0x140>
     bd0:	83 3f       	cpi	r24, 0xF3	; 243
     bd2:	91 05       	cpc	r25, r1
     bd4:	24 f4       	brge	.+8      	; 0xbde <__vector_19+0xf0>
     bd6:	81 3f       	cpi	r24, 0xF1	; 241
     bd8:	91 05       	cpc	r25, r1
     bda:	51 f0       	breq	.+20     	; 0xbf0 <__vector_19+0x102>
     bdc:	a6 c0       	rjmp	.+332    	; 0xd2a <__vector_19+0x23c>
     bde:	83 3f       	cpi	r24, 0xF3	; 243
     be0:	91 05       	cpc	r25, r1
     be2:	09 f4       	brne	.+2      	; 0xbe6 <__vector_19+0xf8>
     be4:	43 c0       	rjmp	.+134    	; 0xc6c <__vector_19+0x17e>
     be6:	84 3f       	cpi	r24, 0xF4	; 244
     be8:	91 05       	cpc	r25, r1
     bea:	09 f4       	brne	.+2      	; 0xbee <__vector_19+0x100>
     bec:	5e c0       	rjmp	.+188    	; 0xcaa <__vector_19+0x1bc>
     bee:	9d c0       	rjmp	.+314    	; 0xd2a <__vector_19+0x23c>
			{
				case 0xF1:
					SPDR0 = 0x01;
     bf0:	8e e4       	ldi	r24, 0x4E	; 78
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	21 e0       	ldi	r18, 0x01	; 1
     bf6:	fc 01       	movw	r30, r24
     bf8:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     bfa:	84 e0       	ldi	r24, 0x04	; 4
     bfc:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = u8Status;
     c06:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <u8Status>
     c0a:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     c0e:	63 e0       	ldi	r22, 0x03	; 3
     c10:	88 ee       	ldi	r24, 0xE8	; 232
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	0e 94 b9 10 	call	0x2172	; 0x2172 <CRC8>
     c18:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     c1c:	84 e0       	ldi	r24, 0x04	; 4
     c1e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     c22:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     c26:	83 e0       	ldi	r24, 0x03	; 3
     c28:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <SPIBUFFER+0x42>
				break;
     c2c:	82 c0       	rjmp	.+260    	; 0xd32 <__vector_19+0x244>
				
				case 0xF2:
					SPDR0 = 0x01;
     c2e:	8e e4       	ldi	r24, 0x4E	; 78
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	21 e0       	ldi	r18, 0x01	; 1
     c34:	fc 01       	movw	r30, r24
     c36:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     c38:	84 e0       	ldi	r24, 0x04	; 4
     c3a:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = u8Duty;
     c44:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <u8Duty>
     c48:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     c4c:	63 e0       	ldi	r22, 0x03	; 3
     c4e:	88 ee       	ldi	r24, 0xE8	; 232
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	0e 94 b9 10 	call	0x2172	; 0x2172 <CRC8>
     c56:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     c5a:	84 e0       	ldi	r24, 0x04	; 4
     c5c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     c60:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <SPIBUFFER+0x42>
				break;
     c6a:	63 c0       	rjmp	.+198    	; 0xd32 <__vector_19+0x244>
				
				case 0xF3:
					SPDR0 = 0x01;
     c6c:	8e e4       	ldi	r24, 0x4E	; 78
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	21 e0       	ldi	r18, 0x01	; 1
     c72:	fc 01       	movw	r30, r24
     c74:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     c76:	84 e0       	ldi	r24, 0x04	; 4
     c78:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = adcGetTemperature();
     c82:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <adcGetTemperature>
     c86:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     c8a:	63 e0       	ldi	r22, 0x03	; 3
     c8c:	88 ee       	ldi	r24, 0xE8	; 232
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 b9 10 	call	0x2172	; 0x2172 <CRC8>
     c94:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     c98:	84 e0       	ldi	r24, 0x04	; 4
     c9a:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     c9e:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <SPIBUFFER+0x42>
				break;
     ca8:	44 c0       	rjmp	.+136    	; 0xd32 <__vector_19+0x244>

				case 0xF4:
					SPDR0 = 0x01;
     caa:	8e e4       	ldi	r24, 0x4E	; 78
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	21 e0       	ldi	r18, 0x01	; 1
     cb0:	fc 01       	movw	r30, r24
     cb2:	20 83       	st	Z, r18
					if(u8PLEDFadeActive) // ongoing fade
     cb4:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <u8PLEDFadeActive>
     cb8:	88 23       	and	r24, r24
     cba:	09 f1       	breq	.+66     	; 0xcfe <__vector_19+0x210>
					{
						SPIBUFFER.au8Buffer[0] = 7;
     cbc:	87 e0       	ldi	r24, 0x07	; 7
     cbe:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <SPIBUFFER>
						SPIBUFFER.au8Buffer[1] = u8spiData;
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <SPIBUFFER+0x1>
						SPIBUFFER.au8Buffer[2] = u8PLEDFadeStartPercent;
     cc8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <u8PLEDFadeStartPercent>
     ccc:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <SPIBUFFER+0x2>
						SPIBUFFER.au8Buffer[3] = u8PLEDFadeStopPercent;
     cd0:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8PLEDFadeStopPercent>
     cd4:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <SPIBUFFER+0x3>
						SPIBUFFER.au8Buffer[4] = u8PLEDFadeTime;
     cd8:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <u8PLEDFadeTime>
     cdc:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <SPIBUFFER+0x4>
						SPIBUFFER.au8Buffer[5] = u8Duty;
     ce0:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <u8Duty>
     ce4:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <SPIBUFFER+0x5>
						SPIBUFFER.au8Buffer[6] = CRC8(&SPIBUFFER.au8Buffer[0],6);
     ce8:	66 e0       	ldi	r22, 0x06	; 6
     cea:	88 ee       	ldi	r24, 0xE8	; 232
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	0e 94 b9 10 	call	0x2172	; 0x2172 <CRC8>
     cf2:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <SPIBUFFER+0x6>
						SPIBUFFER.u8Count = 7;
     cf6:	87 e0       	ldi	r24, 0x07	; 7
     cf8:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <SPIBUFFER+0x40>
     cfc:	10 c0       	rjmp	.+32     	; 0xd1e <__vector_19+0x230>
					}
					else // no ongoing fade
					{
						SPIBUFFER.au8Buffer[0] = 3;
     cfe:	83 e0       	ldi	r24, 0x03	; 3
     d00:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <SPIBUFFER>
						SPIBUFFER.au8Buffer[1] = u8spiData;
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <SPIBUFFER+0x1>
						SPIBUFFER.au8Buffer[2] = CRC8(&SPIBUFFER.au8Buffer[0],2);
     d0a:	62 e0       	ldi	r22, 0x02	; 2
     d0c:	88 ee       	ldi	r24, 0xE8	; 232
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	0e 94 b9 10 	call	0x2172	; 0x2172 <CRC8>
     d14:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <SPIBUFFER+0x2>
						SPIBUFFER.u8Count = 3;
     d18:	83 e0       	ldi	r24, 0x03	; 3
     d1a:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <SPIBUFFER+0x40>
					}
					SPIBUFFER.u8ReadReturnCount = 0;
     d1e:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     d22:	83 e0       	ldi	r24, 0x03	; 3
     d24:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <SPIBUFFER+0x42>
				break;
     d28:	04 c0       	rjmp	.+8      	; 0xd32 <__vector_19+0x244>
				
				default:
					SPIBUFFER.spiState = IDLE;
     d2a:	86 e0       	ldi	r24, 0x06	; 6
     d2c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <SPIBUFFER+0x42>
				break;
     d30:	00 00       	nop
			}
		break;
     d32:	20 c0       	rjmp	.+64     	; 0xd74 <__vector_19+0x286>
		
		case READ_RETURN:
			SPDR0 = SPIBUFFER.au8Buffer[SPIBUFFER.u8ReadReturnCount];
     d34:	8e e4       	ldi	r24, 0x4E	; 78
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <SPIBUFFER+0x41>
     d3c:	22 2f       	mov	r18, r18
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	28 51       	subi	r18, 0x18	; 24
     d42:	3e 4f       	sbci	r19, 0xFE	; 254
     d44:	f9 01       	movw	r30, r18
     d46:	20 81       	ld	r18, Z
     d48:	fc 01       	movw	r30, r24
     d4a:	20 83       	st	Z, r18
			SPIBUFFER.u8ReadReturnCount++;
     d4c:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <SPIBUFFER+0x41>
     d50:	8f 5f       	subi	r24, 0xFF	; 255
     d52:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <SPIBUFFER+0x41>
			if(SPIBUFFER.u8Count == SPIBUFFER.u8ReadReturnCount)
     d56:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <SPIBUFFER+0x40>
     d5a:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <SPIBUFFER+0x41>
     d5e:	98 17       	cp	r25, r24
     d60:	41 f4       	brne	.+16     	; 0xd72 <__vector_19+0x284>
			{
				SPIBUFFER.spiState = DONE_READ;
     d62:	85 e0       	ldi	r24, 0x05	; 5
     d64:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <SPIBUFFER+0x42>
			}
		break;
     d68:	04 c0       	rjmp	.+8      	; 0xd72 <__vector_19+0x284>
		
		break;

		case IDLE:

		break;
     d6a:	00 00       	nop
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <__vector_19+0x286>
			SPIBUFFER.u8Count++;
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
			{
				SPIBUFFER.spiState = DONE_WRITE;
			}
		break;
     d6e:	00 00       	nop
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <__vector_19+0x286>
			SPIBUFFER.u8ReadReturnCount++;
			if(SPIBUFFER.u8Count == SPIBUFFER.u8ReadReturnCount)
			{
				SPIBUFFER.spiState = DONE_READ;
			}
		break;
     d72:	00 00       	nop
		break;
	}
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
	#endif
}
     d74:	00 00       	nop
     d76:	0f 90       	pop	r0
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	ff 91       	pop	r31
     d7e:	ef 91       	pop	r30
     d80:	bf 91       	pop	r27
     d82:	af 91       	pop	r26
     d84:	9f 91       	pop	r25
     d86:	8f 91       	pop	r24
     d88:	7f 91       	pop	r23
     d8a:	6f 91       	pop	r22
     d8c:	5f 91       	pop	r21
     d8e:	4f 91       	pop	r20
     d90:	3f 91       	pop	r19
     d92:	2f 91       	pop	r18
     d94:	0f 90       	pop	r0
     d96:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d9a:	0f 90       	pop	r0
     d9c:	1f 90       	pop	r1
     d9e:	18 95       	reti

00000da0 <__vector_5>:

ISR(PCINT1_vect)
{
     da0:	1f 92       	push	r1
     da2:	0f 92       	push	r0
     da4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     da8:	0f 92       	push	r0
     daa:	11 24       	eor	r1, r1
     dac:	af 92       	push	r10
     dae:	bf 92       	push	r11
     db0:	cf 92       	push	r12
     db2:	df 92       	push	r13
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	2f 93       	push	r18
     dbe:	3f 93       	push	r19
     dc0:	4f 93       	push	r20
     dc2:	5f 93       	push	r21
     dc4:	6f 93       	push	r22
     dc6:	7f 93       	push	r23
     dc8:	8f 93       	push	r24
     dca:	9f 93       	push	r25
     dcc:	af 93       	push	r26
     dce:	bf 93       	push	r27
     dd0:	ef 93       	push	r30
     dd2:	ff 93       	push	r31
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
	#endif
	
	SPDR0 = 0;
     ddc:	8e e4       	ldi	r24, 0x4E	; 78
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	fc 01       	movw	r30, r24
     de2:	10 82       	st	Z, r1
	if(PIN_SPI & (1<<SPI_SS)) // SS HIGH
     de4:	83 e2       	ldi	r24, 0x23	; 35
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	fc 01       	movw	r30, r24
     dea:	80 81       	ld	r24, Z
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	80 71       	andi	r24, 0x10	; 16
     df2:	99 27       	eor	r25, r25
     df4:	89 2b       	or	r24, r25
     df6:	09 f4       	brne	.+2      	; 0xdfa <__vector_5+0x5a>
     df8:	f3 c1       	rjmp	.+998    	; 0x11e0 <__vector_5+0x440>
	{
		
		if(SPIBUFFER.spiState == DONE_WRITE)
     dfa:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <SPIBUFFER+0x42>
     dfe:	84 30       	cpi	r24, 0x04	; 4
     e00:	09 f0       	breq	.+2      	; 0xe04 <__vector_5+0x64>
     e02:	00 c2       	rjmp	.+1024   	; 0x1204 <__vector_5+0x464>
		{
			if(SPIBUFFER.u8Count == SPIBUFFER.au8Buffer[0]) // correct amount of bytes in buffer
     e04:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <SPIBUFFER+0x40>
     e08:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <SPIBUFFER>
     e0c:	98 17       	cp	r25, r24
     e0e:	09 f0       	breq	.+2      	; 0xe12 <__vector_5+0x72>
     e10:	f9 c1       	rjmp	.+1010   	; 0x1204 <__vector_5+0x464>
			{
				if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
     e12:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <SPIBUFFER+0x40>
     e16:	68 2f       	mov	r22, r24
     e18:	88 ee       	ldi	r24, 0xE8	; 232
     e1a:	91 e0       	ldi	r25, 0x01	; 1
     e1c:	0e 94 b9 10 	call	0x2172	; 0x2172 <CRC8>
     e20:	88 23       	and	r24, r24
     e22:	09 f0       	breq	.+2      	; 0xe26 <__vector_5+0x86>
     e24:	ef c1       	rjmp	.+990    	; 0x1204 <__vector_5+0x464>
				{
					switch(SPIBUFFER.au8Buffer[1]) // command
     e26:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <SPIBUFFER+0x1>
     e2a:	88 2f       	mov	r24, r24
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	09 2e       	mov	r0, r25
     e30:	00 0c       	add	r0, r0
     e32:	aa 0b       	sbc	r26, r26
     e34:	bb 0b       	sbc	r27, r27
     e36:	41 e1       	ldi	r20, 0x11	; 17
     e38:	50 e0       	ldi	r21, 0x00	; 0
     e3a:	21 e3       	ldi	r18, 0x31	; 49
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	84 1b       	sub	r24, r20
     e40:	95 0b       	sbc	r25, r21
     e42:	28 17       	cp	r18, r24
     e44:	39 07       	cpc	r19, r25
     e46:	08 f4       	brcc	.+2      	; 0xe4a <__vector_5+0xaa>
     e48:	dd c1       	rjmp	.+954    	; 0x1204 <__vector_5+0x464>
     e4a:	8b 5b       	subi	r24, 0xBB	; 187
     e4c:	9f 4f       	sbci	r25, 0xFF	; 255
     e4e:	fc 01       	movw	r30, r24
     e50:	0c 94 63 11 	jmp	0x22c6	; 0x22c6 <__tablejump2__>
					{
						case 0x11:
						if(SPIBUFFER.u8Count == 3)
     e54:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <SPIBUFFER+0x40>
     e58:	83 30       	cpi	r24, 0x03	; 3
     e5a:	09 f0       	breq	.+2      	; 0xe5e <__vector_5+0xbe>
     e5c:	c6 c1       	rjmp	.+908    	; 0x11ea <__vector_5+0x44a>
						{
							enablePLED();
     e5e:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <enablePLED>
							u8Status |= (1<<STATUS_PLED);
     e62:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <u8Status>
     e66:	81 60       	ori	r24, 0x01	; 1
     e68:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <u8Status>
						}
						break;
     e6c:	be c1       	rjmp	.+892    	; 0x11ea <__vector_5+0x44a>

						case 0x12:
						if(SPIBUFFER.u8Count == 3)
     e6e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <SPIBUFFER+0x40>
     e72:	83 30       	cpi	r24, 0x03	; 3
     e74:	09 f0       	breq	.+2      	; 0xe78 <__vector_5+0xd8>
     e76:	bb c1       	rjmp	.+886    	; 0x11ee <__vector_5+0x44e>
						{
							disablePLED();
     e78:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <disablePLED>
							u8Status &= ~(1<<STATUS_PLED);
     e7c:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <u8Status>
     e80:	8e 7f       	andi	r24, 0xFE	; 254
     e82:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <u8Status>
						}
						break;
     e86:	b3 c1       	rjmp	.+870    	; 0x11ee <__vector_5+0x44e>

						case 0x13:
						if(SPIBUFFER.u8Count == 4)
     e88:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <SPIBUFFER+0x40>
     e8c:	84 30       	cpi	r24, 0x04	; 4
     e8e:	09 f0       	breq	.+2      	; 0xe92 <__vector_5+0xf2>
     e90:	b0 c1       	rjmp	.+864    	; 0x11f2 <__vector_5+0x452>
						{
							if(u8PLEDFadeActive == 0)
     e92:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <u8PLEDFadeActive>
     e96:	88 23       	and	r24, r24
     e98:	09 f0       	breq	.+2      	; 0xe9c <__vector_5+0xfc>
     e9a:	ab c1       	rjmp	.+854    	; 0x11f2 <__vector_5+0x452>
							{
								if(SPIBUFFER.au8Buffer[2]>100)
     e9c:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <SPIBUFFER+0x2>
     ea0:	85 36       	cpi	r24, 0x65	; 101
     ea2:	20 f0       	brcs	.+8      	; 0xeac <__vector_5+0x10c>
								{
									u8Duty = 100;
     ea4:	84 e6       	ldi	r24, 0x64	; 100
     ea6:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <u8Duty>
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <__vector_5+0x114>
								}
								else
								{
									u8Duty = SPIBUFFER.au8Buffer[2];
     eac:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <SPIBUFFER+0x2>
     eb0:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <u8Duty>
								}
								setPWMDutyPercent(u8Duty);
     eb4:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <u8Duty>
     eb8:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <setPWMDutyPercent>
							}
						}
						break;
     ebc:	9a c1       	rjmp	.+820    	; 0x11f2 <__vector_5+0x452>
						
						case 0x14:
						u8PLEDFadeActive = 0;
     ebe:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <u8PLEDFadeActive>
						break;
     ec2:	a0 c1       	rjmp	.+832    	; 0x1204 <__vector_5+0x464>

						case 0x15:
						if(SPIBUFFER.u8Count == 6)
     ec4:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <SPIBUFFER+0x40>
     ec8:	86 30       	cpi	r24, 0x06	; 6
     eca:	09 f0       	breq	.+2      	; 0xece <__vector_5+0x12e>
     ecc:	94 c1       	rjmp	.+808    	; 0x11f6 <__vector_5+0x456>
						{	
							if(SPIBUFFER.au8Buffer[2]>100)
     ece:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <SPIBUFFER+0x2>
     ed2:	85 36       	cpi	r24, 0x65	; 101
     ed4:	20 f0       	brcs	.+8      	; 0xede <__vector_5+0x13e>
							{
								u8PLEDFadeStartPercent=100;
     ed6:	84 e6       	ldi	r24, 0x64	; 100
     ed8:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <u8PLEDFadeStartPercent>
     edc:	04 c0       	rjmp	.+8      	; 0xee6 <__vector_5+0x146>
							}
							else
							{
								u8PLEDFadeStartPercent = SPIBUFFER.au8Buffer[2];
     ede:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <SPIBUFFER+0x2>
     ee2:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <u8PLEDFadeStartPercent>
							}
							
							if(SPIBUFFER.au8Buffer[3]>100)
     ee6:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <SPIBUFFER+0x3>
     eea:	85 36       	cpi	r24, 0x65	; 101
     eec:	20 f0       	brcs	.+8      	; 0xef6 <__vector_5+0x156>
							{
								u8PLEDFadeStopPercent=100;
     eee:	84 e6       	ldi	r24, 0x64	; 100
     ef0:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <u8PLEDFadeStopPercent>
     ef4:	04 c0       	rjmp	.+8      	; 0xefe <__vector_5+0x15e>
							}
							else
							{
								u8PLEDFadeStopPercent = SPIBUFFER.au8Buffer[3];
     ef6:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <SPIBUFFER+0x3>
     efa:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <u8PLEDFadeStopPercent>
							}
							
							u16PLEDFadeStartValue = Map(u8PLEDFadeStartPercent,0,100,0,511);
     efe:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <u8PLEDFadeStartPercent>
     f02:	88 2f       	mov	r24, r24
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	a0 e0       	ldi	r26, 0x00	; 0
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	1f 92       	push	r1
     f0c:	1f 92       	push	r1
     f0e:	21 e0       	ldi	r18, 0x01	; 1
     f10:	2f 93       	push	r18
     f12:	2f ef       	ldi	r18, 0xFF	; 255
     f14:	2f 93       	push	r18
     f16:	a1 2c       	mov	r10, r1
     f18:	b1 2c       	mov	r11, r1
     f1a:	65 01       	movw	r12, r10
     f1c:	14 e6       	ldi	r17, 0x64	; 100
     f1e:	e1 2e       	mov	r14, r17
     f20:	f1 2c       	mov	r15, r1
     f22:	00 e0       	ldi	r16, 0x00	; 0
     f24:	10 e0       	ldi	r17, 0x00	; 0
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	a9 01       	movw	r20, r18
     f2c:	bc 01       	movw	r22, r24
     f2e:	cd 01       	movw	r24, r26
     f30:	0e 94 42 10 	call	0x2084	; 0x2084 <Map>
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <u16PLEDFadeStartValue+0x1>
     f44:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <u16PLEDFadeStartValue>
							u16PLEDFadeStopValue = Map(u8PLEDFadeStopPercent,0,100,0,511);
     f48:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8PLEDFadeStopPercent>
     f4c:	88 2f       	mov	r24, r24
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	a0 e0       	ldi	r26, 0x00	; 0
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	1f 92       	push	r1
     f56:	1f 92       	push	r1
     f58:	21 e0       	ldi	r18, 0x01	; 1
     f5a:	2f 93       	push	r18
     f5c:	2f ef       	ldi	r18, 0xFF	; 255
     f5e:	2f 93       	push	r18
     f60:	a1 2c       	mov	r10, r1
     f62:	b1 2c       	mov	r11, r1
     f64:	65 01       	movw	r12, r10
     f66:	14 e6       	ldi	r17, 0x64	; 100
     f68:	e1 2e       	mov	r14, r17
     f6a:	f1 2c       	mov	r15, r1
     f6c:	00 e0       	ldi	r16, 0x00	; 0
     f6e:	10 e0       	ldi	r17, 0x00	; 0
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	a9 01       	movw	r20, r18
     f76:	bc 01       	movw	r22, r24
     f78:	cd 01       	movw	r24, r26
     f7a:	0e 94 42 10 	call	0x2084	; 0x2084 <Map>
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <u16PLEDFadeStopValue+0x1>
     f8e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <u16PLEDFadeStopValue>
							u8PLEDFadeTime = SPIBUFFER.au8Buffer[4];
     f92:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <SPIBUFFER+0x4>
     f96:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <u8PLEDFadeTime>
							
							setPWMDuty(u16PLEDFadeStartValue);
     f9a:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u16PLEDFadeStartValue>
     f9e:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <u16PLEDFadeStartValue+0x1>
     fa2:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <setPWMDuty>
							u8Duty = u8PLEDFadeStartPercent;
     fa6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <u8PLEDFadeStartPercent>
     faa:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <u8Duty>
							u16PLEDFadeCurrValue = u16PLEDFadeStartValue;
     fae:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u16PLEDFadeStartValue>
     fb2:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <u16PLEDFadeStartValue+0x1>
     fb6:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <u16PLEDFadeCurrValue+0x1>
     fba:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <u16PLEDFadeCurrValue>
							u32PLEDFadeIntCount = 0;
     fbe:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <u32PLEDFadeIntCount>
     fc2:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <u32PLEDFadeIntCount+0x1>
     fc6:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <u32PLEDFadeIntCount+0x2>
     fca:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <u32PLEDFadeIntCount+0x3>
							
							if(u8PLEDFadeStartPercent<u8PLEDFadeStopPercent) // PLED rise
     fce:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <u8PLEDFadeStartPercent>
     fd2:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8PLEDFadeStopPercent>
     fd6:	98 17       	cp	r25, r24
     fd8:	58 f5       	brcc	.+86     	; 0x1030 <__vector_5+0x290>
							{
								u32PLEDFadeIntStep = 6000*u8PLEDFadeTime/(u16PLEDFadeStopValue-u16PLEDFadeStartValue);
     fda:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <u8PLEDFadeTime>
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	80 e7       	ldi	r24, 0x70	; 112
     fe4:	97 e1       	ldi	r25, 0x17	; 23
     fe6:	28 9f       	mul	r18, r24
     fe8:	a0 01       	movw	r20, r0
     fea:	29 9f       	mul	r18, r25
     fec:	50 0d       	add	r21, r0
     fee:	38 9f       	mul	r19, r24
     ff0:	50 0d       	add	r21, r0
     ff2:	11 24       	eor	r1, r1
     ff4:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <u16PLEDFadeStopValue>
     ff8:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <u16PLEDFadeStopValue+0x1>
     ffc:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u16PLEDFadeStartValue>
    1000:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <u16PLEDFadeStartValue+0x1>
    1004:	28 1b       	sub	r18, r24
    1006:	39 0b       	sbc	r19, r25
    1008:	ca 01       	movw	r24, r20
    100a:	b9 01       	movw	r22, r18
    100c:	0e 94 0e 11 	call	0x221c	; 0x221c <__udivmodhi4>
    1010:	cb 01       	movw	r24, r22
    1012:	cc 01       	movw	r24, r24
    1014:	a0 e0       	ldi	r26, 0x00	; 0
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <u32PLEDFadeIntStep>
    101c:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <u32PLEDFadeIntStep+0x1>
    1020:	a0 93 5b 01 	sts	0x015B, r26	; 0x80015b <u32PLEDFadeIntStep+0x2>
    1024:	b0 93 5c 01 	sts	0x015C, r27	; 0x80015c <u32PLEDFadeIntStep+0x3>
								u8PLEDFadeDirection = 1;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <u8PLEDFadeDirection>
    102e:	2f c0       	rjmp	.+94     	; 0x108e <__vector_5+0x2ee>
							}
							else if(u8PLEDFadeStartPercent>u8PLEDFadeStopPercent) // PLED fall
    1030:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <u8PLEDFadeStartPercent>
    1034:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8PLEDFadeStopPercent>
    1038:	89 17       	cp	r24, r25
    103a:	48 f5       	brcc	.+82     	; 0x108e <__vector_5+0x2ee>
							{
								u32PLEDFadeIntStep = 6000*u8PLEDFadeTime/(u16PLEDFadeStartValue-u16PLEDFadeStopValue);
    103c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <u8PLEDFadeTime>
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	80 e7       	ldi	r24, 0x70	; 112
    1046:	97 e1       	ldi	r25, 0x17	; 23
    1048:	28 9f       	mul	r18, r24
    104a:	a0 01       	movw	r20, r0
    104c:	29 9f       	mul	r18, r25
    104e:	50 0d       	add	r21, r0
    1050:	38 9f       	mul	r19, r24
    1052:	50 0d       	add	r21, r0
    1054:	11 24       	eor	r1, r1
    1056:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <u16PLEDFadeStartValue>
    105a:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <u16PLEDFadeStartValue+0x1>
    105e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u16PLEDFadeStopValue>
    1062:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u16PLEDFadeStopValue+0x1>
    1066:	28 1b       	sub	r18, r24
    1068:	39 0b       	sbc	r19, r25
    106a:	ca 01       	movw	r24, r20
    106c:	b9 01       	movw	r22, r18
    106e:	0e 94 0e 11 	call	0x221c	; 0x221c <__udivmodhi4>
    1072:	cb 01       	movw	r24, r22
    1074:	cc 01       	movw	r24, r24
    1076:	a0 e0       	ldi	r26, 0x00	; 0
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <u32PLEDFadeIntStep>
    107e:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <u32PLEDFadeIntStep+0x1>
    1082:	a0 93 5b 01 	sts	0x015B, r26	; 0x80015b <u32PLEDFadeIntStep+0x2>
    1086:	b0 93 5c 01 	sts	0x015C, r27	; 0x80015c <u32PLEDFadeIntStep+0x3>
								u8PLEDFadeDirection = 0;
    108a:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <u8PLEDFadeDirection>
							}
							
							u8PLEDFadeActive = 1;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <u8PLEDFadeActive>
						}
						break;
    1094:	b0 c0       	rjmp	.+352    	; 0x11f6 <__vector_5+0x456>
					
						case 0x21:
						if(SPIBUFFER.u8Count == 3)
    1096:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <SPIBUFFER+0x40>
    109a:	83 30       	cpi	r24, 0x03	; 3
    109c:	09 f0       	breq	.+2      	; 0x10a0 <__vector_5+0x300>
    109e:	ad c0       	rjmp	.+346    	; 0x11fa <__vector_5+0x45a>
						{
							enableAudio();
    10a0:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <enableAudio>
							u8Status |= (1<<STATUS_AUDIO);
    10a4:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <u8Status>
    10a8:	82 60       	ori	r24, 0x02	; 2
    10aa:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <u8Status>
						}
						break;
    10ae:	a5 c0       	rjmp	.+330    	; 0x11fa <__vector_5+0x45a>

						case 0x22:
						if(SPIBUFFER.u8Count == 3)
    10b0:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <SPIBUFFER+0x40>
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	09 f0       	breq	.+2      	; 0x10ba <__vector_5+0x31a>
    10b8:	a2 c0       	rjmp	.+324    	; 0x11fe <__vector_5+0x45e>
						{
							standbyAudio();
    10ba:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <standbyAudio>
							u8Status &= ~(1<<STATUS_AUDIO);
    10be:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <u8Status>
    10c2:	8d 7f       	andi	r24, 0xFD	; 253
    10c4:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <u8Status>
						}
						break;
    10c8:	9a c0       	rjmp	.+308    	; 0x11fe <__vector_5+0x45e>
					
						case 0x23:
						if(SPIBUFFER.u8Count == 4)
    10ca:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <SPIBUFFER+0x40>
    10ce:	84 30       	cpi	r24, 0x04	; 4
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <__vector_5+0x334>
    10d2:	97 c0       	rjmp	.+302    	; 0x1202 <__vector_5+0x462>
						{
							setVolume(SPIBUFFER.au8Buffer[2]);
    10d4:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <SPIBUFFER+0x2>
    10d8:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <setVolume>
						}
						break;
    10dc:	92 c0       	rjmp	.+292    	; 0x1202 <__vector_5+0x462>
						
						case 0x31:
						RingBuffer_Insert(&RINGBUFFER,0x31);
    10de:	61 e3       	ldi	r22, 0x31	; 49
    10e0:	83 e6       	ldi	r24, 0x63	; 99
    10e2:	91 e0       	ldi	r25, 0x01	; 1
    10e4:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
						RingBuffer_Insert(&RINGBUFFER,0xFF);						
    10e8:	6f ef       	ldi	r22, 0xFF	; 255
    10ea:	83 e6       	ldi	r24, 0x63	; 99
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
						break;
    10f2:	88 c0       	rjmp	.+272    	; 0x1204 <__vector_5+0x464>
						
						case 0x32:
						if(SPIBUFFER.u8Count == 6)
    10f4:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <SPIBUFFER+0x40>
    10f8:	86 30       	cpi	r24, 0x06	; 6
    10fa:	f9 f4       	brne	.+62     	; 0x113a <__vector_5+0x39a>
						{
							RingBuffer_Insert(&RINGBUFFER,0x32);
    10fc:	62 e3       	ldi	r22, 0x32	; 50
    10fe:	83 e6       	ldi	r24, 0x63	; 99
    1100:	91 e0       	ldi	r25, 0x01	; 1
    1102:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[2]);
    1106:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <SPIBUFFER+0x2>
    110a:	68 2f       	mov	r22, r24
    110c:	83 e6       	ldi	r24, 0x63	; 99
    110e:	91 e0       	ldi	r25, 0x01	; 1
    1110:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[3]);
    1114:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <SPIBUFFER+0x3>
    1118:	68 2f       	mov	r22, r24
    111a:	83 e6       	ldi	r24, 0x63	; 99
    111c:	91 e0       	ldi	r25, 0x01	; 1
    111e:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[4]);
    1122:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <SPIBUFFER+0x4>
    1126:	68 2f       	mov	r22, r24
    1128:	83 e6       	ldi	r24, 0x63	; 99
    112a:	91 e0       	ldi	r25, 0x01	; 1
    112c:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,0xFF);
    1130:	6f ef       	ldi	r22, 0xFF	; 255
    1132:	83 e6       	ldi	r24, 0x63	; 99
    1134:	91 e0       	ldi	r25, 0x01	; 1
    1136:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
						}
						
						case 0x41:
						RingBuffer_Insert(&RINGBUFFER,0x41);
    113a:	61 e4       	ldi	r22, 0x41	; 65
    113c:	83 e6       	ldi	r24, 0x63	; 99
    113e:	91 e0       	ldi	r25, 0x01	; 1
    1140:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
						RingBuffer_Insert(&RINGBUFFER,0xFF);
    1144:	6f ef       	ldi	r22, 0xFF	; 255
    1146:	83 e6       	ldi	r24, 0x63	; 99
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
						break;
    114e:	5a c0       	rjmp	.+180    	; 0x1204 <__vector_5+0x464>
						
						case 0x42:
						if(SPIBUFFER.u8Count == 11)
    1150:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <SPIBUFFER+0x40>
    1154:	8b 30       	cpi	r24, 0x0B	; 11
    1156:	09 f0       	breq	.+2      	; 0x115a <__vector_5+0x3ba>
    1158:	55 c0       	rjmp	.+170    	; 0x1204 <__vector_5+0x464>
						{
							RingBuffer_Insert(&RINGBUFFER,0x42);
    115a:	62 e4       	ldi	r22, 0x42	; 66
    115c:	83 e6       	ldi	r24, 0x63	; 99
    115e:	91 e0       	ldi	r25, 0x01	; 1
    1160:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[2]);
    1164:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <SPIBUFFER+0x2>
    1168:	68 2f       	mov	r22, r24
    116a:	83 e6       	ldi	r24, 0x63	; 99
    116c:	91 e0       	ldi	r25, 0x01	; 1
    116e:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[3]);
    1172:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <SPIBUFFER+0x3>
    1176:	68 2f       	mov	r22, r24
    1178:	83 e6       	ldi	r24, 0x63	; 99
    117a:	91 e0       	ldi	r25, 0x01	; 1
    117c:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[4]);
    1180:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <SPIBUFFER+0x4>
    1184:	68 2f       	mov	r22, r24
    1186:	83 e6       	ldi	r24, 0x63	; 99
    1188:	91 e0       	ldi	r25, 0x01	; 1
    118a:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[5]);
    118e:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <SPIBUFFER+0x5>
    1192:	68 2f       	mov	r22, r24
    1194:	83 e6       	ldi	r24, 0x63	; 99
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[6]);
    119c:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <SPIBUFFER+0x6>
    11a0:	68 2f       	mov	r22, r24
    11a2:	83 e6       	ldi	r24, 0x63	; 99
    11a4:	91 e0       	ldi	r25, 0x01	; 1
    11a6:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[7]);
    11aa:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <SPIBUFFER+0x7>
    11ae:	68 2f       	mov	r22, r24
    11b0:	83 e6       	ldi	r24, 0x63	; 99
    11b2:	91 e0       	ldi	r25, 0x01	; 1
    11b4:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[8]);
    11b8:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <SPIBUFFER+0x8>
    11bc:	68 2f       	mov	r22, r24
    11be:	83 e6       	ldi	r24, 0x63	; 99
    11c0:	91 e0       	ldi	r25, 0x01	; 1
    11c2:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,SPIBUFFER.au8Buffer[9]);
    11c6:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <SPIBUFFER+0x9>
    11ca:	68 2f       	mov	r22, r24
    11cc:	83 e6       	ldi	r24, 0x63	; 99
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
							RingBuffer_Insert(&RINGBUFFER,0xFF);
    11d4:	6f ef       	ldi	r22, 0xFF	; 255
    11d6:	83 e6       	ldi	r24, 0x63	; 99
    11d8:	91 e0       	ldi	r25, 0x01	; 1
    11da:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
		SPIBUFFER.spiState = READY;
	}
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
	#endif
}
    11de:	12 c0       	rjmp	.+36     	; 0x1204 <__vector_5+0x464>
			
		}
	}
	else // SS LOW
	{
		SPIBUFFER.u8Count = 0;
    11e0:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <SPIBUFFER+0x40>
		SPIBUFFER.spiState = READY;
    11e4:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <SPIBUFFER+0x42>
	}
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
	#endif
}
    11e8:	0d c0       	rjmp	.+26     	; 0x1204 <__vector_5+0x464>
						if(SPIBUFFER.u8Count == 3)
						{
							enablePLED();
							u8Status |= (1<<STATUS_PLED);
						}
						break;
    11ea:	00 00       	nop
    11ec:	0b c0       	rjmp	.+22     	; 0x1204 <__vector_5+0x464>
						if(SPIBUFFER.u8Count == 3)
						{
							disablePLED();
							u8Status &= ~(1<<STATUS_PLED);
						}
						break;
    11ee:	00 00       	nop
    11f0:	09 c0       	rjmp	.+18     	; 0x1204 <__vector_5+0x464>
									u8Duty = SPIBUFFER.au8Buffer[2];
								}
								setPWMDutyPercent(u8Duty);
							}
						}
						break;
    11f2:	00 00       	nop
    11f4:	07 c0       	rjmp	.+14     	; 0x1204 <__vector_5+0x464>
								u8PLEDFadeDirection = 0;
							}
							
							u8PLEDFadeActive = 1;
						}
						break;
    11f6:	00 00       	nop
    11f8:	05 c0       	rjmp	.+10     	; 0x1204 <__vector_5+0x464>
						if(SPIBUFFER.u8Count == 3)
						{
							enableAudio();
							u8Status |= (1<<STATUS_AUDIO);
						}
						break;
    11fa:	00 00       	nop
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <__vector_5+0x464>
						if(SPIBUFFER.u8Count == 3)
						{
							standbyAudio();
							u8Status &= ~(1<<STATUS_AUDIO);
						}
						break;
    11fe:	00 00       	nop
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <__vector_5+0x464>
						case 0x23:
						if(SPIBUFFER.u8Count == 4)
						{
							setVolume(SPIBUFFER.au8Buffer[2]);
						}
						break;
    1202:	00 00       	nop
		SPIBUFFER.spiState = READY;
	}
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
	#endif
}
    1204:	00 00       	nop
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	ff 91       	pop	r31
    120c:	ef 91       	pop	r30
    120e:	bf 91       	pop	r27
    1210:	af 91       	pop	r26
    1212:	9f 91       	pop	r25
    1214:	8f 91       	pop	r24
    1216:	7f 91       	pop	r23
    1218:	6f 91       	pop	r22
    121a:	5f 91       	pop	r21
    121c:	4f 91       	pop	r20
    121e:	3f 91       	pop	r19
    1220:	2f 91       	pop	r18
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	df 90       	pop	r13
    122c:	cf 90       	pop	r12
    122e:	bf 90       	pop	r11
    1230:	af 90       	pop	r10
    1232:	0f 90       	pop	r0
    1234:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1238:	0f 90       	pop	r0
    123a:	1f 90       	pop	r1
    123c:	18 95       	reti

0000123e <main>:
// 		
// 	}
// }

int main(void)
{
    123e:	df 92       	push	r13
    1240:	ef 92       	push	r14
    1242:	ff 92       	push	r15
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	28 97       	sbiw	r28, 0x08	; 8
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
	uint16_t i;
	uint8_t au8Command[8];
	portInit();
    125c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <portInit>
	adcInit();
    1260:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <adcInit>
	initPWM(0);
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <initPWM>
	startPWM();
    126c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <startPWM>
	spiInitBuffer(&SPIBUFFER);
    1270:	88 ee       	ldi	r24, 0xE8	; 232
    1272:	91 e0       	ldi	r25, 0x01	; 1
    1274:	0e 94 94 0c 	call	0x1928	; 0x1928 <spiInitBuffer>
	spiSlaveInit();
    1278:	0e 94 b4 0c 	call	0x1968	; 0x1968 <spiSlaveInit>
 	spiPcInt();
    127c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <spiPcInt>
	RingBuffer_InitBuffer(&RINGBUFFER);
    1280:	83 e6       	ldi	r24, 0x63	; 99
    1282:	91 e0       	ldi	r25, 0x01	; 1
    1284:	0e 94 b4 00 	call	0x168	; 0x168 <RingBuffer_InitBuffer>
	initRGBooster();
    1288:	0e 94 4d 0c 	call	0x189a	; 0x189a <initRGBooster>
	INT0_Init();
    128c:	0e 94 32 0c 	call	0x1864	; 0x1864 <INT0_Init>
	INT_5ms_Init();
    1290:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <INT_5ms_Init>

	wait_1ms(100);
    1294:	84 e6       	ldi	r24, 0x64	; 100
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <wait_1ms>
	initAudio();
    129c:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <initAudio>
	#ifdef INT_OUT
	DDRD |= (1<<DDRD1);
	PORTD &= ~(1<<PORTD1);
	#endif
		
	sei();
    12a0:	78 94       	sei
	
	u8RGBSingleColor = 0;
    12a2:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <u8RGBSingleColor>
	u8RGBByteIdx = 0;
    12a6:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
	u8RGBIdx = 0;
    12aa:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <u8RGBIdx>
	INT0_vect();
    12ae:	0e 94 49 02 	call	0x492	; 0x492 <__vector_1>
	wait_1ms(100);
    12b2:	84 e6       	ldi	r24, 0x64	; 100
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <wait_1ms>
	
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    12ba:	61 e3       	ldi	r22, 0x31	; 49
    12bc:	83 e6       	ldi	r24, 0x63	; 99
    12be:	91 e0       	ldi	r25, 0x01	; 1
    12c0:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    12c4:	6f ef       	ldi	r22, 0xFF	; 255
    12c6:	83 e6       	ldi	r24, 0x63	; 99
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    12ce:	62 e3       	ldi	r22, 0x32	; 50
    12d0:	83 e6       	ldi	r24, 0x63	; 99
    12d2:	91 e0       	ldi	r25, 0x01	; 1
    12d4:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    12d8:	61 e0       	ldi	r22, 0x01	; 1
    12da:	83 e6       	ldi	r24, 0x63	; 99
    12dc:	91 e0       	ldi	r25, 0x01	; 1
    12de:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    12e2:	61 e0       	ldi	r22, 0x01	; 1
    12e4:	83 e6       	ldi	r24, 0x63	; 99
    12e6:	91 e0       	ldi	r25, 0x01	; 1
    12e8:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    12ec:	60 e1       	ldi	r22, 0x10	; 16
    12ee:	83 e6       	ldi	r24, 0x63	; 99
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    12f6:	6f ef       	ldi	r22, 0xFF	; 255
    12f8:	83 e6       	ldi	r24, 0x63	; 99
    12fa:	91 e0       	ldi	r25, 0x01	; 1
    12fc:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    1300:	61 e3       	ldi	r22, 0x31	; 49
    1302:	83 e6       	ldi	r24, 0x63	; 99
    1304:	91 e0       	ldi	r25, 0x01	; 1
    1306:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    130a:	6f ef       	ldi	r22, 0xFF	; 255
    130c:	83 e6       	ldi	r24, 0x63	; 99
    130e:	91 e0       	ldi	r25, 0x01	; 1
    1310:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    1314:	62 e3       	ldi	r22, 0x32	; 50
    1316:	83 e6       	ldi	r24, 0x63	; 99
    1318:	91 e0       	ldi	r25, 0x01	; 1
    131a:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    131e:	61 e0       	ldi	r22, 0x01	; 1
    1320:	83 e6       	ldi	r24, 0x63	; 99
    1322:	91 e0       	ldi	r25, 0x01	; 1
    1324:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    1328:	61 e0       	ldi	r22, 0x01	; 1
    132a:	83 e6       	ldi	r24, 0x63	; 99
    132c:	91 e0       	ldi	r25, 0x01	; 1
    132e:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    1332:	60 e1       	ldi	r22, 0x10	; 16
    1334:	83 e6       	ldi	r24, 0x63	; 99
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    133c:	6f ef       	ldi	r22, 0xFF	; 255
    133e:	83 e6       	ldi	r24, 0x63	; 99
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    1346:	61 e3       	ldi	r22, 0x31	; 49
    1348:	83 e6       	ldi	r24, 0x63	; 99
    134a:	91 e0       	ldi	r25, 0x01	; 1
    134c:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    1350:	6f ef       	ldi	r22, 0xFF	; 255
    1352:	83 e6       	ldi	r24, 0x63	; 99
    1354:	91 e0       	ldi	r25, 0x01	; 1
    1356:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    135a:	62 e3       	ldi	r22, 0x32	; 50
    135c:	83 e6       	ldi	r24, 0x63	; 99
    135e:	91 e0       	ldi	r25, 0x01	; 1
    1360:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    1364:	61 e0       	ldi	r22, 0x01	; 1
    1366:	83 e6       	ldi	r24, 0x63	; 99
    1368:	91 e0       	ldi	r25, 0x01	; 1
    136a:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    136e:	61 e0       	ldi	r22, 0x01	; 1
    1370:	83 e6       	ldi	r24, 0x63	; 99
    1372:	91 e0       	ldi	r25, 0x01	; 1
    1374:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    1378:	60 e1       	ldi	r22, 0x10	; 16
    137a:	83 e6       	ldi	r24, 0x63	; 99
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    1382:	6f ef       	ldi	r22, 0xFF	; 255
    1384:	83 e6       	ldi	r24, 0x63	; 99
    1386:	91 e0       	ldi	r25, 0x01	; 1
    1388:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    138c:	61 e3       	ldi	r22, 0x31	; 49
    138e:	83 e6       	ldi	r24, 0x63	; 99
    1390:	91 e0       	ldi	r25, 0x01	; 1
    1392:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    1396:	6f ef       	ldi	r22, 0xFF	; 255
    1398:	83 e6       	ldi	r24, 0x63	; 99
    139a:	91 e0       	ldi	r25, 0x01	; 1
    139c:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    13a0:	62 e3       	ldi	r22, 0x32	; 50
    13a2:	83 e6       	ldi	r24, 0x63	; 99
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    13aa:	61 e0       	ldi	r22, 0x01	; 1
    13ac:	83 e6       	ldi	r24, 0x63	; 99
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    13b4:	61 e0       	ldi	r22, 0x01	; 1
    13b6:	83 e6       	ldi	r24, 0x63	; 99
    13b8:	91 e0       	ldi	r25, 0x01	; 1
    13ba:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    13be:	60 e1       	ldi	r22, 0x10	; 16
    13c0:	83 e6       	ldi	r24, 0x63	; 99
    13c2:	91 e0       	ldi	r25, 0x01	; 1
    13c4:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    13c8:	6f ef       	ldi	r22, 0xFF	; 255
    13ca:	83 e6       	ldi	r24, 0x63	; 99
    13cc:	91 e0       	ldi	r25, 0x01	; 1
    13ce:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x31);
    13d2:	61 e3       	ldi	r22, 0x31	; 49
    13d4:	83 e6       	ldi	r24, 0x63	; 99
    13d6:	91 e0       	ldi	r25, 0x01	; 1
    13d8:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    13dc:	6f ef       	ldi	r22, 0xFF	; 255
    13de:	83 e6       	ldi	r24, 0x63	; 99
    13e0:	91 e0       	ldi	r25, 0x01	; 1
    13e2:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	
	RingBuffer_Insert(&RINGBUFFER,0x32);
    13e6:	62 e3       	ldi	r22, 0x32	; 50
    13e8:	83 e6       	ldi	r24, 0x63	; 99
    13ea:	91 e0       	ldi	r25, 0x01	; 1
    13ec:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    13f0:	61 e0       	ldi	r22, 0x01	; 1
    13f2:	83 e6       	ldi	r24, 0x63	; 99
    13f4:	91 e0       	ldi	r25, 0x01	; 1
    13f6:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x01);
    13fa:	61 e0       	ldi	r22, 0x01	; 1
    13fc:	83 e6       	ldi	r24, 0x63	; 99
    13fe:	91 e0       	ldi	r25, 0x01	; 1
    1400:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0x10);
    1404:	60 e1       	ldi	r22, 0x10	; 16
    1406:	83 e6       	ldi	r24, 0x63	; 99
    1408:	91 e0       	ldi	r25, 0x01	; 1
    140a:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
	RingBuffer_Insert(&RINGBUFFER,0xFF);
    140e:	6f ef       	ldi	r22, 0xFF	; 255
    1410:	83 e6       	ldi	r24, 0x63	; 99
    1412:	91 e0       	ldi	r25, 0x01	; 1
    1414:	0e 94 ed 00 	call	0x1da	; 0x1da <RingBuffer_Insert>
		
	
    while (1) 
    {
		if(u8RGBAnimationActive)
    1418:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <u8RGBAnimationActive>
    141c:	88 23       	and	r24, r24
    141e:	09 f4       	brne	.+2      	; 0x1422 <main+0x1e4>
    1420:	9b c1       	rjmp	.+822    	; 0x1758 <main+0x51a>
		{
			if(RingBuffer_CountChar(&RINGBUFFER,0xFF))
    1422:	6f ef       	ldi	r22, 0xFF	; 255
    1424:	83 e6       	ldi	r24, 0x63	; 99
    1426:	91 e0       	ldi	r25, 0x01	; 1
    1428:	0e 94 b4 01 	call	0x368	; 0x368 <RingBuffer_CountChar>
    142c:	88 23       	and	r24, r24
    142e:	09 f4       	brne	.+2      	; 0x1432 <main+0x1f4>
    1430:	4f c0       	rjmp	.+158    	; 0x14d0 <main+0x292>
			{
				RingBuffer_RemoveUntilChar(&RINGBUFFER,au8Command,0xFF,0);
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	4f ef       	ldi	r20, 0xFF	; 255
    1436:	ce 01       	movw	r24, r28
    1438:	01 96       	adiw	r24, 0x01	; 1
    143a:	bc 01       	movw	r22, r24
    143c:	83 e6       	ldi	r24, 0x63	; 99
    143e:	91 e0       	ldi	r25, 0x01	; 1
    1440:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <RingBuffer_RemoveUntilChar>
				
				switch(au8Command[0])
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	88 2f       	mov	r24, r24
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	81 34       	cpi	r24, 0x41	; 65
    144c:	91 05       	cpc	r25, r1
    144e:	21 f0       	breq	.+8      	; 0x1458 <main+0x21a>
    1450:	82 34       	cpi	r24, 0x42	; 66
    1452:	91 05       	cpc	r25, r1
    1454:	21 f0       	breq	.+8      	; 0x145e <main+0x220>
    1456:	3c c0       	rjmp	.+120    	; 0x14d0 <main+0x292>
				{
					case 0x41:
					u8RGBAnimationActive = 0;
    1458:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <u8RGBAnimationActive>
					break;
    145c:	39 c0       	rjmp	.+114    	; 0x14d0 <main+0x292>
					
					case 0x42:
					if(strlen(au8Command) == 9)
    145e:	ce 01       	movw	r24, r28
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	0e 94 83 11 	call	0x2306	; 0x2306 <strlen>
    1466:	09 97       	sbiw	r24, 0x09	; 9
    1468:	91 f5       	brne	.+100    	; 0x14ce <main+0x290>
					{
						u8RGBStartRed = au8Command[1]-1;
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	81 50       	subi	r24, 0x01	; 1
    146e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8RGBStartRed>
						u8RGBStartGreen = au8Command[2]-1;
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	81 50       	subi	r24, 0x01	; 1
    1476:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8RGBStartGreen>
						u8RGBStartBlue = au8Command[3]-1;
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	81 50       	subi	r24, 0x01	; 1
    147e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <u8RGBStartBlue>
						u8RGBStopRed = au8Command[4]-1;
    1482:	8d 81       	ldd	r24, Y+5	; 0x05
    1484:	81 50       	subi	r24, 0x01	; 1
    1486:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <u8RGBStopRed>
						u8RGBStopGreen = au8Command[5]-1;
    148a:	8e 81       	ldd	r24, Y+6	; 0x06
    148c:	81 50       	subi	r24, 0x01	; 1
    148e:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <u8RGBStopGreen>
						u8RGBStopBlue = au8Command[6]-1;
    1492:	8f 81       	ldd	r24, Y+7	; 0x07
    1494:	81 50       	subi	r24, 0x01	; 1
    1496:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8RGBStopBlue>
						u16RGBTime = ((uint16_t)au8Command[7])*200;
    149a:	88 85       	ldd	r24, Y+8	; 0x08
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	48 ec       	ldi	r20, 0xC8	; 200
    14a2:	42 9f       	mul	r20, r18
    14a4:	c0 01       	movw	r24, r0
    14a6:	43 9f       	mul	r20, r19
    14a8:	90 0d       	add	r25, r0
    14aa:	11 24       	eor	r1, r1
    14ac:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <u16RGBTime+0x1>
    14b0:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <u16RGBTime>
						u8RGBBounce = au8Command[8]-1;
    14b4:	89 85       	ldd	r24, Y+9	; 0x09
    14b6:	81 50       	subi	r24, 0x01	; 1
    14b8:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8RGBBounce>
						u8RGBBounceDirection = 0;
    14bc:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <u8RGBBounceDirection>
						u16RGBTimeCounter = 0;
    14c0:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <u16RGBTimeCounter+0x1>
    14c4:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <u16RGBTimeCounter>
						u8RGBAnimationActive = 1;
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8RGBAnimationActive>
					}
					break;
    14ce:	00 00       	nop
				}
			}
			
			if(u8RGBNewDataReady==0)
    14d0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8RGBNewDataReady>
    14d4:	88 23       	and	r24, r24
    14d6:	09 f0       	breq	.+2      	; 0x14da <main+0x29c>
    14d8:	9f cf       	rjmp	.-194    	; 0x1418 <main+0x1da>
			{
				if(u8RGBStartRed<u8RGBStopRed)
    14da:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <u8RGBStartRed>
    14de:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u8RGBStopRed>
    14e2:	98 17       	cp	r25, r24
    14e4:	88 f5       	brcc	.+98     	; 0x1548 <main+0x30a>
				{
					u8RGBRed = (uint8_t)(((uint32_t)(u8RGBStopRed-u8RGBStartRed))*u16RGBTimeCounter/u16RGBTime + u8RGBStartRed);
    14e6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u8RGBStopRed>
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    14f2:	88 2f       	mov	r24, r24
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	a9 01       	movw	r20, r18
    14f8:	48 1b       	sub	r20, r24
    14fa:	59 0b       	sbc	r21, r25
    14fc:	ca 01       	movw	r24, r20
    14fe:	9c 01       	movw	r18, r24
    1500:	99 0f       	add	r25, r25
    1502:	44 0b       	sbc	r20, r20
    1504:	55 0b       	sbc	r21, r21
    1506:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u16RGBTimeCounter>
    150a:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <u16RGBTimeCounter+0x1>
    150e:	cc 01       	movw	r24, r24
    1510:	a0 e0       	ldi	r26, 0x00	; 0
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	bc 01       	movw	r22, r24
    1516:	cd 01       	movw	r24, r26
    1518:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsi3>
    151c:	7b 01       	movw	r14, r22
    151e:	8c 01       	movw	r16, r24
    1520:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u16RGBTime>
    1524:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <u16RGBTime+0x1>
    1528:	9c 01       	movw	r18, r24
    152a:	40 e0       	ldi	r20, 0x00	; 0
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	c8 01       	movw	r24, r16
    1530:	b7 01       	movw	r22, r14
    1532:	0e 94 22 11 	call	0x2244	; 0x2244 <__udivmodsi4>
    1536:	da 01       	movw	r26, r20
    1538:	c9 01       	movw	r24, r18
    153a:	98 2f       	mov	r25, r24
    153c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    1540:	89 0f       	add	r24, r25
    1542:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <u8RGBRed>
    1546:	31 c0       	rjmp	.+98     	; 0x15aa <main+0x36c>
				}
				else
				{
					u8RGBRed = (uint8_t)(u8RGBStartRed - ((uint32_t)(u8RGBStartRed-u8RGBStopRed))*u16RGBTimeCounter/u16RGBTime);
    1548:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <u8RGBStartRed>
    154c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8RGBStartRed>
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u8RGBStopRed>
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	a9 01       	movw	r20, r18
    155e:	48 1b       	sub	r20, r24
    1560:	59 0b       	sbc	r21, r25
    1562:	ca 01       	movw	r24, r20
    1564:	9c 01       	movw	r18, r24
    1566:	99 0f       	add	r25, r25
    1568:	44 0b       	sbc	r20, r20
    156a:	55 0b       	sbc	r21, r21
    156c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u16RGBTimeCounter>
    1570:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <u16RGBTimeCounter+0x1>
    1574:	cc 01       	movw	r24, r24
    1576:	a0 e0       	ldi	r26, 0x00	; 0
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	bc 01       	movw	r22, r24
    157c:	cd 01       	movw	r24, r26
    157e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsi3>
    1582:	7b 01       	movw	r14, r22
    1584:	8c 01       	movw	r16, r24
    1586:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u16RGBTime>
    158a:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <u16RGBTime+0x1>
    158e:	9c 01       	movw	r18, r24
    1590:	40 e0       	ldi	r20, 0x00	; 0
    1592:	50 e0       	ldi	r21, 0x00	; 0
    1594:	c8 01       	movw	r24, r16
    1596:	b7 01       	movw	r22, r14
    1598:	0e 94 22 11 	call	0x2244	; 0x2244 <__udivmodsi4>
    159c:	da 01       	movw	r26, r20
    159e:	c9 01       	movw	r24, r18
    15a0:	5d 2d       	mov	r21, r13
    15a2:	58 1b       	sub	r21, r24
    15a4:	85 2f       	mov	r24, r21
    15a6:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <u8RGBRed>
				}
				
				if(u8RGBStartGreen<u8RGBStopGreen)
    15aa:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <u8RGBStartGreen>
    15ae:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8RGBStopGreen>
    15b2:	98 17       	cp	r25, r24
    15b4:	88 f5       	brcc	.+98     	; 0x1618 <main+0x3da>
				{
					u8RGBGreen = (uint8_t)(((uint32_t)(u8RGBStopGreen-u8RGBStartGreen))*u16RGBTimeCounter/u16RGBTime + u8RGBStartGreen);
    15b6:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8RGBStopGreen>
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    15c2:	88 2f       	mov	r24, r24
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	a9 01       	movw	r20, r18
    15c8:	48 1b       	sub	r20, r24
    15ca:	59 0b       	sbc	r21, r25
    15cc:	ca 01       	movw	r24, r20
    15ce:	9c 01       	movw	r18, r24
    15d0:	99 0f       	add	r25, r25
    15d2:	44 0b       	sbc	r20, r20
    15d4:	55 0b       	sbc	r21, r21
    15d6:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u16RGBTimeCounter>
    15da:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <u16RGBTimeCounter+0x1>
    15de:	cc 01       	movw	r24, r24
    15e0:	a0 e0       	ldi	r26, 0x00	; 0
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	bc 01       	movw	r22, r24
    15e6:	cd 01       	movw	r24, r26
    15e8:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsi3>
    15ec:	7b 01       	movw	r14, r22
    15ee:	8c 01       	movw	r16, r24
    15f0:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u16RGBTime>
    15f4:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <u16RGBTime+0x1>
    15f8:	9c 01       	movw	r18, r24
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	50 e0       	ldi	r21, 0x00	; 0
    15fe:	c8 01       	movw	r24, r16
    1600:	b7 01       	movw	r22, r14
    1602:	0e 94 22 11 	call	0x2244	; 0x2244 <__udivmodsi4>
    1606:	da 01       	movw	r26, r20
    1608:	c9 01       	movw	r24, r18
    160a:	98 2f       	mov	r25, r24
    160c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    1610:	89 0f       	add	r24, r25
    1612:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u8RGBGreen>
    1616:	31 c0       	rjmp	.+98     	; 0x167a <main+0x43c>
				}
				else
				{
					u8RGBGreen = (uint8_t)(u8RGBStartGreen - ((uint32_t)(u8RGBStartGreen-u8RGBStopGreen))*u16RGBTimeCounter/u16RGBTime);
    1618:	d0 90 44 01 	lds	r13, 0x0144	; 0x800144 <u8RGBStartGreen>
    161c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8RGBStartGreen>
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8RGBStopGreen>
    1628:	88 2f       	mov	r24, r24
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	a9 01       	movw	r20, r18
    162e:	48 1b       	sub	r20, r24
    1630:	59 0b       	sbc	r21, r25
    1632:	ca 01       	movw	r24, r20
    1634:	9c 01       	movw	r18, r24
    1636:	99 0f       	add	r25, r25
    1638:	44 0b       	sbc	r20, r20
    163a:	55 0b       	sbc	r21, r21
    163c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u16RGBTimeCounter>
    1640:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <u16RGBTimeCounter+0x1>
    1644:	cc 01       	movw	r24, r24
    1646:	a0 e0       	ldi	r26, 0x00	; 0
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsi3>
    1652:	7b 01       	movw	r14, r22
    1654:	8c 01       	movw	r16, r24
    1656:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u16RGBTime>
    165a:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <u16RGBTime+0x1>
    165e:	9c 01       	movw	r18, r24
    1660:	40 e0       	ldi	r20, 0x00	; 0
    1662:	50 e0       	ldi	r21, 0x00	; 0
    1664:	c8 01       	movw	r24, r16
    1666:	b7 01       	movw	r22, r14
    1668:	0e 94 22 11 	call	0x2244	; 0x2244 <__udivmodsi4>
    166c:	da 01       	movw	r26, r20
    166e:	c9 01       	movw	r24, r18
    1670:	5d 2d       	mov	r21, r13
    1672:	58 1b       	sub	r21, r24
    1674:	85 2f       	mov	r24, r21
    1676:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u8RGBGreen>
				}
				
				if(u8RGBStartBlue<u8RGBStopBlue)
    167a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <u8RGBStartBlue>
    167e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u8RGBStopBlue>
    1682:	98 17       	cp	r25, r24
    1684:	88 f5       	brcc	.+98     	; 0x16e8 <main+0x4aa>
				{
					u8RGBBlue = (uint8_t)(((uint32_t)(u8RGBStopBlue-u8RGBStartBlue))*u16RGBTimeCounter/u16RGBTime + u8RGBStartBlue);
    1686:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u8RGBStopBlue>
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    1692:	88 2f       	mov	r24, r24
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	a9 01       	movw	r20, r18
    1698:	48 1b       	sub	r20, r24
    169a:	59 0b       	sbc	r21, r25
    169c:	ca 01       	movw	r24, r20
    169e:	9c 01       	movw	r18, r24
    16a0:	99 0f       	add	r25, r25
    16a2:	44 0b       	sbc	r20, r20
    16a4:	55 0b       	sbc	r21, r21
    16a6:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u16RGBTimeCounter>
    16aa:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <u16RGBTimeCounter+0x1>
    16ae:	cc 01       	movw	r24, r24
    16b0:	a0 e0       	ldi	r26, 0x00	; 0
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsi3>
    16bc:	7b 01       	movw	r14, r22
    16be:	8c 01       	movw	r16, r24
    16c0:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u16RGBTime>
    16c4:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <u16RGBTime+0x1>
    16c8:	9c 01       	movw	r18, r24
    16ca:	40 e0       	ldi	r20, 0x00	; 0
    16cc:	50 e0       	ldi	r21, 0x00	; 0
    16ce:	c8 01       	movw	r24, r16
    16d0:	b7 01       	movw	r22, r14
    16d2:	0e 94 22 11 	call	0x2244	; 0x2244 <__udivmodsi4>
    16d6:	da 01       	movw	r26, r20
    16d8:	c9 01       	movw	r24, r18
    16da:	98 2f       	mov	r25, r24
    16dc:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    16e0:	89 0f       	add	r24, r25
    16e2:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <u8RGBBlue>
    16e6:	31 c0       	rjmp	.+98     	; 0x174a <main+0x50c>
				}
				else
				{
					u8RGBBlue = (uint8_t)(u8RGBStartBlue - ((uint32_t)(u8RGBStartBlue-u8RGBStopBlue))*u16RGBTimeCounter/u16RGBTime);
    16e8:	d0 90 45 01 	lds	r13, 0x0145	; 0x800145 <u8RGBStartBlue>
    16ec:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8RGBStartBlue>
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u8RGBStopBlue>
    16f8:	88 2f       	mov	r24, r24
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a9 01       	movw	r20, r18
    16fe:	48 1b       	sub	r20, r24
    1700:	59 0b       	sbc	r21, r25
    1702:	ca 01       	movw	r24, r20
    1704:	9c 01       	movw	r18, r24
    1706:	99 0f       	add	r25, r25
    1708:	44 0b       	sbc	r20, r20
    170a:	55 0b       	sbc	r21, r21
    170c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u16RGBTimeCounter>
    1710:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <u16RGBTimeCounter+0x1>
    1714:	cc 01       	movw	r24, r24
    1716:	a0 e0       	ldi	r26, 0x00	; 0
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	bc 01       	movw	r22, r24
    171c:	cd 01       	movw	r24, r26
    171e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsi3>
    1722:	7b 01       	movw	r14, r22
    1724:	8c 01       	movw	r16, r24
    1726:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u16RGBTime>
    172a:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <u16RGBTime+0x1>
    172e:	9c 01       	movw	r18, r24
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	c8 01       	movw	r24, r16
    1736:	b7 01       	movw	r22, r14
    1738:	0e 94 22 11 	call	0x2244	; 0x2244 <__udivmodsi4>
    173c:	da 01       	movw	r26, r20
    173e:	c9 01       	movw	r24, r18
    1740:	5d 2d       	mov	r21, r13
    1742:	58 1b       	sub	r21, r24
    1744:	85 2f       	mov	r24, r21
    1746:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <u8RGBBlue>
				}
				u8RGBSingleColor = 1;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8RGBSingleColor>
				u8RGBNewDataReady = 1;
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBNewDataReady>
    1756:	60 ce       	rjmp	.-832    	; 0x1418 <main+0x1da>
			}
		}
		else // no animation active
		{
			if(RingBuffer_CountChar(&RINGBUFFER,0xFF) && (u8RGBNewDataReady==0))
    1758:	6f ef       	ldi	r22, 0xFF	; 255
    175a:	83 e6       	ldi	r24, 0x63	; 99
    175c:	91 e0       	ldi	r25, 0x01	; 1
    175e:	0e 94 b4 01 	call	0x368	; 0x368 <RingBuffer_CountChar>
    1762:	88 23       	and	r24, r24
    1764:	09 f4       	brne	.+2      	; 0x1768 <main+0x52a>
    1766:	58 ce       	rjmp	.-848    	; 0x1418 <main+0x1da>
    1768:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8RGBNewDataReady>
    176c:	88 23       	and	r24, r24
    176e:	09 f0       	breq	.+2      	; 0x1772 <main+0x534>
    1770:	53 ce       	rjmp	.-858    	; 0x1418 <main+0x1da>
			{
				RingBuffer_RemoveUntilChar(&RINGBUFFER,au8Command,0xFF,0);
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	4f ef       	ldi	r20, 0xFF	; 255
    1776:	ce 01       	movw	r24, r28
    1778:	01 96       	adiw	r24, 0x01	; 1
    177a:	bc 01       	movw	r22, r24
    177c:	83 e6       	ldi	r24, 0x63	; 99
    177e:	91 e0       	ldi	r25, 0x01	; 1
    1780:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <RingBuffer_RemoveUntilChar>
				
				switch(au8Command[0])
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	88 2f       	mov	r24, r24
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	82 33       	cpi	r24, 0x32	; 50
    178c:	91 05       	cpc	r25, r1
    178e:	99 f0       	breq	.+38     	; 0x17b6 <main+0x578>
    1790:	82 34       	cpi	r24, 0x42	; 66
    1792:	91 05       	cpc	r25, r1
    1794:	51 f1       	breq	.+84     	; 0x17ea <main+0x5ac>
    1796:	c1 97       	sbiw	r24, 0x31	; 49
    1798:	09 f0       	breq	.+2      	; 0x179c <main+0x55e>
    179a:	63 c0       	rjmp	.+198    	; 0x1862 <main+0x624>
				{
					case 0x31:
					u8RGBRed = 0;
    179c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <u8RGBRed>
					u8RGBGreen = 0;
    17a0:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <u8RGBGreen>
					u8RGBBlue = 0;
    17a4:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <u8RGBBlue>
					u8RGBSingleColor = 1;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8RGBSingleColor>
					u8RGBNewDataReady = 1;
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBNewDataReady>
					break;
    17b4:	56 c0       	rjmp	.+172    	; 0x1862 <main+0x624>
					
					case 0x32:
					if(strlen(au8Command) == 4)
    17b6:	ce 01       	movw	r24, r28
    17b8:	01 96       	adiw	r24, 0x01	; 1
    17ba:	0e 94 83 11 	call	0x2306	; 0x2306 <strlen>
    17be:	04 97       	sbiw	r24, 0x04	; 4
    17c0:	09 f0       	breq	.+2      	; 0x17c4 <main+0x586>
    17c2:	4c c0       	rjmp	.+152    	; 0x185c <main+0x61e>
					{
						u8RGBRed = au8Command[1]-1;
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	81 50       	subi	r24, 0x01	; 1
    17c8:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <u8RGBRed>
						u8RGBGreen = au8Command[2]-1;
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	81 50       	subi	r24, 0x01	; 1
    17d0:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u8RGBGreen>
						u8RGBBlue = au8Command[3]-1;
    17d4:	8c 81       	ldd	r24, Y+4	; 0x04
    17d6:	81 50       	subi	r24, 0x01	; 1
    17d8:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <u8RGBBlue>
						u8RGBSingleColor = 1;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8RGBSingleColor>
						u8RGBNewDataReady = 1;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8RGBNewDataReady>
					}
					break;
    17e8:	39 c0       	rjmp	.+114    	; 0x185c <main+0x61e>
					
					case 0x42:
					if(strlen(au8Command) == 9)
    17ea:	ce 01       	movw	r24, r28
    17ec:	01 96       	adiw	r24, 0x01	; 1
    17ee:	0e 94 83 11 	call	0x2306	; 0x2306 <strlen>
    17f2:	09 97       	sbiw	r24, 0x09	; 9
    17f4:	a9 f5       	brne	.+106    	; 0x1860 <main+0x622>
					{
						u8RGBStartRed = au8Command[1]-1;
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	81 50       	subi	r24, 0x01	; 1
    17fa:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8RGBStartRed>
						u8RGBStartGreen = au8Command[2]-1;
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	81 50       	subi	r24, 0x01	; 1
    1802:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8RGBStartGreen>
						u8RGBStartBlue = au8Command[3]-1;
    1806:	8c 81       	ldd	r24, Y+4	; 0x04
    1808:	81 50       	subi	r24, 0x01	; 1
    180a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <u8RGBStartBlue>
						u8RGBStopRed = au8Command[4]-1;
    180e:	8d 81       	ldd	r24, Y+5	; 0x05
    1810:	81 50       	subi	r24, 0x01	; 1
    1812:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <u8RGBStopRed>
						u8RGBStopGreen = au8Command[5]-1;
    1816:	8e 81       	ldd	r24, Y+6	; 0x06
    1818:	81 50       	subi	r24, 0x01	; 1
    181a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <u8RGBStopGreen>
						u8RGBStopBlue = au8Command[6]-1;
    181e:	8f 81       	ldd	r24, Y+7	; 0x07
    1820:	81 50       	subi	r24, 0x01	; 1
    1822:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8RGBStopBlue>
						u16RGBTime = ((uint16_t)au8Command[7])*200;
    1826:	88 85       	ldd	r24, Y+8	; 0x08
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	48 ec       	ldi	r20, 0xC8	; 200
    182e:	42 9f       	mul	r20, r18
    1830:	c0 01       	movw	r24, r0
    1832:	43 9f       	mul	r20, r19
    1834:	90 0d       	add	r25, r0
    1836:	11 24       	eor	r1, r1
    1838:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <u16RGBTime+0x1>
    183c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <u16RGBTime>
						u8RGBBounce = au8Command[8]-1;
    1840:	89 85       	ldd	r24, Y+9	; 0x09
    1842:	81 50       	subi	r24, 0x01	; 1
    1844:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <u8RGBBounce>
						u8RGBBounceDirection = 0;
    1848:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <u8RGBBounceDirection>
						u16RGBTimeCounter = 0;
    184c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <u16RGBTimeCounter+0x1>
    1850:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <u16RGBTimeCounter>
						u8RGBAnimationActive = 1;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <u8RGBAnimationActive>
					}
					break;
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <main+0x622>
						u8RGBGreen = au8Command[2]-1;
						u8RGBBlue = au8Command[3]-1;
						u8RGBSingleColor = 1;
						u8RGBNewDataReady = 1;
					}
					break;
    185c:	00 00       	nop
    185e:	dc cd       	rjmp	.-1096   	; 0x1418 <main+0x1da>
						u8RGBBounce = au8Command[8]-1;
						u8RGBBounceDirection = 0;
						u16RGBTimeCounter = 0;
						u8RGBAnimationActive = 1;
					}
					break;
    1860:	00 00       	nop
				}
			}
		}
    }
    1862:	da cd       	rjmp	.-1100   	; 0x1418 <main+0x1da>

00001864 <INT0_Init>:
#include "utils.h"
#include "rgbooster.h"


void INT0_Init(void)
{
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
	EICRA |= (1<<ISC01); // interrupt on falling edge
    186c:	89 e6       	ldi	r24, 0x69	; 105
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	29 e6       	ldi	r18, 0x69	; 105
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	f9 01       	movw	r30, r18
    1876:	20 81       	ld	r18, Z
    1878:	22 60       	ori	r18, 0x02	; 2
    187a:	fc 01       	movw	r30, r24
    187c:	20 83       	st	Z, r18
	EIFR  = (1<<INTF0); // clear flag
    187e:	8c e3       	ldi	r24, 0x3C	; 60
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	21 e0       	ldi	r18, 0x01	; 1
    1884:	fc 01       	movw	r30, r24
    1886:	20 83       	st	Z, r18
	EIMSK = (1<<INT0);  // INT1 enable
    1888:	8d e3       	ldi	r24, 0x3D	; 61
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	21 e0       	ldi	r18, 0x01	; 1
    188e:	fc 01       	movw	r30, r24
    1890:	20 83       	st	Z, r18
}
    1892:	00 00       	nop
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	08 95       	ret

0000189a <initRGBooster>:

void initRGBooster(void)
{
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
	DDR_DATA_LOW |= DATA_LOW_BITMASK; //RGB DATA LOWER NIBBLE -> OUTPUT
    18a2:	84 e2       	ldi	r24, 0x24	; 36
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	24 e2       	ldi	r18, 0x24	; 36
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	f9 01       	movw	r30, r18
    18ac:	20 81       	ld	r18, Z
    18ae:	2f 60       	ori	r18, 0x0F	; 15
    18b0:	fc 01       	movw	r30, r24
    18b2:	20 83       	st	Z, r18
	PORT_DATA_LOW &= ~DATA_LOW_BITMASK; //RGB DATA LOWER NIBBLE -> LOW
    18b4:	85 e2       	ldi	r24, 0x25	; 37
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	25 e2       	ldi	r18, 0x25	; 37
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	f9 01       	movw	r30, r18
    18be:	20 81       	ld	r18, Z
    18c0:	20 7f       	andi	r18, 0xF0	; 240
    18c2:	fc 01       	movw	r30, r24
    18c4:	20 83       	st	Z, r18
	DDR_DATA_HIGH |= DATA_HIGH_BITMASK; //RGB DATA HIGHER NIBBLE -> OUTPUT
    18c6:	81 e2       	ldi	r24, 0x21	; 33
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	21 e2       	ldi	r18, 0x21	; 33
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	f9 01       	movw	r30, r18
    18d0:	20 81       	ld	r18, Z
    18d2:	20 6f       	ori	r18, 0xF0	; 240
    18d4:	fc 01       	movw	r30, r24
    18d6:	20 83       	st	Z, r18
	PORT_DATA_HIGH &= ~DATA_HIGH_BITMASK; //RGB DATA HIGHER NIBBLE -> LOW
    18d8:	82 e2       	ldi	r24, 0x22	; 34
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	22 e2       	ldi	r18, 0x22	; 34
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	f9 01       	movw	r30, r18
    18e2:	20 81       	ld	r18, Z
    18e4:	2f 70       	andi	r18, 0x0F	; 15
    18e6:	fc 01       	movw	r30, r24
    18e8:	20 83       	st	Z, r18

	DDR_CONTROL |= (1<<SEND); //SEND PIN -> OUTPUT
    18ea:	8a e2       	ldi	r24, 0x2A	; 42
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	2a e2       	ldi	r18, 0x2A	; 42
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	f9 01       	movw	r30, r18
    18f4:	20 81       	ld	r18, Z
    18f6:	28 60       	ori	r18, 0x08	; 8
    18f8:	fc 01       	movw	r30, r24
    18fa:	20 83       	st	Z, r18
	PORT_CONTROL &= ~(1<<SEND); //SEND PIN LOW
    18fc:	8b e2       	ldi	r24, 0x2B	; 43
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	2b e2       	ldi	r18, 0x2B	; 43
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	f9 01       	movw	r30, r18
    1906:	20 81       	ld	r18, Z
    1908:	27 7f       	andi	r18, 0xF7	; 247
    190a:	fc 01       	movw	r30, r24
    190c:	20 83       	st	Z, r18
	DDR_CONTROL &= ~(1<<DONE_BUSY); //DONE BUSY PIN -> INPUT
    190e:	8a e2       	ldi	r24, 0x2A	; 42
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	2a e2       	ldi	r18, 0x2A	; 42
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	f9 01       	movw	r30, r18
    1918:	20 81       	ld	r18, Z
    191a:	2b 7f       	andi	r18, 0xFB	; 251
    191c:	fc 01       	movw	r30, r24
    191e:	20 83       	st	Z, r18
    1920:	00 00       	nop
    1922:	df 91       	pop	r29
    1924:	cf 91       	pop	r28
    1926:	08 95       	ret

00001928 <spiInitBuffer>:
#include <avr/io.h>
#include "spi.h"


void spiInitBuffer(SpiBuf_t* Buffer)
{
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	00 d0       	rcall	.+0      	; 0x192e <spiInitBuffer+0x6>
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	9a 83       	std	Y+2, r25	; 0x02
    1934:	89 83       	std	Y+1, r24	; 0x01
	Buffer->u8Count = 0;
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	9a 81       	ldd	r25, Y+2	; 0x02
    193a:	80 5c       	subi	r24, 0xC0	; 192
    193c:	9f 4f       	sbci	r25, 0xFF	; 255
    193e:	fc 01       	movw	r30, r24
    1940:	10 82       	st	Z, r1
	Buffer->u8ReadReturnCount = 0;
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	9a 81       	ldd	r25, Y+2	; 0x02
    1946:	8f 5b       	subi	r24, 0xBF	; 191
    1948:	9f 4f       	sbci	r25, 0xFF	; 255
    194a:	fc 01       	movw	r30, r24
    194c:	10 82       	st	Z, r1
	Buffer->spiState = IDLE;
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	9a 81       	ldd	r25, Y+2	; 0x02
    1952:	8e 5b       	subi	r24, 0xBE	; 190
    1954:	9f 4f       	sbci	r25, 0xFF	; 255
    1956:	26 e0       	ldi	r18, 0x06	; 6
    1958:	fc 01       	movw	r30, r24
    195a:	20 83       	st	Z, r18
}
    195c:	00 00       	nop
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	08 95       	ret

00001968 <spiSlaveInit>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiSlaveInit(void)
{
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	1f 92       	push	r1
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t ucTemp;
	SPSR0 = 0;
    1972:	8d e4       	ldi	r24, 0x4D	; 77
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	fc 01       	movw	r30, r24
    1978:	10 82       	st	Z, r1
	SPCR0 = (1<<SPIE0);
    197a:	8c e4       	ldi	r24, 0x4C	; 76
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	20 e8       	ldi	r18, 0x80	; 128
    1980:	fc 01       	movw	r30, r24
    1982:	20 83       	st	Z, r18
	
	ucTemp = SPSR0;					
    1984:	8d e4       	ldi	r24, 0x4D	; 77
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	fc 01       	movw	r30, r24
    198a:	80 81       	ld	r24, Z
    198c:	89 83       	std	Y+1, r24	; 0x01
	ucTemp = SPDR0;
    198e:	8e e4       	ldi	r24, 0x4E	; 78
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	fc 01       	movw	r30, r24
    1994:	80 81       	ld	r24, Z
    1996:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0;
    1998:	8e e4       	ldi	r24, 0x4E	; 78
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	fc 01       	movw	r30, r24
    199e:	10 82       	st	Z, r1
	
	DDRB |= (1<<PINB6);				// MISO needs to be an output
    19a0:	84 e2       	ldi	r24, 0x24	; 36
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	24 e2       	ldi	r18, 0x24	; 36
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	f9 01       	movw	r30, r18
    19aa:	20 81       	ld	r18, Z
    19ac:	20 64       	ori	r18, 0x40	; 64
    19ae:	fc 01       	movw	r30, r24
    19b0:	20 83       	st	Z, r18
	
	SPCR0 |= (1<<SPE0);
    19b2:	8c e4       	ldi	r24, 0x4C	; 76
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	2c e4       	ldi	r18, 0x4C	; 76
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	f9 01       	movw	r30, r18
    19bc:	20 81       	ld	r18, Z
    19be:	20 64       	ori	r18, 0x40	; 64
    19c0:	fc 01       	movw	r30, r24
    19c2:	20 83       	st	Z, r18
}
    19c4:	00 00       	nop
    19c6:	0f 90       	pop	r0
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	08 95       	ret

000019ce <spiPcInt>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiPcInt(void)
{
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
	PCICR |= (1<<PCIE1);
    19d6:	88 e6       	ldi	r24, 0x68	; 104
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	28 e6       	ldi	r18, 0x68	; 104
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	f9 01       	movw	r30, r18
    19e0:	20 81       	ld	r18, Z
    19e2:	22 60       	ori	r18, 0x02	; 2
    19e4:	fc 01       	movw	r30, r24
    19e6:	20 83       	st	Z, r18
	PCIFR = (1<<PCIF1);
    19e8:	8b e3       	ldi	r24, 0x3B	; 59
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	22 e0       	ldi	r18, 0x02	; 2
    19ee:	fc 01       	movw	r30, r24
    19f0:	20 83       	st	Z, r18
	PCMSK1 |= (1<<PCINT12);
    19f2:	8c e6       	ldi	r24, 0x6C	; 108
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	2c e6       	ldi	r18, 0x6C	; 108
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	f9 01       	movw	r30, r18
    19fc:	20 81       	ld	r18, Z
    19fe:	20 61       	ori	r18, 0x10	; 16
    1a00:	fc 01       	movw	r30, r24
    1a02:	20 83       	st	Z, r18
    1a04:	00 00       	nop
    1a06:	df 91       	pop	r29
    1a08:	cf 91       	pop	r28
    1a0a:	08 95       	ret

00001a0c <portInit>:
 * @return 8bit analog value
 *****************************************************************************/
uint8_t adcGetValue(void)
{
	return(ADCH);
}
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	8a e2       	ldi	r24, 0x2A	; 42
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	2a e2       	ldi	r18, 0x2A	; 42
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	f9 01       	movw	r30, r18
    1a1e:	20 81       	ld	r18, Z
    1a20:	20 63       	ori	r18, 0x30	; 48
    1a22:	fc 01       	movw	r30, r24
    1a24:	20 83       	st	Z, r18
    1a26:	8b e2       	ldi	r24, 0x2B	; 43
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	2b e2       	ldi	r18, 0x2B	; 43
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	f9 01       	movw	r30, r18
    1a30:	20 81       	ld	r18, Z
    1a32:	20 62       	ori	r18, 0x20	; 32
    1a34:	fc 01       	movw	r30, r24
    1a36:	20 83       	st	Z, r18
    1a38:	8b e2       	ldi	r24, 0x2B	; 43
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	2b e2       	ldi	r18, 0x2B	; 43
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	f9 01       	movw	r30, r18
    1a42:	20 81       	ld	r18, Z
    1a44:	2f 7e       	andi	r18, 0xEF	; 239
    1a46:	fc 01       	movw	r30, r24
    1a48:	20 83       	st	Z, r18
    1a4a:	8a e2       	ldi	r24, 0x2A	; 42
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	2a e2       	ldi	r18, 0x2A	; 42
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	f9 01       	movw	r30, r18
    1a54:	20 81       	ld	r18, Z
    1a56:	20 68       	ori	r18, 0x80	; 128
    1a58:	fc 01       	movw	r30, r24
    1a5a:	20 83       	st	Z, r18
    1a5c:	8b e2       	ldi	r24, 0x2B	; 43
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	2b e2       	ldi	r18, 0x2B	; 43
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	f9 01       	movw	r30, r18
    1a66:	20 81       	ld	r18, Z
    1a68:	20 68       	ori	r18, 0x80	; 128
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	20 83       	st	Z, r18
    1a6e:	8a e2       	ldi	r24, 0x2A	; 42
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	2a e2       	ldi	r18, 0x2A	; 42
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	f9 01       	movw	r30, r18
    1a78:	20 81       	ld	r18, Z
    1a7a:	2f 7b       	andi	r18, 0xBF	; 191
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	20 83       	st	Z, r18
    1a80:	8a e2       	ldi	r24, 0x2A	; 42
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	2a e2       	ldi	r18, 0x2A	; 42
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	f9 01       	movw	r30, r18
    1a8a:	20 81       	ld	r18, Z
    1a8c:	2c 7f       	andi	r18, 0xFC	; 252
    1a8e:	fc 01       	movw	r30, r24
    1a90:	20 83       	st	Z, r18
    1a92:	8b e2       	ldi	r24, 0x2B	; 43
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	2b e2       	ldi	r18, 0x2B	; 43
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	f9 01       	movw	r30, r18
    1a9c:	20 81       	ld	r18, Z
    1a9e:	21 60       	ori	r18, 0x01	; 1
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	20 83       	st	Z, r18
    1aa4:	81 e2       	ldi	r24, 0x21	; 33
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	21 e2       	ldi	r18, 0x21	; 33
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	f9 01       	movw	r30, r18
    1aae:	20 81       	ld	r18, Z
    1ab0:	2e 7f       	andi	r18, 0xFE	; 254
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	20 83       	st	Z, r18
    1ab6:	82 e2       	ldi	r24, 0x22	; 34
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	22 e2       	ldi	r18, 0x22	; 34
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	f9 01       	movw	r30, r18
    1ac0:	20 81       	ld	r18, Z
    1ac2:	2e 7f       	andi	r18, 0xFE	; 254
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	20 83       	st	Z, r18
    1ac8:	8e e7       	ldi	r24, 0x7E	; 126
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	2e e7       	ldi	r18, 0x7E	; 126
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	f9 01       	movw	r30, r18
    1ad2:	20 81       	ld	r18, Z
    1ad4:	21 60       	ori	r18, 0x01	; 1
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	20 83       	st	Z, r18
    1ada:	81 e2       	ldi	r24, 0x21	; 33
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	21 e2       	ldi	r18, 0x21	; 33
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	f9 01       	movw	r30, r18
    1ae4:	20 81       	ld	r18, Z
    1ae6:	21 7f       	andi	r18, 0xF1	; 241
    1ae8:	fc 01       	movw	r30, r24
    1aea:	20 83       	st	Z, r18
    1aec:	82 e2       	ldi	r24, 0x22	; 34
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	22 e2       	ldi	r18, 0x22	; 34
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	f9 01       	movw	r30, r18
    1af6:	20 81       	ld	r18, Z
    1af8:	2e 60       	ori	r18, 0x0E	; 14
    1afa:	fc 01       	movw	r30, r24
    1afc:	20 83       	st	Z, r18
    1afe:	87 e2       	ldi	r24, 0x27	; 39
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	fc 01       	movw	r30, r24
    1b04:	80 81       	ld	r24, Z
    1b06:	87 e2       	ldi	r24, 0x27	; 39
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	10 82       	st	Z, r1
    1b0e:	88 e2       	ldi	r24, 0x28	; 40
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	fc 01       	movw	r30, r24
    1b14:	80 81       	ld	r24, Z
    1b16:	88 e2       	ldi	r24, 0x28	; 40
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	2f ef       	ldi	r18, 0xFF	; 255
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	20 83       	st	Z, r18
    1b20:	00 00       	nop
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	08 95       	ret

00001b28 <enablePLED>:
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	8b e2       	ldi	r24, 0x2B	; 43
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	2b e2       	ldi	r18, 0x2B	; 43
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	f9 01       	movw	r30, r18
    1b3a:	20 81       	ld	r18, Z
    1b3c:	2f 7d       	andi	r18, 0xDF	; 223
    1b3e:	fc 01       	movw	r30, r24
    1b40:	20 83       	st	Z, r18
    1b42:	00 00       	nop
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	08 95       	ret

00001b4a <disablePLED>:
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	8b e2       	ldi	r24, 0x2B	; 43
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	2b e2       	ldi	r18, 0x2B	; 43
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	f9 01       	movw	r30, r18
    1b5c:	20 81       	ld	r18, Z
    1b5e:	20 62       	ori	r18, 0x20	; 32
    1b60:	fc 01       	movw	r30, r24
    1b62:	20 83       	st	Z, r18
    1b64:	00 00       	nop
    1b66:	df 91       	pop	r29
    1b68:	cf 91       	pop	r28
    1b6a:	08 95       	ret

00001b6c <standbyAudio>:
    1b6c:	cf 93       	push	r28
    1b6e:	df 93       	push	r29
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	8b e2       	ldi	r24, 0x2B	; 43
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	2b e2       	ldi	r18, 0x2B	; 43
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	f9 01       	movw	r30, r18
    1b7e:	20 81       	ld	r18, Z
    1b80:	20 68       	ori	r18, 0x80	; 128
    1b82:	fc 01       	movw	r30, r24
    1b84:	20 83       	st	Z, r18
    1b86:	8a e2       	ldi	r24, 0x2A	; 42
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	2a e2       	ldi	r18, 0x2A	; 42
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	f9 01       	movw	r30, r18
    1b90:	20 81       	ld	r18, Z
    1b92:	20 68       	ori	r18, 0x80	; 128
    1b94:	fc 01       	movw	r30, r24
    1b96:	20 83       	st	Z, r18
    1b98:	00 00       	nop
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	08 95       	ret

00001ba0 <enableAudio>:
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
    1ba8:	8b e2       	ldi	r24, 0x2B	; 43
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	2b e2       	ldi	r18, 0x2B	; 43
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	f9 01       	movw	r30, r18
    1bb2:	20 81       	ld	r18, Z
    1bb4:	2f 77       	andi	r18, 0x7F	; 127
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	20 83       	st	Z, r18
    1bba:	8a e2       	ldi	r24, 0x2A	; 42
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	2a e2       	ldi	r18, 0x2A	; 42
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	f9 01       	movw	r30, r18
    1bc4:	20 81       	ld	r18, Z
    1bc6:	20 68       	ori	r18, 0x80	; 128
    1bc8:	fc 01       	movw	r30, r24
    1bca:	20 83       	st	Z, r18
    1bcc:	00 00       	nop
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	08 95       	ret

00001bd4 <incVolume>:
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <incVolume+0x6>
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	8a 83       	std	Y+2, r24	; 0x02
    1be0:	8b e2       	ldi	r24, 0x2B	; 43
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	2b e2       	ldi	r18, 0x2B	; 43
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	f9 01       	movw	r30, r18
    1bea:	20 81       	ld	r18, Z
    1bec:	20 64       	ori	r18, 0x40	; 64
    1bee:	fc 01       	movw	r30, r24
    1bf0:	20 83       	st	Z, r18
    1bf2:	19 82       	std	Y+1, r1	; 0x01
    1bf4:	15 c0       	rjmp	.+42     	; 0x1c20 <incVolume+0x4c>
    1bf6:	8a e2       	ldi	r24, 0x2A	; 42
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	2a e2       	ldi	r18, 0x2A	; 42
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	f9 01       	movw	r30, r18
    1c00:	20 81       	ld	r18, Z
    1c02:	20 64       	ori	r18, 0x40	; 64
    1c04:	fc 01       	movw	r30, r24
    1c06:	20 83       	st	Z, r18
    1c08:	8a e2       	ldi	r24, 0x2A	; 42
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	2a e2       	ldi	r18, 0x2A	; 42
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	f9 01       	movw	r30, r18
    1c12:	20 81       	ld	r18, Z
    1c14:	2f 7b       	andi	r18, 0xBF	; 191
    1c16:	fc 01       	movw	r30, r24
    1c18:	20 83       	st	Z, r18
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	8f 5f       	subi	r24, 0xFF	; 255
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	99 81       	ldd	r25, Y+1	; 0x01
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	98 17       	cp	r25, r24
    1c26:	38 f3       	brcs	.-50     	; 0x1bf6 <incVolume+0x22>
    1c28:	00 00       	nop
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	08 95       	ret

00001c34 <decVolume>:
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <decVolume+0x6>
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	8a 83       	std	Y+2, r24	; 0x02
    1c40:	8b e2       	ldi	r24, 0x2B	; 43
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	2b e2       	ldi	r18, 0x2B	; 43
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	f9 01       	movw	r30, r18
    1c4a:	20 81       	ld	r18, Z
    1c4c:	2f 7b       	andi	r18, 0xBF	; 191
    1c4e:	fc 01       	movw	r30, r24
    1c50:	20 83       	st	Z, r18
    1c52:	19 82       	std	Y+1, r1	; 0x01
    1c54:	15 c0       	rjmp	.+42     	; 0x1c80 <decVolume+0x4c>
    1c56:	8a e2       	ldi	r24, 0x2A	; 42
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	2a e2       	ldi	r18, 0x2A	; 42
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	f9 01       	movw	r30, r18
    1c60:	20 81       	ld	r18, Z
    1c62:	20 64       	ori	r18, 0x40	; 64
    1c64:	fc 01       	movw	r30, r24
    1c66:	20 83       	st	Z, r18
    1c68:	8a e2       	ldi	r24, 0x2A	; 42
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	2a e2       	ldi	r18, 0x2A	; 42
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	f9 01       	movw	r30, r18
    1c72:	20 81       	ld	r18, Z
    1c74:	2f 7b       	andi	r18, 0xBF	; 191
    1c76:	fc 01       	movw	r30, r24
    1c78:	20 83       	st	Z, r18
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	8f 5f       	subi	r24, 0xFF	; 255
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    1c80:	99 81       	ldd	r25, Y+1	; 0x01
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	98 17       	cp	r25, r24
    1c86:	38 f3       	brcs	.-50     	; 0x1c56 <decVolume+0x22>
    1c88:	00 00       	nop
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	df 91       	pop	r29
    1c90:	cf 91       	pop	r28
    1c92:	08 95       	ret

00001c94 <setVolume>:
    1c94:	cf 93       	push	r28
    1c96:	df 93       	push	r29
    1c98:	1f 92       	push	r1
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	89 83       	std	Y+1, r24	; 0x01
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
    1ca2:	81 34       	cpi	r24, 0x41	; 65
    1ca4:	10 f0       	brcs	.+4      	; 0x1caa <setVolume+0x16>
    1ca6:	80 e4       	ldi	r24, 0x40	; 64
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    1caa:	80 e4       	ldi	r24, 0x40	; 64
    1cac:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <decVolume>
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <incVolume>
    1cb6:	00 00       	nop
    1cb8:	0f 90       	pop	r0
    1cba:	df 91       	pop	r29
    1cbc:	cf 91       	pop	r28
    1cbe:	08 95       	ret

00001cc0 <initAudio>:
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <enableAudio>
    1ccc:	80 e4       	ldi	r24, 0x40	; 64
    1cce:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <decVolume>
    1cd2:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <standbyAudio>
    1cd6:	00 00       	nop
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	08 95       	ret

00001cde <initPWM>:
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
    1ce2:	00 d0       	rcall	.+0      	; 0x1ce4 <initPWM+0x6>
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	9a 83       	std	Y+2, r25	; 0x02
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	81 15       	cp	r24, r1
    1cf2:	92 40       	sbci	r25, 0x02	; 2
    1cf4:	20 f0       	brcs	.+8      	; 0x1cfe <initPWM+0x20>
    1cf6:	8f ef       	ldi	r24, 0xFF	; 255
    1cf8:	91 e0       	ldi	r25, 0x01	; 1
    1cfa:	9a 83       	std	Y+2, r25	; 0x02
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	80 e8       	ldi	r24, 0x80	; 128
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	22 e2       	ldi	r18, 0x22	; 34
    1d04:	fc 01       	movw	r30, r24
    1d06:	20 83       	st	Z, r18
    1d08:	81 e8       	ldi	r24, 0x81	; 129
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	28 e0       	ldi	r18, 0x08	; 8
    1d0e:	fc 01       	movw	r30, r24
    1d10:	20 83       	st	Z, r18
    1d12:	84 e8       	ldi	r24, 0x84	; 132
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	fc 01       	movw	r30, r24
    1d18:	11 82       	std	Z+1, r1	; 0x01
    1d1a:	10 82       	st	Z, r1
    1d1c:	8a e8       	ldi	r24, 0x8A	; 138
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	29 81       	ldd	r18, Y+1	; 0x01
    1d22:	3a 81       	ldd	r19, Y+2	; 0x02
    1d24:	fc 01       	movw	r30, r24
    1d26:	31 83       	std	Z+1, r19	; 0x01
    1d28:	20 83       	st	Z, r18
    1d2a:	8f e6       	ldi	r24, 0x6F	; 111
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	fc 01       	movw	r30, r24
    1d30:	10 82       	st	Z, r1
    1d32:	00 00       	nop
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	df 91       	pop	r29
    1d3a:	cf 91       	pop	r28
    1d3c:	08 95       	ret

00001d3e <startPWM>:
    1d3e:	cf 93       	push	r28
    1d40:	df 93       	push	r29
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	81 e8       	ldi	r24, 0x81	; 129
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	21 e8       	ldi	r18, 0x81	; 129
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	f9 01       	movw	r30, r18
    1d50:	20 81       	ld	r18, Z
    1d52:	21 60       	ori	r18, 0x01	; 1
    1d54:	fc 01       	movw	r30, r24
    1d56:	20 83       	st	Z, r18
    1d58:	00 00       	nop
    1d5a:	df 91       	pop	r29
    1d5c:	cf 91       	pop	r28
    1d5e:	08 95       	ret

00001d60 <setPWMDutyPercent>:
    1d60:	8f 92       	push	r8
    1d62:	9f 92       	push	r9
    1d64:	af 92       	push	r10
    1d66:	bf 92       	push	r11
    1d68:	cf 92       	push	r12
    1d6a:	df 92       	push	r13
    1d6c:	ef 92       	push	r14
    1d6e:	ff 92       	push	r15
    1d70:	0f 93       	push	r16
    1d72:	1f 93       	push	r17
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	1f 92       	push	r1
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	89 83       	std	Y+1, r24	; 0x01
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	85 36       	cpi	r24, 0x65	; 101
    1d84:	10 f0       	brcs	.+4      	; 0x1d8a <setPWMDutyPercent+0x2a>
    1d86:	84 e6       	ldi	r24, 0x64	; 100
    1d88:	89 83       	std	Y+1, r24	; 0x01
    1d8a:	0f 2e       	mov	r0, r31
    1d8c:	fa e8       	ldi	r31, 0x8A	; 138
    1d8e:	8f 2e       	mov	r8, r31
    1d90:	91 2c       	mov	r9, r1
    1d92:	f0 2d       	mov	r31, r0
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	88 2f       	mov	r24, r24
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	a0 e0       	ldi	r26, 0x00	; 0
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	1f 92       	push	r1
    1da0:	1f 92       	push	r1
    1da2:	21 e0       	ldi	r18, 0x01	; 1
    1da4:	2f 93       	push	r18
    1da6:	2f ef       	ldi	r18, 0xFF	; 255
    1da8:	2f 93       	push	r18
    1daa:	a1 2c       	mov	r10, r1
    1dac:	b1 2c       	mov	r11, r1
    1dae:	65 01       	movw	r12, r10
    1db0:	14 e6       	ldi	r17, 0x64	; 100
    1db2:	e1 2e       	mov	r14, r17
    1db4:	f1 2c       	mov	r15, r1
    1db6:	00 e0       	ldi	r16, 0x00	; 0
    1db8:	10 e0       	ldi	r17, 0x00	; 0
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	a9 01       	movw	r20, r18
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	0e 94 42 10 	call	0x2084	; 0x2084 <Map>
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	f4 01       	movw	r30, r8
    1dd6:	91 83       	std	Z+1, r25	; 0x01
    1dd8:	80 83       	st	Z, r24
    1dda:	00 00       	nop
    1ddc:	0f 90       	pop	r0
    1dde:	df 91       	pop	r29
    1de0:	cf 91       	pop	r28
    1de2:	1f 91       	pop	r17
    1de4:	0f 91       	pop	r16
    1de6:	ff 90       	pop	r15
    1de8:	ef 90       	pop	r14
    1dea:	df 90       	pop	r13
    1dec:	cf 90       	pop	r12
    1dee:	bf 90       	pop	r11
    1df0:	af 90       	pop	r10
    1df2:	9f 90       	pop	r9
    1df4:	8f 90       	pop	r8
    1df6:	08 95       	ret

00001df8 <setPWMDuty>:
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <setPWMDuty+0x6>
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0a:	81 15       	cp	r24, r1
    1e0c:	92 40       	sbci	r25, 0x02	; 2
    1e0e:	20 f0       	brcs	.+8      	; 0x1e18 <setPWMDuty+0x20>
    1e10:	8f ef       	ldi	r24, 0xFF	; 255
    1e12:	91 e0       	ldi	r25, 0x01	; 1
    1e14:	9a 83       	std	Y+2, r25	; 0x02
    1e16:	89 83       	std	Y+1, r24	; 0x01
    1e18:	8a e8       	ldi	r24, 0x8A	; 138
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	29 81       	ldd	r18, Y+1	; 0x01
    1e1e:	3a 81       	ldd	r19, Y+2	; 0x02
    1e20:	fc 01       	movw	r30, r24
    1e22:	31 83       	std	Z+1, r19	; 0x01
    1e24:	20 83       	st	Z, r18
    1e26:	00 00       	nop
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	08 95       	ret

00001e32 <adcInit>:
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	81 e2       	ldi	r24, 0x21	; 33
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	21 e2       	ldi	r18, 0x21	; 33
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	f9 01       	movw	r30, r18
    1e44:	20 81       	ld	r18, Z
    1e46:	2e 7f       	andi	r18, 0xFE	; 254
    1e48:	fc 01       	movw	r30, r24
    1e4a:	20 83       	st	Z, r18
    1e4c:	8e e7       	ldi	r24, 0x7E	; 126
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	2e e7       	ldi	r18, 0x7E	; 126
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	f9 01       	movw	r30, r18
    1e56:	20 81       	ld	r18, Z
    1e58:	21 60       	ori	r18, 0x01	; 1
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	20 83       	st	Z, r18
    1e5e:	8c e7       	ldi	r24, 0x7C	; 124
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	20 e6       	ldi	r18, 0x60	; 96
    1e64:	fc 01       	movw	r30, r24
    1e66:	20 83       	st	Z, r18
    1e68:	8a e7       	ldi	r24, 0x7A	; 122
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	27 e3       	ldi	r18, 0x37	; 55
    1e6e:	fc 01       	movw	r30, r24
    1e70:	20 83       	st	Z, r18
    1e72:	8b e7       	ldi	r24, 0x7B	; 123
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	fc 01       	movw	r30, r24
    1e78:	10 82       	st	Z, r1
    1e7a:	8a e7       	ldi	r24, 0x7A	; 122
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	2a e7       	ldi	r18, 0x7A	; 122
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	f9 01       	movw	r30, r18
    1e84:	20 81       	ld	r18, Z
    1e86:	20 68       	ori	r18, 0x80	; 128
    1e88:	fc 01       	movw	r30, r24
    1e8a:	20 83       	st	Z, r18
    1e8c:	8a e7       	ldi	r24, 0x7A	; 122
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	2a e7       	ldi	r18, 0x7A	; 122
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	f9 01       	movw	r30, r18
    1e96:	20 81       	ld	r18, Z
    1e98:	20 64       	ori	r18, 0x40	; 64
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	20 83       	st	Z, r18
    1e9e:	00 00       	nop
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	08 95       	ret

00001ea6 <adcGetTemperature>:

uint8_t adcGetTemperature(void)
{
    1ea6:	af 92       	push	r10
    1ea8:	bf 92       	push	r11
    1eaa:	cf 92       	push	r12
    1eac:	df 92       	push	r13
    1eae:	ef 92       	push	r14
    1eb0:	ff 92       	push	r15
    1eb2:	0f 93       	push	r16
    1eb4:	1f 93       	push	r17
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <adcGetTemperature+0x16>
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <adcGetTemperature+0x18>
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
	int32_t s32Temp;
	
	s32Temp = Map((int32_t)ADCH,0,255,-50,450);
    1ec2:	89 e7       	ldi	r24, 0x79	; 121
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	80 81       	ld	r24, Z
    1eca:	88 2f       	mov	r24, r24
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	a0 e0       	ldi	r26, 0x00	; 0
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	1f 92       	push	r1
    1ed4:	1f 92       	push	r1
    1ed6:	21 e0       	ldi	r18, 0x01	; 1
    1ed8:	2f 93       	push	r18
    1eda:	22 ec       	ldi	r18, 0xC2	; 194
    1edc:	2f 93       	push	r18
    1ede:	0f 2e       	mov	r0, r31
    1ee0:	fe ec       	ldi	r31, 0xCE	; 206
    1ee2:	af 2e       	mov	r10, r31
    1ee4:	bb 24       	eor	r11, r11
    1ee6:	ba 94       	dec	r11
    1ee8:	cb 2c       	mov	r12, r11
    1eea:	db 2c       	mov	r13, r11
    1eec:	f0 2d       	mov	r31, r0
    1eee:	e1 2c       	mov	r14, r1
    1ef0:	f1 2c       	mov	r15, r1
    1ef2:	87 01       	movw	r16, r14
    1ef4:	ea 94       	dec	r14
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	a9 01       	movw	r20, r18
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 42 10 	call	0x2084	; 0x2084 <Map>
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	89 83       	std	Y+1, r24	; 0x01
    1f12:	9a 83       	std	Y+2, r25	; 0x02
    1f14:	ab 83       	std	Y+3, r26	; 0x03
    1f16:	bc 83       	std	Y+4, r27	; 0x04
	if(s32Temp<0)
    1f18:	89 81       	ldd	r24, Y+1	; 0x01
    1f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1c:	ab 81       	ldd	r26, Y+3	; 0x03
    1f1e:	bc 81       	ldd	r27, Y+4	; 0x04
    1f20:	bb 23       	and	r27, r27
    1f22:	2c f4       	brge	.+10     	; 0x1f2e <adcGetTemperature+0x88>
	{
		s32Temp = 0;
    1f24:	19 82       	std	Y+1, r1	; 0x01
    1f26:	1a 82       	std	Y+2, r1	; 0x02
    1f28:	1b 82       	std	Y+3, r1	; 0x03
    1f2a:	1c 82       	std	Y+4, r1	; 0x04
    1f2c:	12 c0       	rjmp	.+36     	; 0x1f52 <adcGetTemperature+0xac>
	}
	else if(s32Temp>255)
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	9a 81       	ldd	r25, Y+2	; 0x02
    1f32:	ab 81       	ldd	r26, Y+3	; 0x03
    1f34:	bc 81       	ldd	r27, Y+4	; 0x04
    1f36:	8f 3f       	cpi	r24, 0xFF	; 255
    1f38:	91 05       	cpc	r25, r1
    1f3a:	a1 05       	cpc	r26, r1
    1f3c:	b1 05       	cpc	r27, r1
    1f3e:	49 f0       	breq	.+18     	; 0x1f52 <adcGetTemperature+0xac>
    1f40:	44 f0       	brlt	.+16     	; 0x1f52 <adcGetTemperature+0xac>
	{
		s32Temp = 255;
    1f42:	8f ef       	ldi	r24, 0xFF	; 255
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	a0 e0       	ldi	r26, 0x00	; 0
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	89 83       	std	Y+1, r24	; 0x01
    1f4c:	9a 83       	std	Y+2, r25	; 0x02
    1f4e:	ab 83       	std	Y+3, r26	; 0x03
    1f50:	bc 83       	std	Y+4, r27	; 0x04
	}
	return (uint8_t)s32Temp;
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	df 91       	pop	r29
    1f5e:	cf 91       	pop	r28
    1f60:	1f 91       	pop	r17
    1f62:	0f 91       	pop	r16
    1f64:	ff 90       	pop	r15
    1f66:	ef 90       	pop	r14
    1f68:	df 90       	pop	r13
    1f6a:	cf 90       	pop	r12
    1f6c:	bf 90       	pop	r11
    1f6e:	af 90       	pop	r10
    1f70:	08 95       	ret

00001f72 <INT_5ms_Init>:

///////////////////////////////////////////////////////////////////////////////
// UTILITIES
///////////////////////////////////////////////////////////////////////////////
void INT_5ms_Init(void)
{
    1f72:	cf 93       	push	r28
    1f74:	df 93       	push	r29
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
	TCCR2A = (1<<WGM21);	// mode: CTC
    1f7a:	80 eb       	ldi	r24, 0xB0	; 176
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	22 e0       	ldi	r18, 0x02	; 2
    1f80:	fc 01       	movw	r30, r24
    1f82:	20 83       	st	Z, r18
	TCCR2B = 0;				// mode: CTC, clock off
    1f84:	81 eb       	ldi	r24, 0xB1	; 177
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	fc 01       	movw	r30, r24
    1f8a:	10 82       	st	Z, r1
	TCNT2 = 0;
    1f8c:	82 eb       	ldi	r24, 0xB2	; 178
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	fc 01       	movw	r30, r24
    1f92:	10 82       	st	Z, r1
	OCR2A = 96;
    1f94:	83 eb       	ldi	r24, 0xB3	; 179
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	20 e6       	ldi	r18, 0x60	; 96
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	20 83       	st	Z, r18
	TIMSK2 = (1<<OCIE2A);
    1f9e:	80 e7       	ldi	r24, 0x70	; 112
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	22 e0       	ldi	r18, 0x02	; 2
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	20 83       	st	Z, r18
	TIFR2 = (1<<OCF2A);
    1fa8:	87 e3       	ldi	r24, 0x37	; 55
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	22 e0       	ldi	r18, 0x02	; 2
    1fae:	fc 01       	movw	r30, r24
    1fb0:	20 83       	st	Z, r18

	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);
    1fb2:	81 eb       	ldi	r24, 0xB1	; 177
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	21 eb       	ldi	r18, 0xB1	; 177
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	f9 01       	movw	r30, r18
    1fbc:	20 81       	ld	r18, Z
    1fbe:	27 60       	ori	r18, 0x07	; 7
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	20 83       	st	Z, r18
}
    1fc4:	00 00       	nop
    1fc6:	df 91       	pop	r29
    1fc8:	cf 91       	pop	r28
    1fca:	08 95       	ret

00001fcc <wait_1ms>:
 *
 * @param [in] uiFactor: 1ms multiplier
 * @return no return value
 *****************************************************************************/
void wait_1ms(uint16_t uiFactor)
{
    1fcc:	cf 93       	push	r28
    1fce:	df 93       	push	r29
    1fd0:	00 d0       	rcall	.+0      	; 0x1fd2 <wait_1ms+0x6>
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <wait_1ms+0x8>
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	9c 83       	std	Y+4, r25	; 0x04
    1fda:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t i;
	TCCR0A = (1<<WGM01);	// mode: CTC
    1fdc:	84 e4       	ldi	r24, 0x44	; 68
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	22 e0       	ldi	r18, 0x02	; 2
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	20 83       	st	Z, r18
	TCCR0B = 0;				// mode: CTC
    1fe6:	85 e4       	ldi	r24, 0x45	; 69
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	fc 01       	movw	r30, r24
    1fec:	10 82       	st	Z, r1
	TIFR0 =  (1<<OCF0A);	// only OCFA flag needs to be cleared
    1fee:	85 e3       	ldi	r24, 0x35	; 53
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	22 e0       	ldi	r18, 0x02	; 2
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	20 83       	st	Z, r18
	TIMSK0 = 0;				// no interrupts
    1ff8:	8e e6       	ldi	r24, 0x6E	; 110
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	10 82       	st	Z, r1
	TCNT0 = 0;
    2000:	86 e4       	ldi	r24, 0x46	; 70
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	fc 01       	movw	r30, r24
    2006:	10 82       	st	Z, r1
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
    2008:	87 e4       	ldi	r24, 0x47	; 71
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	2d e4       	ldi	r18, 0x4D	; 77
    200e:	fc 01       	movw	r30, r24
    2010:	20 83       	st	Z, r18
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
    2012:	85 e4       	ldi	r24, 0x45	; 69
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	25 e4       	ldi	r18, 0x45	; 69
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	f9 01       	movw	r30, r18
    201c:	20 81       	ld	r18, Z
    201e:	24 60       	ori	r18, 0x04	; 4
    2020:	fc 01       	movw	r30, r24
    2022:	20 83       	st	Z, r18
	
	for(i=0;i<uiFactor;i++)
    2024:	1a 82       	std	Y+2, r1	; 0x02
    2026:	19 82       	std	Y+1, r1	; 0x01
    2028:	15 c0       	rjmp	.+42     	; 0x2054 <wait_1ms+0x88>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
    202a:	00 00       	nop
    202c:	85 e3       	ldi	r24, 0x35	; 53
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	fc 01       	movw	r30, r24
    2032:	80 81       	ld	r24, Z
    2034:	88 2f       	mov	r24, r24
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	82 70       	andi	r24, 0x02	; 2
    203a:	99 27       	eor	r25, r25
    203c:	89 2b       	or	r24, r25
    203e:	b1 f3       	breq	.-20     	; 0x202c <wait_1ms+0x60>
		TIFR0 =  (1<<OCF0A);		// clear flag
    2040:	85 e3       	ldi	r24, 0x35	; 53
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	22 e0       	ldi	r18, 0x02	; 2
    2046:	fc 01       	movw	r30, r24
    2048:	20 83       	st	Z, r18
	TCNT0 = 0;
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
	
	for(i=0;i<uiFactor;i++)
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	9a 81       	ldd	r25, Y+2	; 0x02
    204e:	01 96       	adiw	r24, 0x01	; 1
    2050:	9a 83       	std	Y+2, r25	; 0x02
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	29 81       	ldd	r18, Y+1	; 0x01
    2056:	3a 81       	ldd	r19, Y+2	; 0x02
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	9c 81       	ldd	r25, Y+4	; 0x04
    205c:	28 17       	cp	r18, r24
    205e:	39 07       	cpc	r19, r25
    2060:	20 f3       	brcs	.-56     	; 0x202a <wait_1ms+0x5e>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
		TIFR0 =  (1<<OCF0A);		// clear flag
	}
	TCCR0B &= ~(0x07);	// set prescaler to 0 (stop timer)
    2062:	85 e4       	ldi	r24, 0x45	; 69
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	25 e4       	ldi	r18, 0x45	; 69
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	f9 01       	movw	r30, r18
    206c:	20 81       	ld	r18, Z
    206e:	28 7f       	andi	r18, 0xF8	; 248
    2070:	fc 01       	movw	r30, r24
    2072:	20 83       	st	Z, r18
}
    2074:	00 00       	nop
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	08 95       	ret

00002084 <Map>:
 * @param [in] s32OutMin: minimal value of output range
 * @param [in] s32OutMax: maximal value of output range
 * @return data in new number range
 *****************************************************************************/
int32_t Map(int32_t s32Data, int32_t s32InMin, int32_t s32InMax, int32_t s32OutMin, int32_t s32OutMax)
{
    2084:	af 92       	push	r10
    2086:	bf 92       	push	r11
    2088:	cf 92       	push	r12
    208a:	df 92       	push	r13
    208c:	ef 92       	push	r14
    208e:	ff 92       	push	r15
    2090:	0f 93       	push	r16
    2092:	1f 93       	push	r17
    2094:	cf 93       	push	r28
    2096:	df 93       	push	r29
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	60 97       	sbiw	r28, 0x10	; 16
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	69 83       	std	Y+1, r22	; 0x01
    20aa:	7a 83       	std	Y+2, r23	; 0x02
    20ac:	8b 83       	std	Y+3, r24	; 0x03
    20ae:	9c 83       	std	Y+4, r25	; 0x04
    20b0:	2d 83       	std	Y+5, r18	; 0x05
    20b2:	3e 83       	std	Y+6, r19	; 0x06
    20b4:	4f 83       	std	Y+7, r20	; 0x07
    20b6:	58 87       	std	Y+8, r21	; 0x08
    20b8:	e9 86       	std	Y+9, r14	; 0x09
    20ba:	fa 86       	std	Y+10, r15	; 0x0a
    20bc:	0b 87       	std	Y+11, r16	; 0x0b
    20be:	1c 87       	std	Y+12, r17	; 0x0c
    20c0:	ad 86       	std	Y+13, r10	; 0x0d
    20c2:	be 86       	std	Y+14, r11	; 0x0e
    20c4:	cf 86       	std	Y+15, r12	; 0x0f
    20c6:	d8 8a       	std	Y+16, r13	; 0x10
	return((s32Data-s32InMin)*(s32OutMax-s32OutMin)/(s32InMax-s32InMin)+s32OutMin);
    20c8:	29 81       	ldd	r18, Y+1	; 0x01
    20ca:	3a 81       	ldd	r19, Y+2	; 0x02
    20cc:	4b 81       	ldd	r20, Y+3	; 0x03
    20ce:	5c 81       	ldd	r21, Y+4	; 0x04
    20d0:	8d 81       	ldd	r24, Y+5	; 0x05
    20d2:	9e 81       	ldd	r25, Y+6	; 0x06
    20d4:	af 81       	ldd	r26, Y+7	; 0x07
    20d6:	b8 85       	ldd	r27, Y+8	; 0x08
    20d8:	79 01       	movw	r14, r18
    20da:	8a 01       	movw	r16, r20
    20dc:	e8 1a       	sub	r14, r24
    20de:	f9 0a       	sbc	r15, r25
    20e0:	0a 0b       	sbc	r16, r26
    20e2:	1b 0b       	sbc	r17, r27
    20e4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    20e6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    20e8:	4f 8d       	ldd	r20, Y+31	; 0x1f
    20ea:	58 a1       	ldd	r21, Y+32	; 0x20
    20ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f0:	af 85       	ldd	r26, Y+15	; 0x0f
    20f2:	b8 89       	ldd	r27, Y+16	; 0x10
    20f4:	59 01       	movw	r10, r18
    20f6:	6a 01       	movw	r12, r20
    20f8:	a8 1a       	sub	r10, r24
    20fa:	b9 0a       	sbc	r11, r25
    20fc:	ca 0a       	sbc	r12, r26
    20fe:	db 0a       	sbc	r13, r27
    2100:	d6 01       	movw	r26, r12
    2102:	c5 01       	movw	r24, r10
    2104:	a8 01       	movw	r20, r16
    2106:	97 01       	movw	r18, r14
    2108:	bc 01       	movw	r22, r24
    210a:	cd 01       	movw	r24, r26
    210c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsi3>
    2110:	7b 01       	movw	r14, r22
    2112:	8c 01       	movw	r16, r24
    2114:	29 85       	ldd	r18, Y+9	; 0x09
    2116:	3a 85       	ldd	r19, Y+10	; 0x0a
    2118:	4b 85       	ldd	r20, Y+11	; 0x0b
    211a:	5c 85       	ldd	r21, Y+12	; 0x0c
    211c:	8d 81       	ldd	r24, Y+5	; 0x05
    211e:	9e 81       	ldd	r25, Y+6	; 0x06
    2120:	af 81       	ldd	r26, Y+7	; 0x07
    2122:	b8 85       	ldd	r27, Y+8	; 0x08
    2124:	28 1b       	sub	r18, r24
    2126:	39 0b       	sbc	r19, r25
    2128:	4a 0b       	sbc	r20, r26
    212a:	5b 0b       	sbc	r21, r27
    212c:	c8 01       	movw	r24, r16
    212e:	b7 01       	movw	r22, r14
    2130:	0e 94 44 11 	call	0x2288	; 0x2288 <__divmodsi4>
    2134:	da 01       	movw	r26, r20
    2136:	c9 01       	movw	r24, r18
    2138:	9c 01       	movw	r18, r24
    213a:	ad 01       	movw	r20, r26
    213c:	8d 85       	ldd	r24, Y+13	; 0x0d
    213e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2140:	af 85       	ldd	r26, Y+15	; 0x0f
    2142:	b8 89       	ldd	r27, Y+16	; 0x10
    2144:	82 0f       	add	r24, r18
    2146:	93 1f       	adc	r25, r19
    2148:	a4 1f       	adc	r26, r20
    214a:	b5 1f       	adc	r27, r21
}
    214c:	bc 01       	movw	r22, r24
    214e:	cd 01       	movw	r24, r26
    2150:	60 96       	adiw	r28, 0x10	; 16
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	f8 94       	cli
    2156:	de bf       	out	0x3e, r29	; 62
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	cd bf       	out	0x3d, r28	; 61
    215c:	df 91       	pop	r29
    215e:	cf 91       	pop	r28
    2160:	1f 91       	pop	r17
    2162:	0f 91       	pop	r16
    2164:	ff 90       	pop	r15
    2166:	ef 90       	pop	r14
    2168:	df 90       	pop	r13
    216a:	cf 90       	pop	r12
    216c:	bf 90       	pop	r11
    216e:	af 90       	pop	r10
    2170:	08 95       	ret

00002172 <CRC8>:

uint8_t CRC8(uint8_t* au8Data, uint8_t u8Length)
{
    2172:	cf 93       	push	r28
    2174:	df 93       	push	r29
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
    217a:	28 97       	sbiw	r28, 0x08	; 8
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	9f 83       	std	Y+7, r25	; 0x07
    2188:	8e 83       	std	Y+6, r24	; 0x06
    218a:	68 87       	std	Y+8, r22	; 0x08
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;
    218c:	19 82       	std	Y+1, r1	; 0x01

	for(i=0;i<u8Length;i++)
    218e:	1a 82       	std	Y+2, r1	; 0x02
    2190:	27 c0       	rjmp	.+78     	; 0x21e0 <CRC8+0x6e>
	{
		u8InByte = au8Data[i];
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	88 2f       	mov	r24, r24
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	2e 81       	ldd	r18, Y+6	; 0x06
    219a:	3f 81       	ldd	r19, Y+7	; 0x07
    219c:	82 0f       	add	r24, r18
    219e:	93 1f       	adc	r25, r19
    21a0:	fc 01       	movw	r30, r24
    21a2:	80 81       	ld	r24, Z
    21a4:	8c 83       	std	Y+4, r24	; 0x04
		for(j=0;j<8;j++)
    21a6:	1b 82       	std	Y+3, r1	; 0x03
    21a8:	15 c0       	rjmp	.+42     	; 0x21d4 <CRC8+0x62>
		{
			u8Temp = (u8CRC^u8InByte)&0x80;
    21aa:	99 81       	ldd	r25, Y+1	; 0x01
    21ac:	8c 81       	ldd	r24, Y+4	; 0x04
    21ae:	89 27       	eor	r24, r25
    21b0:	80 78       	andi	r24, 0x80	; 128
    21b2:	8d 83       	std	Y+5, r24	; 0x05
			u8CRC <<= 1;
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	88 0f       	add	r24, r24
    21b8:	89 83       	std	Y+1, r24	; 0x01
			if(u8Temp!=0)
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
    21bc:	88 23       	and	r24, r24
    21be:	21 f0       	breq	.+8      	; 0x21c8 <CRC8+0x56>
			{
				u8CRC ^= 0x07;
    21c0:	99 81       	ldd	r25, Y+1	; 0x01
    21c2:	87 e0       	ldi	r24, 0x07	; 7
    21c4:	89 27       	eor	r24, r25
    21c6:	89 83       	std	Y+1, r24	; 0x01
			}
			u8InByte<<=1;
    21c8:	8c 81       	ldd	r24, Y+4	; 0x04
    21ca:	88 0f       	add	r24, r24
    21cc:	8c 83       	std	Y+4, r24	; 0x04
	u8CRC = 0;

	for(i=0;i<u8Length;i++)
	{
		u8InByte = au8Data[i];
		for(j=0;j<8;j++)
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	8f 5f       	subi	r24, 0xFF	; 255
    21d2:	8b 83       	std	Y+3, r24	; 0x03
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	88 30       	cpi	r24, 0x08	; 8
    21d8:	40 f3       	brcs	.-48     	; 0x21aa <CRC8+0x38>
{
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;

	for(i=0;i<u8Length;i++)
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	8f 5f       	subi	r24, 0xFF	; 255
    21de:	8a 83       	std	Y+2, r24	; 0x02
    21e0:	9a 81       	ldd	r25, Y+2	; 0x02
    21e2:	88 85       	ldd	r24, Y+8	; 0x08
    21e4:	98 17       	cp	r25, r24
    21e6:	a8 f2       	brcs	.-86     	; 0x2192 <CRC8+0x20>
			}
			u8InByte<<=1;
		}
	}

	return u8CRC;
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    21ea:	28 96       	adiw	r28, 0x08	; 8
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	df 91       	pop	r29
    21f8:	cf 91       	pop	r28
    21fa:	08 95       	ret

000021fc <__mulsi3>:
    21fc:	db 01       	movw	r26, r22
    21fe:	8f 93       	push	r24
    2200:	9f 93       	push	r25
    2202:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__muluhisi3>
    2206:	bf 91       	pop	r27
    2208:	af 91       	pop	r26
    220a:	a2 9f       	mul	r26, r18
    220c:	80 0d       	add	r24, r0
    220e:	91 1d       	adc	r25, r1
    2210:	a3 9f       	mul	r26, r19
    2212:	90 0d       	add	r25, r0
    2214:	b2 9f       	mul	r27, r18
    2216:	90 0d       	add	r25, r0
    2218:	11 24       	eor	r1, r1
    221a:	08 95       	ret

0000221c <__udivmodhi4>:
    221c:	aa 1b       	sub	r26, r26
    221e:	bb 1b       	sub	r27, r27
    2220:	51 e1       	ldi	r21, 0x11	; 17
    2222:	07 c0       	rjmp	.+14     	; 0x2232 <__udivmodhi4_ep>

00002224 <__udivmodhi4_loop>:
    2224:	aa 1f       	adc	r26, r26
    2226:	bb 1f       	adc	r27, r27
    2228:	a6 17       	cp	r26, r22
    222a:	b7 07       	cpc	r27, r23
    222c:	10 f0       	brcs	.+4      	; 0x2232 <__udivmodhi4_ep>
    222e:	a6 1b       	sub	r26, r22
    2230:	b7 0b       	sbc	r27, r23

00002232 <__udivmodhi4_ep>:
    2232:	88 1f       	adc	r24, r24
    2234:	99 1f       	adc	r25, r25
    2236:	5a 95       	dec	r21
    2238:	a9 f7       	brne	.-22     	; 0x2224 <__udivmodhi4_loop>
    223a:	80 95       	com	r24
    223c:	90 95       	com	r25
    223e:	bc 01       	movw	r22, r24
    2240:	cd 01       	movw	r24, r26
    2242:	08 95       	ret

00002244 <__udivmodsi4>:
    2244:	a1 e2       	ldi	r26, 0x21	; 33
    2246:	1a 2e       	mov	r1, r26
    2248:	aa 1b       	sub	r26, r26
    224a:	bb 1b       	sub	r27, r27
    224c:	fd 01       	movw	r30, r26
    224e:	0d c0       	rjmp	.+26     	; 0x226a <__udivmodsi4_ep>

00002250 <__udivmodsi4_loop>:
    2250:	aa 1f       	adc	r26, r26
    2252:	bb 1f       	adc	r27, r27
    2254:	ee 1f       	adc	r30, r30
    2256:	ff 1f       	adc	r31, r31
    2258:	a2 17       	cp	r26, r18
    225a:	b3 07       	cpc	r27, r19
    225c:	e4 07       	cpc	r30, r20
    225e:	f5 07       	cpc	r31, r21
    2260:	20 f0       	brcs	.+8      	; 0x226a <__udivmodsi4_ep>
    2262:	a2 1b       	sub	r26, r18
    2264:	b3 0b       	sbc	r27, r19
    2266:	e4 0b       	sbc	r30, r20
    2268:	f5 0b       	sbc	r31, r21

0000226a <__udivmodsi4_ep>:
    226a:	66 1f       	adc	r22, r22
    226c:	77 1f       	adc	r23, r23
    226e:	88 1f       	adc	r24, r24
    2270:	99 1f       	adc	r25, r25
    2272:	1a 94       	dec	r1
    2274:	69 f7       	brne	.-38     	; 0x2250 <__udivmodsi4_loop>
    2276:	60 95       	com	r22
    2278:	70 95       	com	r23
    227a:	80 95       	com	r24
    227c:	90 95       	com	r25
    227e:	9b 01       	movw	r18, r22
    2280:	ac 01       	movw	r20, r24
    2282:	bd 01       	movw	r22, r26
    2284:	cf 01       	movw	r24, r30
    2286:	08 95       	ret

00002288 <__divmodsi4>:
    2288:	05 2e       	mov	r0, r21
    228a:	97 fb       	bst	r25, 7
    228c:	1e f4       	brtc	.+6      	; 0x2294 <__divmodsi4+0xc>
    228e:	00 94       	com	r0
    2290:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__negsi2>
    2294:	57 fd       	sbrc	r21, 7
    2296:	07 d0       	rcall	.+14     	; 0x22a6 <__divmodsi4_neg2>
    2298:	0e 94 22 11 	call	0x2244	; 0x2244 <__udivmodsi4>
    229c:	07 fc       	sbrc	r0, 7
    229e:	03 d0       	rcall	.+6      	; 0x22a6 <__divmodsi4_neg2>
    22a0:	4e f4       	brtc	.+18     	; 0x22b4 <__divmodsi4_exit>
    22a2:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__negsi2>

000022a6 <__divmodsi4_neg2>:
    22a6:	50 95       	com	r21
    22a8:	40 95       	com	r20
    22aa:	30 95       	com	r19
    22ac:	21 95       	neg	r18
    22ae:	3f 4f       	sbci	r19, 0xFF	; 255
    22b0:	4f 4f       	sbci	r20, 0xFF	; 255
    22b2:	5f 4f       	sbci	r21, 0xFF	; 255

000022b4 <__divmodsi4_exit>:
    22b4:	08 95       	ret

000022b6 <__negsi2>:
    22b6:	90 95       	com	r25
    22b8:	80 95       	com	r24
    22ba:	70 95       	com	r23
    22bc:	61 95       	neg	r22
    22be:	7f 4f       	sbci	r23, 0xFF	; 255
    22c0:	8f 4f       	sbci	r24, 0xFF	; 255
    22c2:	9f 4f       	sbci	r25, 0xFF	; 255
    22c4:	08 95       	ret

000022c6 <__tablejump2__>:
    22c6:	ee 0f       	add	r30, r30
    22c8:	ff 1f       	adc	r31, r31
    22ca:	05 90       	lpm	r0, Z+
    22cc:	f4 91       	lpm	r31, Z
    22ce:	e0 2d       	mov	r30, r0
    22d0:	09 94       	ijmp

000022d2 <__muluhisi3>:
    22d2:	0e 94 74 11 	call	0x22e8	; 0x22e8 <__umulhisi3>
    22d6:	a5 9f       	mul	r26, r21
    22d8:	90 0d       	add	r25, r0
    22da:	b4 9f       	mul	r27, r20
    22dc:	90 0d       	add	r25, r0
    22de:	a4 9f       	mul	r26, r20
    22e0:	80 0d       	add	r24, r0
    22e2:	91 1d       	adc	r25, r1
    22e4:	11 24       	eor	r1, r1
    22e6:	08 95       	ret

000022e8 <__umulhisi3>:
    22e8:	a2 9f       	mul	r26, r18
    22ea:	b0 01       	movw	r22, r0
    22ec:	b3 9f       	mul	r27, r19
    22ee:	c0 01       	movw	r24, r0
    22f0:	a3 9f       	mul	r26, r19
    22f2:	70 0d       	add	r23, r0
    22f4:	81 1d       	adc	r24, r1
    22f6:	11 24       	eor	r1, r1
    22f8:	91 1d       	adc	r25, r1
    22fa:	b2 9f       	mul	r27, r18
    22fc:	70 0d       	add	r23, r0
    22fe:	81 1d       	adc	r24, r1
    2300:	11 24       	eor	r1, r1
    2302:	91 1d       	adc	r25, r1
    2304:	08 95       	ret

00002306 <strlen>:
    2306:	fc 01       	movw	r30, r24
    2308:	01 90       	ld	r0, Z+
    230a:	00 20       	and	r0, r0
    230c:	e9 f7       	brne	.-6      	; 0x2308 <strlen+0x2>
    230e:	80 95       	com	r24
    2310:	90 95       	com	r25
    2312:	8e 0f       	add	r24, r30
    2314:	9f 1f       	adc	r25, r31
    2316:	08 95       	ret

00002318 <_exit>:
    2318:	f8 94       	cli

0000231a <__stop_program>:
    231a:	ff cf       	rjmp	.-2      	; 0x231a <__stop_program>
