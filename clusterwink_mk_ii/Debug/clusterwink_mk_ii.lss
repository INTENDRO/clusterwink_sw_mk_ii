
clusterwink_mk_ii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000015a8  0000163c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000058  0080010a  0080010a  00001646  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001646  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001678  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001070  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5c  00000000  00000000  00002888  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e79  00000000  00000000  000032e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000624  00000000  00000000  00004160  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073e  00000000  00000000  00004784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ccd  00000000  00000000  00004ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005b8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
       4:	0c 94 38 01 	jmp	0x270	; 0x270 <__vector_1>
       8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      10:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      14:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__vector_5>
      18:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      1c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      20:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_9>
      28:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      2c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      30:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      34:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      38:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      3c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      40:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      44:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      48:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      4c:	0c 94 40 02 	jmp	0x480	; 0x480 <__vector_19>
      50:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      54:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      58:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      5c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      60:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      64:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      68:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      6c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      70:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      74:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      78:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      7c:	80 02       	muls	r24, r16
      7e:	99 02       	muls	r25, r25
      80:	b2 02       	muls	r27, r18
      82:	6c 03       	fmul	r22, r20
      84:	88 03       	fmulsu	r16, r16
      86:	88 03       	fmulsu	r16, r16
      88:	88 03       	fmulsu	r16, r16
      8a:	0b 04       	cpc	r0, r11
      8c:	18 04       	cpc	r1, r8
      8e:	25 04       	cpc	r2, r5
      90:	3f 04       	cpc	r3, r15
      92:	20 05       	cpc	r18, r0
      94:	26 05       	cpc	r18, r6
      96:	26 05       	cpc	r18, r6
      98:	26 05       	cpc	r18, r6
      9a:	26 05       	cpc	r18, r6
      9c:	26 05       	cpc	r18, r6
      9e:	26 05       	cpc	r18, r6
      a0:	26 05       	cpc	r18, r6
      a2:	26 05       	cpc	r18, r6
      a4:	26 05       	cpc	r18, r6
      a6:	26 05       	cpc	r18, r6
      a8:	26 05       	cpc	r18, r6
      aa:	fc 04       	cpc	r15, r12
      ac:	09 05       	cpc	r16, r9
      ae:	16 05       	cpc	r17, r6

000000b0 <__ctors_end>:
      b0:	11 24       	eor	r1, r1
      b2:	1f be       	out	0x3f, r1	; 63
      b4:	cf ef       	ldi	r28, 0xFF	; 255
      b6:	d8 e0       	ldi	r29, 0x08	; 8
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_copy_data>:
      bc:	11 e0       	ldi	r17, 0x01	; 1
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b1 e0       	ldi	r27, 0x01	; 1
      c2:	e8 ea       	ldi	r30, 0xA8	; 168
      c4:	f5 e1       	ldi	r31, 0x15	; 21
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x10>
      c8:	05 90       	lpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	aa 30       	cpi	r26, 0x0A	; 10
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0xc>

000000d2 <__do_clear_bss>:
      d2:	21 e0       	ldi	r18, 0x01	; 1
      d4:	aa e0       	ldi	r26, 0x0A	; 10
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	a2 36       	cpi	r26, 0x62	; 98
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	0e 94 4d 05 	call	0xa9a	; 0xa9a <main>
      e6:	0c 94 d2 0a 	jmp	0x15a4	; 0x15a4 <_exit>

000000ea <__bad_interrupt>:
      ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ee <__vector_9>:

volatile uint8_t u8Status = 0x00;
volatile uint8_t u8Duty = 0;

ISR(TIMER2_COMPA_vect)
{
      ee:	1f 92       	push	r1
      f0:	0f 92       	push	r0
      f2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
      f6:	0f 92       	push	r0
      f8:	11 24       	eor	r1, r1
      fa:	af 92       	push	r10
      fc:	bf 92       	push	r11
      fe:	cf 92       	push	r12
     100:	df 92       	push	r13
     102:	ef 92       	push	r14
     104:	ff 92       	push	r15
     106:	0f 93       	push	r16
     108:	1f 93       	push	r17
     10a:	2f 93       	push	r18
     10c:	3f 93       	push	r19
     10e:	4f 93       	push	r20
     110:	5f 93       	push	r21
     112:	6f 93       	push	r22
     114:	7f 93       	push	r23
     116:	8f 93       	push	r24
     118:	9f 93       	push	r25
     11a:	af 93       	push	r26
     11c:	bf 93       	push	r27
     11e:	ef 93       	push	r30
     120:	ff 93       	push	r31
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
     12a:	8b e2       	ldi	r24, 0x2B	; 43
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	2b e2       	ldi	r18, 0x2B	; 43
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	f9 01       	movw	r30, r18
     134:	20 81       	ld	r18, Z
     136:	22 60       	ori	r18, 0x02	; 2
     138:	fc 01       	movw	r30, r24
     13a:	20 83       	st	Z, r18
	#endif

	if(u8PLEDFadeActive)
     13c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <u8PLEDFadeActive>
     140:	88 23       	and	r24, r24
     142:	09 f4       	brne	.+2      	; 0x146 <__vector_9+0x58>
     144:	70 c0       	rjmp	.+224    	; 0x226 <__vector_9+0x138>
	{
		u32PLEDFadeIntCount++;
     146:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <u32PLEDFadeIntCount>
     14a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <u32PLEDFadeIntCount+0x1>
     14e:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <u32PLEDFadeIntCount+0x2>
     152:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <u32PLEDFadeIntCount+0x3>
     156:	01 96       	adiw	r24, 0x01	; 1
     158:	a1 1d       	adc	r26, r1
     15a:	b1 1d       	adc	r27, r1
     15c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <u32PLEDFadeIntCount>
     160:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <u32PLEDFadeIntCount+0x1>
     164:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <u32PLEDFadeIntCount+0x2>
     168:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <u32PLEDFadeIntCount+0x3>
		if(u32PLEDFadeIntCount>=u32PLEDFadeIntStep)
     16c:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <u32PLEDFadeIntCount>
     170:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <u32PLEDFadeIntCount+0x1>
     174:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <u32PLEDFadeIntCount+0x2>
     178:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <u32PLEDFadeIntCount+0x3>
     17c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <u32PLEDFadeIntStep>
     180:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <u32PLEDFadeIntStep+0x1>
     184:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <u32PLEDFadeIntStep+0x2>
     188:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <u32PLEDFadeIntStep+0x3>
     18c:	28 17       	cp	r18, r24
     18e:	39 07       	cpc	r19, r25
     190:	4a 07       	cpc	r20, r26
     192:	5b 07       	cpc	r21, r27
     194:	08 f4       	brcc	.+2      	; 0x198 <__vector_9+0xaa>
     196:	47 c0       	rjmp	.+142    	; 0x226 <__vector_9+0x138>
		{
			u32PLEDFadeIntCount = 0;
     198:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <u32PLEDFadeIntCount>
     19c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <u32PLEDFadeIntCount+0x1>
     1a0:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <u32PLEDFadeIntCount+0x2>
     1a4:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <u32PLEDFadeIntCount+0x3>
			u16PLEDFadeCurrValue++;
     1a8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <u16PLEDFadeCurrValue>
     1ac:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <u16PLEDFadeCurrValue+0x1>
     1b0:	01 96       	adiw	r24, 0x01	; 1
     1b2:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <u16PLEDFadeCurrValue+0x1>
     1b6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <u16PLEDFadeCurrValue>
			setPWMDuty(u16PLEDFadeCurrValue);
     1ba:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <u16PLEDFadeCurrValue>
     1be:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <u16PLEDFadeCurrValue+0x1>
     1c2:	0e 94 4f 08 	call	0x109e	; 0x109e <setPWMDuty>
			u8Duty = Map(u16PLEDFadeCurrValue,0,511,0,100);
     1c6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <u16PLEDFadeCurrValue>
     1ca:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <u16PLEDFadeCurrValue+0x1>
     1ce:	cc 01       	movw	r24, r24
     1d0:	a0 e0       	ldi	r26, 0x00	; 0
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	1f 92       	push	r1
     1d6:	1f 92       	push	r1
     1d8:	1f 92       	push	r1
     1da:	24 e6       	ldi	r18, 0x64	; 100
     1dc:	2f 93       	push	r18
     1de:	a1 2c       	mov	r10, r1
     1e0:	b1 2c       	mov	r11, r1
     1e2:	65 01       	movw	r12, r10
     1e4:	e1 2c       	mov	r14, r1
     1e6:	f1 2c       	mov	r15, r1
     1e8:	87 01       	movw	r16, r14
     1ea:	ea 94       	dec	r14
     1ec:	f3 94       	inc	r15
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	a9 01       	movw	r20, r18
     1f4:	bc 01       	movw	r22, r24
     1f6:	cd 01       	movw	r24, r26
     1f8:	0e 94 91 09 	call	0x1322	; 0x1322 <Map>
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
     204:	dc 01       	movw	r26, r24
     206:	cb 01       	movw	r24, r22
     208:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <u8Duty>

			if(u16PLEDFadeCurrValue>=u16PLEDFadeMaxValue)
     20c:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <u16PLEDFadeCurrValue>
     210:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <u16PLEDFadeCurrValue+0x1>
     214:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <u16PLEDFadeMaxValue>
     218:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <u16PLEDFadeMaxValue+0x1>
     21c:	28 17       	cp	r18, r24
     21e:	39 07       	cpc	r19, r25
     220:	10 f0       	brcs	.+4      	; 0x226 <__vector_9+0x138>
			{
				u8PLEDFadeActive = 0;
     222:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <u8PLEDFadeActive>
			}
		}
	}

	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
     226:	8b e2       	ldi	r24, 0x2B	; 43
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	2b e2       	ldi	r18, 0x2B	; 43
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	f9 01       	movw	r30, r18
     230:	20 81       	ld	r18, Z
     232:	2d 7f       	andi	r18, 0xFD	; 253
     234:	fc 01       	movw	r30, r24
     236:	20 83       	st	Z, r18
	#endif
}
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	ff 91       	pop	r31
     23e:	ef 91       	pop	r30
     240:	bf 91       	pop	r27
     242:	af 91       	pop	r26
     244:	9f 91       	pop	r25
     246:	8f 91       	pop	r24
     248:	7f 91       	pop	r23
     24a:	6f 91       	pop	r22
     24c:	5f 91       	pop	r21
     24e:	4f 91       	pop	r20
     250:	3f 91       	pop	r19
     252:	2f 91       	pop	r18
     254:	1f 91       	pop	r17
     256:	0f 91       	pop	r16
     258:	ff 90       	pop	r15
     25a:	ef 90       	pop	r14
     25c:	df 90       	pop	r13
     25e:	cf 90       	pop	r12
     260:	bf 90       	pop	r11
     262:	af 90       	pop	r10
     264:	0f 90       	pop	r0
     266:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     26a:	0f 90       	pop	r0
     26c:	1f 90       	pop	r1
     26e:	18 95       	reti

00000270 <__vector_1>:


ISR(INT0_vect)	// external interrupt (handshake from RGBooster board)
{				// start RGBooster send sequence: reset "ucRGBIdx" and "ucByteIdx" to zero. then start with calling the ISR directly "INT1_vect();"
     270:	1f 92       	push	r1
     272:	0f 92       	push	r0
     274:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     278:	0f 92       	push	r0
     27a:	11 24       	eor	r1, r1
     27c:	2f 93       	push	r18
     27e:	3f 93       	push	r19
     280:	4f 93       	push	r20
     282:	8f 93       	push	r24
     284:	9f 93       	push	r25
     286:	ef 93       	push	r30
     288:	ff 93       	push	r31
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
     292:	8b e2       	ldi	r24, 0x2B	; 43
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	2b e2       	ldi	r18, 0x2B	; 43
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	f9 01       	movw	r30, r18
     29c:	20 81       	ld	r18, Z
     29e:	22 60       	ori	r18, 0x02	; 2
     2a0:	fc 01       	movw	r30, r24
     2a2:	20 83       	st	Z, r18
	#endif
	
	if(ucRGBIdx<(LED_COUNT))
     2a4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ucRGBIdx>
     2a8:	83 30       	cpi	r24, 0x03	; 3
     2aa:	08 f0       	brcs	.+2      	; 0x2ae <__vector_1+0x3e>
     2ac:	d1 c0       	rjmp	.+418    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	{
		switch(ucByteIdx) // red green and blue are sent in 3 separate bytes. this variable remembers the next color to be sent
     2ae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     2b2:	88 2f       	mov	r24, r24
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	81 30       	cpi	r24, 0x01	; 1
     2b8:	91 05       	cpc	r25, r1
     2ba:	09 f4       	brne	.+2      	; 0x2be <__vector_1+0x4e>
     2bc:	47 c0       	rjmp	.+142    	; 0x34c <__vector_1+0xdc>
     2be:	82 30       	cpi	r24, 0x02	; 2
     2c0:	91 05       	cpc	r25, r1
     2c2:	09 f4       	brne	.+2      	; 0x2c6 <__vector_1+0x56>
     2c4:	83 c0       	rjmp	.+262    	; 0x3cc <__vector_1+0x15c>
     2c6:	89 2b       	or	r24, r25
     2c8:	09 f0       	breq	.+2      	; 0x2cc <__vector_1+0x5c>
     2ca:	c2 c0       	rjmp	.+388    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		{
			case 0:
			PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (aucGreen[ucRGBIdx] & DATA_HIGH_BITMASK);
     2cc:	82 e2       	ldi	r24, 0x22	; 34
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	22 e2       	ldi	r18, 0x22	; 34
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	f9 01       	movw	r30, r18
     2d6:	20 81       	ld	r18, Z
     2d8:	42 2f       	mov	r20, r18
     2da:	4f 70       	andi	r20, 0x0F	; 15
     2dc:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <ucRGBIdx>
     2e0:	22 2f       	mov	r18, r18
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	2d 5f       	subi	r18, 0xFD	; 253
     2e6:	3e 4f       	sbci	r19, 0xFE	; 254
     2e8:	f9 01       	movw	r30, r18
     2ea:	20 81       	ld	r18, Z
     2ec:	20 7f       	andi	r18, 0xF0	; 240
     2ee:	24 2b       	or	r18, r20
     2f0:	fc 01       	movw	r30, r24
     2f2:	20 83       	st	Z, r18
			PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (aucGreen[ucRGBIdx] & DATA_LOW_BITMASK);
     2f4:	85 e2       	ldi	r24, 0x25	; 37
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	25 e2       	ldi	r18, 0x25	; 37
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	f9 01       	movw	r30, r18
     2fe:	20 81       	ld	r18, Z
     300:	42 2f       	mov	r20, r18
     302:	40 7f       	andi	r20, 0xF0	; 240
     304:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <ucRGBIdx>
     308:	22 2f       	mov	r18, r18
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	2d 5f       	subi	r18, 0xFD	; 253
     30e:	3e 4f       	sbci	r19, 0xFE	; 254
     310:	f9 01       	movw	r30, r18
     312:	20 81       	ld	r18, Z
     314:	2f 70       	andi	r18, 0x0F	; 15
     316:	24 2b       	or	r18, r20
     318:	fc 01       	movw	r30, r24
     31a:	20 83       	st	Z, r18
			PORT_CONTROL |= (1<<SEND); // generate send impulse
     31c:	8b e2       	ldi	r24, 0x2B	; 43
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	2b e2       	ldi	r18, 0x2B	; 43
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	f9 01       	movw	r30, r18
     326:	20 81       	ld	r18, Z
     328:	28 60       	ori	r18, 0x08	; 8
     32a:	fc 01       	movw	r30, r24
     32c:	20 83       	st	Z, r18
			PORT_CONTROL &= ~(1<<SEND);
     32e:	8b e2       	ldi	r24, 0x2B	; 43
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	2b e2       	ldi	r18, 0x2B	; 43
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	f9 01       	movw	r30, r18
     338:	20 81       	ld	r18, Z
     33a:	27 7f       	andi	r18, 0xF7	; 247
     33c:	fc 01       	movw	r30, r24
     33e:	20 83       	st	Z, r18
			ucByteIdx++;
     340:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     344:	8f 5f       	subi	r24, 0xFF	; 255
     346:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
			break;
     34a:	82 c0       	rjmp	.+260    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>

			case 1:
			PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (aucRed[ucRGBIdx] & DATA_HIGH_BITMASK);
     34c:	82 e2       	ldi	r24, 0x22	; 34
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	22 e2       	ldi	r18, 0x22	; 34
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	f9 01       	movw	r30, r18
     356:	20 81       	ld	r18, Z
     358:	42 2f       	mov	r20, r18
     35a:	4f 70       	andi	r20, 0x0F	; 15
     35c:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <ucRGBIdx>
     360:	22 2f       	mov	r18, r18
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	20 50       	subi	r18, 0x00	; 0
     366:	3f 4f       	sbci	r19, 0xFF	; 255
     368:	f9 01       	movw	r30, r18
     36a:	20 81       	ld	r18, Z
     36c:	20 7f       	andi	r18, 0xF0	; 240
     36e:	24 2b       	or	r18, r20
     370:	fc 01       	movw	r30, r24
     372:	20 83       	st	Z, r18
			PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (aucRed[ucRGBIdx] & DATA_LOW_BITMASK);
     374:	85 e2       	ldi	r24, 0x25	; 37
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	25 e2       	ldi	r18, 0x25	; 37
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	f9 01       	movw	r30, r18
     37e:	20 81       	ld	r18, Z
     380:	42 2f       	mov	r20, r18
     382:	40 7f       	andi	r20, 0xF0	; 240
     384:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <ucRGBIdx>
     388:	22 2f       	mov	r18, r18
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	20 50       	subi	r18, 0x00	; 0
     38e:	3f 4f       	sbci	r19, 0xFF	; 255
     390:	f9 01       	movw	r30, r18
     392:	20 81       	ld	r18, Z
     394:	2f 70       	andi	r18, 0x0F	; 15
     396:	24 2b       	or	r18, r20
     398:	fc 01       	movw	r30, r24
     39a:	20 83       	st	Z, r18
			PORT_CONTROL |= (1<<SEND); // generate send impulse
     39c:	8b e2       	ldi	r24, 0x2B	; 43
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	2b e2       	ldi	r18, 0x2B	; 43
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	f9 01       	movw	r30, r18
     3a6:	20 81       	ld	r18, Z
     3a8:	28 60       	ori	r18, 0x08	; 8
     3aa:	fc 01       	movw	r30, r24
     3ac:	20 83       	st	Z, r18
			PORT_CONTROL &= ~(1<<SEND);
     3ae:	8b e2       	ldi	r24, 0x2B	; 43
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	2b e2       	ldi	r18, 0x2B	; 43
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	f9 01       	movw	r30, r18
     3b8:	20 81       	ld	r18, Z
     3ba:	27 7f       	andi	r18, 0xF7	; 247
     3bc:	fc 01       	movw	r30, r24
     3be:	20 83       	st	Z, r18
			ucByteIdx++;
     3c0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     3c4:	8f 5f       	subi	r24, 0xFF	; 255
     3c6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
			break;
     3ca:	42 c0       	rjmp	.+132    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>

			case 2:
			PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (aucBlue[ucRGBIdx] & DATA_HIGH_BITMASK);
     3cc:	82 e2       	ldi	r24, 0x22	; 34
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	22 e2       	ldi	r18, 0x22	; 34
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	f9 01       	movw	r30, r18
     3d6:	20 81       	ld	r18, Z
     3d8:	42 2f       	mov	r20, r18
     3da:	4f 70       	andi	r20, 0x0F	; 15
     3dc:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <ucRGBIdx>
     3e0:	22 2f       	mov	r18, r18
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	2a 5f       	subi	r18, 0xFA	; 250
     3e6:	3e 4f       	sbci	r19, 0xFE	; 254
     3e8:	f9 01       	movw	r30, r18
     3ea:	20 81       	ld	r18, Z
     3ec:	20 7f       	andi	r18, 0xF0	; 240
     3ee:	24 2b       	or	r18, r20
     3f0:	fc 01       	movw	r30, r24
     3f2:	20 83       	st	Z, r18
			PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (aucBlue[ucRGBIdx] & DATA_LOW_BITMASK);
     3f4:	85 e2       	ldi	r24, 0x25	; 37
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	25 e2       	ldi	r18, 0x25	; 37
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	f9 01       	movw	r30, r18
     3fe:	20 81       	ld	r18, Z
     400:	42 2f       	mov	r20, r18
     402:	40 7f       	andi	r20, 0xF0	; 240
     404:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <ucRGBIdx>
     408:	22 2f       	mov	r18, r18
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	2a 5f       	subi	r18, 0xFA	; 250
     40e:	3e 4f       	sbci	r19, 0xFE	; 254
     410:	f9 01       	movw	r30, r18
     412:	20 81       	ld	r18, Z
     414:	2f 70       	andi	r18, 0x0F	; 15
     416:	24 2b       	or	r18, r20
     418:	fc 01       	movw	r30, r24
     41a:	20 83       	st	Z, r18
			PORT_CONTROL |= (1<<SEND); // generate send impulse
     41c:	8b e2       	ldi	r24, 0x2B	; 43
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	2b e2       	ldi	r18, 0x2B	; 43
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	f9 01       	movw	r30, r18
     426:	20 81       	ld	r18, Z
     428:	28 60       	ori	r18, 0x08	; 8
     42a:	fc 01       	movw	r30, r24
     42c:	20 83       	st	Z, r18
			PORT_CONTROL &= ~(1<<SEND);
     42e:	8b e2       	ldi	r24, 0x2B	; 43
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	2b e2       	ldi	r18, 0x2B	; 43
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	f9 01       	movw	r30, r18
     438:	20 81       	ld	r18, Z
     43a:	27 7f       	andi	r18, 0xF7	; 247
     43c:	fc 01       	movw	r30, r24
     43e:	20 83       	st	Z, r18
			ucByteIdx=0;
     440:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
			ucRGBIdx++;
     444:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ucRGBIdx>
     448:	8f 5f       	subi	r24, 0xFF	; 255
     44a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ucRGBIdx>
			break;
     44e:	00 00       	nop
		}
	}
	
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
     450:	8b e2       	ldi	r24, 0x2B	; 43
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	2b e2       	ldi	r18, 0x2B	; 43
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	f9 01       	movw	r30, r18
     45a:	20 81       	ld	r18, Z
     45c:	2d 7f       	andi	r18, 0xFD	; 253
     45e:	fc 01       	movw	r30, r24
     460:	20 83       	st	Z, r18
	#endif
}
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	ff 91       	pop	r31
     468:	ef 91       	pop	r30
     46a:	9f 91       	pop	r25
     46c:	8f 91       	pop	r24
     46e:	4f 91       	pop	r20
     470:	3f 91       	pop	r19
     472:	2f 91       	pop	r18
     474:	0f 90       	pop	r0
     476:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     47a:	0f 90       	pop	r0
     47c:	1f 90       	pop	r1
     47e:	18 95       	reti

00000480 <__vector_19>:


ISR(SPI_STC_vect)
{
     480:	1f 92       	push	r1
     482:	0f 92       	push	r0
     484:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     488:	0f 92       	push	r0
     48a:	11 24       	eor	r1, r1
     48c:	2f 93       	push	r18
     48e:	3f 93       	push	r19
     490:	4f 93       	push	r20
     492:	5f 93       	push	r21
     494:	6f 93       	push	r22
     496:	7f 93       	push	r23
     498:	8f 93       	push	r24
     49a:	9f 93       	push	r25
     49c:	af 93       	push	r26
     49e:	bf 93       	push	r27
     4a0:	ef 93       	push	r30
     4a2:	ff 93       	push	r31
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	1f 92       	push	r1
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8spiData = SPDR0;
     4ae:	8e e4       	ldi	r24, 0x4E	; 78
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	fc 01       	movw	r30, r24
     4b4:	80 81       	ld	r24, Z
     4b6:	89 83       	std	Y+1, r24	; 0x01
	
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
     4b8:	8b e2       	ldi	r24, 0x2B	; 43
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	2b e2       	ldi	r18, 0x2B	; 43
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	f9 01       	movw	r30, r18
     4c2:	20 81       	ld	r18, Z
     4c4:	22 60       	ori	r18, 0x02	; 2
     4c6:	fc 01       	movw	r30, r24
     4c8:	20 83       	st	Z, r18
	#endif
	
	SPDR0 = 0;
     4ca:	8e e4       	ldi	r24, 0x4E	; 78
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	fc 01       	movw	r30, r24
     4d0:	10 82       	st	Z, r1

	switch(SPIBUFFER.spiState)
     4d2:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <SPIBUFFER+0x42>
     4d6:	88 2f       	mov	r24, r24
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	09 2e       	mov	r0, r25
     4dc:	00 0c       	add	r0, r0
     4de:	aa 0b       	sbc	r26, r26
     4e0:	bb 0b       	sbc	r27, r27
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	26 e0       	ldi	r18, 0x06	; 6
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	84 1b       	sub	r24, r20
     4ec:	95 0b       	sbc	r25, r21
     4ee:	28 17       	cp	r18, r24
     4f0:	39 07       	cpc	r19, r25
     4f2:	08 f4       	brcc	.+2      	; 0x4f6 <__vector_19+0x76>
     4f4:	0e c1       	rjmp	.+540    	; 0x712 <__vector_19+0x292>
     4f6:	82 5c       	subi	r24, 0xC2	; 194
     4f8:	9f 4f       	sbci	r25, 0xFF	; 255
     4fa:	fc 01       	movw	r30, r24
     4fc:	0c 94 90 0a 	jmp	0x1520	; 0x1520 <__tablejump2__>
	{
		case READY:
			if(u8spiData>=3)
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	83 30       	cpi	r24, 0x03	; 3
     504:	90 f0       	brcs	.+36     	; 0x52a <__vector_19+0xaa>
			{
				SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
     506:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <SPIBUFFER+0x40>
     50a:	88 2f       	mov	r24, r24
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	83 5e       	subi	r24, 0xE3	; 227
     510:	9e 4f       	sbci	r25, 0xFE	; 254
     512:	29 81       	ldd	r18, Y+1	; 0x01
     514:	fc 01       	movw	r30, r24
     516:	20 83       	st	Z, r18
				SPIBUFFER.u8Count++;
     518:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <SPIBUFFER+0x40>
     51c:	8f 5f       	subi	r24, 0xFF	; 255
     51e:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <SPIBUFFER+0x40>
				SPIBUFFER.spiState = WRITE;
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <SPIBUFFER+0x42>
			}
			else
			{
				SPIBUFFER.spiState = READ;
			}
		break;
     528:	f4 c0       	rjmp	.+488    	; 0x712 <__vector_19+0x292>
				SPIBUFFER.u8Count++;
				SPIBUFFER.spiState = WRITE;
			}
			else
			{
				SPIBUFFER.spiState = READ;
     52a:	82 e0       	ldi	r24, 0x02	; 2
     52c:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <SPIBUFFER+0x42>
			}
		break;
     530:	f0 c0       	rjmp	.+480    	; 0x712 <__vector_19+0x292>

		case WRITE:
			SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
     532:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <SPIBUFFER+0x40>
     536:	88 2f       	mov	r24, r24
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	83 5e       	subi	r24, 0xE3	; 227
     53c:	9e 4f       	sbci	r25, 0xFE	; 254
     53e:	29 81       	ldd	r18, Y+1	; 0x01
     540:	fc 01       	movw	r30, r24
     542:	20 83       	st	Z, r18
			SPIBUFFER.u8Count++;
     544:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <SPIBUFFER+0x40>
     548:	8f 5f       	subi	r24, 0xFF	; 255
     54a:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <SPIBUFFER+0x40>
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
     54e:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <SPIBUFFER+0x40>
     552:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <SPIBUFFER>
     556:	98 17       	cp	r25, r24
     558:	20 f0       	brcs	.+8      	; 0x562 <__vector_19+0xe2>
			{
				SPIBUFFER.spiState = DONE_WRITE;
     55a:	84 e0       	ldi	r24, 0x04	; 4
     55c:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <SPIBUFFER+0x42>
			}
		break;
     560:	d8 c0       	rjmp	.+432    	; 0x712 <__vector_19+0x292>
     562:	d7 c0       	rjmp	.+430    	; 0x712 <__vector_19+0x292>

		case READ:
			SPIBUFFER.u8Count = 0;
     564:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <SPIBUFFER+0x40>
			
			switch(u8spiData)
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	88 2f       	mov	r24, r24
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	82 3f       	cpi	r24, 0xF2	; 242
     570:	91 05       	cpc	r25, r1
     572:	79 f1       	breq	.+94     	; 0x5d2 <__vector_19+0x152>
     574:	83 3f       	cpi	r24, 0xF3	; 243
     576:	91 05       	cpc	r25, r1
     578:	24 f4       	brge	.+8      	; 0x582 <__vector_19+0x102>
     57a:	81 3f       	cpi	r24, 0xF1	; 241
     57c:	91 05       	cpc	r25, r1
     57e:	51 f0       	breq	.+20     	; 0x594 <__vector_19+0x114>
     580:	a6 c0       	rjmp	.+332    	; 0x6ce <__vector_19+0x24e>
     582:	83 3f       	cpi	r24, 0xF3	; 243
     584:	91 05       	cpc	r25, r1
     586:	09 f4       	brne	.+2      	; 0x58a <__vector_19+0x10a>
     588:	43 c0       	rjmp	.+134    	; 0x610 <__vector_19+0x190>
     58a:	84 3f       	cpi	r24, 0xF4	; 244
     58c:	91 05       	cpc	r25, r1
     58e:	09 f4       	brne	.+2      	; 0x592 <__vector_19+0x112>
     590:	5e c0       	rjmp	.+188    	; 0x64e <__vector_19+0x1ce>
     592:	9d c0       	rjmp	.+314    	; 0x6ce <__vector_19+0x24e>
			{
				case 0xF1:
					SPDR0 = 0x01;
     594:	8e e4       	ldi	r24, 0x4E	; 78
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	21 e0       	ldi	r18, 0x01	; 1
     59a:	fc 01       	movw	r30, r24
     59c:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     59e:	84 e0       	ldi	r24, 0x04	; 4
     5a0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     5a4:	89 81       	ldd	r24, Y+1	; 0x01
     5a6:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = u8Status;
     5aa:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <u8Status>
     5ae:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     5b2:	63 e0       	ldi	r22, 0x03	; 3
     5b4:	8d e1       	ldi	r24, 0x1D	; 29
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	0e 94 08 0a 	call	0x1410	; 0x1410 <CRC8>
     5bc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     5c0:	84 e0       	ldi	r24, 0x04	; 4
     5c2:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     5c6:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     5ca:	83 e0       	ldi	r24, 0x03	; 3
     5cc:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <SPIBUFFER+0x42>
				break;
     5d0:	82 c0       	rjmp	.+260    	; 0x6d6 <__vector_19+0x256>
				
				case 0xF2:
					SPDR0 = 0x01;
     5d2:	8e e4       	ldi	r24, 0x4E	; 78
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	21 e0       	ldi	r18, 0x01	; 1
     5d8:	fc 01       	movw	r30, r24
     5da:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     5dc:	84 e0       	ldi	r24, 0x04	; 4
     5de:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     5e2:	89 81       	ldd	r24, Y+1	; 0x01
     5e4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = u8Duty;
     5e8:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <u8Duty>
     5ec:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     5f0:	63 e0       	ldi	r22, 0x03	; 3
     5f2:	8d e1       	ldi	r24, 0x1D	; 29
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	0e 94 08 0a 	call	0x1410	; 0x1410 <CRC8>
     5fa:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     5fe:	84 e0       	ldi	r24, 0x04	; 4
     600:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     604:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     608:	83 e0       	ldi	r24, 0x03	; 3
     60a:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <SPIBUFFER+0x42>
				break;
     60e:	63 c0       	rjmp	.+198    	; 0x6d6 <__vector_19+0x256>
				
				case 0xF3:
					SPDR0 = 0x01;
     610:	8e e4       	ldi	r24, 0x4E	; 78
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	21 e0       	ldi	r18, 0x01	; 1
     616:	fc 01       	movw	r30, r24
     618:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     61a:	84 e0       	ldi	r24, 0x04	; 4
     61c:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = adcGetTemperature();
     626:	0e 94 a4 08 	call	0x1148	; 0x1148 <adcGetTemperature>
     62a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     62e:	63 e0       	ldi	r22, 0x03	; 3
     630:	8d e1       	ldi	r24, 0x1D	; 29
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	0e 94 08 0a 	call	0x1410	; 0x1410 <CRC8>
     638:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     63c:	84 e0       	ldi	r24, 0x04	; 4
     63e:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     642:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     646:	83 e0       	ldi	r24, 0x03	; 3
     648:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <SPIBUFFER+0x42>
				break;
     64c:	44 c0       	rjmp	.+136    	; 0x6d6 <__vector_19+0x256>

				case 0xF4:
					SPDR0 = 0x01;
     64e:	8e e4       	ldi	r24, 0x4E	; 78
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	21 e0       	ldi	r18, 0x01	; 1
     654:	fc 01       	movw	r30, r24
     656:	20 83       	st	Z, r18
					if(u8PLEDFadeActive) // ongoing fade
     658:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <u8PLEDFadeActive>
     65c:	88 23       	and	r24, r24
     65e:	09 f1       	breq	.+66     	; 0x6a2 <__vector_19+0x222>
					{
						SPIBUFFER.au8Buffer[0] = 7;
     660:	87 e0       	ldi	r24, 0x07	; 7
     662:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <SPIBUFFER>
						SPIBUFFER.au8Buffer[1] = u8spiData;
     666:	89 81       	ldd	r24, Y+1	; 0x01
     668:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <SPIBUFFER+0x1>
						SPIBUFFER.au8Buffer[2] = u8PLEDFadeMinPercent;
     66c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <u8PLEDFadeMinPercent>
     670:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <SPIBUFFER+0x2>
						SPIBUFFER.au8Buffer[3] = u8PLEDFadeMaxPercent;
     674:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <u8PLEDFadeMaxPercent>
     678:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <SPIBUFFER+0x3>
						SPIBUFFER.au8Buffer[4] = u8PLEDFadeTime;
     67c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <u8PLEDFadeTime>
     680:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <SPIBUFFER+0x4>
						SPIBUFFER.au8Buffer[5] = u8Duty;
     684:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <u8Duty>
     688:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <SPIBUFFER+0x5>
						SPIBUFFER.au8Buffer[6] = CRC8(&SPIBUFFER.au8Buffer[0],6);
     68c:	66 e0       	ldi	r22, 0x06	; 6
     68e:	8d e1       	ldi	r24, 0x1D	; 29
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	0e 94 08 0a 	call	0x1410	; 0x1410 <CRC8>
     696:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <SPIBUFFER+0x6>
						SPIBUFFER.u8Count = 7;
     69a:	87 e0       	ldi	r24, 0x07	; 7
     69c:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <SPIBUFFER+0x40>
     6a0:	10 c0       	rjmp	.+32     	; 0x6c2 <__vector_19+0x242>
					}
					else // no ongoing fade
					{
						SPIBUFFER.au8Buffer[0] = 3;
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <SPIBUFFER>
						SPIBUFFER.au8Buffer[1] = u8spiData;
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <SPIBUFFER+0x1>
						SPIBUFFER.au8Buffer[2] = CRC8(&SPIBUFFER.au8Buffer[0],2);
     6ae:	62 e0       	ldi	r22, 0x02	; 2
     6b0:	8d e1       	ldi	r24, 0x1D	; 29
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	0e 94 08 0a 	call	0x1410	; 0x1410 <CRC8>
     6b8:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <SPIBUFFER+0x2>
						SPIBUFFER.u8Count = 3;
     6bc:	83 e0       	ldi	r24, 0x03	; 3
     6be:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <SPIBUFFER+0x40>
					}
					SPIBUFFER.u8ReadReturnCount = 0;
     6c2:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     6c6:	83 e0       	ldi	r24, 0x03	; 3
     6c8:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <SPIBUFFER+0x42>
				break;
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <__vector_19+0x256>
				
				default:
					SPIBUFFER.spiState = IDLE;
     6ce:	86 e0       	ldi	r24, 0x06	; 6
     6d0:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <SPIBUFFER+0x42>
				break;
     6d4:	00 00       	nop
			}
		break;
     6d6:	1d c0       	rjmp	.+58     	; 0x712 <__vector_19+0x292>
		
		case READ_RETURN:
			SPDR0 = SPIBUFFER.au8Buffer[SPIBUFFER.u8ReadReturnCount];
     6d8:	8e e4       	ldi	r24, 0x4E	; 78
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <SPIBUFFER+0x41>
     6e0:	22 2f       	mov	r18, r18
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	23 5e       	subi	r18, 0xE3	; 227
     6e6:	3e 4f       	sbci	r19, 0xFE	; 254
     6e8:	f9 01       	movw	r30, r18
     6ea:	20 81       	ld	r18, Z
     6ec:	fc 01       	movw	r30, r24
     6ee:	20 83       	st	Z, r18
			SPIBUFFER.u8ReadReturnCount++;
     6f0:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <SPIBUFFER+0x41>
     6f4:	8f 5f       	subi	r24, 0xFF	; 255
     6f6:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <SPIBUFFER+0x41>
			if(SPIBUFFER.u8Count == SPIBUFFER.u8ReadReturnCount)
     6fa:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <SPIBUFFER+0x40>
     6fe:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <SPIBUFFER+0x41>
     702:	98 17       	cp	r25, r24
     704:	21 f4       	brne	.+8      	; 0x70e <__vector_19+0x28e>
			{
				SPIBUFFER.spiState = DONE_READ;
     706:	85 e0       	ldi	r24, 0x05	; 5
     708:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <SPIBUFFER+0x42>
			}
		break;
     70c:	02 c0       	rjmp	.+4      	; 0x712 <__vector_19+0x292>
     70e:	01 c0       	rjmp	.+2      	; 0x712 <__vector_19+0x292>
		
		break;

		case IDLE:

		break;
     710:	00 00       	nop
	}
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
     712:	8b e2       	ldi	r24, 0x2B	; 43
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	2b e2       	ldi	r18, 0x2B	; 43
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	f9 01       	movw	r30, r18
     71c:	20 81       	ld	r18, Z
     71e:	2d 7f       	andi	r18, 0xFD	; 253
     720:	fc 01       	movw	r30, r24
     722:	20 83       	st	Z, r18
	#endif
}
     724:	0f 90       	pop	r0
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	ff 91       	pop	r31
     72c:	ef 91       	pop	r30
     72e:	bf 91       	pop	r27
     730:	af 91       	pop	r26
     732:	9f 91       	pop	r25
     734:	8f 91       	pop	r24
     736:	7f 91       	pop	r23
     738:	6f 91       	pop	r22
     73a:	5f 91       	pop	r21
     73c:	4f 91       	pop	r20
     73e:	3f 91       	pop	r19
     740:	2f 91       	pop	r18
     742:	0f 90       	pop	r0
     744:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     748:	0f 90       	pop	r0
     74a:	1f 90       	pop	r1
     74c:	18 95       	reti

0000074e <__vector_5>:

ISR(PCINT1_vect)
{
     74e:	1f 92       	push	r1
     750:	0f 92       	push	r0
     752:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     756:	0f 92       	push	r0
     758:	11 24       	eor	r1, r1
     75a:	af 92       	push	r10
     75c:	bf 92       	push	r11
     75e:	cf 92       	push	r12
     760:	df 92       	push	r13
     762:	ef 92       	push	r14
     764:	ff 92       	push	r15
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
     76a:	2f 93       	push	r18
     76c:	3f 93       	push	r19
     76e:	4f 93       	push	r20
     770:	5f 93       	push	r21
     772:	6f 93       	push	r22
     774:	7f 93       	push	r23
     776:	8f 93       	push	r24
     778:	9f 93       	push	r25
     77a:	af 93       	push	r26
     77c:	bf 93       	push	r27
     77e:	ef 93       	push	r30
     780:	ff 93       	push	r31
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	00 d0       	rcall	.+0      	; 0x788 <__vector_5+0x3a>
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
     78c:	8b e2       	ldi	r24, 0x2B	; 43
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	2b e2       	ldi	r18, 0x2B	; 43
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	f9 01       	movw	r30, r18
     796:	20 81       	ld	r18, Z
     798:	22 60       	ori	r18, 0x02	; 2
     79a:	fc 01       	movw	r30, r24
     79c:	20 83       	st	Z, r18
	#endif
	
	SPDR0 = 0;
     79e:	8e e4       	ldi	r24, 0x4E	; 78
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	fc 01       	movw	r30, r24
     7a4:	10 82       	st	Z, r1
	if(PIN_SPI & (1<<SPI_SS)) // SS HIGH
     7a6:	83 e2       	ldi	r24, 0x23	; 35
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	fc 01       	movw	r30, r24
     7ac:	80 81       	ld	r24, Z
     7ae:	88 2f       	mov	r24, r24
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	80 71       	andi	r24, 0x10	; 16
     7b4:	99 27       	eor	r25, r25
     7b6:	89 2b       	or	r24, r25
     7b8:	09 f4       	brne	.+2      	; 0x7bc <__vector_5+0x6e>
     7ba:	44 c1       	rjmp	.+648    	; 0xa44 <__stack+0x145>
	{
		
		if(SPIBUFFER.spiState == DONE_WRITE)
     7bc:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <SPIBUFFER+0x42>
     7c0:	84 30       	cpi	r24, 0x04	; 4
     7c2:	09 f0       	breq	.+2      	; 0x7c6 <__vector_5+0x78>
     7c4:	43 c1       	rjmp	.+646    	; 0xa4c <__stack+0x14d>
		{
			if(SPIBUFFER.u8Count == SPIBUFFER.au8Buffer[0]) // correct amount of bytes in buffer
     7c6:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <SPIBUFFER+0x40>
     7ca:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <SPIBUFFER>
     7ce:	98 17       	cp	r25, r24
     7d0:	09 f0       	breq	.+2      	; 0x7d4 <__vector_5+0x86>
     7d2:	3c c1       	rjmp	.+632    	; 0xa4c <__stack+0x14d>
			{
				if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
     7d4:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <SPIBUFFER+0x40>
     7d8:	68 2f       	mov	r22, r24
     7da:	8d e1       	ldi	r24, 0x1D	; 29
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	0e 94 08 0a 	call	0x1410	; 0x1410 <CRC8>
     7e2:	88 23       	and	r24, r24
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <__vector_5+0x9a>
     7e6:	32 c1       	rjmp	.+612    	; 0xa4c <__stack+0x14d>
				{
					switch(SPIBUFFER.au8Buffer[1]) // command
     7e8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <SPIBUFFER+0x1>
     7ec:	88 2f       	mov	r24, r24
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	09 2e       	mov	r0, r25
     7f2:	00 0c       	add	r0, r0
     7f4:	aa 0b       	sbc	r26, r26
     7f6:	bb 0b       	sbc	r27, r27
     7f8:	41 e1       	ldi	r20, 0x11	; 17
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	22 e1       	ldi	r18, 0x12	; 18
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	84 1b       	sub	r24, r20
     802:	95 0b       	sbc	r25, r21
     804:	28 17       	cp	r18, r24
     806:	39 07       	cpc	r19, r25
     808:	08 f4       	brcc	.+2      	; 0x80c <__vector_5+0xbe>
     80a:	20 c1       	rjmp	.+576    	; 0xa4c <__stack+0x14d>
     80c:	8b 5b       	subi	r24, 0xBB	; 187
     80e:	9f 4f       	sbci	r25, 0xFF	; 255
     810:	fc 01       	movw	r30, r24
     812:	0c 94 90 0a 	jmp	0x1520	; 0x1520 <__tablejump2__>
					{
						case 0x11:
						if(SPIBUFFER.u8Count == 3)
     816:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <SPIBUFFER+0x40>
     81a:	83 30       	cpi	r24, 0x03	; 3
     81c:	41 f4       	brne	.+16     	; 0x82e <__vector_5+0xe0>
						{
							enablePLED();
     81e:	0e 94 f2 06 	call	0xde4	; 0xde4 <enablePLED>
							u8Status |= (1<<STATUS_PLED);
     822:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <u8Status>
     826:	81 60       	ori	r24, 0x01	; 1
     828:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <u8Status>
						}
						break;
     82c:	0a c1       	rjmp	.+532    	; 0xa42 <__stack+0x143>
     82e:	09 c1       	rjmp	.+530    	; 0xa42 <__stack+0x143>

						case 0x12:
						if(SPIBUFFER.u8Count == 3)
     830:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <SPIBUFFER+0x40>
     834:	83 30       	cpi	r24, 0x03	; 3
     836:	41 f4       	brne	.+16     	; 0x848 <__vector_5+0xfa>
						{
							disablePLED();
     838:	0e 94 02 07 	call	0xe04	; 0xe04 <disablePLED>
							u8Status &= ~(1<<STATUS_PLED);
     83c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <u8Status>
     840:	8e 7f       	andi	r24, 0xFE	; 254
     842:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <u8Status>
						}
						break;
     846:	fd c0       	rjmp	.+506    	; 0xa42 <__stack+0x143>
     848:	fc c0       	rjmp	.+504    	; 0xa42 <__stack+0x143>

						case 0x13:
						if(SPIBUFFER.u8Count == 4)
     84a:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <SPIBUFFER+0x40>
     84e:	84 30       	cpi	r24, 0x04	; 4
     850:	a9 f4       	brne	.+42     	; 0x87c <__vector_5+0x12e>
						{
							if(u8PLEDFadeActive == 0)
     852:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <u8PLEDFadeActive>
     856:	88 23       	and	r24, r24
     858:	89 f4       	brne	.+34     	; 0x87c <__vector_5+0x12e>
							{
								if(SPIBUFFER.au8Buffer[2]>100)
     85a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <SPIBUFFER+0x2>
     85e:	85 36       	cpi	r24, 0x65	; 101
     860:	20 f0       	brcs	.+8      	; 0x86a <__vector_5+0x11c>
								{
									u8Duty = 100;
     862:	84 e6       	ldi	r24, 0x64	; 100
     864:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <u8Duty>
     868:	04 c0       	rjmp	.+8      	; 0x872 <__vector_5+0x124>
								}
								else
								{
									u8Duty = SPIBUFFER.au8Buffer[2];
     86a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <SPIBUFFER+0x2>
     86e:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <u8Duty>
								}
								setPWMDutyPercent(u8Duty);
     872:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <u8Duty>
     876:	0e 94 04 08 	call	0x1008	; 0x1008 <setPWMDutyPercent>
							}
						}
						break;
     87a:	e3 c0       	rjmp	.+454    	; 0xa42 <__stack+0x143>
     87c:	e2 c0       	rjmp	.+452    	; 0xa42 <__stack+0x143>

						case 0x14:
						if(SPIBUFFER.u8Count == 6)
     87e:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <SPIBUFFER+0x40>
     882:	86 30       	cpi	r24, 0x06	; 6
     884:	09 f0       	breq	.+2      	; 0x888 <__vector_5+0x13a>
     886:	b7 c0       	rjmp	.+366    	; 0x9f6 <__stack+0xf7>
						{
							if(SPIBUFFER.au8Buffer[2]>100)
     888:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <SPIBUFFER+0x2>
     88c:	85 36       	cpi	r24, 0x65	; 101
     88e:	50 f0       	brcs	.+20     	; 0x8a4 <__vector_5+0x156>
							{
								u16PLEDFadeMinValue=511;
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <u16PLEDFadeMinValue+0x1>
     898:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <u16PLEDFadeMinValue>
								u8PLEDFadeMinPercent=100;
     89c:	84 e6       	ldi	r24, 0x64	; 100
     89e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <u8PLEDFadeMinPercent>
     8a2:	29 c0       	rjmp	.+82     	; 0x8f6 <__vector_5+0x1a8>
							}
							else
							{
								u16PLEDFadeMinValue = Map(SPIBUFFER.au8Buffer[2],0,100,0,511);
     8a4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <SPIBUFFER+0x2>
     8a8:	88 2f       	mov	r24, r24
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	a0 e0       	ldi	r26, 0x00	; 0
     8ae:	b0 e0       	ldi	r27, 0x00	; 0
     8b0:	1f 92       	push	r1
     8b2:	1f 92       	push	r1
     8b4:	21 e0       	ldi	r18, 0x01	; 1
     8b6:	2f 93       	push	r18
     8b8:	2f ef       	ldi	r18, 0xFF	; 255
     8ba:	2f 93       	push	r18
     8bc:	a1 2c       	mov	r10, r1
     8be:	b1 2c       	mov	r11, r1
     8c0:	65 01       	movw	r12, r10
     8c2:	14 e6       	ldi	r17, 0x64	; 100
     8c4:	e1 2e       	mov	r14, r17
     8c6:	f1 2c       	mov	r15, r1
     8c8:	00 e0       	ldi	r16, 0x00	; 0
     8ca:	10 e0       	ldi	r17, 0x00	; 0
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	a9 01       	movw	r20, r18
     8d2:	bc 01       	movw	r22, r24
     8d4:	cd 01       	movw	r24, r26
     8d6:	0e 94 91 09 	call	0x1322	; 0x1322 <Map>
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	dc 01       	movw	r26, r24
     8e4:	cb 01       	movw	r24, r22
     8e6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <u16PLEDFadeMinValue+0x1>
     8ea:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <u16PLEDFadeMinValue>
								u8PLEDFadeMinPercent = SPIBUFFER.au8Buffer[2];
     8ee:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <SPIBUFFER+0x2>
     8f2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <u8PLEDFadeMinPercent>
							}

							if(SPIBUFFER.au8Buffer[3]>100)
     8f6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <SPIBUFFER+0x3>
     8fa:	85 36       	cpi	r24, 0x65	; 101
     8fc:	50 f0       	brcs	.+20     	; 0x912 <__stack+0x13>
							{
								u16PLEDFadeMaxValue=511;
     8fe:	8f ef       	ldi	r24, 0xFF	; 255
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <u16PLEDFadeMaxValue+0x1>
     906:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <u16PLEDFadeMaxValue>
								u8PLEDFadeMaxPercent=100;
     90a:	84 e6       	ldi	r24, 0x64	; 100
     90c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <u8PLEDFadeMaxPercent>
     910:	29 c0       	rjmp	.+82     	; 0x964 <__stack+0x65>
							}
							else
							{
								u16PLEDFadeMaxValue = Map(SPIBUFFER.au8Buffer[3],0,100,0,511);
     912:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <SPIBUFFER+0x3>
     916:	88 2f       	mov	r24, r24
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	a0 e0       	ldi	r26, 0x00	; 0
     91c:	b0 e0       	ldi	r27, 0x00	; 0
     91e:	1f 92       	push	r1
     920:	1f 92       	push	r1
     922:	21 e0       	ldi	r18, 0x01	; 1
     924:	2f 93       	push	r18
     926:	2f ef       	ldi	r18, 0xFF	; 255
     928:	2f 93       	push	r18
     92a:	a1 2c       	mov	r10, r1
     92c:	b1 2c       	mov	r11, r1
     92e:	65 01       	movw	r12, r10
     930:	14 e6       	ldi	r17, 0x64	; 100
     932:	e1 2e       	mov	r14, r17
     934:	f1 2c       	mov	r15, r1
     936:	00 e0       	ldi	r16, 0x00	; 0
     938:	10 e0       	ldi	r17, 0x00	; 0
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	a9 01       	movw	r20, r18
     940:	bc 01       	movw	r22, r24
     942:	cd 01       	movw	r24, r26
     944:	0e 94 91 09 	call	0x1322	; 0x1322 <Map>
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	dc 01       	movw	r26, r24
     952:	cb 01       	movw	r24, r22
     954:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <u16PLEDFadeMaxValue+0x1>
     958:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <u16PLEDFadeMaxValue>
								u8PLEDFadeMaxPercent = SPIBUFFER.au8Buffer[3];
     95c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <SPIBUFFER+0x3>
     960:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <u8PLEDFadeMaxPercent>
							}
							
							u8PLEDFadeTime = SPIBUFFER.au8Buffer[4];
     964:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <SPIBUFFER+0x4>
     968:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <u8PLEDFadeTime>

							setPWMDuty(u16PLEDFadeMinValue);
     96c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <u16PLEDFadeMinValue>
     970:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <u16PLEDFadeMinValue+0x1>
     974:	0e 94 4f 08 	call	0x109e	; 0x109e <setPWMDuty>
							u8Duty = SPIBUFFER.au8Buffer[2];
     978:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <SPIBUFFER+0x2>
     97c:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <u8Duty>
							u16PLEDFadeCurrValue = u16PLEDFadeMinValue;
     980:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <u16PLEDFadeMinValue>
     984:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <u16PLEDFadeMinValue+0x1>
     988:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <u16PLEDFadeCurrValue+0x1>
     98c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <u16PLEDFadeCurrValue>
							u32PLEDFadeIntCount = 0;
     990:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <u32PLEDFadeIntCount>
     994:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <u32PLEDFadeIntCount+0x1>
     998:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <u32PLEDFadeIntCount+0x2>
     99c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <u32PLEDFadeIntCount+0x3>
							u32PLEDFadeIntStep = 6000*SPIBUFFER.au8Buffer[4]/(u16PLEDFadeMaxValue-u16PLEDFadeMinValue);
     9a0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <SPIBUFFER+0x4>
     9a4:	28 2f       	mov	r18, r24
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	80 e7       	ldi	r24, 0x70	; 112
     9aa:	97 e1       	ldi	r25, 0x17	; 23
     9ac:	28 9f       	mul	r18, r24
     9ae:	a0 01       	movw	r20, r0
     9b0:	29 9f       	mul	r18, r25
     9b2:	50 0d       	add	r21, r0
     9b4:	38 9f       	mul	r19, r24
     9b6:	50 0d       	add	r21, r0
     9b8:	11 24       	eor	r1, r1
     9ba:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <u16PLEDFadeMaxValue>
     9be:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <u16PLEDFadeMaxValue+0x1>
     9c2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <u16PLEDFadeMinValue>
     9c6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <u16PLEDFadeMinValue+0x1>
     9ca:	28 1b       	sub	r18, r24
     9cc:	39 0b       	sbc	r19, r25
     9ce:	ca 01       	movw	r24, r20
     9d0:	b9 01       	movw	r22, r18
     9d2:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__udivmodhi4>
     9d6:	cb 01       	movw	r24, r22
     9d8:	cc 01       	movw	r24, r24
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <u32PLEDFadeIntStep>
     9e2:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <u32PLEDFadeIntStep+0x1>
     9e6:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <u32PLEDFadeIntStep+0x2>
     9ea:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <u32PLEDFadeIntStep+0x3>
							u8PLEDFadeActive = 1;
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <u8PLEDFadeActive>
						}
						break;
     9f4:	26 c0       	rjmp	.+76     	; 0xa42 <__stack+0x143>
     9f6:	25 c0       	rjmp	.+74     	; 0xa42 <__stack+0x143>
						case 0x15:

						break;
					
						case 0x21:
						if(SPIBUFFER.u8Count == 3)
     9f8:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <SPIBUFFER+0x40>
     9fc:	83 30       	cpi	r24, 0x03	; 3
     9fe:	41 f4       	brne	.+16     	; 0xa10 <__stack+0x111>
						{
							enableAudio();
     a00:	0e 94 2b 07 	call	0xe56	; 0xe56 <enableAudio>
							u8Status |= (1<<STATUS_AUDIO);
     a04:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <u8Status>
     a08:	82 60       	ori	r24, 0x02	; 2
     a0a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <u8Status>
						}
						break;
     a0e:	19 c0       	rjmp	.+50     	; 0xa42 <__stack+0x143>
     a10:	18 c0       	rjmp	.+48     	; 0xa42 <__stack+0x143>

						case 0x22:
						if(SPIBUFFER.u8Count == 3)
     a12:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <SPIBUFFER+0x40>
     a16:	83 30       	cpi	r24, 0x03	; 3
     a18:	41 f4       	brne	.+16     	; 0xa2a <__stack+0x12b>
						{
							standbyAudio();
     a1a:	0e 94 12 07 	call	0xe24	; 0xe24 <standbyAudio>
							u8Status &= ~(1<<STATUS_AUDIO);
     a1e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <u8Status>
     a22:	8d 7f       	andi	r24, 0xFD	; 253
     a24:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <u8Status>
						}
						break;
     a28:	0c c0       	rjmp	.+24     	; 0xa42 <__stack+0x143>
     a2a:	0b c0       	rjmp	.+22     	; 0xa42 <__stack+0x143>
					
						case 0x23:
						if(SPIBUFFER.u8Count == 4)
     a2c:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <SPIBUFFER+0x40>
     a30:	84 30       	cpi	r24, 0x04	; 4
     a32:	29 f4       	brne	.+10     	; 0xa3e <__stack+0x13f>
						{
							setVolume(SPIBUFFER.au8Buffer[2]);
     a34:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <SPIBUFFER+0x2>
     a38:	0e 94 a2 07 	call	0xf44	; 0xf44 <setVolume>
						}
						break;
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <__stack+0x143>
     a3e:	01 c0       	rjmp	.+2      	; 0xa42 <__stack+0x143>
						}
						break;
						u8PLEDFadeActive = 0;
						case 0x15:

						break;
     a40:	00 00       	nop
     a42:	04 c0       	rjmp	.+8      	; 0xa4c <__stack+0x14d>
			
		}
	}
	else // SS LOW
	{
		SPIBUFFER.u8Count = 0;
     a44:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <SPIBUFFER+0x40>
		SPIBUFFER.spiState = READY;
     a48:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <SPIBUFFER+0x42>
	}
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
     a4c:	8b e2       	ldi	r24, 0x2B	; 43
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	2b e2       	ldi	r18, 0x2B	; 43
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	f9 01       	movw	r30, r18
     a56:	20 81       	ld	r18, Z
     a58:	2d 7f       	andi	r18, 0xFD	; 253
     a5a:	fc 01       	movw	r30, r24
     a5c:	20 83       	st	Z, r18
	#endif
}
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	ff 91       	pop	r31
     a68:	ef 91       	pop	r30
     a6a:	bf 91       	pop	r27
     a6c:	af 91       	pop	r26
     a6e:	9f 91       	pop	r25
     a70:	8f 91       	pop	r24
     a72:	7f 91       	pop	r23
     a74:	6f 91       	pop	r22
     a76:	5f 91       	pop	r21
     a78:	4f 91       	pop	r20
     a7a:	3f 91       	pop	r19
     a7c:	2f 91       	pop	r18
     a7e:	1f 91       	pop	r17
     a80:	0f 91       	pop	r16
     a82:	ff 90       	pop	r15
     a84:	ef 90       	pop	r14
     a86:	df 90       	pop	r13
     a88:	cf 90       	pop	r12
     a8a:	bf 90       	pop	r11
     a8c:	af 90       	pop	r10
     a8e:	0f 90       	pop	r0
     a90:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a94:	0f 90       	pop	r0
     a96:	1f 90       	pop	r1
     a98:	18 95       	reti

00000a9a <main>:



int main(void)
{
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
	uint16_t i;
	
	portInit();
     aa2:	0e 94 65 06 	call	0xcca	; 0xcca <portInit>
	adcInit();
     aa6:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <adcInit>
	initPWM(0);
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0e 94 c5 07 	call	0xf8a	; 0xf8a <initPWM>
	startPWM();
     ab2:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <startPWM>
	spiInitBuffer(&SPIBUFFER);
     ab6:	8d e1       	ldi	r24, 0x1D	; 29
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	0e 94 f6 05 	call	0xbec	; 0xbec <spiInitBuffer>
	spiSlaveInit();
     abe:	0e 94 15 06 	call	0xc2a	; 0xc2a <spiSlaveInit>
 	spiPcInt();
     ac2:	0e 94 47 06 	call	0xc8e	; 0xc8e <spiPcInt>
	initRGBooster();
     ac6:	0e 94 b0 05 	call	0xb60	; 0xb60 <initRGBooster>
	INT0_Init();
     aca:	0e 94 96 05 	call	0xb2c	; 0xb2c <INT0_Init>
	INT_5ms_Init();
     ace:	0e 94 0a 09 	call	0x1214	; 0x1214 <INT_5ms_Init>

	wait_1ms(100);
     ad2:	84 e6       	ldi	r24, 0x64	; 100
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 36 09 	call	0x126c	; 0x126c <wait_1ms>
	initAudio();
     ada:	0e 94 b7 07 	call	0xf6e	; 0xf6e <initAudio>


	DDRD |= (1<<DDRD1);
     ade:	8a e2       	ldi	r24, 0x2A	; 42
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	2a e2       	ldi	r18, 0x2A	; 42
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	f9 01       	movw	r30, r18
     ae8:	20 81       	ld	r18, Z
     aea:	22 60       	ori	r18, 0x02	; 2
     aec:	fc 01       	movw	r30, r24
     aee:	20 83       	st	Z, r18
	#ifdef INT_OUT
	DDRD |= (1<<DDRD1);
     af0:	8a e2       	ldi	r24, 0x2A	; 42
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	2a e2       	ldi	r18, 0x2A	; 42
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	f9 01       	movw	r30, r18
     afa:	20 81       	ld	r18, Z
     afc:	22 60       	ori	r18, 0x02	; 2
     afe:	fc 01       	movw	r30, r24
     b00:	20 83       	st	Z, r18
	PORTD &= ~(1<<PORTD1);
     b02:	8b e2       	ldi	r24, 0x2B	; 43
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	2b e2       	ldi	r18, 0x2B	; 43
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	f9 01       	movw	r30, r18
     b0c:	20 81       	ld	r18, Z
     b0e:	2d 7f       	andi	r18, 0xFD	; 253
     b10:	fc 01       	movw	r30, r24
     b12:	20 83       	st	Z, r18
	#endif
		
	sei();
     b14:	78 94       	sei
	
		
	
    while (1) 
    {
		wait_1ms(1000);
     b16:	88 ee       	ldi	r24, 0xE8	; 232
     b18:	93 e0       	ldi	r25, 0x03	; 3
     b1a:	0e 94 36 09 	call	0x126c	; 0x126c <wait_1ms>
		ucByteIdx = 0;
     b1e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
		ucRGBIdx = 0;
     b22:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ucRGBIdx>
		INT0_vect();
     b26:	0e 94 38 01 	call	0x270	; 0x270 <__vector_1>
    }
     b2a:	f5 cf       	rjmp	.-22     	; 0xb16 <main+0x7c>

00000b2c <INT0_Init>:
#include "utils.h"
#include "rgbooster.h"


void INT0_Init(void)
{
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
	EICRA |= (1<<ISC01); // interrupt on falling edge
     b34:	89 e6       	ldi	r24, 0x69	; 105
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	29 e6       	ldi	r18, 0x69	; 105
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	f9 01       	movw	r30, r18
     b3e:	20 81       	ld	r18, Z
     b40:	22 60       	ori	r18, 0x02	; 2
     b42:	fc 01       	movw	r30, r24
     b44:	20 83       	st	Z, r18
	EIFR  = (1<<INTF0); // clear flag
     b46:	8c e3       	ldi	r24, 0x3C	; 60
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	21 e0       	ldi	r18, 0x01	; 1
     b4c:	fc 01       	movw	r30, r24
     b4e:	20 83       	st	Z, r18
	EIMSK = (1<<INT0);  // INT1 enable
     b50:	8d e3       	ldi	r24, 0x3D	; 61
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	21 e0       	ldi	r18, 0x01	; 1
     b56:	fc 01       	movw	r30, r24
     b58:	20 83       	st	Z, r18
}
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	08 95       	ret

00000b60 <initRGBooster>:

void initRGBooster(void)
{
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
	DDR_DATA_LOW |= DATA_LOW_BITMASK; //RGB DATA LOWER NIBBLE -> OUTPUT
     b68:	84 e2       	ldi	r24, 0x24	; 36
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	24 e2       	ldi	r18, 0x24	; 36
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	f9 01       	movw	r30, r18
     b72:	20 81       	ld	r18, Z
     b74:	2f 60       	ori	r18, 0x0F	; 15
     b76:	fc 01       	movw	r30, r24
     b78:	20 83       	st	Z, r18
	PORT_DATA_LOW &= ~DATA_LOW_BITMASK; //RGB DATA LOWER NIBBLE -> LOW
     b7a:	85 e2       	ldi	r24, 0x25	; 37
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	25 e2       	ldi	r18, 0x25	; 37
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	f9 01       	movw	r30, r18
     b84:	20 81       	ld	r18, Z
     b86:	20 7f       	andi	r18, 0xF0	; 240
     b88:	fc 01       	movw	r30, r24
     b8a:	20 83       	st	Z, r18
	DDR_DATA_HIGH |= DATA_HIGH_BITMASK; //RGB DATA HIGHER NIBBLE -> OUTPUT
     b8c:	81 e2       	ldi	r24, 0x21	; 33
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	21 e2       	ldi	r18, 0x21	; 33
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	f9 01       	movw	r30, r18
     b96:	20 81       	ld	r18, Z
     b98:	20 6f       	ori	r18, 0xF0	; 240
     b9a:	fc 01       	movw	r30, r24
     b9c:	20 83       	st	Z, r18
	PORT_DATA_HIGH &= ~DATA_HIGH_BITMASK; //RGB DATA HIGHER NIBBLE -> LOW
     b9e:	82 e2       	ldi	r24, 0x22	; 34
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	22 e2       	ldi	r18, 0x22	; 34
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	f9 01       	movw	r30, r18
     ba8:	20 81       	ld	r18, Z
     baa:	2f 70       	andi	r18, 0x0F	; 15
     bac:	fc 01       	movw	r30, r24
     bae:	20 83       	st	Z, r18

	DDR_CONTROL |= (1<<SEND); //SEND PIN -> OUTPUT
     bb0:	8a e2       	ldi	r24, 0x2A	; 42
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	2a e2       	ldi	r18, 0x2A	; 42
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	f9 01       	movw	r30, r18
     bba:	20 81       	ld	r18, Z
     bbc:	28 60       	ori	r18, 0x08	; 8
     bbe:	fc 01       	movw	r30, r24
     bc0:	20 83       	st	Z, r18
	PORT_CONTROL &= ~(1<<SEND); //SEND PIN LOW
     bc2:	8b e2       	ldi	r24, 0x2B	; 43
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	2b e2       	ldi	r18, 0x2B	; 43
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	f9 01       	movw	r30, r18
     bcc:	20 81       	ld	r18, Z
     bce:	27 7f       	andi	r18, 0xF7	; 247
     bd0:	fc 01       	movw	r30, r24
     bd2:	20 83       	st	Z, r18
	DDR_CONTROL &= ~(1<<DONE_BUSY); //DONE BUSY PIN -> INPUT
     bd4:	8a e2       	ldi	r24, 0x2A	; 42
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	2a e2       	ldi	r18, 0x2A	; 42
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	f9 01       	movw	r30, r18
     bde:	20 81       	ld	r18, Z
     be0:	2b 7f       	andi	r18, 0xFB	; 251
     be2:	fc 01       	movw	r30, r24
     be4:	20 83       	st	Z, r18
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	08 95       	ret

00000bec <spiInitBuffer>:
#include <avr/io.h>
#include "spi.h"


void spiInitBuffer(SpiBuf_t* Buffer)
{
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	00 d0       	rcall	.+0      	; 0xbf2 <spiInitBuffer+0x6>
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
     bf6:	9a 83       	std	Y+2, r25	; 0x02
     bf8:	89 83       	std	Y+1, r24	; 0x01
	Buffer->u8Count = 0;
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	9a 81       	ldd	r25, Y+2	; 0x02
     bfe:	80 5c       	subi	r24, 0xC0	; 192
     c00:	9f 4f       	sbci	r25, 0xFF	; 255
     c02:	fc 01       	movw	r30, r24
     c04:	10 82       	st	Z, r1
	Buffer->u8ReadReturnCount = 0;
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	9a 81       	ldd	r25, Y+2	; 0x02
     c0a:	8f 5b       	subi	r24, 0xBF	; 191
     c0c:	9f 4f       	sbci	r25, 0xFF	; 255
     c0e:	fc 01       	movw	r30, r24
     c10:	10 82       	st	Z, r1
	Buffer->spiState = IDLE;
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	8e 5b       	subi	r24, 0xBE	; 190
     c18:	9f 4f       	sbci	r25, 0xFF	; 255
     c1a:	26 e0       	ldi	r18, 0x06	; 6
     c1c:	fc 01       	movw	r30, r24
     c1e:	20 83       	st	Z, r18
}
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	08 95       	ret

00000c2a <spiSlaveInit>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiSlaveInit(void)
{
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	1f 92       	push	r1
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t ucTemp;
	SPSR0 = 0;
     c34:	8d e4       	ldi	r24, 0x4D	; 77
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	fc 01       	movw	r30, r24
     c3a:	10 82       	st	Z, r1
	SPCR0 = (1<<SPIE0);
     c3c:	8c e4       	ldi	r24, 0x4C	; 76
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	20 e8       	ldi	r18, 0x80	; 128
     c42:	fc 01       	movw	r30, r24
     c44:	20 83       	st	Z, r18
	
	ucTemp = SPSR0;					
     c46:	8d e4       	ldi	r24, 0x4D	; 77
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	fc 01       	movw	r30, r24
     c4c:	80 81       	ld	r24, Z
     c4e:	89 83       	std	Y+1, r24	; 0x01
	ucTemp = SPDR0;
     c50:	8e e4       	ldi	r24, 0x4E	; 78
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	fc 01       	movw	r30, r24
     c56:	80 81       	ld	r24, Z
     c58:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0;
     c5a:	8e e4       	ldi	r24, 0x4E	; 78
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	fc 01       	movw	r30, r24
     c60:	10 82       	st	Z, r1
	
	DDRB |= (1<<PINB6);				// MISO needs to be an output
     c62:	84 e2       	ldi	r24, 0x24	; 36
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	24 e2       	ldi	r18, 0x24	; 36
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	f9 01       	movw	r30, r18
     c6c:	20 81       	ld	r18, Z
     c6e:	20 64       	ori	r18, 0x40	; 64
     c70:	fc 01       	movw	r30, r24
     c72:	20 83       	st	Z, r18
	
	SPCR0 |= (1<<SPE0);
     c74:	8c e4       	ldi	r24, 0x4C	; 76
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	2c e4       	ldi	r18, 0x4C	; 76
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	f9 01       	movw	r30, r18
     c7e:	20 81       	ld	r18, Z
     c80:	20 64       	ori	r18, 0x40	; 64
     c82:	fc 01       	movw	r30, r24
     c84:	20 83       	st	Z, r18
}
     c86:	0f 90       	pop	r0
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	08 95       	ret

00000c8e <spiPcInt>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiPcInt(void)
{
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	PCICR |= (1<<PCIE1);
     c96:	88 e6       	ldi	r24, 0x68	; 104
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	28 e6       	ldi	r18, 0x68	; 104
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	f9 01       	movw	r30, r18
     ca0:	20 81       	ld	r18, Z
     ca2:	22 60       	ori	r18, 0x02	; 2
     ca4:	fc 01       	movw	r30, r24
     ca6:	20 83       	st	Z, r18
	PCIFR = (1<<PCIF1);
     ca8:	8b e3       	ldi	r24, 0x3B	; 59
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	22 e0       	ldi	r18, 0x02	; 2
     cae:	fc 01       	movw	r30, r24
     cb0:	20 83       	st	Z, r18
	PCMSK1 |= (1<<PCINT12);
     cb2:	8c e6       	ldi	r24, 0x6C	; 108
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	2c e6       	ldi	r18, 0x6C	; 108
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	f9 01       	movw	r30, r18
     cbc:	20 81       	ld	r18, Z
     cbe:	20 61       	ori	r18, 0x10	; 16
     cc0:	fc 01       	movw	r30, r24
     cc2:	20 83       	st	Z, r18
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <portInit>:
 * @return 8bit analog value
 *****************************************************************************/
uint8_t adcGetValue(void)
{
	return(ADCH);
}
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	8a e2       	ldi	r24, 0x2A	; 42
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	2a e2       	ldi	r18, 0x2A	; 42
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	f9 01       	movw	r30, r18
     cdc:	20 81       	ld	r18, Z
     cde:	20 63       	ori	r18, 0x30	; 48
     ce0:	fc 01       	movw	r30, r24
     ce2:	20 83       	st	Z, r18
     ce4:	8b e2       	ldi	r24, 0x2B	; 43
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	2b e2       	ldi	r18, 0x2B	; 43
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	f9 01       	movw	r30, r18
     cee:	20 81       	ld	r18, Z
     cf0:	20 62       	ori	r18, 0x20	; 32
     cf2:	fc 01       	movw	r30, r24
     cf4:	20 83       	st	Z, r18
     cf6:	8b e2       	ldi	r24, 0x2B	; 43
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	2b e2       	ldi	r18, 0x2B	; 43
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	f9 01       	movw	r30, r18
     d00:	20 81       	ld	r18, Z
     d02:	2f 7e       	andi	r18, 0xEF	; 239
     d04:	fc 01       	movw	r30, r24
     d06:	20 83       	st	Z, r18
     d08:	8a e2       	ldi	r24, 0x2A	; 42
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	2a e2       	ldi	r18, 0x2A	; 42
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	f9 01       	movw	r30, r18
     d12:	20 81       	ld	r18, Z
     d14:	20 68       	ori	r18, 0x80	; 128
     d16:	fc 01       	movw	r30, r24
     d18:	20 83       	st	Z, r18
     d1a:	8b e2       	ldi	r24, 0x2B	; 43
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	2b e2       	ldi	r18, 0x2B	; 43
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	f9 01       	movw	r30, r18
     d24:	20 81       	ld	r18, Z
     d26:	20 68       	ori	r18, 0x80	; 128
     d28:	fc 01       	movw	r30, r24
     d2a:	20 83       	st	Z, r18
     d2c:	8a e2       	ldi	r24, 0x2A	; 42
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	2a e2       	ldi	r18, 0x2A	; 42
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	f9 01       	movw	r30, r18
     d36:	20 81       	ld	r18, Z
     d38:	2f 7b       	andi	r18, 0xBF	; 191
     d3a:	fc 01       	movw	r30, r24
     d3c:	20 83       	st	Z, r18
     d3e:	8a e2       	ldi	r24, 0x2A	; 42
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	2a e2       	ldi	r18, 0x2A	; 42
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	f9 01       	movw	r30, r18
     d48:	20 81       	ld	r18, Z
     d4a:	2c 7f       	andi	r18, 0xFC	; 252
     d4c:	fc 01       	movw	r30, r24
     d4e:	20 83       	st	Z, r18
     d50:	8b e2       	ldi	r24, 0x2B	; 43
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	2b e2       	ldi	r18, 0x2B	; 43
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	f9 01       	movw	r30, r18
     d5a:	20 81       	ld	r18, Z
     d5c:	21 60       	ori	r18, 0x01	; 1
     d5e:	fc 01       	movw	r30, r24
     d60:	20 83       	st	Z, r18
     d62:	81 e2       	ldi	r24, 0x21	; 33
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	21 e2       	ldi	r18, 0x21	; 33
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	f9 01       	movw	r30, r18
     d6c:	20 81       	ld	r18, Z
     d6e:	2e 7f       	andi	r18, 0xFE	; 254
     d70:	fc 01       	movw	r30, r24
     d72:	20 83       	st	Z, r18
     d74:	82 e2       	ldi	r24, 0x22	; 34
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	22 e2       	ldi	r18, 0x22	; 34
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	f9 01       	movw	r30, r18
     d7e:	20 81       	ld	r18, Z
     d80:	2e 7f       	andi	r18, 0xFE	; 254
     d82:	fc 01       	movw	r30, r24
     d84:	20 83       	st	Z, r18
     d86:	8e e7       	ldi	r24, 0x7E	; 126
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	2e e7       	ldi	r18, 0x7E	; 126
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	f9 01       	movw	r30, r18
     d90:	20 81       	ld	r18, Z
     d92:	21 60       	ori	r18, 0x01	; 1
     d94:	fc 01       	movw	r30, r24
     d96:	20 83       	st	Z, r18
     d98:	81 e2       	ldi	r24, 0x21	; 33
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	21 e2       	ldi	r18, 0x21	; 33
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	f9 01       	movw	r30, r18
     da2:	20 81       	ld	r18, Z
     da4:	21 7f       	andi	r18, 0xF1	; 241
     da6:	fc 01       	movw	r30, r24
     da8:	20 83       	st	Z, r18
     daa:	82 e2       	ldi	r24, 0x22	; 34
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	22 e2       	ldi	r18, 0x22	; 34
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	f9 01       	movw	r30, r18
     db4:	20 81       	ld	r18, Z
     db6:	2e 60       	ori	r18, 0x0E	; 14
     db8:	fc 01       	movw	r30, r24
     dba:	20 83       	st	Z, r18
     dbc:	87 e2       	ldi	r24, 0x27	; 39
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	fc 01       	movw	r30, r24
     dc2:	80 81       	ld	r24, Z
     dc4:	87 e2       	ldi	r24, 0x27	; 39
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	fc 01       	movw	r30, r24
     dca:	10 82       	st	Z, r1
     dcc:	88 e2       	ldi	r24, 0x28	; 40
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	fc 01       	movw	r30, r24
     dd2:	80 81       	ld	r24, Z
     dd4:	88 e2       	ldi	r24, 0x28	; 40
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	2f ef       	ldi	r18, 0xFF	; 255
     dda:	fc 01       	movw	r30, r24
     ddc:	20 83       	st	Z, r18
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	08 95       	ret

00000de4 <enablePLED>:
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	8b e2       	ldi	r24, 0x2B	; 43
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	2b e2       	ldi	r18, 0x2B	; 43
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	f9 01       	movw	r30, r18
     df6:	20 81       	ld	r18, Z
     df8:	2f 7d       	andi	r18, 0xDF	; 223
     dfa:	fc 01       	movw	r30, r24
     dfc:	20 83       	st	Z, r18
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	08 95       	ret

00000e04 <disablePLED>:
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	8b e2       	ldi	r24, 0x2B	; 43
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	2b e2       	ldi	r18, 0x2B	; 43
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	f9 01       	movw	r30, r18
     e16:	20 81       	ld	r18, Z
     e18:	20 62       	ori	r18, 0x20	; 32
     e1a:	fc 01       	movw	r30, r24
     e1c:	20 83       	st	Z, r18
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	08 95       	ret

00000e24 <standbyAudio>:
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	8b e2       	ldi	r24, 0x2B	; 43
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	2b e2       	ldi	r18, 0x2B	; 43
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	f9 01       	movw	r30, r18
     e36:	20 81       	ld	r18, Z
     e38:	20 68       	ori	r18, 0x80	; 128
     e3a:	fc 01       	movw	r30, r24
     e3c:	20 83       	st	Z, r18
     e3e:	8a e2       	ldi	r24, 0x2A	; 42
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	2a e2       	ldi	r18, 0x2A	; 42
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	f9 01       	movw	r30, r18
     e48:	20 81       	ld	r18, Z
     e4a:	20 68       	ori	r18, 0x80	; 128
     e4c:	fc 01       	movw	r30, r24
     e4e:	20 83       	st	Z, r18
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	08 95       	ret

00000e56 <enableAudio>:
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	8b e2       	ldi	r24, 0x2B	; 43
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	2b e2       	ldi	r18, 0x2B	; 43
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	f9 01       	movw	r30, r18
     e68:	20 81       	ld	r18, Z
     e6a:	2f 77       	andi	r18, 0x7F	; 127
     e6c:	fc 01       	movw	r30, r24
     e6e:	20 83       	st	Z, r18
     e70:	8a e2       	ldi	r24, 0x2A	; 42
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	2a e2       	ldi	r18, 0x2A	; 42
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	f9 01       	movw	r30, r18
     e7a:	20 81       	ld	r18, Z
     e7c:	20 68       	ori	r18, 0x80	; 128
     e7e:	fc 01       	movw	r30, r24
     e80:	20 83       	st	Z, r18
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	08 95       	ret

00000e88 <incVolume>:
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <incVolume+0x6>
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	8a 83       	std	Y+2, r24	; 0x02
     e94:	8b e2       	ldi	r24, 0x2B	; 43
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	2b e2       	ldi	r18, 0x2B	; 43
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	f9 01       	movw	r30, r18
     e9e:	20 81       	ld	r18, Z
     ea0:	20 64       	ori	r18, 0x40	; 64
     ea2:	fc 01       	movw	r30, r24
     ea4:	20 83       	st	Z, r18
     ea6:	19 82       	std	Y+1, r1	; 0x01
     ea8:	15 c0       	rjmp	.+42     	; 0xed4 <incVolume+0x4c>
     eaa:	8a e2       	ldi	r24, 0x2A	; 42
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	2a e2       	ldi	r18, 0x2A	; 42
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	f9 01       	movw	r30, r18
     eb4:	20 81       	ld	r18, Z
     eb6:	20 64       	ori	r18, 0x40	; 64
     eb8:	fc 01       	movw	r30, r24
     eba:	20 83       	st	Z, r18
     ebc:	8a e2       	ldi	r24, 0x2A	; 42
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	2a e2       	ldi	r18, 0x2A	; 42
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	f9 01       	movw	r30, r18
     ec6:	20 81       	ld	r18, Z
     ec8:	2f 7b       	andi	r18, 0xBF	; 191
     eca:	fc 01       	movw	r30, r24
     ecc:	20 83       	st	Z, r18
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	8f 5f       	subi	r24, 0xFF	; 255
     ed2:	89 83       	std	Y+1, r24	; 0x01
     ed4:	99 81       	ldd	r25, Y+1	; 0x01
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	98 17       	cp	r25, r24
     eda:	38 f3       	brcs	.-50     	; 0xeaa <incVolume+0x22>
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <decVolume>:
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	00 d0       	rcall	.+0      	; 0xeec <decVolume+0x6>
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	8a 83       	std	Y+2, r24	; 0x02
     ef2:	8b e2       	ldi	r24, 0x2B	; 43
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	2b e2       	ldi	r18, 0x2B	; 43
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	f9 01       	movw	r30, r18
     efc:	20 81       	ld	r18, Z
     efe:	2f 7b       	andi	r18, 0xBF	; 191
     f00:	fc 01       	movw	r30, r24
     f02:	20 83       	st	Z, r18
     f04:	19 82       	std	Y+1, r1	; 0x01
     f06:	15 c0       	rjmp	.+42     	; 0xf32 <decVolume+0x4c>
     f08:	8a e2       	ldi	r24, 0x2A	; 42
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	2a e2       	ldi	r18, 0x2A	; 42
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	f9 01       	movw	r30, r18
     f12:	20 81       	ld	r18, Z
     f14:	20 64       	ori	r18, 0x40	; 64
     f16:	fc 01       	movw	r30, r24
     f18:	20 83       	st	Z, r18
     f1a:	8a e2       	ldi	r24, 0x2A	; 42
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	2a e2       	ldi	r18, 0x2A	; 42
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	f9 01       	movw	r30, r18
     f24:	20 81       	ld	r18, Z
     f26:	2f 7b       	andi	r18, 0xBF	; 191
     f28:	fc 01       	movw	r30, r24
     f2a:	20 83       	st	Z, r18
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	8f 5f       	subi	r24, 0xFF	; 255
     f30:	89 83       	std	Y+1, r24	; 0x01
     f32:	99 81       	ldd	r25, Y+1	; 0x01
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	98 17       	cp	r25, r24
     f38:	38 f3       	brcs	.-50     	; 0xf08 <decVolume+0x22>
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <setVolume>:
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	1f 92       	push	r1
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	81 34       	cpi	r24, 0x41	; 65
     f54:	10 f0       	brcs	.+4      	; 0xf5a <setVolume+0x16>
     f56:	80 e4       	ldi	r24, 0x40	; 64
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	80 e4       	ldi	r24, 0x40	; 64
     f5c:	0e 94 73 07 	call	0xee6	; 0xee6 <decVolume>
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	0e 94 44 07 	call	0xe88	; 0xe88 <incVolume>
     f66:	0f 90       	pop	r0
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	08 95       	ret

00000f6e <initAudio>:
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	0e 94 2b 07 	call	0xe56	; 0xe56 <enableAudio>
     f7a:	80 e4       	ldi	r24, 0x40	; 64
     f7c:	0e 94 73 07 	call	0xee6	; 0xee6 <decVolume>
     f80:	0e 94 12 07 	call	0xe24	; 0xe24 <standbyAudio>
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	08 95       	ret

00000f8a <initPWM>:
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <initPWM+0x6>
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	9a 83       	std	Y+2, r25	; 0x02
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	9a 81       	ldd	r25, Y+2	; 0x02
     f9c:	81 15       	cp	r24, r1
     f9e:	92 40       	sbci	r25, 0x02	; 2
     fa0:	20 f0       	brcs	.+8      	; 0xfaa <initPWM+0x20>
     fa2:	8f ef       	ldi	r24, 0xFF	; 255
     fa4:	91 e0       	ldi	r25, 0x01	; 1
     fa6:	9a 83       	std	Y+2, r25	; 0x02
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	80 e8       	ldi	r24, 0x80	; 128
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	22 e2       	ldi	r18, 0x22	; 34
     fb0:	fc 01       	movw	r30, r24
     fb2:	20 83       	st	Z, r18
     fb4:	81 e8       	ldi	r24, 0x81	; 129
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	28 e0       	ldi	r18, 0x08	; 8
     fba:	fc 01       	movw	r30, r24
     fbc:	20 83       	st	Z, r18
     fbe:	84 e8       	ldi	r24, 0x84	; 132
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	fc 01       	movw	r30, r24
     fc4:	11 82       	std	Z+1, r1	; 0x01
     fc6:	10 82       	st	Z, r1
     fc8:	8a e8       	ldi	r24, 0x8A	; 138
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	29 81       	ldd	r18, Y+1	; 0x01
     fce:	3a 81       	ldd	r19, Y+2	; 0x02
     fd0:	fc 01       	movw	r30, r24
     fd2:	31 83       	std	Z+1, r19	; 0x01
     fd4:	20 83       	st	Z, r18
     fd6:	8f e6       	ldi	r24, 0x6F	; 111
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	fc 01       	movw	r30, r24
     fdc:	10 82       	st	Z, r1
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	08 95       	ret

00000fe8 <startPWM>:
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	81 e8       	ldi	r24, 0x81	; 129
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	21 e8       	ldi	r18, 0x81	; 129
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	f9 01       	movw	r30, r18
     ffa:	20 81       	ld	r18, Z
     ffc:	21 60       	ori	r18, 0x01	; 1
     ffe:	fc 01       	movw	r30, r24
    1000:	20 83       	st	Z, r18
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	08 95       	ret

00001008 <setPWMDutyPercent>:
    1008:	8f 92       	push	r8
    100a:	9f 92       	push	r9
    100c:	af 92       	push	r10
    100e:	bf 92       	push	r11
    1010:	cf 92       	push	r12
    1012:	df 92       	push	r13
    1014:	ef 92       	push	r14
    1016:	ff 92       	push	r15
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	1f 92       	push	r1
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	89 83       	std	Y+1, r24	; 0x01
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	85 36       	cpi	r24, 0x65	; 101
    102c:	10 f0       	brcs	.+4      	; 0x1032 <setPWMDutyPercent+0x2a>
    102e:	84 e6       	ldi	r24, 0x64	; 100
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	0f 2e       	mov	r0, r31
    1034:	fa e8       	ldi	r31, 0x8A	; 138
    1036:	8f 2e       	mov	r8, r31
    1038:	91 2c       	mov	r9, r1
    103a:	f0 2d       	mov	r31, r0
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	88 2f       	mov	r24, r24
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	a0 e0       	ldi	r26, 0x00	; 0
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	1f 92       	push	r1
    1048:	1f 92       	push	r1
    104a:	21 e0       	ldi	r18, 0x01	; 1
    104c:	2f 93       	push	r18
    104e:	2f ef       	ldi	r18, 0xFF	; 255
    1050:	2f 93       	push	r18
    1052:	a1 2c       	mov	r10, r1
    1054:	b1 2c       	mov	r11, r1
    1056:	65 01       	movw	r12, r10
    1058:	14 e6       	ldi	r17, 0x64	; 100
    105a:	e1 2e       	mov	r14, r17
    105c:	f1 2c       	mov	r15, r1
    105e:	00 e0       	ldi	r16, 0x00	; 0
    1060:	10 e0       	ldi	r17, 0x00	; 0
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	a9 01       	movw	r20, r18
    1068:	bc 01       	movw	r22, r24
    106a:	cd 01       	movw	r24, r26
    106c:	0e 94 91 09 	call	0x1322	; 0x1322 <Map>
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	f4 01       	movw	r30, r8
    107e:	91 83       	std	Z+1, r25	; 0x01
    1080:	80 83       	st	Z, r24
    1082:	0f 90       	pop	r0
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	df 90       	pop	r13
    1092:	cf 90       	pop	r12
    1094:	bf 90       	pop	r11
    1096:	af 90       	pop	r10
    1098:	9f 90       	pop	r9
    109a:	8f 90       	pop	r8
    109c:	08 95       	ret

0000109e <setPWMDuty>:
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <setPWMDuty+0x6>
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	9a 83       	std	Y+2, r25	; 0x02
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	81 15       	cp	r24, r1
    10b2:	92 40       	sbci	r25, 0x02	; 2
    10b4:	20 f0       	brcs	.+8      	; 0x10be <setPWMDuty+0x20>
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	9a 83       	std	Y+2, r25	; 0x02
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	8a e8       	ldi	r24, 0x8A	; 138
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	29 81       	ldd	r18, Y+1	; 0x01
    10c4:	3a 81       	ldd	r19, Y+2	; 0x02
    10c6:	fc 01       	movw	r30, r24
    10c8:	31 83       	std	Z+1, r19	; 0x01
    10ca:	20 83       	st	Z, r18
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	08 95       	ret

000010d6 <adcInit>:
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	81 e2       	ldi	r24, 0x21	; 33
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	21 e2       	ldi	r18, 0x21	; 33
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	f9 01       	movw	r30, r18
    10e8:	20 81       	ld	r18, Z
    10ea:	2e 7f       	andi	r18, 0xFE	; 254
    10ec:	fc 01       	movw	r30, r24
    10ee:	20 83       	st	Z, r18
    10f0:	8e e7       	ldi	r24, 0x7E	; 126
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	2e e7       	ldi	r18, 0x7E	; 126
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	f9 01       	movw	r30, r18
    10fa:	20 81       	ld	r18, Z
    10fc:	21 60       	ori	r18, 0x01	; 1
    10fe:	fc 01       	movw	r30, r24
    1100:	20 83       	st	Z, r18
    1102:	8c e7       	ldi	r24, 0x7C	; 124
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	20 e6       	ldi	r18, 0x60	; 96
    1108:	fc 01       	movw	r30, r24
    110a:	20 83       	st	Z, r18
    110c:	8a e7       	ldi	r24, 0x7A	; 122
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	27 e3       	ldi	r18, 0x37	; 55
    1112:	fc 01       	movw	r30, r24
    1114:	20 83       	st	Z, r18
    1116:	8b e7       	ldi	r24, 0x7B	; 123
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	fc 01       	movw	r30, r24
    111c:	10 82       	st	Z, r1
    111e:	8a e7       	ldi	r24, 0x7A	; 122
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	2a e7       	ldi	r18, 0x7A	; 122
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	f9 01       	movw	r30, r18
    1128:	20 81       	ld	r18, Z
    112a:	20 68       	ori	r18, 0x80	; 128
    112c:	fc 01       	movw	r30, r24
    112e:	20 83       	st	Z, r18
    1130:	8a e7       	ldi	r24, 0x7A	; 122
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	2a e7       	ldi	r18, 0x7A	; 122
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	f9 01       	movw	r30, r18
    113a:	20 81       	ld	r18, Z
    113c:	20 64       	ori	r18, 0x40	; 64
    113e:	fc 01       	movw	r30, r24
    1140:	20 83       	st	Z, r18
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	08 95       	ret

00001148 <adcGetTemperature>:

uint8_t adcGetTemperature(void)
{
    1148:	af 92       	push	r10
    114a:	bf 92       	push	r11
    114c:	cf 92       	push	r12
    114e:	df 92       	push	r13
    1150:	ef 92       	push	r14
    1152:	ff 92       	push	r15
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	00 d0       	rcall	.+0      	; 0x115e <adcGetTemperature+0x16>
    115e:	00 d0       	rcall	.+0      	; 0x1160 <adcGetTemperature+0x18>
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
	int32_t s32Temp;
	
	s32Temp = Map((int32_t)ADCH,0,255,-50,450);
    1164:	89 e7       	ldi	r24, 0x79	; 121
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	fc 01       	movw	r30, r24
    116a:	80 81       	ld	r24, Z
    116c:	88 2f       	mov	r24, r24
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	a0 e0       	ldi	r26, 0x00	; 0
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	1f 92       	push	r1
    1176:	1f 92       	push	r1
    1178:	21 e0       	ldi	r18, 0x01	; 1
    117a:	2f 93       	push	r18
    117c:	22 ec       	ldi	r18, 0xC2	; 194
    117e:	2f 93       	push	r18
    1180:	0f 2e       	mov	r0, r31
    1182:	fe ec       	ldi	r31, 0xCE	; 206
    1184:	af 2e       	mov	r10, r31
    1186:	bb 24       	eor	r11, r11
    1188:	ba 94       	dec	r11
    118a:	cb 2c       	mov	r12, r11
    118c:	db 2c       	mov	r13, r11
    118e:	f0 2d       	mov	r31, r0
    1190:	e1 2c       	mov	r14, r1
    1192:	f1 2c       	mov	r15, r1
    1194:	87 01       	movw	r16, r14
    1196:	ea 94       	dec	r14
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	a9 01       	movw	r20, r18
    119e:	bc 01       	movw	r22, r24
    11a0:	cd 01       	movw	r24, r26
    11a2:	0e 94 91 09 	call	0x1322	; 0x1322 <Map>
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	9a 83       	std	Y+2, r25	; 0x02
    11b6:	ab 83       	std	Y+3, r26	; 0x03
    11b8:	bc 83       	std	Y+4, r27	; 0x04
	if(s32Temp<0)
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	9a 81       	ldd	r25, Y+2	; 0x02
    11be:	ab 81       	ldd	r26, Y+3	; 0x03
    11c0:	bc 81       	ldd	r27, Y+4	; 0x04
    11c2:	bb 23       	and	r27, r27
    11c4:	2c f4       	brge	.+10     	; 0x11d0 <adcGetTemperature+0x88>
	{
		s32Temp = 0;
    11c6:	19 82       	std	Y+1, r1	; 0x01
    11c8:	1a 82       	std	Y+2, r1	; 0x02
    11ca:	1b 82       	std	Y+3, r1	; 0x03
    11cc:	1c 82       	std	Y+4, r1	; 0x04
    11ce:	12 c0       	rjmp	.+36     	; 0x11f4 <adcGetTemperature+0xac>
	}
	else if(s32Temp>255)
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	9a 81       	ldd	r25, Y+2	; 0x02
    11d4:	ab 81       	ldd	r26, Y+3	; 0x03
    11d6:	bc 81       	ldd	r27, Y+4	; 0x04
    11d8:	8f 3f       	cpi	r24, 0xFF	; 255
    11da:	91 05       	cpc	r25, r1
    11dc:	a1 05       	cpc	r26, r1
    11de:	b1 05       	cpc	r27, r1
    11e0:	49 f0       	breq	.+18     	; 0x11f4 <adcGetTemperature+0xac>
    11e2:	44 f0       	brlt	.+16     	; 0x11f4 <adcGetTemperature+0xac>
	{
		s32Temp = 255;
    11e4:	8f ef       	ldi	r24, 0xFF	; 255
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	a0 e0       	ldi	r26, 0x00	; 0
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	89 83       	std	Y+1, r24	; 0x01
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	ab 83       	std	Y+3, r26	; 0x03
    11f2:	bc 83       	std	Y+4, r27	; 0x04
	}
	return (uint8_t)s32Temp;
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	ff 90       	pop	r15
    1208:	ef 90       	pop	r14
    120a:	df 90       	pop	r13
    120c:	cf 90       	pop	r12
    120e:	bf 90       	pop	r11
    1210:	af 90       	pop	r10
    1212:	08 95       	ret

00001214 <INT_5ms_Init>:

///////////////////////////////////////////////////////////////////////////////
// UTILITIES
///////////////////////////////////////////////////////////////////////////////
void INT_5ms_Init(void)
{
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
	TCCR2A = (1<<WGM21);	// mode: CTC
    121c:	80 eb       	ldi	r24, 0xB0	; 176
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	22 e0       	ldi	r18, 0x02	; 2
    1222:	fc 01       	movw	r30, r24
    1224:	20 83       	st	Z, r18
	TCCR2B = 0;				// mode: CTC, clock off
    1226:	81 eb       	ldi	r24, 0xB1	; 177
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	fc 01       	movw	r30, r24
    122c:	10 82       	st	Z, r1
	TCNT2 = 0;
    122e:	82 eb       	ldi	r24, 0xB2	; 178
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	fc 01       	movw	r30, r24
    1234:	10 82       	st	Z, r1
	OCR2A = 96;
    1236:	83 eb       	ldi	r24, 0xB3	; 179
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	20 e6       	ldi	r18, 0x60	; 96
    123c:	fc 01       	movw	r30, r24
    123e:	20 83       	st	Z, r18
	TIMSK2 = (1<<OCIE2A);
    1240:	80 e7       	ldi	r24, 0x70	; 112
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	22 e0       	ldi	r18, 0x02	; 2
    1246:	fc 01       	movw	r30, r24
    1248:	20 83       	st	Z, r18
	TIFR2 = (1<<OCF2A);
    124a:	87 e3       	ldi	r24, 0x37	; 55
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	22 e0       	ldi	r18, 0x02	; 2
    1250:	fc 01       	movw	r30, r24
    1252:	20 83       	st	Z, r18

	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);
    1254:	81 eb       	ldi	r24, 0xB1	; 177
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	21 eb       	ldi	r18, 0xB1	; 177
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	f9 01       	movw	r30, r18
    125e:	20 81       	ld	r18, Z
    1260:	27 60       	ori	r18, 0x07	; 7
    1262:	fc 01       	movw	r30, r24
    1264:	20 83       	st	Z, r18
}
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	08 95       	ret

0000126c <wait_1ms>:
 *
 * @param [in] uiFactor: 1ms multiplier
 * @return no return value
 *****************************************************************************/
void wait_1ms(uint16_t uiFactor)
{
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	00 d0       	rcall	.+0      	; 0x1272 <wait_1ms+0x6>
    1272:	00 d0       	rcall	.+0      	; 0x1274 <wait_1ms+0x8>
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	9c 83       	std	Y+4, r25	; 0x04
    127a:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t i;
	TCCR0A = (1<<WGM01);	// mode: CTC
    127c:	84 e4       	ldi	r24, 0x44	; 68
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	22 e0       	ldi	r18, 0x02	; 2
    1282:	fc 01       	movw	r30, r24
    1284:	20 83       	st	Z, r18
	TCCR0B = 0;				// mode: CTC
    1286:	85 e4       	ldi	r24, 0x45	; 69
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	fc 01       	movw	r30, r24
    128c:	10 82       	st	Z, r1
	TIFR0 =  (1<<OCF0A);	// only OCFA flag needs to be cleared
    128e:	85 e3       	ldi	r24, 0x35	; 53
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	22 e0       	ldi	r18, 0x02	; 2
    1294:	fc 01       	movw	r30, r24
    1296:	20 83       	st	Z, r18
	TIMSK0 = 0;				// no interrupts
    1298:	8e e6       	ldi	r24, 0x6E	; 110
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	fc 01       	movw	r30, r24
    129e:	10 82       	st	Z, r1
	TCNT0 = 0;
    12a0:	86 e4       	ldi	r24, 0x46	; 70
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	fc 01       	movw	r30, r24
    12a6:	10 82       	st	Z, r1
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
    12a8:	87 e4       	ldi	r24, 0x47	; 71
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	2d e4       	ldi	r18, 0x4D	; 77
    12ae:	fc 01       	movw	r30, r24
    12b0:	20 83       	st	Z, r18
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
    12b2:	85 e4       	ldi	r24, 0x45	; 69
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	25 e4       	ldi	r18, 0x45	; 69
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	f9 01       	movw	r30, r18
    12bc:	20 81       	ld	r18, Z
    12be:	24 60       	ori	r18, 0x04	; 4
    12c0:	fc 01       	movw	r30, r24
    12c2:	20 83       	st	Z, r18
	
	for(i=0;i<uiFactor;i++)
    12c4:	1a 82       	std	Y+2, r1	; 0x02
    12c6:	19 82       	std	Y+1, r1	; 0x01
    12c8:	15 c0       	rjmp	.+42     	; 0x12f4 <wait_1ms+0x88>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
    12ca:	00 00       	nop
    12cc:	85 e3       	ldi	r24, 0x35	; 53
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	fc 01       	movw	r30, r24
    12d2:	80 81       	ld	r24, Z
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	82 70       	andi	r24, 0x02	; 2
    12da:	99 27       	eor	r25, r25
    12dc:	89 2b       	or	r24, r25
    12de:	b1 f3       	breq	.-20     	; 0x12cc <wait_1ms+0x60>
		TIFR0 =  (1<<OCF0A);		// clear flag
    12e0:	85 e3       	ldi	r24, 0x35	; 53
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	22 e0       	ldi	r18, 0x02	; 2
    12e6:	fc 01       	movw	r30, r24
    12e8:	20 83       	st	Z, r18
	TCNT0 = 0;
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
	
	for(i=0;i<uiFactor;i++)
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	9a 81       	ldd	r25, Y+2	; 0x02
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	9a 83       	std	Y+2, r25	; 0x02
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	29 81       	ldd	r18, Y+1	; 0x01
    12f6:	3a 81       	ldd	r19, Y+2	; 0x02
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	9c 81       	ldd	r25, Y+4	; 0x04
    12fc:	28 17       	cp	r18, r24
    12fe:	39 07       	cpc	r19, r25
    1300:	20 f3       	brcs	.-56     	; 0x12ca <wait_1ms+0x5e>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
		TIFR0 =  (1<<OCF0A);		// clear flag
	}
	TCCR0B &= ~(0x07);	// set prescaler to 0 (stop timer)
    1302:	85 e4       	ldi	r24, 0x45	; 69
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	25 e4       	ldi	r18, 0x45	; 69
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	f9 01       	movw	r30, r18
    130c:	20 81       	ld	r18, Z
    130e:	28 7f       	andi	r18, 0xF8	; 248
    1310:	fc 01       	movw	r30, r24
    1312:	20 83       	st	Z, r18
}
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	08 95       	ret

00001322 <Map>:
 * @param [in] s32OutMin: minimal value of output range
 * @param [in] s32OutMax: maximal value of output range
 * @return data in new number range
 *****************************************************************************/
int32_t Map(int32_t s32Data, int32_t s32InMin, int32_t s32InMax, int32_t s32OutMin, int32_t s32OutMax)
{
    1322:	af 92       	push	r10
    1324:	bf 92       	push	r11
    1326:	cf 92       	push	r12
    1328:	df 92       	push	r13
    132a:	ef 92       	push	r14
    132c:	ff 92       	push	r15
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	64 97       	sbiw	r28, 0x14	; 20
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
    1346:	69 83       	std	Y+1, r22	; 0x01
    1348:	7a 83       	std	Y+2, r23	; 0x02
    134a:	8b 83       	std	Y+3, r24	; 0x03
    134c:	9c 83       	std	Y+4, r25	; 0x04
    134e:	2d 83       	std	Y+5, r18	; 0x05
    1350:	3e 83       	std	Y+6, r19	; 0x06
    1352:	4f 83       	std	Y+7, r20	; 0x07
    1354:	58 87       	std	Y+8, r21	; 0x08
    1356:	e9 86       	std	Y+9, r14	; 0x09
    1358:	fa 86       	std	Y+10, r15	; 0x0a
    135a:	0b 87       	std	Y+11, r16	; 0x0b
    135c:	1c 87       	std	Y+12, r17	; 0x0c
    135e:	ad 86       	std	Y+13, r10	; 0x0d
    1360:	be 86       	std	Y+14, r11	; 0x0e
    1362:	cf 86       	std	Y+15, r12	; 0x0f
    1364:	d8 8a       	std	Y+16, r13	; 0x10
	return((s32Data-s32InMin)*(s32OutMax-s32OutMin)/(s32InMax-s32InMin)+s32OutMin);
    1366:	29 81       	ldd	r18, Y+1	; 0x01
    1368:	3a 81       	ldd	r19, Y+2	; 0x02
    136a:	4b 81       	ldd	r20, Y+3	; 0x03
    136c:	5c 81       	ldd	r21, Y+4	; 0x04
    136e:	8d 81       	ldd	r24, Y+5	; 0x05
    1370:	9e 81       	ldd	r25, Y+6	; 0x06
    1372:	af 81       	ldd	r26, Y+7	; 0x07
    1374:	b8 85       	ldd	r27, Y+8	; 0x08
    1376:	79 01       	movw	r14, r18
    1378:	8a 01       	movw	r16, r20
    137a:	e8 1a       	sub	r14, r24
    137c:	f9 0a       	sbc	r15, r25
    137e:	0a 0b       	sbc	r16, r26
    1380:	1b 0b       	sbc	r17, r27
    1382:	29 a1       	ldd	r18, Y+33	; 0x21
    1384:	3a a1       	ldd	r19, Y+34	; 0x22
    1386:	4b a1       	ldd	r20, Y+35	; 0x23
    1388:	5c a1       	ldd	r21, Y+36	; 0x24
    138a:	8d 85       	ldd	r24, Y+13	; 0x0d
    138c:	9e 85       	ldd	r25, Y+14	; 0x0e
    138e:	af 85       	ldd	r26, Y+15	; 0x0f
    1390:	b8 89       	ldd	r27, Y+16	; 0x10
    1392:	59 01       	movw	r10, r18
    1394:	6a 01       	movw	r12, r20
    1396:	a8 1a       	sub	r10, r24
    1398:	b9 0a       	sbc	r11, r25
    139a:	ca 0a       	sbc	r12, r26
    139c:	db 0a       	sbc	r13, r27
    139e:	d6 01       	movw	r26, r12
    13a0:	c5 01       	movw	r24, r10
    13a2:	a8 01       	movw	r20, r16
    13a4:	97 01       	movw	r18, r14
    13a6:	bc 01       	movw	r22, r24
    13a8:	cd 01       	movw	r24, r26
    13aa:	0e 94 4d 0a 	call	0x149a	; 0x149a <__mulsi3>
    13ae:	7b 01       	movw	r14, r22
    13b0:	8c 01       	movw	r16, r24
    13b2:	29 85       	ldd	r18, Y+9	; 0x09
    13b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    13b6:	4b 85       	ldd	r20, Y+11	; 0x0b
    13b8:	5c 85       	ldd	r21, Y+12	; 0x0c
    13ba:	8d 81       	ldd	r24, Y+5	; 0x05
    13bc:	9e 81       	ldd	r25, Y+6	; 0x06
    13be:	af 81       	ldd	r26, Y+7	; 0x07
    13c0:	b8 85       	ldd	r27, Y+8	; 0x08
    13c2:	28 1b       	sub	r18, r24
    13c4:	39 0b       	sbc	r19, r25
    13c6:	4a 0b       	sbc	r20, r26
    13c8:	5b 0b       	sbc	r21, r27
    13ca:	c8 01       	movw	r24, r16
    13cc:	b7 01       	movw	r22, r14
    13ce:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__divmodsi4>
    13d2:	da 01       	movw	r26, r20
    13d4:	c9 01       	movw	r24, r18
    13d6:	9c 01       	movw	r18, r24
    13d8:	ad 01       	movw	r20, r26
    13da:	8d 85       	ldd	r24, Y+13	; 0x0d
    13dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13de:	af 85       	ldd	r26, Y+15	; 0x0f
    13e0:	b8 89       	ldd	r27, Y+16	; 0x10
    13e2:	82 0f       	add	r24, r18
    13e4:	93 1f       	adc	r25, r19
    13e6:	a4 1f       	adc	r26, r20
    13e8:	b5 1f       	adc	r27, r21
}
    13ea:	bc 01       	movw	r22, r24
    13ec:	cd 01       	movw	r24, r26
    13ee:	64 96       	adiw	r28, 0x14	; 20
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	ff 90       	pop	r15
    1404:	ef 90       	pop	r14
    1406:	df 90       	pop	r13
    1408:	cf 90       	pop	r12
    140a:	bf 90       	pop	r11
    140c:	af 90       	pop	r10
    140e:	08 95       	ret

00001410 <CRC8>:

uint8_t CRC8(uint8_t* au8Data, uint8_t u8Length)
{
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	28 97       	sbiw	r28, 0x08	; 8
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	9f 83       	std	Y+7, r25	; 0x07
    1426:	8e 83       	std	Y+6, r24	; 0x06
    1428:	68 87       	std	Y+8, r22	; 0x08
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;
    142a:	19 82       	std	Y+1, r1	; 0x01

	for(i=0;i<u8Length;i++)
    142c:	1a 82       	std	Y+2, r1	; 0x02
    142e:	27 c0       	rjmp	.+78     	; 0x147e <CRC8+0x6e>
	{
		u8InByte = au8Data[i];
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	88 2f       	mov	r24, r24
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	2e 81       	ldd	r18, Y+6	; 0x06
    1438:	3f 81       	ldd	r19, Y+7	; 0x07
    143a:	82 0f       	add	r24, r18
    143c:	93 1f       	adc	r25, r19
    143e:	fc 01       	movw	r30, r24
    1440:	80 81       	ld	r24, Z
    1442:	8c 83       	std	Y+4, r24	; 0x04
		for(j=0;j<8;j++)
    1444:	1b 82       	std	Y+3, r1	; 0x03
    1446:	15 c0       	rjmp	.+42     	; 0x1472 <CRC8+0x62>
		{
			u8Temp = (u8CRC^u8InByte)&0x80;
    1448:	99 81       	ldd	r25, Y+1	; 0x01
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	89 27       	eor	r24, r25
    144e:	80 78       	andi	r24, 0x80	; 128
    1450:	8d 83       	std	Y+5, r24	; 0x05
			u8CRC <<= 1;
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	88 0f       	add	r24, r24
    1456:	89 83       	std	Y+1, r24	; 0x01
			if(u8Temp!=0)
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	88 23       	and	r24, r24
    145c:	21 f0       	breq	.+8      	; 0x1466 <CRC8+0x56>
			{
				u8CRC ^= 0x07;
    145e:	99 81       	ldd	r25, Y+1	; 0x01
    1460:	87 e0       	ldi	r24, 0x07	; 7
    1462:	89 27       	eor	r24, r25
    1464:	89 83       	std	Y+1, r24	; 0x01
			}
			u8InByte<<=1;
    1466:	8c 81       	ldd	r24, Y+4	; 0x04
    1468:	88 0f       	add	r24, r24
    146a:	8c 83       	std	Y+4, r24	; 0x04
	u8CRC = 0;

	for(i=0;i<u8Length;i++)
	{
		u8InByte = au8Data[i];
		for(j=0;j<8;j++)
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	8f 5f       	subi	r24, 0xFF	; 255
    1470:	8b 83       	std	Y+3, r24	; 0x03
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	88 30       	cpi	r24, 0x08	; 8
    1476:	40 f3       	brcs	.-48     	; 0x1448 <CRC8+0x38>
{
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;

	for(i=0;i<u8Length;i++)
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	8f 5f       	subi	r24, 0xFF	; 255
    147c:	8a 83       	std	Y+2, r24	; 0x02
    147e:	9a 81       	ldd	r25, Y+2	; 0x02
    1480:	88 85       	ldd	r24, Y+8	; 0x08
    1482:	98 17       	cp	r25, r24
    1484:	a8 f2       	brcs	.-86     	; 0x1430 <CRC8+0x20>
			}
			u8InByte<<=1;
		}
	}

	return u8CRC;
    1486:	89 81       	ldd	r24, Y+1	; 0x01
}
    1488:	28 96       	adiw	r28, 0x08	; 8
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	08 95       	ret

0000149a <__mulsi3>:
    149a:	db 01       	movw	r26, r22
    149c:	8f 93       	push	r24
    149e:	9f 93       	push	r25
    14a0:	0e 94 96 0a 	call	0x152c	; 0x152c <__muluhisi3>
    14a4:	bf 91       	pop	r27
    14a6:	af 91       	pop	r26
    14a8:	a2 9f       	mul	r26, r18
    14aa:	80 0d       	add	r24, r0
    14ac:	91 1d       	adc	r25, r1
    14ae:	a3 9f       	mul	r26, r19
    14b0:	90 0d       	add	r25, r0
    14b2:	b2 9f       	mul	r27, r18
    14b4:	90 0d       	add	r25, r0
    14b6:	11 24       	eor	r1, r1
    14b8:	08 95       	ret

000014ba <__udivmodhi4>:
    14ba:	aa 1b       	sub	r26, r26
    14bc:	bb 1b       	sub	r27, r27
    14be:	51 e1       	ldi	r21, 0x11	; 17
    14c0:	07 c0       	rjmp	.+14     	; 0x14d0 <__udivmodhi4_ep>

000014c2 <__udivmodhi4_loop>:
    14c2:	aa 1f       	adc	r26, r26
    14c4:	bb 1f       	adc	r27, r27
    14c6:	a6 17       	cp	r26, r22
    14c8:	b7 07       	cpc	r27, r23
    14ca:	10 f0       	brcs	.+4      	; 0x14d0 <__udivmodhi4_ep>
    14cc:	a6 1b       	sub	r26, r22
    14ce:	b7 0b       	sbc	r27, r23

000014d0 <__udivmodhi4_ep>:
    14d0:	88 1f       	adc	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	5a 95       	dec	r21
    14d6:	a9 f7       	brne	.-22     	; 0x14c2 <__udivmodhi4_loop>
    14d8:	80 95       	com	r24
    14da:	90 95       	com	r25
    14dc:	bc 01       	movw	r22, r24
    14de:	cd 01       	movw	r24, r26
    14e0:	08 95       	ret

000014e2 <__divmodsi4>:
    14e2:	05 2e       	mov	r0, r21
    14e4:	97 fb       	bst	r25, 7
    14e6:	1e f4       	brtc	.+6      	; 0x14ee <__divmodsi4+0xc>
    14e8:	00 94       	com	r0
    14ea:	0e 94 88 0a 	call	0x1510	; 0x1510 <__negsi2>
    14ee:	57 fd       	sbrc	r21, 7
    14f0:	07 d0       	rcall	.+14     	; 0x1500 <__divmodsi4_neg2>
    14f2:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__udivmodsi4>
    14f6:	07 fc       	sbrc	r0, 7
    14f8:	03 d0       	rcall	.+6      	; 0x1500 <__divmodsi4_neg2>
    14fa:	4e f4       	brtc	.+18     	; 0x150e <__divmodsi4_exit>
    14fc:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__negsi2>

00001500 <__divmodsi4_neg2>:
    1500:	50 95       	com	r21
    1502:	40 95       	com	r20
    1504:	30 95       	com	r19
    1506:	21 95       	neg	r18
    1508:	3f 4f       	sbci	r19, 0xFF	; 255
    150a:	4f 4f       	sbci	r20, 0xFF	; 255
    150c:	5f 4f       	sbci	r21, 0xFF	; 255

0000150e <__divmodsi4_exit>:
    150e:	08 95       	ret

00001510 <__negsi2>:
    1510:	90 95       	com	r25
    1512:	80 95       	com	r24
    1514:	70 95       	com	r23
    1516:	61 95       	neg	r22
    1518:	7f 4f       	sbci	r23, 0xFF	; 255
    151a:	8f 4f       	sbci	r24, 0xFF	; 255
    151c:	9f 4f       	sbci	r25, 0xFF	; 255
    151e:	08 95       	ret

00001520 <__tablejump2__>:
    1520:	ee 0f       	add	r30, r30
    1522:	ff 1f       	adc	r31, r31
    1524:	05 90       	lpm	r0, Z+
    1526:	f4 91       	lpm	r31, Z
    1528:	e0 2d       	mov	r30, r0
    152a:	09 94       	ijmp

0000152c <__muluhisi3>:
    152c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__umulhisi3>
    1530:	a5 9f       	mul	r26, r21
    1532:	90 0d       	add	r25, r0
    1534:	b4 9f       	mul	r27, r20
    1536:	90 0d       	add	r25, r0
    1538:	a4 9f       	mul	r26, r20
    153a:	80 0d       	add	r24, r0
    153c:	91 1d       	adc	r25, r1
    153e:	11 24       	eor	r1, r1
    1540:	08 95       	ret

00001542 <__udivmodsi4>:
    1542:	a1 e2       	ldi	r26, 0x21	; 33
    1544:	1a 2e       	mov	r1, r26
    1546:	aa 1b       	sub	r26, r26
    1548:	bb 1b       	sub	r27, r27
    154a:	fd 01       	movw	r30, r26
    154c:	0d c0       	rjmp	.+26     	; 0x1568 <__udivmodsi4_ep>

0000154e <__udivmodsi4_loop>:
    154e:	aa 1f       	adc	r26, r26
    1550:	bb 1f       	adc	r27, r27
    1552:	ee 1f       	adc	r30, r30
    1554:	ff 1f       	adc	r31, r31
    1556:	a2 17       	cp	r26, r18
    1558:	b3 07       	cpc	r27, r19
    155a:	e4 07       	cpc	r30, r20
    155c:	f5 07       	cpc	r31, r21
    155e:	20 f0       	brcs	.+8      	; 0x1568 <__udivmodsi4_ep>
    1560:	a2 1b       	sub	r26, r18
    1562:	b3 0b       	sbc	r27, r19
    1564:	e4 0b       	sbc	r30, r20
    1566:	f5 0b       	sbc	r31, r21

00001568 <__udivmodsi4_ep>:
    1568:	66 1f       	adc	r22, r22
    156a:	77 1f       	adc	r23, r23
    156c:	88 1f       	adc	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	1a 94       	dec	r1
    1572:	69 f7       	brne	.-38     	; 0x154e <__udivmodsi4_loop>
    1574:	60 95       	com	r22
    1576:	70 95       	com	r23
    1578:	80 95       	com	r24
    157a:	90 95       	com	r25
    157c:	9b 01       	movw	r18, r22
    157e:	ac 01       	movw	r20, r24
    1580:	bd 01       	movw	r22, r26
    1582:	cf 01       	movw	r24, r30
    1584:	08 95       	ret

00001586 <__umulhisi3>:
    1586:	a2 9f       	mul	r26, r18
    1588:	b0 01       	movw	r22, r0
    158a:	b3 9f       	mul	r27, r19
    158c:	c0 01       	movw	r24, r0
    158e:	a3 9f       	mul	r26, r19
    1590:	70 0d       	add	r23, r0
    1592:	81 1d       	adc	r24, r1
    1594:	11 24       	eor	r1, r1
    1596:	91 1d       	adc	r25, r1
    1598:	b2 9f       	mul	r27, r18
    159a:	70 0d       	add	r23, r0
    159c:	81 1d       	adc	r24, r1
    159e:	11 24       	eor	r1, r1
    15a0:	91 1d       	adc	r25, r1
    15a2:	08 95       	ret

000015a4 <_exit>:
    15a4:	f8 94       	cli

000015a6 <__stop_program>:
    15a6:	ff cf       	rjmp	.-2      	; 0x15a6 <__stop_program>
