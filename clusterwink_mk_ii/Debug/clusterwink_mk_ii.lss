
clusterwink_mk_ii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  0000173c  000017d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000173c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000059  0080013e  0080013e  0000180e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000180e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001840  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000108b  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a78  00000000  00000000  00002a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eb9  00000000  00000000  000034e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000620  00000000  00000000  0000439c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000075a  00000000  00000000  000049bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cc0  00000000  00000000  00005116  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005dd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
       4:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_1>
       8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      10:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      14:	0c 94 24 04 	jmp	0x848	; 0x848 <__vector_5>
      18:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      1c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      20:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_9>
      28:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      2c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      30:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      34:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      38:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      3c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      40:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      44:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      48:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      4c:	0c 94 b9 02 	jmp	0x572	; 0x572 <__vector_19>
      50:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      54:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      58:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      5c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      60:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      64:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      68:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      6c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      70:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      74:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      78:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      7c:	f9 02       	muls	r31, r25
      7e:	12 03       	mulsu	r17, r18
      80:	2b 03       	fmul	r18, r19
      82:	e5 03       	fmuls	r22, r21
      84:	00 04       	cpc	r0, r0
      86:	00 04       	cpc	r0, r0
      88:	00 04       	cpc	r0, r0
      8a:	87 04       	cpc	r8, r7
      8c:	94 04       	cpc	r9, r4
      8e:	a1 04       	cpc	r10, r1
      90:	bc 04       	cpc	r11, r12
      92:	a5 05       	cpc	r26, r5
      94:	dc 05       	cpc	r29, r12
      96:	dc 05       	cpc	r29, r12
      98:	dc 05       	cpc	r29, r12
      9a:	dc 05       	cpc	r29, r12
      9c:	dc 05       	cpc	r29, r12
      9e:	dc 05       	cpc	r29, r12
      a0:	dc 05       	cpc	r29, r12
      a2:	dc 05       	cpc	r29, r12
      a4:	dc 05       	cpc	r29, r12
      a6:	dc 05       	cpc	r29, r12
      a8:	dc 05       	cpc	r29, r12
      aa:	a8 05       	cpc	r26, r8
      ac:	b4 05       	cpc	r27, r4
      ae:	c0 05       	cpc	r28, r0

000000b0 <__ctors_end>:
      b0:	11 24       	eor	r1, r1
      b2:	1f be       	out	0x3f, r1	; 63
      b4:	cf ef       	ldi	r28, 0xFF	; 255
      b6:	d8 e0       	ldi	r29, 0x08	; 8
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_copy_data>:
      bc:	11 e0       	ldi	r17, 0x01	; 1
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b1 e0       	ldi	r27, 0x01	; 1
      c2:	ec e3       	ldi	r30, 0x3C	; 60
      c4:	f7 e1       	ldi	r31, 0x17	; 23
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x10>
      c8:	05 90       	lpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	ae 33       	cpi	r26, 0x3E	; 62
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0xc>

000000d2 <__do_clear_bss>:
      d2:	21 e0       	ldi	r18, 0x01	; 1
      d4:	ae e3       	ldi	r26, 0x3E	; 62
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	a7 39       	cpi	r26, 0x97	; 151
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	0e 94 02 06 	call	0xc04	; 0xc04 <main>
      e6:	0c 94 9c 0b 	jmp	0x1738	; 0x1738 <_exit>

000000ea <__bad_interrupt>:
      ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ee <__vector_9>:

volatile uint8_t u8Status = 0x00;
volatile uint8_t u8Duty = 0;

ISR(TIMER2_COMPA_vect)
{
      ee:	1f 92       	push	r1
      f0:	0f 92       	push	r0
      f2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
      f6:	0f 92       	push	r0
      f8:	11 24       	eor	r1, r1
      fa:	af 92       	push	r10
      fc:	bf 92       	push	r11
      fe:	cf 92       	push	r12
     100:	df 92       	push	r13
     102:	ef 92       	push	r14
     104:	ff 92       	push	r15
     106:	0f 93       	push	r16
     108:	1f 93       	push	r17
     10a:	2f 93       	push	r18
     10c:	3f 93       	push	r19
     10e:	4f 93       	push	r20
     110:	5f 93       	push	r21
     112:	6f 93       	push	r22
     114:	7f 93       	push	r23
     116:	8f 93       	push	r24
     118:	9f 93       	push	r25
     11a:	af 93       	push	r26
     11c:	bf 93       	push	r27
     11e:	ef 93       	push	r30
     120:	ff 93       	push	r31
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
     12a:	8b e2       	ldi	r24, 0x2B	; 43
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	2b e2       	ldi	r18, 0x2B	; 43
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	f9 01       	movw	r30, r18
     134:	20 81       	ld	r18, Z
     136:	22 60       	ori	r18, 0x02	; 2
     138:	fc 01       	movw	r30, r24
     13a:	20 83       	st	Z, r18
	#endif

	if(u8PLEDFadeActive)
     13c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8PLEDFadeActive>
     140:	88 23       	and	r24, r24
     142:	09 f4       	brne	.+2      	; 0x146 <__vector_9+0x58>
     144:	e7 c0       	rjmp	.+462    	; 0x314 <__vector_9+0x226>
	{
		if(u8PLEDFadeDirection) // rise
     146:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <u8PLEDFadeDirection>
     14a:	88 23       	and	r24, r24
     14c:	09 f4       	brne	.+2      	; 0x150 <__vector_9+0x62>
     14e:	72 c0       	rjmp	.+228    	; 0x234 <__vector_9+0x146>
		{
			u32PLEDFadeIntCount++;
     150:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u32PLEDFadeIntCount>
     154:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <u32PLEDFadeIntCount+0x1>
     158:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <u32PLEDFadeIntCount+0x2>
     15c:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <u32PLEDFadeIntCount+0x3>
     160:	01 96       	adiw	r24, 0x01	; 1
     162:	a1 1d       	adc	r26, r1
     164:	b1 1d       	adc	r27, r1
     166:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <u32PLEDFadeIntCount>
     16a:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <u32PLEDFadeIntCount+0x1>
     16e:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <u32PLEDFadeIntCount+0x2>
     172:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <u32PLEDFadeIntCount+0x3>
			if(u32PLEDFadeIntCount>=u32PLEDFadeIntStep)
     176:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <u32PLEDFadeIntCount>
     17a:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <u32PLEDFadeIntCount+0x1>
     17e:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <u32PLEDFadeIntCount+0x2>
     182:	50 91 4f 01 	lds	r21, 0x014F	; 0x80014f <u32PLEDFadeIntCount+0x3>
     186:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u32PLEDFadeIntStep>
     18a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <u32PLEDFadeIntStep+0x1>
     18e:	a0 91 4a 01 	lds	r26, 0x014A	; 0x80014a <u32PLEDFadeIntStep+0x2>
     192:	b0 91 4b 01 	lds	r27, 0x014B	; 0x80014b <u32PLEDFadeIntStep+0x3>
     196:	28 17       	cp	r18, r24
     198:	39 07       	cpc	r19, r25
     19a:	4a 07       	cpc	r20, r26
     19c:	5b 07       	cpc	r21, r27
     19e:	08 f4       	brcc	.+2      	; 0x1a2 <__vector_9+0xb4>
     1a0:	b9 c0       	rjmp	.+370    	; 0x314 <__vector_9+0x226>
			{
				u32PLEDFadeIntCount = 0;
     1a2:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <u32PLEDFadeIntCount>
     1a6:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <u32PLEDFadeIntCount+0x1>
     1aa:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <u32PLEDFadeIntCount+0x2>
     1ae:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <u32PLEDFadeIntCount+0x3>
				u16PLEDFadeCurrValue++;
     1b2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u16PLEDFadeCurrValue>
     1b6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     1c0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <u16PLEDFadeCurrValue>
				setPWMDuty(u16PLEDFadeCurrValue);
     1c4:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u16PLEDFadeCurrValue>
     1c8:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     1cc:	0e 94 15 09 	call	0x122a	; 0x122a <setPWMDuty>
				u8Duty = Map(u16PLEDFadeCurrValue,0,511,0,100);
     1d0:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u16PLEDFadeCurrValue>
     1d4:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     1d8:	cc 01       	movw	r24, r24
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b0 e0       	ldi	r27, 0x00	; 0
     1de:	1f 92       	push	r1
     1e0:	1f 92       	push	r1
     1e2:	1f 92       	push	r1
     1e4:	24 e6       	ldi	r18, 0x64	; 100
     1e6:	2f 93       	push	r18
     1e8:	a1 2c       	mov	r10, r1
     1ea:	b1 2c       	mov	r11, r1
     1ec:	65 01       	movw	r12, r10
     1ee:	e1 2c       	mov	r14, r1
     1f0:	f1 2c       	mov	r15, r1
     1f2:	87 01       	movw	r16, r14
     1f4:	ea 94       	dec	r14
     1f6:	f3 94       	inc	r15
     1f8:	20 e0       	ldi	r18, 0x00	; 0
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	a9 01       	movw	r20, r18
     1fe:	bc 01       	movw	r22, r24
     200:	cd 01       	movw	r24, r26
     202:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <Map>
     206:	0f 90       	pop	r0
     208:	0f 90       	pop	r0
     20a:	0f 90       	pop	r0
     20c:	0f 90       	pop	r0
     20e:	dc 01       	movw	r26, r24
     210:	cb 01       	movw	r24, r22
     212:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <u8Duty>

				if(u16PLEDFadeCurrValue>=u16PLEDFadeStopValue)
     216:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <u16PLEDFadeCurrValue>
     21a:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     21e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <u16PLEDFadeStopValue>
     222:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <u16PLEDFadeStopValue+0x1>
     226:	28 17       	cp	r18, r24
     228:	39 07       	cpc	r19, r25
     22a:	08 f4       	brcc	.+2      	; 0x22e <__vector_9+0x140>
     22c:	73 c0       	rjmp	.+230    	; 0x314 <__vector_9+0x226>
				{
					u8PLEDFadeActive = 0;
     22e:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <u8PLEDFadeActive>
     232:	70 c0       	rjmp	.+224    	; 0x314 <__vector_9+0x226>
				}
			}
		}
		else // fall
		{
			u32PLEDFadeIntCount++;
     234:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <u32PLEDFadeIntCount>
     238:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <u32PLEDFadeIntCount+0x1>
     23c:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <u32PLEDFadeIntCount+0x2>
     240:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <u32PLEDFadeIntCount+0x3>
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	a1 1d       	adc	r26, r1
     248:	b1 1d       	adc	r27, r1
     24a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <u32PLEDFadeIntCount>
     24e:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <u32PLEDFadeIntCount+0x1>
     252:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <u32PLEDFadeIntCount+0x2>
     256:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <u32PLEDFadeIntCount+0x3>
			if(u32PLEDFadeIntCount>=u32PLEDFadeIntStep)
     25a:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <u32PLEDFadeIntCount>
     25e:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <u32PLEDFadeIntCount+0x1>
     262:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <u32PLEDFadeIntCount+0x2>
     266:	50 91 4f 01 	lds	r21, 0x014F	; 0x80014f <u32PLEDFadeIntCount+0x3>
     26a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u32PLEDFadeIntStep>
     26e:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <u32PLEDFadeIntStep+0x1>
     272:	a0 91 4a 01 	lds	r26, 0x014A	; 0x80014a <u32PLEDFadeIntStep+0x2>
     276:	b0 91 4b 01 	lds	r27, 0x014B	; 0x80014b <u32PLEDFadeIntStep+0x3>
     27a:	28 17       	cp	r18, r24
     27c:	39 07       	cpc	r19, r25
     27e:	4a 07       	cpc	r20, r26
     280:	5b 07       	cpc	r21, r27
     282:	08 f4       	brcc	.+2      	; 0x286 <__vector_9+0x198>
     284:	47 c0       	rjmp	.+142    	; 0x314 <__vector_9+0x226>
			{
				u32PLEDFadeIntCount = 0;
     286:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <u32PLEDFadeIntCount>
     28a:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <u32PLEDFadeIntCount+0x1>
     28e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <u32PLEDFadeIntCount+0x2>
     292:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <u32PLEDFadeIntCount+0x3>
				u16PLEDFadeCurrValue--;
     296:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u16PLEDFadeCurrValue>
     29a:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     2a4:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <u16PLEDFadeCurrValue>
				setPWMDuty(u16PLEDFadeCurrValue);
     2a8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u16PLEDFadeCurrValue>
     2ac:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     2b0:	0e 94 15 09 	call	0x122a	; 0x122a <setPWMDuty>
				u8Duty = Map(u16PLEDFadeCurrValue,0,511,0,100);
     2b4:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <u16PLEDFadeCurrValue>
     2b8:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     2bc:	cc 01       	movw	r24, r24
     2be:	a0 e0       	ldi	r26, 0x00	; 0
     2c0:	b0 e0       	ldi	r27, 0x00	; 0
     2c2:	1f 92       	push	r1
     2c4:	1f 92       	push	r1
     2c6:	1f 92       	push	r1
     2c8:	24 e6       	ldi	r18, 0x64	; 100
     2ca:	2f 93       	push	r18
     2cc:	a1 2c       	mov	r10, r1
     2ce:	b1 2c       	mov	r11, r1
     2d0:	65 01       	movw	r12, r10
     2d2:	e1 2c       	mov	r14, r1
     2d4:	f1 2c       	mov	r15, r1
     2d6:	87 01       	movw	r16, r14
     2d8:	ea 94       	dec	r14
     2da:	f3 94       	inc	r15
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	a9 01       	movw	r20, r18
     2e2:	bc 01       	movw	r22, r24
     2e4:	cd 01       	movw	r24, r26
     2e6:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <Map>
     2ea:	0f 90       	pop	r0
     2ec:	0f 90       	pop	r0
     2ee:	0f 90       	pop	r0
     2f0:	0f 90       	pop	r0
     2f2:	dc 01       	movw	r26, r24
     2f4:	cb 01       	movw	r24, r22
     2f6:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <u8Duty>

				if(u16PLEDFadeCurrValue<=u16PLEDFadeStopValue)
     2fa:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <u16PLEDFadeCurrValue>
     2fe:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     302:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <u16PLEDFadeStopValue>
     306:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <u16PLEDFadeStopValue+0x1>
     30a:	82 17       	cp	r24, r18
     30c:	93 07       	cpc	r25, r19
     30e:	10 f0       	brcs	.+4      	; 0x314 <__vector_9+0x226>
				{
					u8PLEDFadeActive = 0;
     310:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <u8PLEDFadeActive>
			}
		}
	}

	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
     314:	8b e2       	ldi	r24, 0x2B	; 43
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	2b e2       	ldi	r18, 0x2B	; 43
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	f9 01       	movw	r30, r18
     31e:	20 81       	ld	r18, Z
     320:	2d 7f       	andi	r18, 0xFD	; 253
     322:	fc 01       	movw	r30, r24
     324:	20 83       	st	Z, r18
	#endif
}
     326:	00 00       	nop
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	ff 91       	pop	r31
     32e:	ef 91       	pop	r30
     330:	bf 91       	pop	r27
     332:	af 91       	pop	r26
     334:	9f 91       	pop	r25
     336:	8f 91       	pop	r24
     338:	7f 91       	pop	r23
     33a:	6f 91       	pop	r22
     33c:	5f 91       	pop	r21
     33e:	4f 91       	pop	r20
     340:	3f 91       	pop	r19
     342:	2f 91       	pop	r18
     344:	1f 91       	pop	r17
     346:	0f 91       	pop	r16
     348:	ff 90       	pop	r15
     34a:	ef 90       	pop	r14
     34c:	df 90       	pop	r13
     34e:	cf 90       	pop	r12
     350:	bf 90       	pop	r11
     352:	af 90       	pop	r10
     354:	0f 90       	pop	r0
     356:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     35a:	0f 90       	pop	r0
     35c:	1f 90       	pop	r1
     35e:	18 95       	reti

00000360 <__vector_1>:


ISR(INT0_vect)	// external interrupt (handshake from RGBooster board)
{				// start RGBooster send sequence: reset "ucRGBIdx" and "ucByteIdx" to zero. then start with calling the ISR directly "INT1_vect();"
     360:	1f 92       	push	r1
     362:	0f 92       	push	r0
     364:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     368:	0f 92       	push	r0
     36a:	11 24       	eor	r1, r1
     36c:	2f 93       	push	r18
     36e:	3f 93       	push	r19
     370:	4f 93       	push	r20
     372:	8f 93       	push	r24
     374:	9f 93       	push	r25
     376:	ef 93       	push	r30
     378:	ff 93       	push	r31
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
     382:	8b e2       	ldi	r24, 0x2B	; 43
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	2b e2       	ldi	r18, 0x2B	; 43
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	f9 01       	movw	r30, r18
     38c:	20 81       	ld	r18, Z
     38e:	22 60       	ori	r18, 0x02	; 2
     390:	fc 01       	movw	r30, r24
     392:	20 83       	st	Z, r18
	#endif
	
	if(ucRGBIdx<(LED_COUNT))
     394:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <ucRGBIdx>
     398:	84 31       	cpi	r24, 0x14	; 20
     39a:	08 f0       	brcs	.+2      	; 0x39e <__vector_1+0x3e>
     39c:	d1 c0       	rjmp	.+418    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
	{
		switch(ucByteIdx) // red green and blue are sent in 3 separate bytes. this variable remembers the next color to be sent
     39e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     3a2:	88 2f       	mov	r24, r24
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	81 30       	cpi	r24, 0x01	; 1
     3a8:	91 05       	cpc	r25, r1
     3aa:	09 f4       	brne	.+2      	; 0x3ae <__vector_1+0x4e>
     3ac:	47 c0       	rjmp	.+142    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     3ae:	82 30       	cpi	r24, 0x02	; 2
     3b0:	91 05       	cpc	r25, r1
     3b2:	09 f4       	brne	.+2      	; 0x3b6 <__vector_1+0x56>
     3b4:	83 c0       	rjmp	.+262    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     3b6:	89 2b       	or	r24, r25
     3b8:	09 f0       	breq	.+2      	; 0x3bc <__vector_1+0x5c>
     3ba:	c2 c0       	rjmp	.+388    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
		{
			case 0:
			PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (aucGreen[ucRGBIdx] & DATA_HIGH_BITMASK);
     3bc:	82 e2       	ldi	r24, 0x22	; 34
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	22 e2       	ldi	r18, 0x22	; 34
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	f9 01       	movw	r30, r18
     3c6:	20 81       	ld	r18, Z
     3c8:	42 2f       	mov	r20, r18
     3ca:	4f 70       	andi	r20, 0x0F	; 15
     3cc:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <ucRGBIdx>
     3d0:	22 2f       	mov	r18, r18
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	2c 5e       	subi	r18, 0xEC	; 236
     3d6:	3e 4f       	sbci	r19, 0xFE	; 254
     3d8:	f9 01       	movw	r30, r18
     3da:	20 81       	ld	r18, Z
     3dc:	20 7f       	andi	r18, 0xF0	; 240
     3de:	24 2b       	or	r18, r20
     3e0:	fc 01       	movw	r30, r24
     3e2:	20 83       	st	Z, r18
			PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (aucGreen[ucRGBIdx] & DATA_LOW_BITMASK);
     3e4:	85 e2       	ldi	r24, 0x25	; 37
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	25 e2       	ldi	r18, 0x25	; 37
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	f9 01       	movw	r30, r18
     3ee:	20 81       	ld	r18, Z
     3f0:	42 2f       	mov	r20, r18
     3f2:	40 7f       	andi	r20, 0xF0	; 240
     3f4:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <ucRGBIdx>
     3f8:	22 2f       	mov	r18, r18
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	2c 5e       	subi	r18, 0xEC	; 236
     3fe:	3e 4f       	sbci	r19, 0xFE	; 254
     400:	f9 01       	movw	r30, r18
     402:	20 81       	ld	r18, Z
     404:	2f 70       	andi	r18, 0x0F	; 15
     406:	24 2b       	or	r18, r20
     408:	fc 01       	movw	r30, r24
     40a:	20 83       	st	Z, r18
			PORT_CONTROL |= (1<<SEND); // generate send impulse
     40c:	8b e2       	ldi	r24, 0x2B	; 43
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	2b e2       	ldi	r18, 0x2B	; 43
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	f9 01       	movw	r30, r18
     416:	20 81       	ld	r18, Z
     418:	28 60       	ori	r18, 0x08	; 8
     41a:	fc 01       	movw	r30, r24
     41c:	20 83       	st	Z, r18
			PORT_CONTROL &= ~(1<<SEND);
     41e:	8b e2       	ldi	r24, 0x2B	; 43
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	2b e2       	ldi	r18, 0x2B	; 43
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	f9 01       	movw	r30, r18
     428:	20 81       	ld	r18, Z
     42a:	27 7f       	andi	r18, 0xF7	; 247
     42c:	fc 01       	movw	r30, r24
     42e:	20 83       	st	Z, r18
			ucByteIdx++;
     430:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     434:	8f 5f       	subi	r24, 0xFF	; 255
     436:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
			break;
     43a:	82 c0       	rjmp	.+260    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>

			case 1:
			PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (aucRed[ucRGBIdx] & DATA_HIGH_BITMASK);
     43c:	82 e2       	ldi	r24, 0x22	; 34
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	22 e2       	ldi	r18, 0x22	; 34
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	f9 01       	movw	r30, r18
     446:	20 81       	ld	r18, Z
     448:	42 2f       	mov	r20, r18
     44a:	4f 70       	andi	r20, 0x0F	; 15
     44c:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <ucRGBIdx>
     450:	22 2f       	mov	r18, r18
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	20 50       	subi	r18, 0x00	; 0
     456:	3f 4f       	sbci	r19, 0xFF	; 255
     458:	f9 01       	movw	r30, r18
     45a:	20 81       	ld	r18, Z
     45c:	20 7f       	andi	r18, 0xF0	; 240
     45e:	24 2b       	or	r18, r20
     460:	fc 01       	movw	r30, r24
     462:	20 83       	st	Z, r18
			PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (aucRed[ucRGBIdx] & DATA_LOW_BITMASK);
     464:	85 e2       	ldi	r24, 0x25	; 37
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	25 e2       	ldi	r18, 0x25	; 37
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	f9 01       	movw	r30, r18
     46e:	20 81       	ld	r18, Z
     470:	42 2f       	mov	r20, r18
     472:	40 7f       	andi	r20, 0xF0	; 240
     474:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <ucRGBIdx>
     478:	22 2f       	mov	r18, r18
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	20 50       	subi	r18, 0x00	; 0
     47e:	3f 4f       	sbci	r19, 0xFF	; 255
     480:	f9 01       	movw	r30, r18
     482:	20 81       	ld	r18, Z
     484:	2f 70       	andi	r18, 0x0F	; 15
     486:	24 2b       	or	r18, r20
     488:	fc 01       	movw	r30, r24
     48a:	20 83       	st	Z, r18
			PORT_CONTROL |= (1<<SEND); // generate send impulse
     48c:	8b e2       	ldi	r24, 0x2B	; 43
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	2b e2       	ldi	r18, 0x2B	; 43
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	f9 01       	movw	r30, r18
     496:	20 81       	ld	r18, Z
     498:	28 60       	ori	r18, 0x08	; 8
     49a:	fc 01       	movw	r30, r24
     49c:	20 83       	st	Z, r18
			PORT_CONTROL &= ~(1<<SEND);
     49e:	8b e2       	ldi	r24, 0x2B	; 43
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	2b e2       	ldi	r18, 0x2B	; 43
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	f9 01       	movw	r30, r18
     4a8:	20 81       	ld	r18, Z
     4aa:	27 7f       	andi	r18, 0xF7	; 247
     4ac:	fc 01       	movw	r30, r24
     4ae:	20 83       	st	Z, r18
			ucByteIdx++;
     4b0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     4b4:	8f 5f       	subi	r24, 0xFF	; 255
     4b6:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
			break;
     4ba:	42 c0       	rjmp	.+132    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>

			case 2:
			PORT_DATA_HIGH = (PORT_DATA_HIGH & ~DATA_HIGH_BITMASK) | (aucBlue[ucRGBIdx] & DATA_HIGH_BITMASK);
     4bc:	82 e2       	ldi	r24, 0x22	; 34
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	22 e2       	ldi	r18, 0x22	; 34
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	f9 01       	movw	r30, r18
     4c6:	20 81       	ld	r18, Z
     4c8:	42 2f       	mov	r20, r18
     4ca:	4f 70       	andi	r20, 0x0F	; 15
     4cc:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <ucRGBIdx>
     4d0:	22 2f       	mov	r18, r18
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	28 5d       	subi	r18, 0xD8	; 216
     4d6:	3e 4f       	sbci	r19, 0xFE	; 254
     4d8:	f9 01       	movw	r30, r18
     4da:	20 81       	ld	r18, Z
     4dc:	20 7f       	andi	r18, 0xF0	; 240
     4de:	24 2b       	or	r18, r20
     4e0:	fc 01       	movw	r30, r24
     4e2:	20 83       	st	Z, r18
			PORT_DATA_LOW = (PORT_DATA_LOW & ~DATA_LOW_BITMASK) | (aucBlue[ucRGBIdx] & DATA_LOW_BITMASK);
     4e4:	85 e2       	ldi	r24, 0x25	; 37
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	25 e2       	ldi	r18, 0x25	; 37
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	f9 01       	movw	r30, r18
     4ee:	20 81       	ld	r18, Z
     4f0:	42 2f       	mov	r20, r18
     4f2:	40 7f       	andi	r20, 0xF0	; 240
     4f4:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <ucRGBIdx>
     4f8:	22 2f       	mov	r18, r18
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	28 5d       	subi	r18, 0xD8	; 216
     4fe:	3e 4f       	sbci	r19, 0xFE	; 254
     500:	f9 01       	movw	r30, r18
     502:	20 81       	ld	r18, Z
     504:	2f 70       	andi	r18, 0x0F	; 15
     506:	24 2b       	or	r18, r20
     508:	fc 01       	movw	r30, r24
     50a:	20 83       	st	Z, r18
			PORT_CONTROL |= (1<<SEND); // generate send impulse
     50c:	8b e2       	ldi	r24, 0x2B	; 43
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	2b e2       	ldi	r18, 0x2B	; 43
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	f9 01       	movw	r30, r18
     516:	20 81       	ld	r18, Z
     518:	28 60       	ori	r18, 0x08	; 8
     51a:	fc 01       	movw	r30, r24
     51c:	20 83       	st	Z, r18
			PORT_CONTROL &= ~(1<<SEND);
     51e:	8b e2       	ldi	r24, 0x2B	; 43
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	2b e2       	ldi	r18, 0x2B	; 43
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	f9 01       	movw	r30, r18
     528:	20 81       	ld	r18, Z
     52a:	27 7f       	andi	r18, 0xF7	; 247
     52c:	fc 01       	movw	r30, r24
     52e:	20 83       	st	Z, r18
			ucByteIdx=0;
     530:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
			ucRGBIdx++;
     534:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <ucRGBIdx>
     538:	8f 5f       	subi	r24, 0xFF	; 255
     53a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <ucRGBIdx>
			break;
     53e:	00 00       	nop
		}
	}
	
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
     540:	8b e2       	ldi	r24, 0x2B	; 43
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	2b e2       	ldi	r18, 0x2B	; 43
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	f9 01       	movw	r30, r18
     54a:	20 81       	ld	r18, Z
     54c:	2d 7f       	andi	r18, 0xFD	; 253
     54e:	fc 01       	movw	r30, r24
     550:	20 83       	st	Z, r18
	#endif
}
     552:	00 00       	nop
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	ff 91       	pop	r31
     55a:	ef 91       	pop	r30
     55c:	9f 91       	pop	r25
     55e:	8f 91       	pop	r24
     560:	4f 91       	pop	r20
     562:	3f 91       	pop	r19
     564:	2f 91       	pop	r18
     566:	0f 90       	pop	r0
     568:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     56c:	0f 90       	pop	r0
     56e:	1f 90       	pop	r1
     570:	18 95       	reti

00000572 <__vector_19>:


ISR(SPI_STC_vect)
{
     572:	1f 92       	push	r1
     574:	0f 92       	push	r0
     576:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	2f 93       	push	r18
     580:	3f 93       	push	r19
     582:	4f 93       	push	r20
     584:	5f 93       	push	r21
     586:	6f 93       	push	r22
     588:	7f 93       	push	r23
     58a:	8f 93       	push	r24
     58c:	9f 93       	push	r25
     58e:	af 93       	push	r26
     590:	bf 93       	push	r27
     592:	ef 93       	push	r30
     594:	ff 93       	push	r31
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	1f 92       	push	r1
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8spiData = SPDR0;
     5a0:	8e e4       	ldi	r24, 0x4E	; 78
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	fc 01       	movw	r30, r24
     5a6:	80 81       	ld	r24, Z
     5a8:	89 83       	std	Y+1, r24	; 0x01
	
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
     5aa:	8b e2       	ldi	r24, 0x2B	; 43
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	2b e2       	ldi	r18, 0x2B	; 43
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	f9 01       	movw	r30, r18
     5b4:	20 81       	ld	r18, Z
     5b6:	22 60       	ori	r18, 0x02	; 2
     5b8:	fc 01       	movw	r30, r24
     5ba:	20 83       	st	Z, r18
	#endif
	
	SPDR0 = 0;
     5bc:	8e e4       	ldi	r24, 0x4E	; 78
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	fc 01       	movw	r30, r24
     5c2:	10 82       	st	Z, r1

	switch(SPIBUFFER.spiState)
     5c4:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <SPIBUFFER+0x42>
     5c8:	88 2f       	mov	r24, r24
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	09 2e       	mov	r0, r25
     5ce:	00 0c       	add	r0, r0
     5d0:	aa 0b       	sbc	r26, r26
     5d2:	bb 0b       	sbc	r27, r27
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	26 e0       	ldi	r18, 0x06	; 6
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	84 1b       	sub	r24, r20
     5de:	95 0b       	sbc	r25, r21
     5e0:	28 17       	cp	r18, r24
     5e2:	39 07       	cpc	r19, r25
     5e4:	08 f4       	brcc	.+2      	; 0x5e8 <__vector_19+0x76>
     5e6:	11 c1       	rjmp	.+546    	; 0x80a <__vector_19+0x298>
     5e8:	82 5c       	subi	r24, 0xC2	; 194
     5ea:	9f 4f       	sbci	r25, 0xFF	; 255
     5ec:	fc 01       	movw	r30, r24
     5ee:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__tablejump2__>
	{
		case READY:
			if(u8spiData>=3)
     5f2:	89 81       	ldd	r24, Y+1	; 0x01
     5f4:	83 30       	cpi	r24, 0x03	; 3
     5f6:	90 f0       	brcs	.+36     	; 0x61c <__vector_19+0xaa>
			{
				SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
     5f8:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <SPIBUFFER+0x40>
     5fc:	88 2f       	mov	r24, r24
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	8e 5a       	subi	r24, 0xAE	; 174
     602:	9e 4f       	sbci	r25, 0xFE	; 254
     604:	29 81       	ldd	r18, Y+1	; 0x01
     606:	fc 01       	movw	r30, r24
     608:	20 83       	st	Z, r18
				SPIBUFFER.u8Count++;
     60a:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <SPIBUFFER+0x40>
     60e:	8f 5f       	subi	r24, 0xFF	; 255
     610:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <SPIBUFFER+0x40>
				SPIBUFFER.spiState = WRITE;
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <SPIBUFFER+0x42>
			}
			else
			{
				SPIBUFFER.spiState = READ;
			}
		break;
     61a:	f7 c0       	rjmp	.+494    	; 0x80a <__vector_19+0x298>
				SPIBUFFER.u8Count++;
				SPIBUFFER.spiState = WRITE;
			}
			else
			{
				SPIBUFFER.spiState = READ;
     61c:	82 e0       	ldi	r24, 0x02	; 2
     61e:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <SPIBUFFER+0x42>
			}
		break;
     622:	f3 c0       	rjmp	.+486    	; 0x80a <__vector_19+0x298>

		case WRITE:
			SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
     624:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <SPIBUFFER+0x40>
     628:	88 2f       	mov	r24, r24
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	8e 5a       	subi	r24, 0xAE	; 174
     62e:	9e 4f       	sbci	r25, 0xFE	; 254
     630:	29 81       	ldd	r18, Y+1	; 0x01
     632:	fc 01       	movw	r30, r24
     634:	20 83       	st	Z, r18
			SPIBUFFER.u8Count++;
     636:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <SPIBUFFER+0x40>
     63a:	8f 5f       	subi	r24, 0xFF	; 255
     63c:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <SPIBUFFER+0x40>
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
     640:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <SPIBUFFER+0x40>
     644:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <SPIBUFFER>
     648:	98 17       	cp	r25, r24
     64a:	08 f4       	brcc	.+2      	; 0x64e <__vector_19+0xdc>
     64c:	db c0       	rjmp	.+438    	; 0x804 <__vector_19+0x292>
			{
				SPIBUFFER.spiState = DONE_WRITE;
     64e:	84 e0       	ldi	r24, 0x04	; 4
     650:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <SPIBUFFER+0x42>
			}
		break;
     654:	d7 c0       	rjmp	.+430    	; 0x804 <__vector_19+0x292>

		case READ:
			SPIBUFFER.u8Count = 0;
     656:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <SPIBUFFER+0x40>
			
			switch(u8spiData)
     65a:	89 81       	ldd	r24, Y+1	; 0x01
     65c:	88 2f       	mov	r24, r24
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	82 3f       	cpi	r24, 0xF2	; 242
     662:	91 05       	cpc	r25, r1
     664:	79 f1       	breq	.+94     	; 0x6c4 <__vector_19+0x152>
     666:	83 3f       	cpi	r24, 0xF3	; 243
     668:	91 05       	cpc	r25, r1
     66a:	24 f4       	brge	.+8      	; 0x674 <__vector_19+0x102>
     66c:	81 3f       	cpi	r24, 0xF1	; 241
     66e:	91 05       	cpc	r25, r1
     670:	51 f0       	breq	.+20     	; 0x686 <__vector_19+0x114>
     672:	a6 c0       	rjmp	.+332    	; 0x7c0 <__vector_19+0x24e>
     674:	83 3f       	cpi	r24, 0xF3	; 243
     676:	91 05       	cpc	r25, r1
     678:	09 f4       	brne	.+2      	; 0x67c <__vector_19+0x10a>
     67a:	43 c0       	rjmp	.+134    	; 0x702 <__vector_19+0x190>
     67c:	84 3f       	cpi	r24, 0xF4	; 244
     67e:	91 05       	cpc	r25, r1
     680:	09 f4       	brne	.+2      	; 0x684 <__vector_19+0x112>
     682:	5e c0       	rjmp	.+188    	; 0x740 <__vector_19+0x1ce>
     684:	9d c0       	rjmp	.+314    	; 0x7c0 <__vector_19+0x24e>
			{
				case 0xF1:
					SPDR0 = 0x01;
     686:	8e e4       	ldi	r24, 0x4E	; 78
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	21 e0       	ldi	r18, 0x01	; 1
     68c:	fc 01       	movw	r30, r24
     68e:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     690:	84 e0       	ldi	r24, 0x04	; 4
     692:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = u8Status;
     69c:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <u8Status>
     6a0:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     6a4:	63 e0       	ldi	r22, 0x03	; 3
     6a6:	82 e5       	ldi	r24, 0x52	; 82
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <CRC8>
     6ae:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     6b2:	84 e0       	ldi	r24, 0x04	; 4
     6b4:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     6b8:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     6bc:	83 e0       	ldi	r24, 0x03	; 3
     6be:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <SPIBUFFER+0x42>
				break;
     6c2:	82 c0       	rjmp	.+260    	; 0x7c8 <__vector_19+0x256>
				
				case 0xF2:
					SPDR0 = 0x01;
     6c4:	8e e4       	ldi	r24, 0x4E	; 78
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	21 e0       	ldi	r18, 0x01	; 1
     6ca:	fc 01       	movw	r30, r24
     6cc:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     6ce:	84 e0       	ldi	r24, 0x04	; 4
     6d0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = u8Duty;
     6da:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <u8Duty>
     6de:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     6e2:	63 e0       	ldi	r22, 0x03	; 3
     6e4:	82 e5       	ldi	r24, 0x52	; 82
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <CRC8>
     6ec:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     6f0:	84 e0       	ldi	r24, 0x04	; 4
     6f2:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     6f6:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     6fa:	83 e0       	ldi	r24, 0x03	; 3
     6fc:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <SPIBUFFER+0x42>
				break;
     700:	63 c0       	rjmp	.+198    	; 0x7c8 <__vector_19+0x256>
				
				case 0xF3:
					SPDR0 = 0x01;
     702:	8e e4       	ldi	r24, 0x4E	; 78
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	21 e0       	ldi	r18, 0x01	; 1
     708:	fc 01       	movw	r30, r24
     70a:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
     70c:	84 e0       	ldi	r24, 0x04	; 4
     70e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <SPIBUFFER>
					SPIBUFFER.au8Buffer[1] = u8spiData;
     712:	89 81       	ldd	r24, Y+1	; 0x01
     714:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <SPIBUFFER+0x1>
					SPIBUFFER.au8Buffer[2] = adcGetTemperature();
     718:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <adcGetTemperature>
     71c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <SPIBUFFER+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
     720:	63 e0       	ldi	r22, 0x03	; 3
     722:	82 e5       	ldi	r24, 0x52	; 82
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <CRC8>
     72a:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <SPIBUFFER+0x3>
					SPIBUFFER.u8Count = 4;
     72e:	84 e0       	ldi	r24, 0x04	; 4
     730:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <SPIBUFFER+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
     734:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     738:	83 e0       	ldi	r24, 0x03	; 3
     73a:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <SPIBUFFER+0x42>
				break;
     73e:	44 c0       	rjmp	.+136    	; 0x7c8 <__vector_19+0x256>

				case 0xF4:
					SPDR0 = 0x01;
     740:	8e e4       	ldi	r24, 0x4E	; 78
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	21 e0       	ldi	r18, 0x01	; 1
     746:	fc 01       	movw	r30, r24
     748:	20 83       	st	Z, r18
					if(u8PLEDFadeActive) // ongoing fade
     74a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8PLEDFadeActive>
     74e:	88 23       	and	r24, r24
     750:	09 f1       	breq	.+66     	; 0x794 <__vector_19+0x222>
					{
						SPIBUFFER.au8Buffer[0] = 7;
     752:	87 e0       	ldi	r24, 0x07	; 7
     754:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <SPIBUFFER>
						SPIBUFFER.au8Buffer[1] = u8spiData;
     758:	89 81       	ldd	r24, Y+1	; 0x01
     75a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <SPIBUFFER+0x1>
						SPIBUFFER.au8Buffer[2] = u8PLEDFadeStartPercent;
     75e:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <u8PLEDFadeStartPercent>
     762:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <SPIBUFFER+0x2>
						SPIBUFFER.au8Buffer[3] = u8PLEDFadeStopPercent;
     766:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8PLEDFadeStopPercent>
     76a:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <SPIBUFFER+0x3>
						SPIBUFFER.au8Buffer[4] = u8PLEDFadeTime;
     76e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <u8PLEDFadeTime>
     772:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <SPIBUFFER+0x4>
						SPIBUFFER.au8Buffer[5] = u8Duty;
     776:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <u8Duty>
     77a:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <SPIBUFFER+0x5>
						SPIBUFFER.au8Buffer[6] = CRC8(&SPIBUFFER.au8Buffer[0],6);
     77e:	66 e0       	ldi	r22, 0x06	; 6
     780:	82 e5       	ldi	r24, 0x52	; 82
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <CRC8>
     788:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <SPIBUFFER+0x6>
						SPIBUFFER.u8Count = 7;
     78c:	87 e0       	ldi	r24, 0x07	; 7
     78e:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <SPIBUFFER+0x40>
     792:	10 c0       	rjmp	.+32     	; 0x7b4 <__vector_19+0x242>
					}
					else // no ongoing fade
					{
						SPIBUFFER.au8Buffer[0] = 3;
     794:	83 e0       	ldi	r24, 0x03	; 3
     796:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <SPIBUFFER>
						SPIBUFFER.au8Buffer[1] = u8spiData;
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <SPIBUFFER+0x1>
						SPIBUFFER.au8Buffer[2] = CRC8(&SPIBUFFER.au8Buffer[0],2);
     7a0:	62 e0       	ldi	r22, 0x02	; 2
     7a2:	82 e5       	ldi	r24, 0x52	; 82
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <CRC8>
     7aa:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <SPIBUFFER+0x2>
						SPIBUFFER.u8Count = 3;
     7ae:	83 e0       	ldi	r24, 0x03	; 3
     7b0:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <SPIBUFFER+0x40>
					}
					SPIBUFFER.u8ReadReturnCount = 0;
     7b4:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <SPIBUFFER+0x41>
					SPIBUFFER.spiState = READ_RETURN;
     7b8:	83 e0       	ldi	r24, 0x03	; 3
     7ba:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <SPIBUFFER+0x42>
				break;
     7be:	04 c0       	rjmp	.+8      	; 0x7c8 <__vector_19+0x256>
				
				default:
					SPIBUFFER.spiState = IDLE;
     7c0:	86 e0       	ldi	r24, 0x06	; 6
     7c2:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <SPIBUFFER+0x42>
				break;
     7c6:	00 00       	nop
			}
		break;
     7c8:	20 c0       	rjmp	.+64     	; 0x80a <__vector_19+0x298>
		
		case READ_RETURN:
			SPDR0 = SPIBUFFER.au8Buffer[SPIBUFFER.u8ReadReturnCount];
     7ca:	8e e4       	ldi	r24, 0x4E	; 78
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <SPIBUFFER+0x41>
     7d2:	22 2f       	mov	r18, r18
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	2e 5a       	subi	r18, 0xAE	; 174
     7d8:	3e 4f       	sbci	r19, 0xFE	; 254
     7da:	f9 01       	movw	r30, r18
     7dc:	20 81       	ld	r18, Z
     7de:	fc 01       	movw	r30, r24
     7e0:	20 83       	st	Z, r18
			SPIBUFFER.u8ReadReturnCount++;
     7e2:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <SPIBUFFER+0x41>
     7e6:	8f 5f       	subi	r24, 0xFF	; 255
     7e8:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <SPIBUFFER+0x41>
			if(SPIBUFFER.u8Count == SPIBUFFER.u8ReadReturnCount)
     7ec:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <SPIBUFFER+0x40>
     7f0:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <SPIBUFFER+0x41>
     7f4:	98 17       	cp	r25, r24
     7f6:	41 f4       	brne	.+16     	; 0x808 <__vector_19+0x296>
			{
				SPIBUFFER.spiState = DONE_READ;
     7f8:	85 e0       	ldi	r24, 0x05	; 5
     7fa:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <SPIBUFFER+0x42>
			}
		break;
     7fe:	04 c0       	rjmp	.+8      	; 0x808 <__vector_19+0x296>
		
		break;

		case IDLE:

		break;
     800:	00 00       	nop
     802:	03 c0       	rjmp	.+6      	; 0x80a <__vector_19+0x298>
			SPIBUFFER.u8Count++;
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
			{
				SPIBUFFER.spiState = DONE_WRITE;
			}
		break;
     804:	00 00       	nop
     806:	01 c0       	rjmp	.+2      	; 0x80a <__vector_19+0x298>
			SPIBUFFER.u8ReadReturnCount++;
			if(SPIBUFFER.u8Count == SPIBUFFER.u8ReadReturnCount)
			{
				SPIBUFFER.spiState = DONE_READ;
			}
		break;
     808:	00 00       	nop
		case IDLE:

		break;
	}
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
     80a:	8b e2       	ldi	r24, 0x2B	; 43
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	2b e2       	ldi	r18, 0x2B	; 43
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	f9 01       	movw	r30, r18
     814:	20 81       	ld	r18, Z
     816:	2d 7f       	andi	r18, 0xFD	; 253
     818:	fc 01       	movw	r30, r24
     81a:	20 83       	st	Z, r18
	#endif
}
     81c:	00 00       	nop
     81e:	0f 90       	pop	r0
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	ff 91       	pop	r31
     826:	ef 91       	pop	r30
     828:	bf 91       	pop	r27
     82a:	af 91       	pop	r26
     82c:	9f 91       	pop	r25
     82e:	8f 91       	pop	r24
     830:	7f 91       	pop	r23
     832:	6f 91       	pop	r22
     834:	5f 91       	pop	r21
     836:	4f 91       	pop	r20
     838:	3f 91       	pop	r19
     83a:	2f 91       	pop	r18
     83c:	0f 90       	pop	r0
     83e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     842:	0f 90       	pop	r0
     844:	1f 90       	pop	r1
     846:	18 95       	reti

00000848 <__vector_5>:

ISR(PCINT1_vect)
{
     848:	1f 92       	push	r1
     84a:	0f 92       	push	r0
     84c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     850:	0f 92       	push	r0
     852:	11 24       	eor	r1, r1
     854:	af 92       	push	r10
     856:	bf 92       	push	r11
     858:	cf 92       	push	r12
     85a:	df 92       	push	r13
     85c:	ef 92       	push	r14
     85e:	ff 92       	push	r15
     860:	0f 93       	push	r16
     862:	1f 93       	push	r17
     864:	2f 93       	push	r18
     866:	3f 93       	push	r19
     868:	4f 93       	push	r20
     86a:	5f 93       	push	r21
     86c:	6f 93       	push	r22
     86e:	7f 93       	push	r23
     870:	8f 93       	push	r24
     872:	9f 93       	push	r25
     874:	af 93       	push	r26
     876:	bf 93       	push	r27
     878:	ef 93       	push	r30
     87a:	ff 93       	push	r31
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
	#ifdef INT_OUT
	PORTD |= (1<<PORTD1);
     884:	8b e2       	ldi	r24, 0x2B	; 43
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	2b e2       	ldi	r18, 0x2B	; 43
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	f9 01       	movw	r30, r18
     88e:	20 81       	ld	r18, Z
     890:	22 60       	ori	r18, 0x02	; 2
     892:	fc 01       	movw	r30, r24
     894:	20 83       	st	Z, r18
	#endif
	
	SPDR0 = 0;
     896:	8e e4       	ldi	r24, 0x4E	; 78
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	fc 01       	movw	r30, r24
     89c:	10 82       	st	Z, r1
	if(PIN_SPI & (1<<SPI_SS)) // SS HIGH
     89e:	83 e2       	ldi	r24, 0x23	; 35
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	fc 01       	movw	r30, r24
     8a4:	80 81       	ld	r24, Z
     8a6:	88 2f       	mov	r24, r24
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	80 71       	andi	r24, 0x10	; 16
     8ac:	99 27       	eor	r25, r25
     8ae:	89 2b       	or	r24, r25
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <__vector_5+0x6c>
     8b2:	70 c1       	rjmp	.+736    	; 0xb94 <__stack+0x295>
	{
		
		if(SPIBUFFER.spiState == DONE_WRITE)
     8b4:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <SPIBUFFER+0x42>
     8b8:	84 30       	cpi	r24, 0x04	; 4
     8ba:	09 f0       	breq	.+2      	; 0x8be <__vector_5+0x76>
     8bc:	7d c1       	rjmp	.+762    	; 0xbb8 <__stack+0x2b9>
		{
			if(SPIBUFFER.u8Count == SPIBUFFER.au8Buffer[0]) // correct amount of bytes in buffer
     8be:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <SPIBUFFER+0x40>
     8c2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <SPIBUFFER>
     8c6:	98 17       	cp	r25, r24
     8c8:	09 f0       	breq	.+2      	; 0x8cc <__vector_5+0x84>
     8ca:	76 c1       	rjmp	.+748    	; 0xbb8 <__stack+0x2b9>
			{
				if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
     8cc:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <SPIBUFFER+0x40>
     8d0:	68 2f       	mov	r22, r24
     8d2:	82 e5       	ldi	r24, 0x52	; 82
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <CRC8>
     8da:	88 23       	and	r24, r24
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <__vector_5+0x98>
     8de:	6c c1       	rjmp	.+728    	; 0xbb8 <__stack+0x2b9>
				{
					switch(SPIBUFFER.au8Buffer[1]) // command
     8e0:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <SPIBUFFER+0x1>
     8e4:	88 2f       	mov	r24, r24
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	09 2e       	mov	r0, r25
     8ea:	00 0c       	add	r0, r0
     8ec:	aa 0b       	sbc	r26, r26
     8ee:	bb 0b       	sbc	r27, r27
     8f0:	41 e1       	ldi	r20, 0x11	; 17
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	22 e1       	ldi	r18, 0x12	; 18
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	84 1b       	sub	r24, r20
     8fa:	95 0b       	sbc	r25, r21
     8fc:	28 17       	cp	r18, r24
     8fe:	39 07       	cpc	r19, r25
     900:	08 f4       	brcc	.+2      	; 0x904 <__stack+0x5>
     902:	5a c1       	rjmp	.+692    	; 0xbb8 <__stack+0x2b9>
     904:	8b 5b       	subi	r24, 0xBB	; 187
     906:	9f 4f       	sbci	r25, 0xFF	; 255
     908:	fc 01       	movw	r30, r24
     90a:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__tablejump2__>
					{
						case 0x11:
						if(SPIBUFFER.u8Count == 3)
     90e:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <SPIBUFFER+0x40>
     912:	83 30       	cpi	r24, 0x03	; 3
     914:	09 f0       	breq	.+2      	; 0x918 <__stack+0x19>
     916:	43 c1       	rjmp	.+646    	; 0xb9e <__stack+0x29f>
						{
							enablePLED();
     918:	0e 94 ad 07 	call	0xf5a	; 0xf5a <enablePLED>
							u8Status |= (1<<STATUS_PLED);
     91c:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <u8Status>
     920:	81 60       	ori	r24, 0x01	; 1
     922:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <u8Status>
						}
						break;
     926:	3b c1       	rjmp	.+630    	; 0xb9e <__stack+0x29f>

						case 0x12:
						if(SPIBUFFER.u8Count == 3)
     928:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <SPIBUFFER+0x40>
     92c:	83 30       	cpi	r24, 0x03	; 3
     92e:	09 f0       	breq	.+2      	; 0x932 <__stack+0x33>
     930:	38 c1       	rjmp	.+624    	; 0xba2 <__stack+0x2a3>
						{
							disablePLED();
     932:	0e 94 be 07 	call	0xf7c	; 0xf7c <disablePLED>
							u8Status &= ~(1<<STATUS_PLED);
     936:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <u8Status>
     93a:	8e 7f       	andi	r24, 0xFE	; 254
     93c:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <u8Status>
						}
						break;
     940:	30 c1       	rjmp	.+608    	; 0xba2 <__stack+0x2a3>

						case 0x13:
						if(SPIBUFFER.u8Count == 4)
     942:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <SPIBUFFER+0x40>
     946:	84 30       	cpi	r24, 0x04	; 4
     948:	09 f0       	breq	.+2      	; 0x94c <__stack+0x4d>
     94a:	2d c1       	rjmp	.+602    	; 0xba6 <__stack+0x2a7>
						{
							if(u8PLEDFadeActive == 0)
     94c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8PLEDFadeActive>
     950:	88 23       	and	r24, r24
     952:	09 f0       	breq	.+2      	; 0x956 <__stack+0x57>
     954:	28 c1       	rjmp	.+592    	; 0xba6 <__stack+0x2a7>
							{
								if(SPIBUFFER.au8Buffer[2]>100)
     956:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <SPIBUFFER+0x2>
     95a:	85 36       	cpi	r24, 0x65	; 101
     95c:	20 f0       	brcs	.+8      	; 0x966 <__stack+0x67>
								{
									u8Duty = 100;
     95e:	84 e6       	ldi	r24, 0x64	; 100
     960:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <u8Duty>
     964:	04 c0       	rjmp	.+8      	; 0x96e <__stack+0x6f>
								}
								else
								{
									u8Duty = SPIBUFFER.au8Buffer[2];
     966:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <SPIBUFFER+0x2>
     96a:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <u8Duty>
								}
								setPWMDutyPercent(u8Duty);
     96e:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <u8Duty>
     972:	0e 94 c9 08 	call	0x1192	; 0x1192 <setPWMDutyPercent>
							}
						}
						break;
     976:	17 c1       	rjmp	.+558    	; 0xba6 <__stack+0x2a7>

						case 0x14:
						if(SPIBUFFER.u8Count == 6)
     978:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <SPIBUFFER+0x40>
     97c:	86 30       	cpi	r24, 0x06	; 6
     97e:	09 f0       	breq	.+2      	; 0x982 <__stack+0x83>
     980:	14 c1       	rjmp	.+552    	; 0xbaa <__stack+0x2ab>
// 							u32PLEDFadeIntCount = 0;
// 							u32PLEDFadeIntStep = 6000*SPIBUFFER.au8Buffer[4]/(u16PLEDFadeMaxValue-u16PLEDFadeMinValue);
// 							u8PLEDFadeActive = 1;
							
							
							if(SPIBUFFER.au8Buffer[2]>100)
     982:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <SPIBUFFER+0x2>
     986:	85 36       	cpi	r24, 0x65	; 101
     988:	20 f0       	brcs	.+8      	; 0x992 <__stack+0x93>
							{
								u8PLEDFadeStartPercent=100;
     98a:	84 e6       	ldi	r24, 0x64	; 100
     98c:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8PLEDFadeStartPercent>
     990:	04 c0       	rjmp	.+8      	; 0x99a <__stack+0x9b>
							}
							else
							{
								u8PLEDFadeStartPercent = SPIBUFFER.au8Buffer[2];
     992:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <SPIBUFFER+0x2>
     996:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8PLEDFadeStartPercent>
							}
							
							if(SPIBUFFER.au8Buffer[3]>100)
     99a:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <SPIBUFFER+0x3>
     99e:	85 36       	cpi	r24, 0x65	; 101
     9a0:	20 f0       	brcs	.+8      	; 0x9aa <__stack+0xab>
							{
								u8PLEDFadeStopPercent=100;
     9a2:	84 e6       	ldi	r24, 0x64	; 100
     9a4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8PLEDFadeStopPercent>
     9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <__stack+0xb3>
							}
							else
							{
								u8PLEDFadeStopPercent = SPIBUFFER.au8Buffer[3];
     9aa:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <SPIBUFFER+0x3>
     9ae:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8PLEDFadeStopPercent>
							}
							
							u16PLEDFadeStartValue = Map(u8PLEDFadeStartPercent,0,100,0,511);
     9b2:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <u8PLEDFadeStartPercent>
     9b6:	88 2f       	mov	r24, r24
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	a0 e0       	ldi	r26, 0x00	; 0
     9bc:	b0 e0       	ldi	r27, 0x00	; 0
     9be:	1f 92       	push	r1
     9c0:	1f 92       	push	r1
     9c2:	21 e0       	ldi	r18, 0x01	; 1
     9c4:	2f 93       	push	r18
     9c6:	2f ef       	ldi	r18, 0xFF	; 255
     9c8:	2f 93       	push	r18
     9ca:	a1 2c       	mov	r10, r1
     9cc:	b1 2c       	mov	r11, r1
     9ce:	65 01       	movw	r12, r10
     9d0:	14 e6       	ldi	r17, 0x64	; 100
     9d2:	e1 2e       	mov	r14, r17
     9d4:	f1 2c       	mov	r15, r1
     9d6:	00 e0       	ldi	r16, 0x00	; 0
     9d8:	10 e0       	ldi	r17, 0x00	; 0
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	a9 01       	movw	r20, r18
     9e0:	bc 01       	movw	r22, r24
     9e2:	cd 01       	movw	r24, r26
     9e4:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <Map>
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	dc 01       	movw	r26, r24
     9f2:	cb 01       	movw	r24, r22
     9f4:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <u16PLEDFadeStartValue+0x1>
     9f8:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u16PLEDFadeStartValue>
							u16PLEDFadeStopValue = Map(u8PLEDFadeStopPercent,0,100,0,511);
     9fc:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8PLEDFadeStopPercent>
     a00:	88 2f       	mov	r24, r24
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	a0 e0       	ldi	r26, 0x00	; 0
     a06:	b0 e0       	ldi	r27, 0x00	; 0
     a08:	1f 92       	push	r1
     a0a:	1f 92       	push	r1
     a0c:	21 e0       	ldi	r18, 0x01	; 1
     a0e:	2f 93       	push	r18
     a10:	2f ef       	ldi	r18, 0xFF	; 255
     a12:	2f 93       	push	r18
     a14:	a1 2c       	mov	r10, r1
     a16:	b1 2c       	mov	r11, r1
     a18:	65 01       	movw	r12, r10
     a1a:	14 e6       	ldi	r17, 0x64	; 100
     a1c:	e1 2e       	mov	r14, r17
     a1e:	f1 2c       	mov	r15, r1
     a20:	00 e0       	ldi	r16, 0x00	; 0
     a22:	10 e0       	ldi	r17, 0x00	; 0
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	a9 01       	movw	r20, r18
     a2a:	bc 01       	movw	r22, r24
     a2c:	cd 01       	movw	r24, r26
     a2e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <Map>
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	dc 01       	movw	r26, r24
     a3c:	cb 01       	movw	r24, r22
     a3e:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <u16PLEDFadeStopValue+0x1>
     a42:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u16PLEDFadeStopValue>
							u8PLEDFadeTime = SPIBUFFER.au8Buffer[4];
     a46:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <SPIBUFFER+0x4>
     a4a:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <u8PLEDFadeTime>
							
							setPWMDuty(u16PLEDFadeStartValue);
     a4e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u16PLEDFadeStartValue>
     a52:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <u16PLEDFadeStartValue+0x1>
     a56:	0e 94 15 09 	call	0x122a	; 0x122a <setPWMDuty>
							u8Duty = u8PLEDFadeStartPercent;
     a5a:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <u8PLEDFadeStartPercent>
     a5e:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <u8Duty>
							u16PLEDFadeCurrValue = u16PLEDFadeStartValue;
     a62:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u16PLEDFadeStartValue>
     a66:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <u16PLEDFadeStartValue+0x1>
     a6a:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <u16PLEDFadeCurrValue+0x1>
     a6e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <u16PLEDFadeCurrValue>
							u32PLEDFadeIntCount = 0;
     a72:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <u32PLEDFadeIntCount>
     a76:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <u32PLEDFadeIntCount+0x1>
     a7a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <u32PLEDFadeIntCount+0x2>
     a7e:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <u32PLEDFadeIntCount+0x3>
							
							if(u8PLEDFadeStartPercent<u8PLEDFadeStopPercent) // PLED rise
     a82:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <u8PLEDFadeStartPercent>
     a86:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8PLEDFadeStopPercent>
     a8a:	98 17       	cp	r25, r24
     a8c:	58 f5       	brcc	.+86     	; 0xae4 <__stack+0x1e5>
							{
								u32PLEDFadeIntStep = 6000*u8PLEDFadeTime/(u16PLEDFadeStopValue-u16PLEDFadeStartValue);
     a8e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <u8PLEDFadeTime>
     a92:	28 2f       	mov	r18, r24
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	80 e7       	ldi	r24, 0x70	; 112
     a98:	97 e1       	ldi	r25, 0x17	; 23
     a9a:	28 9f       	mul	r18, r24
     a9c:	a0 01       	movw	r20, r0
     a9e:	29 9f       	mul	r18, r25
     aa0:	50 0d       	add	r21, r0
     aa2:	38 9f       	mul	r19, r24
     aa4:	50 0d       	add	r21, r0
     aa6:	11 24       	eor	r1, r1
     aa8:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <u16PLEDFadeStopValue>
     aac:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <u16PLEDFadeStopValue+0x1>
     ab0:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u16PLEDFadeStartValue>
     ab4:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <u16PLEDFadeStartValue+0x1>
     ab8:	28 1b       	sub	r18, r24
     aba:	39 0b       	sbc	r19, r25
     abc:	ca 01       	movw	r24, r20
     abe:	b9 01       	movw	r22, r18
     ac0:	0e 94 27 0b 	call	0x164e	; 0x164e <__udivmodhi4>
     ac4:	cb 01       	movw	r24, r22
     ac6:	cc 01       	movw	r24, r24
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u32PLEDFadeIntStep>
     ad0:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <u32PLEDFadeIntStep+0x1>
     ad4:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <u32PLEDFadeIntStep+0x2>
     ad8:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <u32PLEDFadeIntStep+0x3>
								u8PLEDFadeDirection = 1;
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <u8PLEDFadeDirection>
     ae2:	2f c0       	rjmp	.+94     	; 0xb42 <__stack+0x243>
							}
							else if(u8PLEDFadeStartPercent>u8PLEDFadeStopPercent) // PLED fall
     ae4:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <u8PLEDFadeStartPercent>
     ae8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u8PLEDFadeStopPercent>
     aec:	89 17       	cp	r24, r25
     aee:	48 f5       	brcc	.+82     	; 0xb42 <__stack+0x243>
							{
								u32PLEDFadeIntStep = 6000*u8PLEDFadeTime/(u16PLEDFadeStartValue-u16PLEDFadeStopValue);
     af0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <u8PLEDFadeTime>
     af4:	28 2f       	mov	r18, r24
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	80 e7       	ldi	r24, 0x70	; 112
     afa:	97 e1       	ldi	r25, 0x17	; 23
     afc:	28 9f       	mul	r18, r24
     afe:	a0 01       	movw	r20, r0
     b00:	29 9f       	mul	r18, r25
     b02:	50 0d       	add	r21, r0
     b04:	38 9f       	mul	r19, r24
     b06:	50 0d       	add	r21, r0
     b08:	11 24       	eor	r1, r1
     b0a:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <u16PLEDFadeStartValue>
     b0e:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <u16PLEDFadeStartValue+0x1>
     b12:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <u16PLEDFadeStopValue>
     b16:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <u16PLEDFadeStopValue+0x1>
     b1a:	28 1b       	sub	r18, r24
     b1c:	39 0b       	sbc	r19, r25
     b1e:	ca 01       	movw	r24, r20
     b20:	b9 01       	movw	r22, r18
     b22:	0e 94 27 0b 	call	0x164e	; 0x164e <__udivmodhi4>
     b26:	cb 01       	movw	r24, r22
     b28:	cc 01       	movw	r24, r24
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u32PLEDFadeIntStep>
     b32:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <u32PLEDFadeIntStep+0x1>
     b36:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <u32PLEDFadeIntStep+0x2>
     b3a:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <u32PLEDFadeIntStep+0x3>
								u8PLEDFadeDirection = 0;
     b3e:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <u8PLEDFadeDirection>
							}
							
							u8PLEDFadeActive = 1;
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <u8PLEDFadeActive>
						}
						break;
     b48:	30 c0       	rjmp	.+96     	; 0xbaa <__stack+0x2ab>
						
						case 0x15:
						u8PLEDFadeActive = 0;
     b4a:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <u8PLEDFadeActive>
						break;
     b4e:	34 c0       	rjmp	.+104    	; 0xbb8 <__stack+0x2b9>
					
						case 0x21:
						if(SPIBUFFER.u8Count == 3)
     b50:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <SPIBUFFER+0x40>
     b54:	83 30       	cpi	r24, 0x03	; 3
     b56:	59 f5       	brne	.+86     	; 0xbae <__stack+0x2af>
						{
							enableAudio();
     b58:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <enableAudio>
							u8Status |= (1<<STATUS_AUDIO);
     b5c:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <u8Status>
     b60:	82 60       	ori	r24, 0x02	; 2
     b62:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <u8Status>
						}
						break;
     b66:	23 c0       	rjmp	.+70     	; 0xbae <__stack+0x2af>

						case 0x22:
						if(SPIBUFFER.u8Count == 3)
     b68:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <SPIBUFFER+0x40>
     b6c:	83 30       	cpi	r24, 0x03	; 3
     b6e:	09 f5       	brne	.+66     	; 0xbb2 <__stack+0x2b3>
						{
							standbyAudio();
     b70:	0e 94 cf 07 	call	0xf9e	; 0xf9e <standbyAudio>
							u8Status &= ~(1<<STATUS_AUDIO);
     b74:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <u8Status>
     b78:	8d 7f       	andi	r24, 0xFD	; 253
     b7a:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <u8Status>
						}
						break;
     b7e:	19 c0       	rjmp	.+50     	; 0xbb2 <__stack+0x2b3>
					
						case 0x23:
						if(SPIBUFFER.u8Count == 4)
     b80:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <SPIBUFFER+0x40>
     b84:	84 30       	cpi	r24, 0x04	; 4
     b86:	b9 f4       	brne	.+46     	; 0xbb6 <__stack+0x2b7>
						{
							setVolume(SPIBUFFER.au8Buffer[2]);
     b88:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <SPIBUFFER+0x2>
     b8c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <setVolume>
						}
						break;
     b90:	00 00       	nop
     b92:	11 c0       	rjmp	.+34     	; 0xbb6 <__stack+0x2b7>
			
		}
	}
	else // SS LOW
	{
		SPIBUFFER.u8Count = 0;
     b94:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <SPIBUFFER+0x40>
		SPIBUFFER.spiState = READY;
     b98:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <SPIBUFFER+0x42>
     b9c:	0d c0       	rjmp	.+26     	; 0xbb8 <__stack+0x2b9>
						if(SPIBUFFER.u8Count == 3)
						{
							enablePLED();
							u8Status |= (1<<STATUS_PLED);
						}
						break;
     b9e:	00 00       	nop
     ba0:	0b c0       	rjmp	.+22     	; 0xbb8 <__stack+0x2b9>
						if(SPIBUFFER.u8Count == 3)
						{
							disablePLED();
							u8Status &= ~(1<<STATUS_PLED);
						}
						break;
     ba2:	00 00       	nop
     ba4:	09 c0       	rjmp	.+18     	; 0xbb8 <__stack+0x2b9>
									u8Duty = SPIBUFFER.au8Buffer[2];
								}
								setPWMDutyPercent(u8Duty);
							}
						}
						break;
     ba6:	00 00       	nop
     ba8:	07 c0       	rjmp	.+14     	; 0xbb8 <__stack+0x2b9>
								u8PLEDFadeDirection = 0;
							}
							
							u8PLEDFadeActive = 1;
						}
						break;
     baa:	00 00       	nop
     bac:	05 c0       	rjmp	.+10     	; 0xbb8 <__stack+0x2b9>
						if(SPIBUFFER.u8Count == 3)
						{
							enableAudio();
							u8Status |= (1<<STATUS_AUDIO);
						}
						break;
     bae:	00 00       	nop
     bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <__stack+0x2b9>
						if(SPIBUFFER.u8Count == 3)
						{
							standbyAudio();
							u8Status &= ~(1<<STATUS_AUDIO);
						}
						break;
     bb2:	00 00       	nop
     bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <__stack+0x2b9>
						case 0x23:
						if(SPIBUFFER.u8Count == 4)
						{
							setVolume(SPIBUFFER.au8Buffer[2]);
						}
						break;
     bb6:	00 00       	nop
	{
		SPIBUFFER.u8Count = 0;
		SPIBUFFER.spiState = READY;
	}
	#ifdef INT_OUT
	PORTD &= ~(1<<PORTD1);
     bb8:	8b e2       	ldi	r24, 0x2B	; 43
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	2b e2       	ldi	r18, 0x2B	; 43
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	f9 01       	movw	r30, r18
     bc2:	20 81       	ld	r18, Z
     bc4:	2d 7f       	andi	r18, 0xFD	; 253
     bc6:	fc 01       	movw	r30, r24
     bc8:	20 83       	st	Z, r18
	#endif
}
     bca:	00 00       	nop
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	ff 91       	pop	r31
     bd2:	ef 91       	pop	r30
     bd4:	bf 91       	pop	r27
     bd6:	af 91       	pop	r26
     bd8:	9f 91       	pop	r25
     bda:	8f 91       	pop	r24
     bdc:	7f 91       	pop	r23
     bde:	6f 91       	pop	r22
     be0:	5f 91       	pop	r21
     be2:	4f 91       	pop	r20
     be4:	3f 91       	pop	r19
     be6:	2f 91       	pop	r18
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	cf 90       	pop	r12
     bf4:	bf 90       	pop	r11
     bf6:	af 90       	pop	r10
     bf8:	0f 90       	pop	r0
     bfa:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     bfe:	0f 90       	pop	r0
     c00:	1f 90       	pop	r1
     c02:	18 95       	reti

00000c04 <main>:



int main(void)
{
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
	uint16_t i;
	
	portInit();
     c0c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <portInit>
	adcInit();
     c10:	0e 94 32 09 	call	0x1264	; 0x1264 <adcInit>
	initPWM(0);
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 88 08 	call	0x1110	; 0x1110 <initPWM>
	startPWM();
     c1c:	0e 94 b8 08 	call	0x1170	; 0x1170 <startPWM>
	spiInitBuffer(&SPIBUFFER);
     c20:	82 e5       	ldi	r24, 0x52	; 82
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	0e 94 ad 06 	call	0xd5a	; 0xd5a <spiInitBuffer>
	spiSlaveInit();
     c28:	0e 94 cd 06 	call	0xd9a	; 0xd9a <spiSlaveInit>
 	spiPcInt();
     c2c:	0e 94 00 07 	call	0xe00	; 0xe00 <spiPcInt>
	initRGBooster();
     c30:	0e 94 66 06 	call	0xccc	; 0xccc <initRGBooster>
	INT0_Init();
     c34:	0e 94 4b 06 	call	0xc96	; 0xc96 <INT0_Init>
	INT_5ms_Init();
     c38:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <INT_5ms_Init>

	wait_1ms(100);
     c3c:	84 e6       	ldi	r24, 0x64	; 100
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 ff 09 	call	0x13fe	; 0x13fe <wait_1ms>
	initAudio();
     c44:	0e 94 79 08 	call	0x10f2	; 0x10f2 <initAudio>


	DDRD |= (1<<DDRD1);
     c48:	8a e2       	ldi	r24, 0x2A	; 42
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	2a e2       	ldi	r18, 0x2A	; 42
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	f9 01       	movw	r30, r18
     c52:	20 81       	ld	r18, Z
     c54:	22 60       	ori	r18, 0x02	; 2
     c56:	fc 01       	movw	r30, r24
     c58:	20 83       	st	Z, r18
	#ifdef INT_OUT
	DDRD |= (1<<DDRD1);
     c5a:	8a e2       	ldi	r24, 0x2A	; 42
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	2a e2       	ldi	r18, 0x2A	; 42
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	f9 01       	movw	r30, r18
     c64:	20 81       	ld	r18, Z
     c66:	22 60       	ori	r18, 0x02	; 2
     c68:	fc 01       	movw	r30, r24
     c6a:	20 83       	st	Z, r18
	PORTD &= ~(1<<PORTD1);
     c6c:	8b e2       	ldi	r24, 0x2B	; 43
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	2b e2       	ldi	r18, 0x2B	; 43
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	f9 01       	movw	r30, r18
     c76:	20 81       	ld	r18, Z
     c78:	2d 7f       	andi	r18, 0xFD	; 253
     c7a:	fc 01       	movw	r30, r24
     c7c:	20 83       	st	Z, r18
	#endif
		
	sei();
     c7e:	78 94       	sei
		
	
    while (1) 
    {
		wait_1ms(1000);
     c80:	88 ee       	ldi	r24, 0xE8	; 232
     c82:	93 e0       	ldi	r25, 0x03	; 3
     c84:	0e 94 ff 09 	call	0x13fe	; 0x13fe <wait_1ms>
		ucByteIdx = 0;
     c88:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
		ucRGBIdx = 0;
     c8c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <ucRGBIdx>
		INT0_vect();
     c90:	0e 94 b0 01 	call	0x360	; 0x360 <__vector_1>
    }
     c94:	f5 cf       	rjmp	.-22     	; 0xc80 <main+0x7c>

00000c96 <INT0_Init>:
#include "utils.h"
#include "rgbooster.h"


void INT0_Init(void)
{
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
	EICRA |= (1<<ISC01); // interrupt on falling edge
     c9e:	89 e6       	ldi	r24, 0x69	; 105
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	29 e6       	ldi	r18, 0x69	; 105
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	f9 01       	movw	r30, r18
     ca8:	20 81       	ld	r18, Z
     caa:	22 60       	ori	r18, 0x02	; 2
     cac:	fc 01       	movw	r30, r24
     cae:	20 83       	st	Z, r18
	EIFR  = (1<<INTF0); // clear flag
     cb0:	8c e3       	ldi	r24, 0x3C	; 60
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	21 e0       	ldi	r18, 0x01	; 1
     cb6:	fc 01       	movw	r30, r24
     cb8:	20 83       	st	Z, r18
	EIMSK = (1<<INT0);  // INT1 enable
     cba:	8d e3       	ldi	r24, 0x3D	; 61
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	21 e0       	ldi	r18, 0x01	; 1
     cc0:	fc 01       	movw	r30, r24
     cc2:	20 83       	st	Z, r18
}
     cc4:	00 00       	nop
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <initRGBooster>:

void initRGBooster(void)
{
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
	DDR_DATA_LOW |= DATA_LOW_BITMASK; //RGB DATA LOWER NIBBLE -> OUTPUT
     cd4:	84 e2       	ldi	r24, 0x24	; 36
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	24 e2       	ldi	r18, 0x24	; 36
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	f9 01       	movw	r30, r18
     cde:	20 81       	ld	r18, Z
     ce0:	2f 60       	ori	r18, 0x0F	; 15
     ce2:	fc 01       	movw	r30, r24
     ce4:	20 83       	st	Z, r18
	PORT_DATA_LOW &= ~DATA_LOW_BITMASK; //RGB DATA LOWER NIBBLE -> LOW
     ce6:	85 e2       	ldi	r24, 0x25	; 37
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	25 e2       	ldi	r18, 0x25	; 37
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	f9 01       	movw	r30, r18
     cf0:	20 81       	ld	r18, Z
     cf2:	20 7f       	andi	r18, 0xF0	; 240
     cf4:	fc 01       	movw	r30, r24
     cf6:	20 83       	st	Z, r18
	DDR_DATA_HIGH |= DATA_HIGH_BITMASK; //RGB DATA HIGHER NIBBLE -> OUTPUT
     cf8:	81 e2       	ldi	r24, 0x21	; 33
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	21 e2       	ldi	r18, 0x21	; 33
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	f9 01       	movw	r30, r18
     d02:	20 81       	ld	r18, Z
     d04:	20 6f       	ori	r18, 0xF0	; 240
     d06:	fc 01       	movw	r30, r24
     d08:	20 83       	st	Z, r18
	PORT_DATA_HIGH &= ~DATA_HIGH_BITMASK; //RGB DATA HIGHER NIBBLE -> LOW
     d0a:	82 e2       	ldi	r24, 0x22	; 34
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	22 e2       	ldi	r18, 0x22	; 34
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	f9 01       	movw	r30, r18
     d14:	20 81       	ld	r18, Z
     d16:	2f 70       	andi	r18, 0x0F	; 15
     d18:	fc 01       	movw	r30, r24
     d1a:	20 83       	st	Z, r18

	DDR_CONTROL |= (1<<SEND); //SEND PIN -> OUTPUT
     d1c:	8a e2       	ldi	r24, 0x2A	; 42
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	2a e2       	ldi	r18, 0x2A	; 42
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	f9 01       	movw	r30, r18
     d26:	20 81       	ld	r18, Z
     d28:	28 60       	ori	r18, 0x08	; 8
     d2a:	fc 01       	movw	r30, r24
     d2c:	20 83       	st	Z, r18
	PORT_CONTROL &= ~(1<<SEND); //SEND PIN LOW
     d2e:	8b e2       	ldi	r24, 0x2B	; 43
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	2b e2       	ldi	r18, 0x2B	; 43
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	f9 01       	movw	r30, r18
     d38:	20 81       	ld	r18, Z
     d3a:	27 7f       	andi	r18, 0xF7	; 247
     d3c:	fc 01       	movw	r30, r24
     d3e:	20 83       	st	Z, r18
	DDR_CONTROL &= ~(1<<DONE_BUSY); //DONE BUSY PIN -> INPUT
     d40:	8a e2       	ldi	r24, 0x2A	; 42
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	2a e2       	ldi	r18, 0x2A	; 42
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	f9 01       	movw	r30, r18
     d4a:	20 81       	ld	r18, Z
     d4c:	2b 7f       	andi	r18, 0xFB	; 251
     d4e:	fc 01       	movw	r30, r24
     d50:	20 83       	st	Z, r18
     d52:	00 00       	nop
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <spiInitBuffer>:
#include <avr/io.h>
#include "spi.h"


void spiInitBuffer(SpiBuf_t* Buffer)
{
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <spiInitBuffer+0x6>
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	9a 83       	std	Y+2, r25	; 0x02
     d66:	89 83       	std	Y+1, r24	; 0x01
	Buffer->u8Count = 0;
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	9a 81       	ldd	r25, Y+2	; 0x02
     d6c:	80 5c       	subi	r24, 0xC0	; 192
     d6e:	9f 4f       	sbci	r25, 0xFF	; 255
     d70:	fc 01       	movw	r30, r24
     d72:	10 82       	st	Z, r1
	Buffer->u8ReadReturnCount = 0;
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	9a 81       	ldd	r25, Y+2	; 0x02
     d78:	8f 5b       	subi	r24, 0xBF	; 191
     d7a:	9f 4f       	sbci	r25, 0xFF	; 255
     d7c:	fc 01       	movw	r30, r24
     d7e:	10 82       	st	Z, r1
	Buffer->spiState = IDLE;
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	9a 81       	ldd	r25, Y+2	; 0x02
     d84:	8e 5b       	subi	r24, 0xBE	; 190
     d86:	9f 4f       	sbci	r25, 0xFF	; 255
     d88:	26 e0       	ldi	r18, 0x06	; 6
     d8a:	fc 01       	movw	r30, r24
     d8c:	20 83       	st	Z, r18
}
     d8e:	00 00       	nop
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <spiSlaveInit>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiSlaveInit(void)
{
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	1f 92       	push	r1
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t ucTemp;
	SPSR0 = 0;
     da4:	8d e4       	ldi	r24, 0x4D	; 77
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	fc 01       	movw	r30, r24
     daa:	10 82       	st	Z, r1
	SPCR0 = (1<<SPIE0);
     dac:	8c e4       	ldi	r24, 0x4C	; 76
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	20 e8       	ldi	r18, 0x80	; 128
     db2:	fc 01       	movw	r30, r24
     db4:	20 83       	st	Z, r18
	
	ucTemp = SPSR0;					
     db6:	8d e4       	ldi	r24, 0x4D	; 77
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	fc 01       	movw	r30, r24
     dbc:	80 81       	ld	r24, Z
     dbe:	89 83       	std	Y+1, r24	; 0x01
	ucTemp = SPDR0;
     dc0:	8e e4       	ldi	r24, 0x4E	; 78
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	fc 01       	movw	r30, r24
     dc6:	80 81       	ld	r24, Z
     dc8:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0;
     dca:	8e e4       	ldi	r24, 0x4E	; 78
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	fc 01       	movw	r30, r24
     dd0:	10 82       	st	Z, r1
	
	DDRB |= (1<<PINB6);				// MISO needs to be an output
     dd2:	84 e2       	ldi	r24, 0x24	; 36
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	24 e2       	ldi	r18, 0x24	; 36
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	f9 01       	movw	r30, r18
     ddc:	20 81       	ld	r18, Z
     dde:	20 64       	ori	r18, 0x40	; 64
     de0:	fc 01       	movw	r30, r24
     de2:	20 83       	st	Z, r18
	
	SPCR0 |= (1<<SPE0);
     de4:	8c e4       	ldi	r24, 0x4C	; 76
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	2c e4       	ldi	r18, 0x4C	; 76
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	f9 01       	movw	r30, r18
     dee:	20 81       	ld	r18, Z
     df0:	20 64       	ori	r18, 0x40	; 64
     df2:	fc 01       	movw	r30, r24
     df4:	20 83       	st	Z, r18
}
     df6:	00 00       	nop
     df8:	0f 90       	pop	r0
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <spiPcInt>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiPcInt(void)
{
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
	PCICR |= (1<<PCIE1);
     e08:	88 e6       	ldi	r24, 0x68	; 104
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	28 e6       	ldi	r18, 0x68	; 104
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	f9 01       	movw	r30, r18
     e12:	20 81       	ld	r18, Z
     e14:	22 60       	ori	r18, 0x02	; 2
     e16:	fc 01       	movw	r30, r24
     e18:	20 83       	st	Z, r18
	PCIFR = (1<<PCIF1);
     e1a:	8b e3       	ldi	r24, 0x3B	; 59
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	22 e0       	ldi	r18, 0x02	; 2
     e20:	fc 01       	movw	r30, r24
     e22:	20 83       	st	Z, r18
	PCMSK1 |= (1<<PCINT12);
     e24:	8c e6       	ldi	r24, 0x6C	; 108
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	2c e6       	ldi	r18, 0x6C	; 108
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	f9 01       	movw	r30, r18
     e2e:	20 81       	ld	r18, Z
     e30:	20 61       	ori	r18, 0x10	; 16
     e32:	fc 01       	movw	r30, r24
     e34:	20 83       	st	Z, r18
     e36:	00 00       	nop
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	08 95       	ret

00000e3e <portInit>:
 * @return 8bit analog value
 *****************************************************************************/
uint8_t adcGetValue(void)
{
	return(ADCH);
}
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	8a e2       	ldi	r24, 0x2A	; 42
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	2a e2       	ldi	r18, 0x2A	; 42
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	f9 01       	movw	r30, r18
     e50:	20 81       	ld	r18, Z
     e52:	20 63       	ori	r18, 0x30	; 48
     e54:	fc 01       	movw	r30, r24
     e56:	20 83       	st	Z, r18
     e58:	8b e2       	ldi	r24, 0x2B	; 43
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	2b e2       	ldi	r18, 0x2B	; 43
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	f9 01       	movw	r30, r18
     e62:	20 81       	ld	r18, Z
     e64:	20 62       	ori	r18, 0x20	; 32
     e66:	fc 01       	movw	r30, r24
     e68:	20 83       	st	Z, r18
     e6a:	8b e2       	ldi	r24, 0x2B	; 43
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	2b e2       	ldi	r18, 0x2B	; 43
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	f9 01       	movw	r30, r18
     e74:	20 81       	ld	r18, Z
     e76:	2f 7e       	andi	r18, 0xEF	; 239
     e78:	fc 01       	movw	r30, r24
     e7a:	20 83       	st	Z, r18
     e7c:	8a e2       	ldi	r24, 0x2A	; 42
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	2a e2       	ldi	r18, 0x2A	; 42
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	f9 01       	movw	r30, r18
     e86:	20 81       	ld	r18, Z
     e88:	20 68       	ori	r18, 0x80	; 128
     e8a:	fc 01       	movw	r30, r24
     e8c:	20 83       	st	Z, r18
     e8e:	8b e2       	ldi	r24, 0x2B	; 43
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	2b e2       	ldi	r18, 0x2B	; 43
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	f9 01       	movw	r30, r18
     e98:	20 81       	ld	r18, Z
     e9a:	20 68       	ori	r18, 0x80	; 128
     e9c:	fc 01       	movw	r30, r24
     e9e:	20 83       	st	Z, r18
     ea0:	8a e2       	ldi	r24, 0x2A	; 42
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	2a e2       	ldi	r18, 0x2A	; 42
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	f9 01       	movw	r30, r18
     eaa:	20 81       	ld	r18, Z
     eac:	2f 7b       	andi	r18, 0xBF	; 191
     eae:	fc 01       	movw	r30, r24
     eb0:	20 83       	st	Z, r18
     eb2:	8a e2       	ldi	r24, 0x2A	; 42
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	2a e2       	ldi	r18, 0x2A	; 42
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	f9 01       	movw	r30, r18
     ebc:	20 81       	ld	r18, Z
     ebe:	2c 7f       	andi	r18, 0xFC	; 252
     ec0:	fc 01       	movw	r30, r24
     ec2:	20 83       	st	Z, r18
     ec4:	8b e2       	ldi	r24, 0x2B	; 43
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	2b e2       	ldi	r18, 0x2B	; 43
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	f9 01       	movw	r30, r18
     ece:	20 81       	ld	r18, Z
     ed0:	21 60       	ori	r18, 0x01	; 1
     ed2:	fc 01       	movw	r30, r24
     ed4:	20 83       	st	Z, r18
     ed6:	81 e2       	ldi	r24, 0x21	; 33
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	21 e2       	ldi	r18, 0x21	; 33
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	f9 01       	movw	r30, r18
     ee0:	20 81       	ld	r18, Z
     ee2:	2e 7f       	andi	r18, 0xFE	; 254
     ee4:	fc 01       	movw	r30, r24
     ee6:	20 83       	st	Z, r18
     ee8:	82 e2       	ldi	r24, 0x22	; 34
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	22 e2       	ldi	r18, 0x22	; 34
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	f9 01       	movw	r30, r18
     ef2:	20 81       	ld	r18, Z
     ef4:	2e 7f       	andi	r18, 0xFE	; 254
     ef6:	fc 01       	movw	r30, r24
     ef8:	20 83       	st	Z, r18
     efa:	8e e7       	ldi	r24, 0x7E	; 126
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	2e e7       	ldi	r18, 0x7E	; 126
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	f9 01       	movw	r30, r18
     f04:	20 81       	ld	r18, Z
     f06:	21 60       	ori	r18, 0x01	; 1
     f08:	fc 01       	movw	r30, r24
     f0a:	20 83       	st	Z, r18
     f0c:	81 e2       	ldi	r24, 0x21	; 33
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	21 e2       	ldi	r18, 0x21	; 33
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	f9 01       	movw	r30, r18
     f16:	20 81       	ld	r18, Z
     f18:	21 7f       	andi	r18, 0xF1	; 241
     f1a:	fc 01       	movw	r30, r24
     f1c:	20 83       	st	Z, r18
     f1e:	82 e2       	ldi	r24, 0x22	; 34
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	22 e2       	ldi	r18, 0x22	; 34
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	f9 01       	movw	r30, r18
     f28:	20 81       	ld	r18, Z
     f2a:	2e 60       	ori	r18, 0x0E	; 14
     f2c:	fc 01       	movw	r30, r24
     f2e:	20 83       	st	Z, r18
     f30:	87 e2       	ldi	r24, 0x27	; 39
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	fc 01       	movw	r30, r24
     f36:	80 81       	ld	r24, Z
     f38:	87 e2       	ldi	r24, 0x27	; 39
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	fc 01       	movw	r30, r24
     f3e:	10 82       	st	Z, r1
     f40:	88 e2       	ldi	r24, 0x28	; 40
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	fc 01       	movw	r30, r24
     f46:	80 81       	ld	r24, Z
     f48:	88 e2       	ldi	r24, 0x28	; 40
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	2f ef       	ldi	r18, 0xFF	; 255
     f4e:	fc 01       	movw	r30, r24
     f50:	20 83       	st	Z, r18
     f52:	00 00       	nop
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <enablePLED>:
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	8b e2       	ldi	r24, 0x2B	; 43
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	2b e2       	ldi	r18, 0x2B	; 43
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	f9 01       	movw	r30, r18
     f6c:	20 81       	ld	r18, Z
     f6e:	2f 7d       	andi	r18, 0xDF	; 223
     f70:	fc 01       	movw	r30, r24
     f72:	20 83       	st	Z, r18
     f74:	00 00       	nop
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	08 95       	ret

00000f7c <disablePLED>:
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	8b e2       	ldi	r24, 0x2B	; 43
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	2b e2       	ldi	r18, 0x2B	; 43
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	f9 01       	movw	r30, r18
     f8e:	20 81       	ld	r18, Z
     f90:	20 62       	ori	r18, 0x20	; 32
     f92:	fc 01       	movw	r30, r24
     f94:	20 83       	st	Z, r18
     f96:	00 00       	nop
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	08 95       	ret

00000f9e <standbyAudio>:
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	8b e2       	ldi	r24, 0x2B	; 43
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	2b e2       	ldi	r18, 0x2B	; 43
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	f9 01       	movw	r30, r18
     fb0:	20 81       	ld	r18, Z
     fb2:	20 68       	ori	r18, 0x80	; 128
     fb4:	fc 01       	movw	r30, r24
     fb6:	20 83       	st	Z, r18
     fb8:	8a e2       	ldi	r24, 0x2A	; 42
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	2a e2       	ldi	r18, 0x2A	; 42
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	f9 01       	movw	r30, r18
     fc2:	20 81       	ld	r18, Z
     fc4:	20 68       	ori	r18, 0x80	; 128
     fc6:	fc 01       	movw	r30, r24
     fc8:	20 83       	st	Z, r18
     fca:	00 00       	nop
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	08 95       	ret

00000fd2 <enableAudio>:
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	8b e2       	ldi	r24, 0x2B	; 43
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	2b e2       	ldi	r18, 0x2B	; 43
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	f9 01       	movw	r30, r18
     fe4:	20 81       	ld	r18, Z
     fe6:	2f 77       	andi	r18, 0x7F	; 127
     fe8:	fc 01       	movw	r30, r24
     fea:	20 83       	st	Z, r18
     fec:	8a e2       	ldi	r24, 0x2A	; 42
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	2a e2       	ldi	r18, 0x2A	; 42
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	f9 01       	movw	r30, r18
     ff6:	20 81       	ld	r18, Z
     ff8:	20 68       	ori	r18, 0x80	; 128
     ffa:	fc 01       	movw	r30, r24
     ffc:	20 83       	st	Z, r18
     ffe:	00 00       	nop
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	08 95       	ret

00001006 <incVolume>:
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	00 d0       	rcall	.+0      	; 0x100c <incVolume+0x6>
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	8a 83       	std	Y+2, r24	; 0x02
    1012:	8b e2       	ldi	r24, 0x2B	; 43
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	2b e2       	ldi	r18, 0x2B	; 43
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	f9 01       	movw	r30, r18
    101c:	20 81       	ld	r18, Z
    101e:	20 64       	ori	r18, 0x40	; 64
    1020:	fc 01       	movw	r30, r24
    1022:	20 83       	st	Z, r18
    1024:	19 82       	std	Y+1, r1	; 0x01
    1026:	15 c0       	rjmp	.+42     	; 0x1052 <incVolume+0x4c>
    1028:	8a e2       	ldi	r24, 0x2A	; 42
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	2a e2       	ldi	r18, 0x2A	; 42
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	f9 01       	movw	r30, r18
    1032:	20 81       	ld	r18, Z
    1034:	20 64       	ori	r18, 0x40	; 64
    1036:	fc 01       	movw	r30, r24
    1038:	20 83       	st	Z, r18
    103a:	8a e2       	ldi	r24, 0x2A	; 42
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	2a e2       	ldi	r18, 0x2A	; 42
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	f9 01       	movw	r30, r18
    1044:	20 81       	ld	r18, Z
    1046:	2f 7b       	andi	r18, 0xBF	; 191
    1048:	fc 01       	movw	r30, r24
    104a:	20 83       	st	Z, r18
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	8f 5f       	subi	r24, 0xFF	; 255
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	99 81       	ldd	r25, Y+1	; 0x01
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	98 17       	cp	r25, r24
    1058:	38 f3       	brcs	.-50     	; 0x1028 <incVolume+0x22>
    105a:	00 00       	nop
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	08 95       	ret

00001066 <decVolume>:
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	00 d0       	rcall	.+0      	; 0x106c <decVolume+0x6>
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	8a 83       	std	Y+2, r24	; 0x02
    1072:	8b e2       	ldi	r24, 0x2B	; 43
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	2b e2       	ldi	r18, 0x2B	; 43
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	f9 01       	movw	r30, r18
    107c:	20 81       	ld	r18, Z
    107e:	2f 7b       	andi	r18, 0xBF	; 191
    1080:	fc 01       	movw	r30, r24
    1082:	20 83       	st	Z, r18
    1084:	19 82       	std	Y+1, r1	; 0x01
    1086:	15 c0       	rjmp	.+42     	; 0x10b2 <decVolume+0x4c>
    1088:	8a e2       	ldi	r24, 0x2A	; 42
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	2a e2       	ldi	r18, 0x2A	; 42
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	f9 01       	movw	r30, r18
    1092:	20 81       	ld	r18, Z
    1094:	20 64       	ori	r18, 0x40	; 64
    1096:	fc 01       	movw	r30, r24
    1098:	20 83       	st	Z, r18
    109a:	8a e2       	ldi	r24, 0x2A	; 42
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	2a e2       	ldi	r18, 0x2A	; 42
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	f9 01       	movw	r30, r18
    10a4:	20 81       	ld	r18, Z
    10a6:	2f 7b       	andi	r18, 0xBF	; 191
    10a8:	fc 01       	movw	r30, r24
    10aa:	20 83       	st	Z, r18
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	8f 5f       	subi	r24, 0xFF	; 255
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	99 81       	ldd	r25, Y+1	; 0x01
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	98 17       	cp	r25, r24
    10b8:	38 f3       	brcs	.-50     	; 0x1088 <decVolume+0x22>
    10ba:	00 00       	nop
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	08 95       	ret

000010c6 <setVolume>:
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	1f 92       	push	r1
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	81 34       	cpi	r24, 0x41	; 65
    10d6:	10 f0       	brcs	.+4      	; 0x10dc <setVolume+0x16>
    10d8:	80 e4       	ldi	r24, 0x40	; 64
    10da:	89 83       	std	Y+1, r24	; 0x01
    10dc:	80 e4       	ldi	r24, 0x40	; 64
    10de:	0e 94 33 08 	call	0x1066	; 0x1066 <decVolume>
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	0e 94 03 08 	call	0x1006	; 0x1006 <incVolume>
    10e8:	00 00       	nop
    10ea:	0f 90       	pop	r0
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	08 95       	ret

000010f2 <initAudio>:
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <enableAudio>
    10fe:	80 e4       	ldi	r24, 0x40	; 64
    1100:	0e 94 33 08 	call	0x1066	; 0x1066 <decVolume>
    1104:	0e 94 cf 07 	call	0xf9e	; 0xf9e <standbyAudio>
    1108:	00 00       	nop
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	08 95       	ret

00001110 <initPWM>:
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	00 d0       	rcall	.+0      	; 0x1116 <initPWM+0x6>
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	9a 83       	std	Y+2, r25	; 0x02
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	81 15       	cp	r24, r1
    1124:	92 40       	sbci	r25, 0x02	; 2
    1126:	20 f0       	brcs	.+8      	; 0x1130 <initPWM+0x20>
    1128:	8f ef       	ldi	r24, 0xFF	; 255
    112a:	91 e0       	ldi	r25, 0x01	; 1
    112c:	9a 83       	std	Y+2, r25	; 0x02
    112e:	89 83       	std	Y+1, r24	; 0x01
    1130:	80 e8       	ldi	r24, 0x80	; 128
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	22 e2       	ldi	r18, 0x22	; 34
    1136:	fc 01       	movw	r30, r24
    1138:	20 83       	st	Z, r18
    113a:	81 e8       	ldi	r24, 0x81	; 129
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	28 e0       	ldi	r18, 0x08	; 8
    1140:	fc 01       	movw	r30, r24
    1142:	20 83       	st	Z, r18
    1144:	84 e8       	ldi	r24, 0x84	; 132
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	fc 01       	movw	r30, r24
    114a:	11 82       	std	Z+1, r1	; 0x01
    114c:	10 82       	st	Z, r1
    114e:	8a e8       	ldi	r24, 0x8A	; 138
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	29 81       	ldd	r18, Y+1	; 0x01
    1154:	3a 81       	ldd	r19, Y+2	; 0x02
    1156:	fc 01       	movw	r30, r24
    1158:	31 83       	std	Z+1, r19	; 0x01
    115a:	20 83       	st	Z, r18
    115c:	8f e6       	ldi	r24, 0x6F	; 111
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	fc 01       	movw	r30, r24
    1162:	10 82       	st	Z, r1
    1164:	00 00       	nop
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	08 95       	ret

00001170 <startPWM>:
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	81 e8       	ldi	r24, 0x81	; 129
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	21 e8       	ldi	r18, 0x81	; 129
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	f9 01       	movw	r30, r18
    1182:	20 81       	ld	r18, Z
    1184:	21 60       	ori	r18, 0x01	; 1
    1186:	fc 01       	movw	r30, r24
    1188:	20 83       	st	Z, r18
    118a:	00 00       	nop
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret

00001192 <setPWMDutyPercent>:
    1192:	8f 92       	push	r8
    1194:	9f 92       	push	r9
    1196:	af 92       	push	r10
    1198:	bf 92       	push	r11
    119a:	cf 92       	push	r12
    119c:	df 92       	push	r13
    119e:	ef 92       	push	r14
    11a0:	ff 92       	push	r15
    11a2:	0f 93       	push	r16
    11a4:	1f 93       	push	r17
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	1f 92       	push	r1
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	85 36       	cpi	r24, 0x65	; 101
    11b6:	10 f0       	brcs	.+4      	; 0x11bc <setPWMDutyPercent+0x2a>
    11b8:	84 e6       	ldi	r24, 0x64	; 100
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	0f 2e       	mov	r0, r31
    11be:	fa e8       	ldi	r31, 0x8A	; 138
    11c0:	8f 2e       	mov	r8, r31
    11c2:	91 2c       	mov	r9, r1
    11c4:	f0 2d       	mov	r31, r0
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	88 2f       	mov	r24, r24
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	a0 e0       	ldi	r26, 0x00	; 0
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	1f 92       	push	r1
    11d2:	1f 92       	push	r1
    11d4:	21 e0       	ldi	r18, 0x01	; 1
    11d6:	2f 93       	push	r18
    11d8:	2f ef       	ldi	r18, 0xFF	; 255
    11da:	2f 93       	push	r18
    11dc:	a1 2c       	mov	r10, r1
    11de:	b1 2c       	mov	r11, r1
    11e0:	65 01       	movw	r12, r10
    11e2:	14 e6       	ldi	r17, 0x64	; 100
    11e4:	e1 2e       	mov	r14, r17
    11e6:	f1 2c       	mov	r15, r1
    11e8:	00 e0       	ldi	r16, 0x00	; 0
    11ea:	10 e0       	ldi	r17, 0x00	; 0
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	a9 01       	movw	r20, r18
    11f2:	bc 01       	movw	r22, r24
    11f4:	cd 01       	movw	r24, r26
    11f6:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <Map>
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	f4 01       	movw	r30, r8
    1208:	91 83       	std	Z+1, r25	; 0x01
    120a:	80 83       	st	Z, r24
    120c:	00 00       	nop
    120e:	0f 90       	pop	r0
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	ff 90       	pop	r15
    121a:	ef 90       	pop	r14
    121c:	df 90       	pop	r13
    121e:	cf 90       	pop	r12
    1220:	bf 90       	pop	r11
    1222:	af 90       	pop	r10
    1224:	9f 90       	pop	r9
    1226:	8f 90       	pop	r8
    1228:	08 95       	ret

0000122a <setPWMDuty>:
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	00 d0       	rcall	.+0      	; 0x1230 <setPWMDuty+0x6>
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	9a 83       	std	Y+2, r25	; 0x02
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	9a 81       	ldd	r25, Y+2	; 0x02
    123c:	81 15       	cp	r24, r1
    123e:	92 40       	sbci	r25, 0x02	; 2
    1240:	20 f0       	brcs	.+8      	; 0x124a <setPWMDuty+0x20>
    1242:	8f ef       	ldi	r24, 0xFF	; 255
    1244:	91 e0       	ldi	r25, 0x01	; 1
    1246:	9a 83       	std	Y+2, r25	; 0x02
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	8a e8       	ldi	r24, 0x8A	; 138
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	29 81       	ldd	r18, Y+1	; 0x01
    1250:	3a 81       	ldd	r19, Y+2	; 0x02
    1252:	fc 01       	movw	r30, r24
    1254:	31 83       	std	Z+1, r19	; 0x01
    1256:	20 83       	st	Z, r18
    1258:	00 00       	nop
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	08 95       	ret

00001264 <adcInit>:
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	81 e2       	ldi	r24, 0x21	; 33
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	21 e2       	ldi	r18, 0x21	; 33
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	f9 01       	movw	r30, r18
    1276:	20 81       	ld	r18, Z
    1278:	2e 7f       	andi	r18, 0xFE	; 254
    127a:	fc 01       	movw	r30, r24
    127c:	20 83       	st	Z, r18
    127e:	8e e7       	ldi	r24, 0x7E	; 126
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	2e e7       	ldi	r18, 0x7E	; 126
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	f9 01       	movw	r30, r18
    1288:	20 81       	ld	r18, Z
    128a:	21 60       	ori	r18, 0x01	; 1
    128c:	fc 01       	movw	r30, r24
    128e:	20 83       	st	Z, r18
    1290:	8c e7       	ldi	r24, 0x7C	; 124
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	20 e6       	ldi	r18, 0x60	; 96
    1296:	fc 01       	movw	r30, r24
    1298:	20 83       	st	Z, r18
    129a:	8a e7       	ldi	r24, 0x7A	; 122
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	27 e3       	ldi	r18, 0x37	; 55
    12a0:	fc 01       	movw	r30, r24
    12a2:	20 83       	st	Z, r18
    12a4:	8b e7       	ldi	r24, 0x7B	; 123
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	fc 01       	movw	r30, r24
    12aa:	10 82       	st	Z, r1
    12ac:	8a e7       	ldi	r24, 0x7A	; 122
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	2a e7       	ldi	r18, 0x7A	; 122
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	f9 01       	movw	r30, r18
    12b6:	20 81       	ld	r18, Z
    12b8:	20 68       	ori	r18, 0x80	; 128
    12ba:	fc 01       	movw	r30, r24
    12bc:	20 83       	st	Z, r18
    12be:	8a e7       	ldi	r24, 0x7A	; 122
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	2a e7       	ldi	r18, 0x7A	; 122
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	f9 01       	movw	r30, r18
    12c8:	20 81       	ld	r18, Z
    12ca:	20 64       	ori	r18, 0x40	; 64
    12cc:	fc 01       	movw	r30, r24
    12ce:	20 83       	st	Z, r18
    12d0:	00 00       	nop
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	08 95       	ret

000012d8 <adcGetTemperature>:

uint8_t adcGetTemperature(void)
{
    12d8:	af 92       	push	r10
    12da:	bf 92       	push	r11
    12dc:	cf 92       	push	r12
    12de:	df 92       	push	r13
    12e0:	ef 92       	push	r14
    12e2:	ff 92       	push	r15
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <adcGetTemperature+0x16>
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <adcGetTemperature+0x18>
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
	int32_t s32Temp;
	
	s32Temp = Map((int32_t)ADCH,0,255,-50,450);
    12f4:	89 e7       	ldi	r24, 0x79	; 121
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	fc 01       	movw	r30, r24
    12fa:	80 81       	ld	r24, Z
    12fc:	88 2f       	mov	r24, r24
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	a0 e0       	ldi	r26, 0x00	; 0
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	1f 92       	push	r1
    1306:	1f 92       	push	r1
    1308:	21 e0       	ldi	r18, 0x01	; 1
    130a:	2f 93       	push	r18
    130c:	22 ec       	ldi	r18, 0xC2	; 194
    130e:	2f 93       	push	r18
    1310:	0f 2e       	mov	r0, r31
    1312:	fe ec       	ldi	r31, 0xCE	; 206
    1314:	af 2e       	mov	r10, r31
    1316:	bb 24       	eor	r11, r11
    1318:	ba 94       	dec	r11
    131a:	cb 2c       	mov	r12, r11
    131c:	db 2c       	mov	r13, r11
    131e:	f0 2d       	mov	r31, r0
    1320:	e1 2c       	mov	r14, r1
    1322:	f1 2c       	mov	r15, r1
    1324:	87 01       	movw	r16, r14
    1326:	ea 94       	dec	r14
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	a9 01       	movw	r20, r18
    132e:	bc 01       	movw	r22, r24
    1330:	cd 01       	movw	r24, r26
    1332:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <Map>
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	9a 83       	std	Y+2, r25	; 0x02
    1346:	ab 83       	std	Y+3, r26	; 0x03
    1348:	bc 83       	std	Y+4, r27	; 0x04
	if(s32Temp<0)
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	9a 81       	ldd	r25, Y+2	; 0x02
    134e:	ab 81       	ldd	r26, Y+3	; 0x03
    1350:	bc 81       	ldd	r27, Y+4	; 0x04
    1352:	bb 23       	and	r27, r27
    1354:	2c f4       	brge	.+10     	; 0x1360 <adcGetTemperature+0x88>
	{
		s32Temp = 0;
    1356:	19 82       	std	Y+1, r1	; 0x01
    1358:	1a 82       	std	Y+2, r1	; 0x02
    135a:	1b 82       	std	Y+3, r1	; 0x03
    135c:	1c 82       	std	Y+4, r1	; 0x04
    135e:	12 c0       	rjmp	.+36     	; 0x1384 <adcGetTemperature+0xac>
	}
	else if(s32Temp>255)
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	9a 81       	ldd	r25, Y+2	; 0x02
    1364:	ab 81       	ldd	r26, Y+3	; 0x03
    1366:	bc 81       	ldd	r27, Y+4	; 0x04
    1368:	8f 3f       	cpi	r24, 0xFF	; 255
    136a:	91 05       	cpc	r25, r1
    136c:	a1 05       	cpc	r26, r1
    136e:	b1 05       	cpc	r27, r1
    1370:	49 f0       	breq	.+18     	; 0x1384 <adcGetTemperature+0xac>
    1372:	44 f0       	brlt	.+16     	; 0x1384 <adcGetTemperature+0xac>
	{
		s32Temp = 255;
    1374:	8f ef       	ldi	r24, 0xFF	; 255
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	a0 e0       	ldi	r26, 0x00	; 0
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	9a 83       	std	Y+2, r25	; 0x02
    1380:	ab 83       	std	Y+3, r26	; 0x03
    1382:	bc 83       	std	Y+4, r27	; 0x04
	}
	return (uint8_t)s32Temp;
    1384:	89 81       	ldd	r24, Y+1	; 0x01
}
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	ff 90       	pop	r15
    1398:	ef 90       	pop	r14
    139a:	df 90       	pop	r13
    139c:	cf 90       	pop	r12
    139e:	bf 90       	pop	r11
    13a0:	af 90       	pop	r10
    13a2:	08 95       	ret

000013a4 <INT_5ms_Init>:

///////////////////////////////////////////////////////////////////////////////
// UTILITIES
///////////////////////////////////////////////////////////////////////////////
void INT_5ms_Init(void)
{
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
	TCCR2A = (1<<WGM21);	// mode: CTC
    13ac:	80 eb       	ldi	r24, 0xB0	; 176
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	22 e0       	ldi	r18, 0x02	; 2
    13b2:	fc 01       	movw	r30, r24
    13b4:	20 83       	st	Z, r18
	TCCR2B = 0;				// mode: CTC, clock off
    13b6:	81 eb       	ldi	r24, 0xB1	; 177
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	fc 01       	movw	r30, r24
    13bc:	10 82       	st	Z, r1
	TCNT2 = 0;
    13be:	82 eb       	ldi	r24, 0xB2	; 178
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	fc 01       	movw	r30, r24
    13c4:	10 82       	st	Z, r1
	OCR2A = 96;
    13c6:	83 eb       	ldi	r24, 0xB3	; 179
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	20 e6       	ldi	r18, 0x60	; 96
    13cc:	fc 01       	movw	r30, r24
    13ce:	20 83       	st	Z, r18
	TIMSK2 = (1<<OCIE2A);
    13d0:	80 e7       	ldi	r24, 0x70	; 112
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	22 e0       	ldi	r18, 0x02	; 2
    13d6:	fc 01       	movw	r30, r24
    13d8:	20 83       	st	Z, r18
	TIFR2 = (1<<OCF2A);
    13da:	87 e3       	ldi	r24, 0x37	; 55
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	22 e0       	ldi	r18, 0x02	; 2
    13e0:	fc 01       	movw	r30, r24
    13e2:	20 83       	st	Z, r18

	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);
    13e4:	81 eb       	ldi	r24, 0xB1	; 177
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	21 eb       	ldi	r18, 0xB1	; 177
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	f9 01       	movw	r30, r18
    13ee:	20 81       	ld	r18, Z
    13f0:	27 60       	ori	r18, 0x07	; 7
    13f2:	fc 01       	movw	r30, r24
    13f4:	20 83       	st	Z, r18
}
    13f6:	00 00       	nop
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	08 95       	ret

000013fe <wait_1ms>:
 *
 * @param [in] uiFactor: 1ms multiplier
 * @return no return value
 *****************************************************************************/
void wait_1ms(uint16_t uiFactor)
{
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	00 d0       	rcall	.+0      	; 0x1404 <wait_1ms+0x6>
    1404:	00 d0       	rcall	.+0      	; 0x1406 <wait_1ms+0x8>
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	9c 83       	std	Y+4, r25	; 0x04
    140c:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t i;
	TCCR0A = (1<<WGM01);	// mode: CTC
    140e:	84 e4       	ldi	r24, 0x44	; 68
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	22 e0       	ldi	r18, 0x02	; 2
    1414:	fc 01       	movw	r30, r24
    1416:	20 83       	st	Z, r18
	TCCR0B = 0;				// mode: CTC
    1418:	85 e4       	ldi	r24, 0x45	; 69
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	fc 01       	movw	r30, r24
    141e:	10 82       	st	Z, r1
	TIFR0 =  (1<<OCF0A);	// only OCFA flag needs to be cleared
    1420:	85 e3       	ldi	r24, 0x35	; 53
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	22 e0       	ldi	r18, 0x02	; 2
    1426:	fc 01       	movw	r30, r24
    1428:	20 83       	st	Z, r18
	TIMSK0 = 0;				// no interrupts
    142a:	8e e6       	ldi	r24, 0x6E	; 110
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	fc 01       	movw	r30, r24
    1430:	10 82       	st	Z, r1
	TCNT0 = 0;
    1432:	86 e4       	ldi	r24, 0x46	; 70
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	fc 01       	movw	r30, r24
    1438:	10 82       	st	Z, r1
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
    143a:	87 e4       	ldi	r24, 0x47	; 71
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	2d e4       	ldi	r18, 0x4D	; 77
    1440:	fc 01       	movw	r30, r24
    1442:	20 83       	st	Z, r18
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
    1444:	85 e4       	ldi	r24, 0x45	; 69
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	25 e4       	ldi	r18, 0x45	; 69
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	f9 01       	movw	r30, r18
    144e:	20 81       	ld	r18, Z
    1450:	24 60       	ori	r18, 0x04	; 4
    1452:	fc 01       	movw	r30, r24
    1454:	20 83       	st	Z, r18
	
	for(i=0;i<uiFactor;i++)
    1456:	1a 82       	std	Y+2, r1	; 0x02
    1458:	19 82       	std	Y+1, r1	; 0x01
    145a:	15 c0       	rjmp	.+42     	; 0x1486 <wait_1ms+0x88>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
    145c:	00 00       	nop
    145e:	85 e3       	ldi	r24, 0x35	; 53
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	fc 01       	movw	r30, r24
    1464:	80 81       	ld	r24, Z
    1466:	88 2f       	mov	r24, r24
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	82 70       	andi	r24, 0x02	; 2
    146c:	99 27       	eor	r25, r25
    146e:	89 2b       	or	r24, r25
    1470:	b1 f3       	breq	.-20     	; 0x145e <wait_1ms+0x60>
		TIFR0 =  (1<<OCF0A);		// clear flag
    1472:	85 e3       	ldi	r24, 0x35	; 53
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	22 e0       	ldi	r18, 0x02	; 2
    1478:	fc 01       	movw	r30, r24
    147a:	20 83       	st	Z, r18
	TCNT0 = 0;
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
	
	for(i=0;i<uiFactor;i++)
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	9a 81       	ldd	r25, Y+2	; 0x02
    1480:	01 96       	adiw	r24, 0x01	; 1
    1482:	9a 83       	std	Y+2, r25	; 0x02
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	29 81       	ldd	r18, Y+1	; 0x01
    1488:	3a 81       	ldd	r19, Y+2	; 0x02
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	9c 81       	ldd	r25, Y+4	; 0x04
    148e:	28 17       	cp	r18, r24
    1490:	39 07       	cpc	r19, r25
    1492:	20 f3       	brcs	.-56     	; 0x145c <wait_1ms+0x5e>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
		TIFR0 =  (1<<OCF0A);		// clear flag
	}
	TCCR0B &= ~(0x07);	// set prescaler to 0 (stop timer)
    1494:	85 e4       	ldi	r24, 0x45	; 69
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	25 e4       	ldi	r18, 0x45	; 69
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	f9 01       	movw	r30, r18
    149e:	20 81       	ld	r18, Z
    14a0:	28 7f       	andi	r18, 0xF8	; 248
    14a2:	fc 01       	movw	r30, r24
    14a4:	20 83       	st	Z, r18
}
    14a6:	00 00       	nop
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	08 95       	ret

000014b6 <Map>:
 * @param [in] s32OutMin: minimal value of output range
 * @param [in] s32OutMax: maximal value of output range
 * @return data in new number range
 *****************************************************************************/
int32_t Map(int32_t s32Data, int32_t s32InMin, int32_t s32InMax, int32_t s32OutMin, int32_t s32OutMax)
{
    14b6:	af 92       	push	r10
    14b8:	bf 92       	push	r11
    14ba:	cf 92       	push	r12
    14bc:	df 92       	push	r13
    14be:	ef 92       	push	r14
    14c0:	ff 92       	push	r15
    14c2:	0f 93       	push	r16
    14c4:	1f 93       	push	r17
    14c6:	cf 93       	push	r28
    14c8:	df 93       	push	r29
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	60 97       	sbiw	r28, 0x10	; 16
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	de bf       	out	0x3e, r29	; 62
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	cd bf       	out	0x3d, r28	; 61
    14da:	69 83       	std	Y+1, r22	; 0x01
    14dc:	7a 83       	std	Y+2, r23	; 0x02
    14de:	8b 83       	std	Y+3, r24	; 0x03
    14e0:	9c 83       	std	Y+4, r25	; 0x04
    14e2:	2d 83       	std	Y+5, r18	; 0x05
    14e4:	3e 83       	std	Y+6, r19	; 0x06
    14e6:	4f 83       	std	Y+7, r20	; 0x07
    14e8:	58 87       	std	Y+8, r21	; 0x08
    14ea:	e9 86       	std	Y+9, r14	; 0x09
    14ec:	fa 86       	std	Y+10, r15	; 0x0a
    14ee:	0b 87       	std	Y+11, r16	; 0x0b
    14f0:	1c 87       	std	Y+12, r17	; 0x0c
    14f2:	ad 86       	std	Y+13, r10	; 0x0d
    14f4:	be 86       	std	Y+14, r11	; 0x0e
    14f6:	cf 86       	std	Y+15, r12	; 0x0f
    14f8:	d8 8a       	std	Y+16, r13	; 0x10
	return((s32Data-s32InMin)*(s32OutMax-s32OutMin)/(s32InMax-s32InMin)+s32OutMin);
    14fa:	29 81       	ldd	r18, Y+1	; 0x01
    14fc:	3a 81       	ldd	r19, Y+2	; 0x02
    14fe:	4b 81       	ldd	r20, Y+3	; 0x03
    1500:	5c 81       	ldd	r21, Y+4	; 0x04
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	9e 81       	ldd	r25, Y+6	; 0x06
    1506:	af 81       	ldd	r26, Y+7	; 0x07
    1508:	b8 85       	ldd	r27, Y+8	; 0x08
    150a:	79 01       	movw	r14, r18
    150c:	8a 01       	movw	r16, r20
    150e:	e8 1a       	sub	r14, r24
    1510:	f9 0a       	sbc	r15, r25
    1512:	0a 0b       	sbc	r16, r26
    1514:	1b 0b       	sbc	r17, r27
    1516:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1518:	3e 8d       	ldd	r19, Y+30	; 0x1e
    151a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    151c:	58 a1       	ldd	r21, Y+32	; 0x20
    151e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1520:	9e 85       	ldd	r25, Y+14	; 0x0e
    1522:	af 85       	ldd	r26, Y+15	; 0x0f
    1524:	b8 89       	ldd	r27, Y+16	; 0x10
    1526:	59 01       	movw	r10, r18
    1528:	6a 01       	movw	r12, r20
    152a:	a8 1a       	sub	r10, r24
    152c:	b9 0a       	sbc	r11, r25
    152e:	ca 0a       	sbc	r12, r26
    1530:	db 0a       	sbc	r13, r27
    1532:	d6 01       	movw	r26, r12
    1534:	c5 01       	movw	r24, r10
    1536:	a8 01       	movw	r20, r16
    1538:	97 01       	movw	r18, r14
    153a:	bc 01       	movw	r22, r24
    153c:	cd 01       	movw	r24, r26
    153e:	0e 94 17 0b 	call	0x162e	; 0x162e <__mulsi3>
    1542:	7b 01       	movw	r14, r22
    1544:	8c 01       	movw	r16, r24
    1546:	29 85       	ldd	r18, Y+9	; 0x09
    1548:	3a 85       	ldd	r19, Y+10	; 0x0a
    154a:	4b 85       	ldd	r20, Y+11	; 0x0b
    154c:	5c 85       	ldd	r21, Y+12	; 0x0c
    154e:	8d 81       	ldd	r24, Y+5	; 0x05
    1550:	9e 81       	ldd	r25, Y+6	; 0x06
    1552:	af 81       	ldd	r26, Y+7	; 0x07
    1554:	b8 85       	ldd	r27, Y+8	; 0x08
    1556:	28 1b       	sub	r18, r24
    1558:	39 0b       	sbc	r19, r25
    155a:	4a 0b       	sbc	r20, r26
    155c:	5b 0b       	sbc	r21, r27
    155e:	c8 01       	movw	r24, r16
    1560:	b7 01       	movw	r22, r14
    1562:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__divmodsi4>
    1566:	da 01       	movw	r26, r20
    1568:	c9 01       	movw	r24, r18
    156a:	9c 01       	movw	r18, r24
    156c:	ad 01       	movw	r20, r26
    156e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1570:	9e 85       	ldd	r25, Y+14	; 0x0e
    1572:	af 85       	ldd	r26, Y+15	; 0x0f
    1574:	b8 89       	ldd	r27, Y+16	; 0x10
    1576:	82 0f       	add	r24, r18
    1578:	93 1f       	adc	r25, r19
    157a:	a4 1f       	adc	r26, r20
    157c:	b5 1f       	adc	r27, r21
}
    157e:	bc 01       	movw	r22, r24
    1580:	cd 01       	movw	r24, r26
    1582:	60 96       	adiw	r28, 0x10	; 16
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	0f 91       	pop	r16
    1596:	ff 90       	pop	r15
    1598:	ef 90       	pop	r14
    159a:	df 90       	pop	r13
    159c:	cf 90       	pop	r12
    159e:	bf 90       	pop	r11
    15a0:	af 90       	pop	r10
    15a2:	08 95       	ret

000015a4 <CRC8>:

uint8_t CRC8(uint8_t* au8Data, uint8_t u8Length)
{
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	28 97       	sbiw	r28, 0x08	; 8
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	de bf       	out	0x3e, r29	; 62
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	cd bf       	out	0x3d, r28	; 61
    15b8:	9f 83       	std	Y+7, r25	; 0x07
    15ba:	8e 83       	std	Y+6, r24	; 0x06
    15bc:	68 87       	std	Y+8, r22	; 0x08
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;
    15be:	19 82       	std	Y+1, r1	; 0x01

	for(i=0;i<u8Length;i++)
    15c0:	1a 82       	std	Y+2, r1	; 0x02
    15c2:	27 c0       	rjmp	.+78     	; 0x1612 <CRC8+0x6e>
	{
		u8InByte = au8Data[i];
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	88 2f       	mov	r24, r24
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	2e 81       	ldd	r18, Y+6	; 0x06
    15cc:	3f 81       	ldd	r19, Y+7	; 0x07
    15ce:	82 0f       	add	r24, r18
    15d0:	93 1f       	adc	r25, r19
    15d2:	fc 01       	movw	r30, r24
    15d4:	80 81       	ld	r24, Z
    15d6:	8c 83       	std	Y+4, r24	; 0x04
		for(j=0;j<8;j++)
    15d8:	1b 82       	std	Y+3, r1	; 0x03
    15da:	15 c0       	rjmp	.+42     	; 0x1606 <CRC8+0x62>
		{
			u8Temp = (u8CRC^u8InByte)&0x80;
    15dc:	99 81       	ldd	r25, Y+1	; 0x01
    15de:	8c 81       	ldd	r24, Y+4	; 0x04
    15e0:	89 27       	eor	r24, r25
    15e2:	80 78       	andi	r24, 0x80	; 128
    15e4:	8d 83       	std	Y+5, r24	; 0x05
			u8CRC <<= 1;
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	88 0f       	add	r24, r24
    15ea:	89 83       	std	Y+1, r24	; 0x01
			if(u8Temp!=0)
    15ec:	8d 81       	ldd	r24, Y+5	; 0x05
    15ee:	88 23       	and	r24, r24
    15f0:	21 f0       	breq	.+8      	; 0x15fa <CRC8+0x56>
			{
				u8CRC ^= 0x07;
    15f2:	99 81       	ldd	r25, Y+1	; 0x01
    15f4:	87 e0       	ldi	r24, 0x07	; 7
    15f6:	89 27       	eor	r24, r25
    15f8:	89 83       	std	Y+1, r24	; 0x01
			}
			u8InByte<<=1;
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	88 0f       	add	r24, r24
    15fe:	8c 83       	std	Y+4, r24	; 0x04
	u8CRC = 0;

	for(i=0;i<u8Length;i++)
	{
		u8InByte = au8Data[i];
		for(j=0;j<8;j++)
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	8f 5f       	subi	r24, 0xFF	; 255
    1604:	8b 83       	std	Y+3, r24	; 0x03
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	88 30       	cpi	r24, 0x08	; 8
    160a:	40 f3       	brcs	.-48     	; 0x15dc <CRC8+0x38>
{
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;

	for(i=0;i<u8Length;i++)
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	8f 5f       	subi	r24, 0xFF	; 255
    1610:	8a 83       	std	Y+2, r24	; 0x02
    1612:	9a 81       	ldd	r25, Y+2	; 0x02
    1614:	88 85       	ldd	r24, Y+8	; 0x08
    1616:	98 17       	cp	r25, r24
    1618:	a8 f2       	brcs	.-86     	; 0x15c4 <CRC8+0x20>
			}
			u8InByte<<=1;
		}
	}

	return u8CRC;
    161a:	89 81       	ldd	r24, Y+1	; 0x01
}
    161c:	28 96       	adiw	r28, 0x08	; 8
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	cd bf       	out	0x3d, r28	; 61
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	08 95       	ret

0000162e <__mulsi3>:
    162e:	db 01       	movw	r26, r22
    1630:	8f 93       	push	r24
    1632:	9f 93       	push	r25
    1634:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__muluhisi3>
    1638:	bf 91       	pop	r27
    163a:	af 91       	pop	r26
    163c:	a2 9f       	mul	r26, r18
    163e:	80 0d       	add	r24, r0
    1640:	91 1d       	adc	r25, r1
    1642:	a3 9f       	mul	r26, r19
    1644:	90 0d       	add	r25, r0
    1646:	b2 9f       	mul	r27, r18
    1648:	90 0d       	add	r25, r0
    164a:	11 24       	eor	r1, r1
    164c:	08 95       	ret

0000164e <__udivmodhi4>:
    164e:	aa 1b       	sub	r26, r26
    1650:	bb 1b       	sub	r27, r27
    1652:	51 e1       	ldi	r21, 0x11	; 17
    1654:	07 c0       	rjmp	.+14     	; 0x1664 <__udivmodhi4_ep>

00001656 <__udivmodhi4_loop>:
    1656:	aa 1f       	adc	r26, r26
    1658:	bb 1f       	adc	r27, r27
    165a:	a6 17       	cp	r26, r22
    165c:	b7 07       	cpc	r27, r23
    165e:	10 f0       	brcs	.+4      	; 0x1664 <__udivmodhi4_ep>
    1660:	a6 1b       	sub	r26, r22
    1662:	b7 0b       	sbc	r27, r23

00001664 <__udivmodhi4_ep>:
    1664:	88 1f       	adc	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	5a 95       	dec	r21
    166a:	a9 f7       	brne	.-22     	; 0x1656 <__udivmodhi4_loop>
    166c:	80 95       	com	r24
    166e:	90 95       	com	r25
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	08 95       	ret

00001676 <__divmodsi4>:
    1676:	05 2e       	mov	r0, r21
    1678:	97 fb       	bst	r25, 7
    167a:	1e f4       	brtc	.+6      	; 0x1682 <__divmodsi4+0xc>
    167c:	00 94       	com	r0
    167e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__negsi2>
    1682:	57 fd       	sbrc	r21, 7
    1684:	07 d0       	rcall	.+14     	; 0x1694 <__divmodsi4_neg2>
    1686:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__udivmodsi4>
    168a:	07 fc       	sbrc	r0, 7
    168c:	03 d0       	rcall	.+6      	; 0x1694 <__divmodsi4_neg2>
    168e:	4e f4       	brtc	.+18     	; 0x16a2 <__divmodsi4_exit>
    1690:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__negsi2>

00001694 <__divmodsi4_neg2>:
    1694:	50 95       	com	r21
    1696:	40 95       	com	r20
    1698:	30 95       	com	r19
    169a:	21 95       	neg	r18
    169c:	3f 4f       	sbci	r19, 0xFF	; 255
    169e:	4f 4f       	sbci	r20, 0xFF	; 255
    16a0:	5f 4f       	sbci	r21, 0xFF	; 255

000016a2 <__divmodsi4_exit>:
    16a2:	08 95       	ret

000016a4 <__negsi2>:
    16a4:	90 95       	com	r25
    16a6:	80 95       	com	r24
    16a8:	70 95       	com	r23
    16aa:	61 95       	neg	r22
    16ac:	7f 4f       	sbci	r23, 0xFF	; 255
    16ae:	8f 4f       	sbci	r24, 0xFF	; 255
    16b0:	9f 4f       	sbci	r25, 0xFF	; 255
    16b2:	08 95       	ret

000016b4 <__tablejump2__>:
    16b4:	ee 0f       	add	r30, r30
    16b6:	ff 1f       	adc	r31, r31
    16b8:	05 90       	lpm	r0, Z+
    16ba:	f4 91       	lpm	r31, Z
    16bc:	e0 2d       	mov	r30, r0
    16be:	09 94       	ijmp

000016c0 <__muluhisi3>:
    16c0:	0e 94 8d 0b 	call	0x171a	; 0x171a <__umulhisi3>
    16c4:	a5 9f       	mul	r26, r21
    16c6:	90 0d       	add	r25, r0
    16c8:	b4 9f       	mul	r27, r20
    16ca:	90 0d       	add	r25, r0
    16cc:	a4 9f       	mul	r26, r20
    16ce:	80 0d       	add	r24, r0
    16d0:	91 1d       	adc	r25, r1
    16d2:	11 24       	eor	r1, r1
    16d4:	08 95       	ret

000016d6 <__udivmodsi4>:
    16d6:	a1 e2       	ldi	r26, 0x21	; 33
    16d8:	1a 2e       	mov	r1, r26
    16da:	aa 1b       	sub	r26, r26
    16dc:	bb 1b       	sub	r27, r27
    16de:	fd 01       	movw	r30, r26
    16e0:	0d c0       	rjmp	.+26     	; 0x16fc <__udivmodsi4_ep>

000016e2 <__udivmodsi4_loop>:
    16e2:	aa 1f       	adc	r26, r26
    16e4:	bb 1f       	adc	r27, r27
    16e6:	ee 1f       	adc	r30, r30
    16e8:	ff 1f       	adc	r31, r31
    16ea:	a2 17       	cp	r26, r18
    16ec:	b3 07       	cpc	r27, r19
    16ee:	e4 07       	cpc	r30, r20
    16f0:	f5 07       	cpc	r31, r21
    16f2:	20 f0       	brcs	.+8      	; 0x16fc <__udivmodsi4_ep>
    16f4:	a2 1b       	sub	r26, r18
    16f6:	b3 0b       	sbc	r27, r19
    16f8:	e4 0b       	sbc	r30, r20
    16fa:	f5 0b       	sbc	r31, r21

000016fc <__udivmodsi4_ep>:
    16fc:	66 1f       	adc	r22, r22
    16fe:	77 1f       	adc	r23, r23
    1700:	88 1f       	adc	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	1a 94       	dec	r1
    1706:	69 f7       	brne	.-38     	; 0x16e2 <__udivmodsi4_loop>
    1708:	60 95       	com	r22
    170a:	70 95       	com	r23
    170c:	80 95       	com	r24
    170e:	90 95       	com	r25
    1710:	9b 01       	movw	r18, r22
    1712:	ac 01       	movw	r20, r24
    1714:	bd 01       	movw	r22, r26
    1716:	cf 01       	movw	r24, r30
    1718:	08 95       	ret

0000171a <__umulhisi3>:
    171a:	a2 9f       	mul	r26, r18
    171c:	b0 01       	movw	r22, r0
    171e:	b3 9f       	mul	r27, r19
    1720:	c0 01       	movw	r24, r0
    1722:	a3 9f       	mul	r26, r19
    1724:	70 0d       	add	r23, r0
    1726:	81 1d       	adc	r24, r1
    1728:	11 24       	eor	r1, r1
    172a:	91 1d       	adc	r25, r1
    172c:	b2 9f       	mul	r27, r18
    172e:	70 0d       	add	r23, r0
    1730:	81 1d       	adc	r24, r1
    1732:	11 24       	eor	r1, r1
    1734:	91 1d       	adc	r25, r1
    1736:	08 95       	ret

00001738 <_exit>:
    1738:	f8 94       	cli

0000173a <__stop_program>:
    173a:	ff cf       	rjmp	.-2      	; 0x173a <__stop_program>
