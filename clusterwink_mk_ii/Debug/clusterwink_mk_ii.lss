
clusterwink_mk_ii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000ec6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e52  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800100  00800100  00000ec6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ec6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ef8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e4f  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f7  00000000  00000000  00001e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aed  00000000  00000000  00002896  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c0  00000000  00000000  00003384  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fc  00000000  00000000  00003844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e5  00000000  00000000  00003e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004825  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_5>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_19>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  68:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  6c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  70:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  74:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  78:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  7c:	90 00       	.word	0x0090	; ????
  7e:	a9 00       	.word	0x00a9	; ????
  80:	c2 00       	.word	0x00c2	; ????
  82:	34 01       	movw	r6, r8
  84:	4f 01       	movw	r8, r30
  86:	4f 01       	movw	r8, r30
  88:	4f 01       	movw	r8, r30

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_clear_bss>:
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a5 34       	cpi	r26, 0x45	; 69
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 36 02 	call	0x46c	; 0x46c <main>
  aa:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <__vector_19>:
volatile uint8_t u8Status = 0x00;
volatile uint8_t u8Duty = 0;
//volatile uint8_t u8Temperature = 0x33;

ISR(SPI_STC_vect)
{
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	1f 92       	push	r1
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8spiData = SPDR0;
  e0:	8e e4       	ldi	r24, 0x4E	; 78
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	fc 01       	movw	r30, r24
  e6:	80 81       	ld	r24, Z
  e8:	89 83       	std	Y+1, r24	; 0x01
	
	//PORTB |= (1<<PINB1);
	
	SPDR0 = 0;
  ea:	8e e4       	ldi	r24, 0x4E	; 78
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	fc 01       	movw	r30, r24
  f0:	10 82       	st	Z, r1

	switch(SPIBUFFER.spiState)
  f2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <_edata+0x42>
  f6:	88 2f       	mov	r24, r24
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	09 2e       	mov	r0, r25
  fc:	00 0c       	add	r0, r0
  fe:	aa 0b       	sbc	r26, r26
 100:	bb 0b       	sbc	r27, r27
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	26 e0       	ldi	r18, 0x06	; 6
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	84 1b       	sub	r24, r20
 10c:	95 0b       	sbc	r25, r21
 10e:	28 17       	cp	r18, r24
 110:	39 07       	cpc	r19, r25
 112:	08 f4       	brcc	.+2      	; 0x116 <__vector_19+0x64>
 114:	c9 c0       	rjmp	.+402    	; 0x2a8 <__vector_19+0x1f6>
 116:	82 5c       	subi	r24, 0xC2	; 194
 118:	9f 4f       	sbci	r25, 0xFF	; 255
 11a:	fc 01       	movw	r30, r24
 11c:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__tablejump2__>
	{
		case READY:
			if(u8spiData>=3)
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	83 30       	cpi	r24, 0x03	; 3
 124:	90 f0       	brcs	.+36     	; 0x14a <__vector_19+0x98>
			{
				SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
 126:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 12a:	88 2f       	mov	r24, r24
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	80 50       	subi	r24, 0x00	; 0
 130:	9f 4f       	sbci	r25, 0xFF	; 255
 132:	29 81       	ldd	r18, Y+1	; 0x01
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18
				SPIBUFFER.u8Count++;
 138:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <_edata+0x40>
				SPIBUFFER.spiState = WRITE;
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <_edata+0x42>
			}
			else
			{
				SPIBUFFER.spiState = READ;
			}
		break;
 148:	af c0       	rjmp	.+350    	; 0x2a8 <__vector_19+0x1f6>
				SPIBUFFER.u8Count++;
				SPIBUFFER.spiState = WRITE;
			}
			else
			{
				SPIBUFFER.spiState = READ;
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <_edata+0x42>
			}
		break;
 150:	ab c0       	rjmp	.+342    	; 0x2a8 <__vector_19+0x1f6>

		case WRITE:
			SPIBUFFER.au8Buffer[SPIBUFFER.u8Count] = u8spiData;
 152:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 156:	88 2f       	mov	r24, r24
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	80 50       	subi	r24, 0x00	; 0
 15c:	9f 4f       	sbci	r25, 0xFF	; 255
 15e:	29 81       	ldd	r18, Y+1	; 0x01
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
			SPIBUFFER.u8Count++;
 164:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <_edata+0x40>
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
 16e:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <_edata+0x40>
 172:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 176:	98 17       	cp	r25, r24
 178:	08 f4       	brcc	.+2      	; 0x17c <__vector_19+0xca>
 17a:	93 c0       	rjmp	.+294    	; 0x2a2 <__vector_19+0x1f0>
			{
				SPIBUFFER.spiState = DONE_WRITE;
 17c:	84 e0       	ldi	r24, 0x04	; 4
 17e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <_edata+0x42>
			}
		break;
 182:	8f c0       	rjmp	.+286    	; 0x2a2 <__vector_19+0x1f0>

		case READ:
			SPIBUFFER.u8Count = 0;
 184:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <_edata+0x40>
			
			switch(u8spiData)
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	88 2f       	mov	r24, r24
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	82 3c       	cpi	r24, 0xC2	; 194
 190:	91 05       	cpc	r25, r1
 192:	39 f1       	breq	.+78     	; 0x1e2 <__vector_19+0x130>
 194:	83 3c       	cpi	r24, 0xC3	; 195
 196:	91 05       	cpc	r25, r1
 198:	09 f4       	brne	.+2      	; 0x19c <__vector_19+0xea>
 19a:	42 c0       	rjmp	.+132    	; 0x220 <__vector_19+0x16e>
 19c:	81 3c       	cpi	r24, 0xC1	; 193
 19e:	91 05       	cpc	r25, r1
 1a0:	09 f0       	breq	.+2      	; 0x1a4 <__vector_19+0xf2>
 1a2:	5d c0       	rjmp	.+186    	; 0x25e <__vector_19+0x1ac>
			{
				case 0xC1:
					SPDR0 = 0x01;
 1a4:	8e e4       	ldi	r24, 0x4E	; 78
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	fc 01       	movw	r30, r24
 1ac:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
 1ae:	84 e0       	ldi	r24, 0x04	; 4
 1b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					SPIBUFFER.au8Buffer[1] = u8spiData;
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
 1b6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_edata+0x1>
					SPIBUFFER.au8Buffer[2] = u8Status;
 1ba:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8Status>
 1be:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
 1c2:	63 e0       	ldi	r22, 0x03	; 3
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e 94 71 06 	call	0xce2	; 0xce2 <CRC8>
 1cc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_edata+0x3>
					SPIBUFFER.u8Count = 4;
 1d0:	84 e0       	ldi	r24, 0x04	; 4
 1d2:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <_edata+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
 1d6:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <_edata+0x41>
					SPIBUFFER.spiState = READ_RETURN;
 1da:	83 e0       	ldi	r24, 0x03	; 3
 1dc:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <_edata+0x42>
				break;
 1e0:	42 c0       	rjmp	.+132    	; 0x266 <__vector_19+0x1b4>
				
				case 0xC2:
					SPDR0 = 0x01;
 1e2:	8e e4       	ldi	r24, 0x4E	; 78
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	fc 01       	movw	r30, r24
 1ea:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
 1ec:	84 e0       	ldi	r24, 0x04	; 4
 1ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					SPIBUFFER.au8Buffer[1] = u8spiData;
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_edata+0x1>
					SPIBUFFER.au8Buffer[2] = u8Duty;
 1f8:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8Duty>
 1fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
 200:	63 e0       	ldi	r22, 0x03	; 3
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 71 06 	call	0xce2	; 0xce2 <CRC8>
 20a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_edata+0x3>
					SPIBUFFER.u8Count = 4;
 20e:	84 e0       	ldi	r24, 0x04	; 4
 210:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <_edata+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
 214:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <_edata+0x41>
					SPIBUFFER.spiState = READ_RETURN;
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <_edata+0x42>
				break;
 21e:	23 c0       	rjmp	.+70     	; 0x266 <__vector_19+0x1b4>
				
				case 0xC3:
					SPDR0 = 0x01;
 220:	8e e4       	ldi	r24, 0x4E	; 78
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	21 e0       	ldi	r18, 0x01	; 1
 226:	fc 01       	movw	r30, r24
 228:	20 83       	st	Z, r18
					SPIBUFFER.au8Buffer[0] = 4;
 22a:	84 e0       	ldi	r24, 0x04	; 4
 22c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					SPIBUFFER.au8Buffer[1] = u8spiData;
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_edata+0x1>
					SPIBUFFER.au8Buffer[2] = adcGetTemperature();
 236:	0e 94 38 05 	call	0xa70	; 0xa70 <adcGetTemperature>
 23a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
					SPIBUFFER.au8Buffer[3] = CRC8(&SPIBUFFER.au8Buffer[0],3);
 23e:	63 e0       	ldi	r22, 0x03	; 3
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	0e 94 71 06 	call	0xce2	; 0xce2 <CRC8>
 248:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_edata+0x3>
					SPIBUFFER.u8Count = 4;
 24c:	84 e0       	ldi	r24, 0x04	; 4
 24e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <_edata+0x40>
					SPIBUFFER.u8ReadReturnCount = 0;
 252:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <_edata+0x41>
					SPIBUFFER.spiState = READ_RETURN;
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <_edata+0x42>
				break;
 25c:	04 c0       	rjmp	.+8      	; 0x266 <__vector_19+0x1b4>
				
				default:
					SPIBUFFER.spiState = IDLE;
 25e:	86 e0       	ldi	r24, 0x06	; 6
 260:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <_edata+0x42>
				break;
 264:	00 00       	nop
			}
		break;
 266:	20 c0       	rjmp	.+64     	; 0x2a8 <__vector_19+0x1f6>
		
		case READ_RETURN:
			SPDR0 = SPIBUFFER.au8Buffer[SPIBUFFER.u8ReadReturnCount];
 268:	8e e4       	ldi	r24, 0x4E	; 78
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <_edata+0x41>
 270:	22 2f       	mov	r18, r18
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	20 50       	subi	r18, 0x00	; 0
 276:	3f 4f       	sbci	r19, 0xFF	; 255
 278:	f9 01       	movw	r30, r18
 27a:	20 81       	ld	r18, Z
 27c:	fc 01       	movw	r30, r24
 27e:	20 83       	st	Z, r18
			SPIBUFFER.u8ReadReturnCount++;
 280:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <_edata+0x41>
 284:	8f 5f       	subi	r24, 0xFF	; 255
 286:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_edata+0x41>
			if(SPIBUFFER.u8Count == SPIBUFFER.u8ReadReturnCount)
 28a:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <_edata+0x40>
 28e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <_edata+0x41>
 292:	98 17       	cp	r25, r24
 294:	41 f4       	brne	.+16     	; 0x2a6 <__vector_19+0x1f4>
			{
				SPIBUFFER.spiState = DONE_READ;
 296:	85 e0       	ldi	r24, 0x05	; 5
 298:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <_edata+0x42>
			}
		break;
 29c:	04 c0       	rjmp	.+8      	; 0x2a6 <__vector_19+0x1f4>
		
		break;

		case IDLE:

		break;
 29e:	00 00       	nop
 2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <__vector_19+0x1f6>
			SPIBUFFER.u8Count++;
			if((SPIBUFFER.u8Count)>=(SPIBUFFER.au8Buffer[0]))
			{
				SPIBUFFER.spiState = DONE_WRITE;
			}
		break;
 2a2:	00 00       	nop
 2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <__vector_19+0x1f6>
			SPIBUFFER.u8ReadReturnCount++;
			if(SPIBUFFER.u8Count == SPIBUFFER.u8ReadReturnCount)
			{
				SPIBUFFER.spiState = DONE_READ;
			}
		break;
 2a6:	00 00       	nop
		case IDLE:

		break;
	}
	//PORTB &= ~(1<<PINB1);
}
 2a8:	00 00       	nop
 2aa:	0f 90       	pop	r0
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	bf 91       	pop	r27
 2b6:	af 91       	pop	r26
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	7f 91       	pop	r23
 2be:	6f 91       	pop	r22
 2c0:	5f 91       	pop	r21
 2c2:	4f 91       	pop	r20
 2c4:	3f 91       	pop	r19
 2c6:	2f 91       	pop	r18
 2c8:	0f 90       	pop	r0
 2ca:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2ce:	0f 90       	pop	r0
 2d0:	1f 90       	pop	r1
 2d2:	18 95       	reti

000002d4 <__vector_5>:

ISR(PCINT1_vect)
{
 2d4:	1f 92       	push	r1
 2d6:	0f 92       	push	r0
 2d8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	2f 93       	push	r18
 2e2:	3f 93       	push	r19
 2e4:	4f 93       	push	r20
 2e6:	5f 93       	push	r21
 2e8:	6f 93       	push	r22
 2ea:	7f 93       	push	r23
 2ec:	8f 93       	push	r24
 2ee:	9f 93       	push	r25
 2f0:	af 93       	push	r26
 2f2:	bf 93       	push	r27
 2f4:	ef 93       	push	r30
 2f6:	ff 93       	push	r31
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
	//PORTB |= (1<<PINB1);
	SPDR0 = 0;
 300:	8e e4       	ldi	r24, 0x4E	; 78
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	fc 01       	movw	r30, r24
 306:	10 82       	st	Z, r1
	if(PIN_SPI & (1<<SPI_SS)) // SS HIGH
 308:	83 e2       	ldi	r24, 0x23	; 35
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	fc 01       	movw	r30, r24
 30e:	80 81       	ld	r24, Z
 310:	88 2f       	mov	r24, r24
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	80 71       	andi	r24, 0x10	; 16
 316:	99 27       	eor	r25, r25
 318:	89 2b       	or	r24, r25
 31a:	09 f4       	brne	.+2      	; 0x31e <__vector_5+0x4a>
 31c:	82 c0       	rjmp	.+260    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	{
		
		if(SPIBUFFER.spiState == DONE_WRITE)
 31e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <_edata+0x42>
 322:	84 30       	cpi	r24, 0x04	; 4
 324:	09 f0       	breq	.+2      	; 0x328 <__vector_5+0x54>
 326:	8d c0       	rjmp	.+282    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		{
			if(SPIBUFFER.u8Count == SPIBUFFER.au8Buffer[0]) // correct amount of bytes in buffer
 328:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <_edata+0x40>
 32c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 330:	98 17       	cp	r25, r24
 332:	09 f0       	breq	.+2      	; 0x336 <__vector_5+0x62>
 334:	86 c0       	rjmp	.+268    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			{
				if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
 336:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 33a:	68 2f       	mov	r22, r24
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	0e 94 71 06 	call	0xce2	; 0xce2 <CRC8>
 344:	88 23       	and	r24, r24
 346:	09 f0       	breq	.+2      	; 0x34a <__vector_5+0x76>
 348:	7c c0       	rjmp	.+248    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				{
					switch(SPIBUFFER.au8Buffer[1]) // command
 34a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
 34e:	88 2f       	mov	r24, r24
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	83 30       	cpi	r24, 0x03	; 3
 354:	91 05       	cpc	r25, r1
 356:	71 f1       	breq	.+92     	; 0x3b4 <__vector_5+0xe0>
 358:	84 30       	cpi	r24, 0x04	; 4
 35a:	91 05       	cpc	r25, r1
 35c:	34 f4       	brge	.+12     	; 0x36a <__vector_5+0x96>
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	91 05       	cpc	r25, r1
 362:	71 f0       	breq	.+28     	; 0x380 <__vector_5+0xac>
 364:	02 97       	sbiw	r24, 0x02	; 2
 366:	c9 f0       	breq	.+50     	; 0x39a <__vector_5+0xc6>
	{
		SPIBUFFER.u8Count = 0;
		SPIBUFFER.spiState = READY;
	}
	//PORTB &= ~(1<<PINB1);
}
 368:	6c c0       	rjmp	.+216    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		{
			if(SPIBUFFER.u8Count == SPIBUFFER.au8Buffer[0]) // correct amount of bytes in buffer
			{
				if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
				{
					switch(SPIBUFFER.au8Buffer[1]) // command
 36a:	85 30       	cpi	r24, 0x05	; 5
 36c:	91 05       	cpc	r25, r1
 36e:	09 f4       	brne	.+2      	; 0x372 <__vector_5+0x9e>
 370:	42 c0       	rjmp	.+132    	; 0x3f6 <__vector_5+0x122>
 372:	85 30       	cpi	r24, 0x05	; 5
 374:	91 05       	cpc	r25, r1
 376:	9c f1       	brlt	.+102    	; 0x3de <__vector_5+0x10a>
 378:	06 97       	sbiw	r24, 0x06	; 6
 37a:	09 f4       	brne	.+2      	; 0x37e <__vector_5+0xaa>
 37c:	48 c0       	rjmp	.+144    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	{
		SPIBUFFER.u8Count = 0;
		SPIBUFFER.spiState = READY;
	}
	//PORTB &= ~(1<<PINB1);
}
 37e:	61 c0       	rjmp	.+194    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				if(CRC8(&SPIBUFFER.au8Buffer[0],SPIBUFFER.u8Count) == 0) // CRC8 correct
				{
					switch(SPIBUFFER.au8Buffer[1]) // command
					{
						case 0x01:
						if(SPIBUFFER.u8Count == 3)
 380:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 384:	83 30       	cpi	r24, 0x03	; 3
 386:	09 f0       	breq	.+2      	; 0x38a <__vector_5+0xb6>
 388:	51 c0       	rjmp	.+162    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
						{
							enablePLED();
 38a:	0e 94 67 03 	call	0x6ce	; 0x6ce <enablePLED>
							u8Status |= (1<<STATUS_PLED);
 38e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8Status>
 392:	81 60       	ori	r24, 0x01	; 1
 394:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8Status>
						}
						break;
 398:	49 c0       	rjmp	.+146    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>

						case 0x02:
						if(SPIBUFFER.u8Count == 3)
 39a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 39e:	83 30       	cpi	r24, 0x03	; 3
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <__vector_5+0xd0>
 3a2:	46 c0       	rjmp	.+140    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
						{
							disablePLED();
 3a4:	0e 94 78 03 	call	0x6f0	; 0x6f0 <disablePLED>
							u8Status &= ~(1<<STATUS_PLED);
 3a8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8Status>
 3ac:	8e 7f       	andi	r24, 0xFE	; 254
 3ae:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8Status>
						}
						break;
 3b2:	3e c0       	rjmp	.+124    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>

						case 0x03:
						if(SPIBUFFER.u8Count == 4)
 3b4:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 3b8:	84 30       	cpi	r24, 0x04	; 4
 3ba:	e1 f5       	brne	.+120    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
						{
							if(SPIBUFFER.au8Buffer[2]>100)
 3bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 3c0:	85 36       	cpi	r24, 0x65	; 101
 3c2:	20 f0       	brcs	.+8      	; 0x3cc <__vector_5+0xf8>
							{
								u8Duty = 100;
 3c4:	84 e6       	ldi	r24, 0x64	; 100
 3c6:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8Duty>
 3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <__vector_5+0x100>
							}
							else
							{
								u8Duty = SPIBUFFER.au8Buffer[2];
 3cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 3d0:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8Duty>
							}
							setDuty(u8Duty);
 3d4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8Duty>
 3d8:	0e 94 b2 04 	call	0x964	; 0x964 <setDuty>
						}
						break;
 3dc:	2b c0       	rjmp	.+86     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
					
						case 0x04:
						if(SPIBUFFER.u8Count == 3)
 3de:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 3e2:	83 30       	cpi	r24, 0x03	; 3
 3e4:	49 f5       	brne	.+82     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
						{
							enableAudio();
 3e6:	0e 94 a3 03 	call	0x746	; 0x746 <enableAudio>
							u8Status |= (1<<STATUS_AUDIO);
 3ea:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8Status>
 3ee:	82 60       	ori	r24, 0x02	; 2
 3f0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8Status>
						}
						break;
 3f4:	21 c0       	rjmp	.+66     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>

						case 0x05:
						if(SPIBUFFER.u8Count == 3)
 3f6:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 3fa:	83 30       	cpi	r24, 0x03	; 3
 3fc:	f9 f4       	brne	.+62     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
						{
							standbyAudio();
 3fe:	0e 94 89 03 	call	0x712	; 0x712 <standbyAudio>
							u8Status &= ~(1<<STATUS_AUDIO);
 402:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8Status>
 406:	8d 7f       	andi	r24, 0xFD	; 253
 408:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8Status>
						}
						break;
 40c:	17 c0       	rjmp	.+46     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
					
						case 0x06:
						if(SPIBUFFER.u8Count == 4)
 40e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_edata+0x40>
 412:	84 30       	cpi	r24, 0x04	; 4
 414:	a9 f4       	brne	.+42     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
						{
							setVolume(SPIBUFFER.au8Buffer[2]);
 416:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 41a:	0e 94 1d 04 	call	0x83a	; 0x83a <setVolume>
						}
						break;
 41e:	00 00       	nop
 420:	0f c0       	rjmp	.+30     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			
		}
	}
	else // SS LOW
	{
		SPIBUFFER.u8Count = 0;
 422:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <_edata+0x40>
		SPIBUFFER.spiState = READY;
 426:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <_edata+0x42>
	}
	//PORTB &= ~(1<<PINB1);
}
 42a:	0b c0       	rjmp	.+22     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
						if(SPIBUFFER.u8Count == 3)
						{
							enablePLED();
							u8Status |= (1<<STATUS_PLED);
						}
						break;
 42c:	00 00       	nop
 42e:	09 c0       	rjmp	.+18     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
						if(SPIBUFFER.u8Count == 3)
						{
							disablePLED();
							u8Status &= ~(1<<STATUS_PLED);
						}
						break;
 430:	00 00       	nop
 432:	07 c0       	rjmp	.+14     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
							{
								u8Duty = SPIBUFFER.au8Buffer[2];
							}
							setDuty(u8Duty);
						}
						break;
 434:	00 00       	nop
 436:	05 c0       	rjmp	.+10     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
						if(SPIBUFFER.u8Count == 3)
						{
							enableAudio();
							u8Status |= (1<<STATUS_AUDIO);
						}
						break;
 438:	00 00       	nop
 43a:	03 c0       	rjmp	.+6      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
						if(SPIBUFFER.u8Count == 3)
						{
							standbyAudio();
							u8Status &= ~(1<<STATUS_AUDIO);
						}
						break;
 43c:	00 00       	nop
 43e:	01 c0       	rjmp	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
						case 0x06:
						if(SPIBUFFER.u8Count == 4)
						{
							setVolume(SPIBUFFER.au8Buffer[2]);
						}
						break;
 440:	00 00       	nop
	{
		SPIBUFFER.u8Count = 0;
		SPIBUFFER.spiState = READY;
	}
	//PORTB &= ~(1<<PINB1);
}
 442:	00 00       	nop
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	ff 91       	pop	r31
 44a:	ef 91       	pop	r30
 44c:	bf 91       	pop	r27
 44e:	af 91       	pop	r26
 450:	9f 91       	pop	r25
 452:	8f 91       	pop	r24
 454:	7f 91       	pop	r23
 456:	6f 91       	pop	r22
 458:	5f 91       	pop	r21
 45a:	4f 91       	pop	r20
 45c:	3f 91       	pop	r19
 45e:	2f 91       	pop	r18
 460:	0f 90       	pop	r0
 462:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 466:	0f 90       	pop	r0
 468:	1f 90       	pop	r1
 46a:	18 95       	reti

0000046c <main>:



int main(void)
{
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	1f 92       	push	r1
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
    uint8_t u8Duty = 0;
 476:	19 82       	std	Y+1, r1	; 0x01
	uint16_t i;
	
	portInit();
 478:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <portInit>
	adcInit();
 47c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <adcInit>
	initPWM(u8Duty);
 480:	89 81       	ldd	r24, Y+1	; 0x01
 482:	0e 94 42 04 	call	0x884	; 0x884 <initPWM>
	startPWM();
 486:	0e 94 a1 04 	call	0x942	; 0x942 <startPWM>
	spiInitBuffer(&SPIBUFFER);
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	0e 94 67 02 	call	0x4ce	; 0x4ce <spiInitBuffer>
	spiSlaveInit();
 492:	0e 94 87 02 	call	0x50e	; 0x50e <spiSlaveInit>
	spiPcInt();
 496:	0e 94 ba 02 	call	0x574	; 0x574 <spiPcInt>

	wait_1ms(100);
 49a:	84 e6       	ldi	r24, 0x64	; 100
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <wait_1ms>
	initAudio();
 4a2:	0e 94 33 04 	call	0x866	; 0x866 <initAudio>

	DDRB |= (1<<PINB1);
 4a6:	84 e2       	ldi	r24, 0x24	; 36
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	24 e2       	ldi	r18, 0x24	; 36
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	f9 01       	movw	r30, r18
 4b0:	20 81       	ld	r18, Z
 4b2:	22 60       	ori	r18, 0x02	; 2
 4b4:	fc 01       	movw	r30, r24
 4b6:	20 83       	st	Z, r18
	PORTB &= ~(1<<PINB1);
 4b8:	85 e2       	ldi	r24, 0x25	; 37
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	25 e2       	ldi	r18, 0x25	; 37
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	f9 01       	movw	r30, r18
 4c2:	20 81       	ld	r18, Z
 4c4:	2d 7f       	andi	r18, 0xFD	; 253
 4c6:	fc 01       	movw	r30, r24
 4c8:	20 83       	st	Z, r18
	
	sei();
 4ca:	78 94       	sei
	
	
    while (1) 
    {

    }
 4cc:	ff cf       	rjmp	.-2      	; 0x4cc <main+0x60>

000004ce <spiInitBuffer>:
#include <avr/io.h>
#include "spi.h"


void spiInitBuffer(SpiBuf_t* Buffer)
{
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	00 d0       	rcall	.+0      	; 0x4d4 <spiInitBuffer+0x6>
 4d4:	cd b7       	in	r28, 0x3d	; 61
 4d6:	de b7       	in	r29, 0x3e	; 62
 4d8:	9a 83       	std	Y+2, r25	; 0x02
 4da:	89 83       	std	Y+1, r24	; 0x01
	Buffer->u8Count = 0;
 4dc:	89 81       	ldd	r24, Y+1	; 0x01
 4de:	9a 81       	ldd	r25, Y+2	; 0x02
 4e0:	80 5c       	subi	r24, 0xC0	; 192
 4e2:	9f 4f       	sbci	r25, 0xFF	; 255
 4e4:	fc 01       	movw	r30, r24
 4e6:	10 82       	st	Z, r1
	Buffer->u8ReadReturnCount = 0;
 4e8:	89 81       	ldd	r24, Y+1	; 0x01
 4ea:	9a 81       	ldd	r25, Y+2	; 0x02
 4ec:	8f 5b       	subi	r24, 0xBF	; 191
 4ee:	9f 4f       	sbci	r25, 0xFF	; 255
 4f0:	fc 01       	movw	r30, r24
 4f2:	10 82       	st	Z, r1
	Buffer->spiState = IDLE;
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
 4f6:	9a 81       	ldd	r25, Y+2	; 0x02
 4f8:	8e 5b       	subi	r24, 0xBE	; 190
 4fa:	9f 4f       	sbci	r25, 0xFF	; 255
 4fc:	26 e0       	ldi	r18, 0x06	; 6
 4fe:	fc 01       	movw	r30, r24
 500:	20 83       	st	Z, r18
}
 502:	00 00       	nop
 504:	0f 90       	pop	r0
 506:	0f 90       	pop	r0
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	08 95       	ret

0000050e <spiSlaveInit>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiSlaveInit(void)
{
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	1f 92       	push	r1
 514:	cd b7       	in	r28, 0x3d	; 61
 516:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t ucTemp;
	SPSR0 = 0;
 518:	8d e4       	ldi	r24, 0x4D	; 77
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	fc 01       	movw	r30, r24
 51e:	10 82       	st	Z, r1
	SPCR0 = (1<<SPIE0);
 520:	8c e4       	ldi	r24, 0x4C	; 76
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	20 e8       	ldi	r18, 0x80	; 128
 526:	fc 01       	movw	r30, r24
 528:	20 83       	st	Z, r18
	
	ucTemp = SPSR0;					
 52a:	8d e4       	ldi	r24, 0x4D	; 77
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	fc 01       	movw	r30, r24
 530:	80 81       	ld	r24, Z
 532:	89 83       	std	Y+1, r24	; 0x01
	ucTemp = SPDR0;
 534:	8e e4       	ldi	r24, 0x4E	; 78
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	fc 01       	movw	r30, r24
 53a:	80 81       	ld	r24, Z
 53c:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0;
 53e:	8e e4       	ldi	r24, 0x4E	; 78
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	fc 01       	movw	r30, r24
 544:	10 82       	st	Z, r1
	
	DDRB |= (1<<PINB6);				// MISO needs to be an output
 546:	84 e2       	ldi	r24, 0x24	; 36
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	24 e2       	ldi	r18, 0x24	; 36
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	f9 01       	movw	r30, r18
 550:	20 81       	ld	r18, Z
 552:	20 64       	ori	r18, 0x40	; 64
 554:	fc 01       	movw	r30, r24
 556:	20 83       	st	Z, r18
	
	SPCR0 |= (1<<SPE0);
 558:	8c e4       	ldi	r24, 0x4C	; 76
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	2c e4       	ldi	r18, 0x4C	; 76
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	f9 01       	movw	r30, r18
 562:	20 81       	ld	r18, Z
 564:	20 64       	ori	r18, 0x40	; 64
 566:	fc 01       	movw	r30, r24
 568:	20 83       	st	Z, r18
}
 56a:	00 00       	nop
 56c:	0f 90       	pop	r0
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <spiPcInt>:
 * 
 * @param [void] no input
 * @return no return value
 *****************************************************************************/
void spiPcInt(void)
{
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
	PCICR |= (1<<PCIE1);
 57c:	88 e6       	ldi	r24, 0x68	; 104
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	28 e6       	ldi	r18, 0x68	; 104
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	f9 01       	movw	r30, r18
 586:	20 81       	ld	r18, Z
 588:	22 60       	ori	r18, 0x02	; 2
 58a:	fc 01       	movw	r30, r24
 58c:	20 83       	st	Z, r18
	PCIFR = (1<<PCIF1);
 58e:	8b e3       	ldi	r24, 0x3B	; 59
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	22 e0       	ldi	r18, 0x02	; 2
 594:	fc 01       	movw	r30, r24
 596:	20 83       	st	Z, r18
	PCMSK1 |= (1<<PCINT12);
 598:	8c e6       	ldi	r24, 0x6C	; 108
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	2c e6       	ldi	r18, 0x6C	; 108
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	f9 01       	movw	r30, r18
 5a2:	20 81       	ld	r18, Z
 5a4:	20 61       	ori	r18, 0x10	; 16
 5a6:	fc 01       	movw	r30, r24
 5a8:	20 83       	st	Z, r18
 5aa:	00 00       	nop
 5ac:	df 91       	pop	r29
 5ae:	cf 91       	pop	r28
 5b0:	08 95       	ret

000005b2 <portInit>:
 * @return 8bit analog value
 *****************************************************************************/
uint8_t adcGetValue(void)
{
	return(ADCH);
}
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62
 5ba:	8a e2       	ldi	r24, 0x2A	; 42
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	2a e2       	ldi	r18, 0x2A	; 42
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	f9 01       	movw	r30, r18
 5c4:	20 81       	ld	r18, Z
 5c6:	20 63       	ori	r18, 0x30	; 48
 5c8:	fc 01       	movw	r30, r24
 5ca:	20 83       	st	Z, r18
 5cc:	8b e2       	ldi	r24, 0x2B	; 43
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	2b e2       	ldi	r18, 0x2B	; 43
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	f9 01       	movw	r30, r18
 5d6:	20 81       	ld	r18, Z
 5d8:	20 62       	ori	r18, 0x20	; 32
 5da:	fc 01       	movw	r30, r24
 5dc:	20 83       	st	Z, r18
 5de:	8b e2       	ldi	r24, 0x2B	; 43
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	2b e2       	ldi	r18, 0x2B	; 43
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	f9 01       	movw	r30, r18
 5e8:	20 81       	ld	r18, Z
 5ea:	2f 7e       	andi	r18, 0xEF	; 239
 5ec:	fc 01       	movw	r30, r24
 5ee:	20 83       	st	Z, r18
 5f0:	8a e2       	ldi	r24, 0x2A	; 42
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	2a e2       	ldi	r18, 0x2A	; 42
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	f9 01       	movw	r30, r18
 5fa:	20 81       	ld	r18, Z
 5fc:	20 68       	ori	r18, 0x80	; 128
 5fe:	fc 01       	movw	r30, r24
 600:	20 83       	st	Z, r18
 602:	8b e2       	ldi	r24, 0x2B	; 43
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	2b e2       	ldi	r18, 0x2B	; 43
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	f9 01       	movw	r30, r18
 60c:	20 81       	ld	r18, Z
 60e:	20 68       	ori	r18, 0x80	; 128
 610:	fc 01       	movw	r30, r24
 612:	20 83       	st	Z, r18
 614:	8a e2       	ldi	r24, 0x2A	; 42
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	2a e2       	ldi	r18, 0x2A	; 42
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	f9 01       	movw	r30, r18
 61e:	20 81       	ld	r18, Z
 620:	2f 7b       	andi	r18, 0xBF	; 191
 622:	fc 01       	movw	r30, r24
 624:	20 83       	st	Z, r18
 626:	8a e2       	ldi	r24, 0x2A	; 42
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	2a e2       	ldi	r18, 0x2A	; 42
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	f9 01       	movw	r30, r18
 630:	20 81       	ld	r18, Z
 632:	2c 7f       	andi	r18, 0xFC	; 252
 634:	fc 01       	movw	r30, r24
 636:	20 83       	st	Z, r18
 638:	8b e2       	ldi	r24, 0x2B	; 43
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	2b e2       	ldi	r18, 0x2B	; 43
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	f9 01       	movw	r30, r18
 642:	20 81       	ld	r18, Z
 644:	21 60       	ori	r18, 0x01	; 1
 646:	fc 01       	movw	r30, r24
 648:	20 83       	st	Z, r18
 64a:	81 e2       	ldi	r24, 0x21	; 33
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	21 e2       	ldi	r18, 0x21	; 33
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	f9 01       	movw	r30, r18
 654:	20 81       	ld	r18, Z
 656:	2e 7f       	andi	r18, 0xFE	; 254
 658:	fc 01       	movw	r30, r24
 65a:	20 83       	st	Z, r18
 65c:	82 e2       	ldi	r24, 0x22	; 34
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	22 e2       	ldi	r18, 0x22	; 34
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	f9 01       	movw	r30, r18
 666:	20 81       	ld	r18, Z
 668:	2e 7f       	andi	r18, 0xFE	; 254
 66a:	fc 01       	movw	r30, r24
 66c:	20 83       	st	Z, r18
 66e:	8e e7       	ldi	r24, 0x7E	; 126
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	2e e7       	ldi	r18, 0x7E	; 126
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	f9 01       	movw	r30, r18
 678:	20 81       	ld	r18, Z
 67a:	21 60       	ori	r18, 0x01	; 1
 67c:	fc 01       	movw	r30, r24
 67e:	20 83       	st	Z, r18
 680:	81 e2       	ldi	r24, 0x21	; 33
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	21 e2       	ldi	r18, 0x21	; 33
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	f9 01       	movw	r30, r18
 68a:	20 81       	ld	r18, Z
 68c:	21 7f       	andi	r18, 0xF1	; 241
 68e:	fc 01       	movw	r30, r24
 690:	20 83       	st	Z, r18
 692:	82 e2       	ldi	r24, 0x22	; 34
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	22 e2       	ldi	r18, 0x22	; 34
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	f9 01       	movw	r30, r18
 69c:	20 81       	ld	r18, Z
 69e:	2e 60       	ori	r18, 0x0E	; 14
 6a0:	fc 01       	movw	r30, r24
 6a2:	20 83       	st	Z, r18
 6a4:	87 e2       	ldi	r24, 0x27	; 39
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	fc 01       	movw	r30, r24
 6aa:	80 81       	ld	r24, Z
 6ac:	87 e2       	ldi	r24, 0x27	; 39
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	fc 01       	movw	r30, r24
 6b2:	10 82       	st	Z, r1
 6b4:	88 e2       	ldi	r24, 0x28	; 40
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	fc 01       	movw	r30, r24
 6ba:	80 81       	ld	r24, Z
 6bc:	88 e2       	ldi	r24, 0x28	; 40
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	2f ef       	ldi	r18, 0xFF	; 255
 6c2:	fc 01       	movw	r30, r24
 6c4:	20 83       	st	Z, r18
 6c6:	00 00       	nop
 6c8:	df 91       	pop	r29
 6ca:	cf 91       	pop	r28
 6cc:	08 95       	ret

000006ce <enablePLED>:
 6ce:	cf 93       	push	r28
 6d0:	df 93       	push	r29
 6d2:	cd b7       	in	r28, 0x3d	; 61
 6d4:	de b7       	in	r29, 0x3e	; 62
 6d6:	8b e2       	ldi	r24, 0x2B	; 43
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	2b e2       	ldi	r18, 0x2B	; 43
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	f9 01       	movw	r30, r18
 6e0:	20 81       	ld	r18, Z
 6e2:	2f 7d       	andi	r18, 0xDF	; 223
 6e4:	fc 01       	movw	r30, r24
 6e6:	20 83       	st	Z, r18
 6e8:	00 00       	nop
 6ea:	df 91       	pop	r29
 6ec:	cf 91       	pop	r28
 6ee:	08 95       	ret

000006f0 <disablePLED>:
 6f0:	cf 93       	push	r28
 6f2:	df 93       	push	r29
 6f4:	cd b7       	in	r28, 0x3d	; 61
 6f6:	de b7       	in	r29, 0x3e	; 62
 6f8:	8b e2       	ldi	r24, 0x2B	; 43
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	2b e2       	ldi	r18, 0x2B	; 43
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	f9 01       	movw	r30, r18
 702:	20 81       	ld	r18, Z
 704:	20 62       	ori	r18, 0x20	; 32
 706:	fc 01       	movw	r30, r24
 708:	20 83       	st	Z, r18
 70a:	00 00       	nop
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
 710:	08 95       	ret

00000712 <standbyAudio>:
 712:	cf 93       	push	r28
 714:	df 93       	push	r29
 716:	cd b7       	in	r28, 0x3d	; 61
 718:	de b7       	in	r29, 0x3e	; 62
 71a:	8b e2       	ldi	r24, 0x2B	; 43
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	2b e2       	ldi	r18, 0x2B	; 43
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	f9 01       	movw	r30, r18
 724:	20 81       	ld	r18, Z
 726:	20 68       	ori	r18, 0x80	; 128
 728:	fc 01       	movw	r30, r24
 72a:	20 83       	st	Z, r18
 72c:	8a e2       	ldi	r24, 0x2A	; 42
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	2a e2       	ldi	r18, 0x2A	; 42
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	f9 01       	movw	r30, r18
 736:	20 81       	ld	r18, Z
 738:	27 60       	ori	r18, 0x07	; 7
 73a:	fc 01       	movw	r30, r24
 73c:	20 83       	st	Z, r18
 73e:	00 00       	nop
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	08 95       	ret

00000746 <enableAudio>:
 746:	cf 93       	push	r28
 748:	df 93       	push	r29
 74a:	cd b7       	in	r28, 0x3d	; 61
 74c:	de b7       	in	r29, 0x3e	; 62
 74e:	8b e2       	ldi	r24, 0x2B	; 43
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	2b e2       	ldi	r18, 0x2B	; 43
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	f9 01       	movw	r30, r18
 758:	20 81       	ld	r18, Z
 75a:	2f 77       	andi	r18, 0x7F	; 127
 75c:	fc 01       	movw	r30, r24
 75e:	20 83       	st	Z, r18
 760:	8a e2       	ldi	r24, 0x2A	; 42
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	2a e2       	ldi	r18, 0x2A	; 42
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	f9 01       	movw	r30, r18
 76a:	20 81       	ld	r18, Z
 76c:	27 60       	ori	r18, 0x07	; 7
 76e:	fc 01       	movw	r30, r24
 770:	20 83       	st	Z, r18
 772:	00 00       	nop
 774:	df 91       	pop	r29
 776:	cf 91       	pop	r28
 778:	08 95       	ret

0000077a <incVolume>:
 77a:	cf 93       	push	r28
 77c:	df 93       	push	r29
 77e:	00 d0       	rcall	.+0      	; 0x780 <incVolume+0x6>
 780:	cd b7       	in	r28, 0x3d	; 61
 782:	de b7       	in	r29, 0x3e	; 62
 784:	8a 83       	std	Y+2, r24	; 0x02
 786:	8b e2       	ldi	r24, 0x2B	; 43
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	2b e2       	ldi	r18, 0x2B	; 43
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	f9 01       	movw	r30, r18
 790:	20 81       	ld	r18, Z
 792:	20 64       	ori	r18, 0x40	; 64
 794:	fc 01       	movw	r30, r24
 796:	20 83       	st	Z, r18
 798:	19 82       	std	Y+1, r1	; 0x01
 79a:	15 c0       	rjmp	.+42     	; 0x7c6 <incVolume+0x4c>
 79c:	8a e2       	ldi	r24, 0x2A	; 42
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	2a e2       	ldi	r18, 0x2A	; 42
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	f9 01       	movw	r30, r18
 7a6:	20 81       	ld	r18, Z
 7a8:	20 64       	ori	r18, 0x40	; 64
 7aa:	fc 01       	movw	r30, r24
 7ac:	20 83       	st	Z, r18
 7ae:	8a e2       	ldi	r24, 0x2A	; 42
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	2a e2       	ldi	r18, 0x2A	; 42
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	f9 01       	movw	r30, r18
 7b8:	20 81       	ld	r18, Z
 7ba:	2f 7b       	andi	r18, 0xBF	; 191
 7bc:	fc 01       	movw	r30, r24
 7be:	20 83       	st	Z, r18
 7c0:	89 81       	ldd	r24, Y+1	; 0x01
 7c2:	8f 5f       	subi	r24, 0xFF	; 255
 7c4:	89 83       	std	Y+1, r24	; 0x01
 7c6:	99 81       	ldd	r25, Y+1	; 0x01
 7c8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ca:	98 17       	cp	r25, r24
 7cc:	38 f3       	brcs	.-50     	; 0x79c <incVolume+0x22>
 7ce:	00 00       	nop
 7d0:	0f 90       	pop	r0
 7d2:	0f 90       	pop	r0
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	08 95       	ret

000007da <decVolume>:
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	00 d0       	rcall	.+0      	; 0x7e0 <decVolume+0x6>
 7e0:	cd b7       	in	r28, 0x3d	; 61
 7e2:	de b7       	in	r29, 0x3e	; 62
 7e4:	8a 83       	std	Y+2, r24	; 0x02
 7e6:	8b e2       	ldi	r24, 0x2B	; 43
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	2b e2       	ldi	r18, 0x2B	; 43
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	f9 01       	movw	r30, r18
 7f0:	20 81       	ld	r18, Z
 7f2:	2f 7b       	andi	r18, 0xBF	; 191
 7f4:	fc 01       	movw	r30, r24
 7f6:	20 83       	st	Z, r18
 7f8:	19 82       	std	Y+1, r1	; 0x01
 7fa:	15 c0       	rjmp	.+42     	; 0x826 <decVolume+0x4c>
 7fc:	8a e2       	ldi	r24, 0x2A	; 42
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	2a e2       	ldi	r18, 0x2A	; 42
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	f9 01       	movw	r30, r18
 806:	20 81       	ld	r18, Z
 808:	20 64       	ori	r18, 0x40	; 64
 80a:	fc 01       	movw	r30, r24
 80c:	20 83       	st	Z, r18
 80e:	8a e2       	ldi	r24, 0x2A	; 42
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	2a e2       	ldi	r18, 0x2A	; 42
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	f9 01       	movw	r30, r18
 818:	20 81       	ld	r18, Z
 81a:	2f 7b       	andi	r18, 0xBF	; 191
 81c:	fc 01       	movw	r30, r24
 81e:	20 83       	st	Z, r18
 820:	89 81       	ldd	r24, Y+1	; 0x01
 822:	8f 5f       	subi	r24, 0xFF	; 255
 824:	89 83       	std	Y+1, r24	; 0x01
 826:	99 81       	ldd	r25, Y+1	; 0x01
 828:	8a 81       	ldd	r24, Y+2	; 0x02
 82a:	98 17       	cp	r25, r24
 82c:	38 f3       	brcs	.-50     	; 0x7fc <decVolume+0x22>
 82e:	00 00       	nop
 830:	0f 90       	pop	r0
 832:	0f 90       	pop	r0
 834:	df 91       	pop	r29
 836:	cf 91       	pop	r28
 838:	08 95       	ret

0000083a <setVolume>:
 83a:	cf 93       	push	r28
 83c:	df 93       	push	r29
 83e:	1f 92       	push	r1
 840:	cd b7       	in	r28, 0x3d	; 61
 842:	de b7       	in	r29, 0x3e	; 62
 844:	89 83       	std	Y+1, r24	; 0x01
 846:	89 81       	ldd	r24, Y+1	; 0x01
 848:	81 34       	cpi	r24, 0x41	; 65
 84a:	10 f0       	brcs	.+4      	; 0x850 <setVolume+0x16>
 84c:	80 e4       	ldi	r24, 0x40	; 64
 84e:	89 83       	std	Y+1, r24	; 0x01
 850:	80 e4       	ldi	r24, 0x40	; 64
 852:	0e 94 ed 03 	call	0x7da	; 0x7da <decVolume>
 856:	89 81       	ldd	r24, Y+1	; 0x01
 858:	0e 94 bd 03 	call	0x77a	; 0x77a <incVolume>
 85c:	00 00       	nop
 85e:	0f 90       	pop	r0
 860:	df 91       	pop	r29
 862:	cf 91       	pop	r28
 864:	08 95       	ret

00000866 <initAudio>:
 866:	cf 93       	push	r28
 868:	df 93       	push	r29
 86a:	cd b7       	in	r28, 0x3d	; 61
 86c:	de b7       	in	r29, 0x3e	; 62
 86e:	0e 94 a3 03 	call	0x746	; 0x746 <enableAudio>
 872:	80 e4       	ldi	r24, 0x40	; 64
 874:	0e 94 ed 03 	call	0x7da	; 0x7da <decVolume>
 878:	0e 94 89 03 	call	0x712	; 0x712 <standbyAudio>
 87c:	00 00       	nop
 87e:	df 91       	pop	r29
 880:	cf 91       	pop	r28
 882:	08 95       	ret

00000884 <initPWM>:
 884:	8f 92       	push	r8
 886:	9f 92       	push	r9
 888:	af 92       	push	r10
 88a:	bf 92       	push	r11
 88c:	cf 92       	push	r12
 88e:	df 92       	push	r13
 890:	ef 92       	push	r14
 892:	ff 92       	push	r15
 894:	0f 93       	push	r16
 896:	1f 93       	push	r17
 898:	cf 93       	push	r28
 89a:	df 93       	push	r29
 89c:	1f 92       	push	r1
 89e:	cd b7       	in	r28, 0x3d	; 61
 8a0:	de b7       	in	r29, 0x3e	; 62
 8a2:	89 83       	std	Y+1, r24	; 0x01
 8a4:	89 81       	ldd	r24, Y+1	; 0x01
 8a6:	85 36       	cpi	r24, 0x65	; 101
 8a8:	10 f0       	brcs	.+4      	; 0x8ae <initPWM+0x2a>
 8aa:	84 e6       	ldi	r24, 0x64	; 100
 8ac:	89 83       	std	Y+1, r24	; 0x01
 8ae:	80 e8       	ldi	r24, 0x80	; 128
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	22 e2       	ldi	r18, 0x22	; 34
 8b4:	fc 01       	movw	r30, r24
 8b6:	20 83       	st	Z, r18
 8b8:	81 e8       	ldi	r24, 0x81	; 129
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	28 e0       	ldi	r18, 0x08	; 8
 8be:	fc 01       	movw	r30, r24
 8c0:	20 83       	st	Z, r18
 8c2:	84 e8       	ldi	r24, 0x84	; 132
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	fc 01       	movw	r30, r24
 8c8:	11 82       	std	Z+1, r1	; 0x01
 8ca:	10 82       	st	Z, r1
 8cc:	0f 2e       	mov	r0, r31
 8ce:	fa e8       	ldi	r31, 0x8A	; 138
 8d0:	8f 2e       	mov	r8, r31
 8d2:	91 2c       	mov	r9, r1
 8d4:	f0 2d       	mov	r31, r0
 8d6:	89 81       	ldd	r24, Y+1	; 0x01
 8d8:	88 2f       	mov	r24, r24
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	a0 e0       	ldi	r26, 0x00	; 0
 8de:	b0 e0       	ldi	r27, 0x00	; 0
 8e0:	1f 92       	push	r1
 8e2:	1f 92       	push	r1
 8e4:	21 e0       	ldi	r18, 0x01	; 1
 8e6:	2f 93       	push	r18
 8e8:	2f ef       	ldi	r18, 0xFF	; 255
 8ea:	2f 93       	push	r18
 8ec:	a1 2c       	mov	r10, r1
 8ee:	b1 2c       	mov	r11, r1
 8f0:	65 01       	movw	r12, r10
 8f2:	14 e6       	ldi	r17, 0x64	; 100
 8f4:	e1 2e       	mov	r14, r17
 8f6:	f1 2c       	mov	r15, r1
 8f8:	00 e0       	ldi	r16, 0x00	; 0
 8fa:	10 e0       	ldi	r17, 0x00	; 0
 8fc:	20 e0       	ldi	r18, 0x00	; 0
 8fe:	30 e0       	ldi	r19, 0x00	; 0
 900:	a9 01       	movw	r20, r18
 902:	bc 01       	movw	r22, r24
 904:	cd 01       	movw	r24, r26
 906:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <Map>
 90a:	0f 90       	pop	r0
 90c:	0f 90       	pop	r0
 90e:	0f 90       	pop	r0
 910:	0f 90       	pop	r0
 912:	dc 01       	movw	r26, r24
 914:	cb 01       	movw	r24, r22
 916:	f4 01       	movw	r30, r8
 918:	91 83       	std	Z+1, r25	; 0x01
 91a:	80 83       	st	Z, r24
 91c:	8f e6       	ldi	r24, 0x6F	; 111
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	fc 01       	movw	r30, r24
 922:	10 82       	st	Z, r1
 924:	00 00       	nop
 926:	0f 90       	pop	r0
 928:	df 91       	pop	r29
 92a:	cf 91       	pop	r28
 92c:	1f 91       	pop	r17
 92e:	0f 91       	pop	r16
 930:	ff 90       	pop	r15
 932:	ef 90       	pop	r14
 934:	df 90       	pop	r13
 936:	cf 90       	pop	r12
 938:	bf 90       	pop	r11
 93a:	af 90       	pop	r10
 93c:	9f 90       	pop	r9
 93e:	8f 90       	pop	r8
 940:	08 95       	ret

00000942 <startPWM>:
 942:	cf 93       	push	r28
 944:	df 93       	push	r29
 946:	cd b7       	in	r28, 0x3d	; 61
 948:	de b7       	in	r29, 0x3e	; 62
 94a:	81 e8       	ldi	r24, 0x81	; 129
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	21 e8       	ldi	r18, 0x81	; 129
 950:	30 e0       	ldi	r19, 0x00	; 0
 952:	f9 01       	movw	r30, r18
 954:	20 81       	ld	r18, Z
 956:	21 60       	ori	r18, 0x01	; 1
 958:	fc 01       	movw	r30, r24
 95a:	20 83       	st	Z, r18
 95c:	00 00       	nop
 95e:	df 91       	pop	r29
 960:	cf 91       	pop	r28
 962:	08 95       	ret

00000964 <setDuty>:
 964:	8f 92       	push	r8
 966:	9f 92       	push	r9
 968:	af 92       	push	r10
 96a:	bf 92       	push	r11
 96c:	cf 92       	push	r12
 96e:	df 92       	push	r13
 970:	ef 92       	push	r14
 972:	ff 92       	push	r15
 974:	0f 93       	push	r16
 976:	1f 93       	push	r17
 978:	cf 93       	push	r28
 97a:	df 93       	push	r29
 97c:	1f 92       	push	r1
 97e:	cd b7       	in	r28, 0x3d	; 61
 980:	de b7       	in	r29, 0x3e	; 62
 982:	89 83       	std	Y+1, r24	; 0x01
 984:	89 81       	ldd	r24, Y+1	; 0x01
 986:	85 36       	cpi	r24, 0x65	; 101
 988:	10 f0       	brcs	.+4      	; 0x98e <setDuty+0x2a>
 98a:	84 e6       	ldi	r24, 0x64	; 100
 98c:	89 83       	std	Y+1, r24	; 0x01
 98e:	0f 2e       	mov	r0, r31
 990:	fa e8       	ldi	r31, 0x8A	; 138
 992:	8f 2e       	mov	r8, r31
 994:	91 2c       	mov	r9, r1
 996:	f0 2d       	mov	r31, r0
 998:	89 81       	ldd	r24, Y+1	; 0x01
 99a:	88 2f       	mov	r24, r24
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	a0 e0       	ldi	r26, 0x00	; 0
 9a0:	b0 e0       	ldi	r27, 0x00	; 0
 9a2:	1f 92       	push	r1
 9a4:	1f 92       	push	r1
 9a6:	21 e0       	ldi	r18, 0x01	; 1
 9a8:	2f 93       	push	r18
 9aa:	2f ef       	ldi	r18, 0xFF	; 255
 9ac:	2f 93       	push	r18
 9ae:	a1 2c       	mov	r10, r1
 9b0:	b1 2c       	mov	r11, r1
 9b2:	65 01       	movw	r12, r10
 9b4:	14 e6       	ldi	r17, 0x64	; 100
 9b6:	e1 2e       	mov	r14, r17
 9b8:	f1 2c       	mov	r15, r1
 9ba:	00 e0       	ldi	r16, 0x00	; 0
 9bc:	10 e0       	ldi	r17, 0x00	; 0
 9be:	20 e0       	ldi	r18, 0x00	; 0
 9c0:	30 e0       	ldi	r19, 0x00	; 0
 9c2:	a9 01       	movw	r20, r18
 9c4:	bc 01       	movw	r22, r24
 9c6:	cd 01       	movw	r24, r26
 9c8:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <Map>
 9cc:	0f 90       	pop	r0
 9ce:	0f 90       	pop	r0
 9d0:	0f 90       	pop	r0
 9d2:	0f 90       	pop	r0
 9d4:	dc 01       	movw	r26, r24
 9d6:	cb 01       	movw	r24, r22
 9d8:	f4 01       	movw	r30, r8
 9da:	91 83       	std	Z+1, r25	; 0x01
 9dc:	80 83       	st	Z, r24
 9de:	00 00       	nop
 9e0:	0f 90       	pop	r0
 9e2:	df 91       	pop	r29
 9e4:	cf 91       	pop	r28
 9e6:	1f 91       	pop	r17
 9e8:	0f 91       	pop	r16
 9ea:	ff 90       	pop	r15
 9ec:	ef 90       	pop	r14
 9ee:	df 90       	pop	r13
 9f0:	cf 90       	pop	r12
 9f2:	bf 90       	pop	r11
 9f4:	af 90       	pop	r10
 9f6:	9f 90       	pop	r9
 9f8:	8f 90       	pop	r8
 9fa:	08 95       	ret

000009fc <adcInit>:
 9fc:	cf 93       	push	r28
 9fe:	df 93       	push	r29
 a00:	cd b7       	in	r28, 0x3d	; 61
 a02:	de b7       	in	r29, 0x3e	; 62
 a04:	81 e2       	ldi	r24, 0x21	; 33
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	21 e2       	ldi	r18, 0x21	; 33
 a0a:	30 e0       	ldi	r19, 0x00	; 0
 a0c:	f9 01       	movw	r30, r18
 a0e:	20 81       	ld	r18, Z
 a10:	2e 7f       	andi	r18, 0xFE	; 254
 a12:	fc 01       	movw	r30, r24
 a14:	20 83       	st	Z, r18
 a16:	8e e7       	ldi	r24, 0x7E	; 126
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	2e e7       	ldi	r18, 0x7E	; 126
 a1c:	30 e0       	ldi	r19, 0x00	; 0
 a1e:	f9 01       	movw	r30, r18
 a20:	20 81       	ld	r18, Z
 a22:	21 60       	ori	r18, 0x01	; 1
 a24:	fc 01       	movw	r30, r24
 a26:	20 83       	st	Z, r18
 a28:	8c e7       	ldi	r24, 0x7C	; 124
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	20 e6       	ldi	r18, 0x60	; 96
 a2e:	fc 01       	movw	r30, r24
 a30:	20 83       	st	Z, r18
 a32:	8a e7       	ldi	r24, 0x7A	; 122
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	27 e3       	ldi	r18, 0x37	; 55
 a38:	fc 01       	movw	r30, r24
 a3a:	20 83       	st	Z, r18
 a3c:	8b e7       	ldi	r24, 0x7B	; 123
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	fc 01       	movw	r30, r24
 a42:	10 82       	st	Z, r1
 a44:	8a e7       	ldi	r24, 0x7A	; 122
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	2a e7       	ldi	r18, 0x7A	; 122
 a4a:	30 e0       	ldi	r19, 0x00	; 0
 a4c:	f9 01       	movw	r30, r18
 a4e:	20 81       	ld	r18, Z
 a50:	20 68       	ori	r18, 0x80	; 128
 a52:	fc 01       	movw	r30, r24
 a54:	20 83       	st	Z, r18
 a56:	8a e7       	ldi	r24, 0x7A	; 122
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	2a e7       	ldi	r18, 0x7A	; 122
 a5c:	30 e0       	ldi	r19, 0x00	; 0
 a5e:	f9 01       	movw	r30, r18
 a60:	20 81       	ld	r18, Z
 a62:	20 64       	ori	r18, 0x40	; 64
 a64:	fc 01       	movw	r30, r24
 a66:	20 83       	st	Z, r18
 a68:	00 00       	nop
 a6a:	df 91       	pop	r29
 a6c:	cf 91       	pop	r28
 a6e:	08 95       	ret

00000a70 <adcGetTemperature>:

uint8_t adcGetTemperature(void)
{
 a70:	af 92       	push	r10
 a72:	bf 92       	push	r11
 a74:	cf 92       	push	r12
 a76:	df 92       	push	r13
 a78:	ef 92       	push	r14
 a7a:	ff 92       	push	r15
 a7c:	0f 93       	push	r16
 a7e:	1f 93       	push	r17
 a80:	cf 93       	push	r28
 a82:	df 93       	push	r29
 a84:	00 d0       	rcall	.+0      	; 0xa86 <adcGetTemperature+0x16>
 a86:	00 d0       	rcall	.+0      	; 0xa88 <adcGetTemperature+0x18>
 a88:	cd b7       	in	r28, 0x3d	; 61
 a8a:	de b7       	in	r29, 0x3e	; 62
	int32_t s32Temp;
	
	s32Temp = Map((int32_t)ADCH,0,255,-50,450);
 a8c:	89 e7       	ldi	r24, 0x79	; 121
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	fc 01       	movw	r30, r24
 a92:	80 81       	ld	r24, Z
 a94:	88 2f       	mov	r24, r24
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	a0 e0       	ldi	r26, 0x00	; 0
 a9a:	b0 e0       	ldi	r27, 0x00	; 0
 a9c:	1f 92       	push	r1
 a9e:	1f 92       	push	r1
 aa0:	21 e0       	ldi	r18, 0x01	; 1
 aa2:	2f 93       	push	r18
 aa4:	22 ec       	ldi	r18, 0xC2	; 194
 aa6:	2f 93       	push	r18
 aa8:	0f 2e       	mov	r0, r31
 aaa:	fe ec       	ldi	r31, 0xCE	; 206
 aac:	af 2e       	mov	r10, r31
 aae:	bb 24       	eor	r11, r11
 ab0:	ba 94       	dec	r11
 ab2:	cb 2c       	mov	r12, r11
 ab4:	db 2c       	mov	r13, r11
 ab6:	f0 2d       	mov	r31, r0
 ab8:	e1 2c       	mov	r14, r1
 aba:	f1 2c       	mov	r15, r1
 abc:	87 01       	movw	r16, r14
 abe:	ea 94       	dec	r14
 ac0:	20 e0       	ldi	r18, 0x00	; 0
 ac2:	30 e0       	ldi	r19, 0x00	; 0
 ac4:	a9 01       	movw	r20, r18
 ac6:	bc 01       	movw	r22, r24
 ac8:	cd 01       	movw	r24, r26
 aca:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <Map>
 ace:	0f 90       	pop	r0
 ad0:	0f 90       	pop	r0
 ad2:	0f 90       	pop	r0
 ad4:	0f 90       	pop	r0
 ad6:	dc 01       	movw	r26, r24
 ad8:	cb 01       	movw	r24, r22
 ada:	89 83       	std	Y+1, r24	; 0x01
 adc:	9a 83       	std	Y+2, r25	; 0x02
 ade:	ab 83       	std	Y+3, r26	; 0x03
 ae0:	bc 83       	std	Y+4, r27	; 0x04
	if(s32Temp<0)
 ae2:	89 81       	ldd	r24, Y+1	; 0x01
 ae4:	9a 81       	ldd	r25, Y+2	; 0x02
 ae6:	ab 81       	ldd	r26, Y+3	; 0x03
 ae8:	bc 81       	ldd	r27, Y+4	; 0x04
 aea:	bb 23       	and	r27, r27
 aec:	2c f4       	brge	.+10     	; 0xaf8 <adcGetTemperature+0x88>
	{
		s32Temp = 0;
 aee:	19 82       	std	Y+1, r1	; 0x01
 af0:	1a 82       	std	Y+2, r1	; 0x02
 af2:	1b 82       	std	Y+3, r1	; 0x03
 af4:	1c 82       	std	Y+4, r1	; 0x04
 af6:	12 c0       	rjmp	.+36     	; 0xb1c <adcGetTemperature+0xac>
	}
	else if(s32Temp>255)
 af8:	89 81       	ldd	r24, Y+1	; 0x01
 afa:	9a 81       	ldd	r25, Y+2	; 0x02
 afc:	ab 81       	ldd	r26, Y+3	; 0x03
 afe:	bc 81       	ldd	r27, Y+4	; 0x04
 b00:	8f 3f       	cpi	r24, 0xFF	; 255
 b02:	91 05       	cpc	r25, r1
 b04:	a1 05       	cpc	r26, r1
 b06:	b1 05       	cpc	r27, r1
 b08:	49 f0       	breq	.+18     	; 0xb1c <adcGetTemperature+0xac>
 b0a:	44 f0       	brlt	.+16     	; 0xb1c <adcGetTemperature+0xac>
	{
		s32Temp = 255;
 b0c:	8f ef       	ldi	r24, 0xFF	; 255
 b0e:	90 e0       	ldi	r25, 0x00	; 0
 b10:	a0 e0       	ldi	r26, 0x00	; 0
 b12:	b0 e0       	ldi	r27, 0x00	; 0
 b14:	89 83       	std	Y+1, r24	; 0x01
 b16:	9a 83       	std	Y+2, r25	; 0x02
 b18:	ab 83       	std	Y+3, r26	; 0x03
 b1a:	bc 83       	std	Y+4, r27	; 0x04
	}
	return (uint8_t)s32Temp;
 b1c:	89 81       	ldd	r24, Y+1	; 0x01
}
 b1e:	0f 90       	pop	r0
 b20:	0f 90       	pop	r0
 b22:	0f 90       	pop	r0
 b24:	0f 90       	pop	r0
 b26:	df 91       	pop	r29
 b28:	cf 91       	pop	r28
 b2a:	1f 91       	pop	r17
 b2c:	0f 91       	pop	r16
 b2e:	ff 90       	pop	r15
 b30:	ef 90       	pop	r14
 b32:	df 90       	pop	r13
 b34:	cf 90       	pop	r12
 b36:	bf 90       	pop	r11
 b38:	af 90       	pop	r10
 b3a:	08 95       	ret

00000b3c <wait_1ms>:
 *
 * @param [in] uiFactor: 1ms multiplier
 * @return no return value
 *****************************************************************************/
void wait_1ms(uint16_t uiFactor)
{
 b3c:	cf 93       	push	r28
 b3e:	df 93       	push	r29
 b40:	00 d0       	rcall	.+0      	; 0xb42 <wait_1ms+0x6>
 b42:	00 d0       	rcall	.+0      	; 0xb44 <wait_1ms+0x8>
 b44:	cd b7       	in	r28, 0x3d	; 61
 b46:	de b7       	in	r29, 0x3e	; 62
 b48:	9c 83       	std	Y+4, r25	; 0x04
 b4a:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t i;
	TCCR0A = (1<<WGM01);	// mode: CTC
 b4c:	84 e4       	ldi	r24, 0x44	; 68
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	22 e0       	ldi	r18, 0x02	; 2
 b52:	fc 01       	movw	r30, r24
 b54:	20 83       	st	Z, r18
	TCCR0B = 0;				// mode: CTC
 b56:	85 e4       	ldi	r24, 0x45	; 69
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	fc 01       	movw	r30, r24
 b5c:	10 82       	st	Z, r1
	TIFR0 =  (1<<OCF0A);	// only OCFA flag needs to be cleared
 b5e:	85 e3       	ldi	r24, 0x35	; 53
 b60:	90 e0       	ldi	r25, 0x00	; 0
 b62:	22 e0       	ldi	r18, 0x02	; 2
 b64:	fc 01       	movw	r30, r24
 b66:	20 83       	st	Z, r18
	TIMSK0 = 0;				// no interrupts
 b68:	8e e6       	ldi	r24, 0x6E	; 110
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	fc 01       	movw	r30, r24
 b6e:	10 82       	st	Z, r1
	TCNT0 = 0;
 b70:	86 e4       	ldi	r24, 0x46	; 70
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	fc 01       	movw	r30, r24
 b76:	10 82       	st	Z, r1
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
 b78:	87 e4       	ldi	r24, 0x47	; 71
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	2d e4       	ldi	r18, 0x4D	; 77
 b7e:	fc 01       	movw	r30, r24
 b80:	20 83       	st	Z, r18
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
 b82:	85 e4       	ldi	r24, 0x45	; 69
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	25 e4       	ldi	r18, 0x45	; 69
 b88:	30 e0       	ldi	r19, 0x00	; 0
 b8a:	f9 01       	movw	r30, r18
 b8c:	20 81       	ld	r18, Z
 b8e:	24 60       	ori	r18, 0x04	; 4
 b90:	fc 01       	movw	r30, r24
 b92:	20 83       	st	Z, r18
	
	for(i=0;i<uiFactor;i++)
 b94:	1a 82       	std	Y+2, r1	; 0x02
 b96:	19 82       	std	Y+1, r1	; 0x01
 b98:	15 c0       	rjmp	.+42     	; 0xbc4 <wait_1ms+0x88>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
 b9a:	00 00       	nop
 b9c:	85 e3       	ldi	r24, 0x35	; 53
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	fc 01       	movw	r30, r24
 ba2:	80 81       	ld	r24, Z
 ba4:	88 2f       	mov	r24, r24
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	82 70       	andi	r24, 0x02	; 2
 baa:	99 27       	eor	r25, r25
 bac:	89 2b       	or	r24, r25
 bae:	b1 f3       	breq	.-20     	; 0xb9c <wait_1ms+0x60>
		TIFR0 =  (1<<OCF0A);		// clear flag
 bb0:	85 e3       	ldi	r24, 0x35	; 53
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	22 e0       	ldi	r18, 0x02	; 2
 bb6:	fc 01       	movw	r30, r24
 bb8:	20 83       	st	Z, r18
	TCNT0 = 0;
	OCR0A = 77;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
	
	TCCR0B |= 0x04;			// set prescaler to 256 //0x04
	
	for(i=0;i<uiFactor;i++)
 bba:	89 81       	ldd	r24, Y+1	; 0x01
 bbc:	9a 81       	ldd	r25, Y+2	; 0x02
 bbe:	01 96       	adiw	r24, 0x01	; 1
 bc0:	9a 83       	std	Y+2, r25	; 0x02
 bc2:	89 83       	std	Y+1, r24	; 0x01
 bc4:	29 81       	ldd	r18, Y+1	; 0x01
 bc6:	3a 81       	ldd	r19, Y+2	; 0x02
 bc8:	8b 81       	ldd	r24, Y+3	; 0x03
 bca:	9c 81       	ldd	r25, Y+4	; 0x04
 bcc:	28 17       	cp	r18, r24
 bce:	39 07       	cpc	r19, r25
 bd0:	20 f3       	brcs	.-56     	; 0xb9a <wait_1ms+0x5e>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
		TIFR0 =  (1<<OCF0A);		// clear flag
	}
	TCCR0B &= ~(0x07);	// set prescaler to 0 (stop timer)
 bd2:	85 e4       	ldi	r24, 0x45	; 69
 bd4:	90 e0       	ldi	r25, 0x00	; 0
 bd6:	25 e4       	ldi	r18, 0x45	; 69
 bd8:	30 e0       	ldi	r19, 0x00	; 0
 bda:	f9 01       	movw	r30, r18
 bdc:	20 81       	ld	r18, Z
 bde:	28 7f       	andi	r18, 0xF8	; 248
 be0:	fc 01       	movw	r30, r24
 be2:	20 83       	st	Z, r18
}
 be4:	00 00       	nop
 be6:	0f 90       	pop	r0
 be8:	0f 90       	pop	r0
 bea:	0f 90       	pop	r0
 bec:	0f 90       	pop	r0
 bee:	df 91       	pop	r29
 bf0:	cf 91       	pop	r28
 bf2:	08 95       	ret

00000bf4 <Map>:
 * @param [in] s32OutMin: minimal value of output range
 * @param [in] s32OutMax: maximal value of output range
 * @return data in new number range
 *****************************************************************************/
int32_t Map(int32_t s32Data, int32_t s32InMin, int32_t s32InMax, int32_t s32OutMin, int32_t s32OutMax)
{
 bf4:	af 92       	push	r10
 bf6:	bf 92       	push	r11
 bf8:	cf 92       	push	r12
 bfa:	df 92       	push	r13
 bfc:	ef 92       	push	r14
 bfe:	ff 92       	push	r15
 c00:	0f 93       	push	r16
 c02:	1f 93       	push	r17
 c04:	cf 93       	push	r28
 c06:	df 93       	push	r29
 c08:	cd b7       	in	r28, 0x3d	; 61
 c0a:	de b7       	in	r29, 0x3e	; 62
 c0c:	60 97       	sbiw	r28, 0x10	; 16
 c0e:	0f b6       	in	r0, 0x3f	; 63
 c10:	f8 94       	cli
 c12:	de bf       	out	0x3e, r29	; 62
 c14:	0f be       	out	0x3f, r0	; 63
 c16:	cd bf       	out	0x3d, r28	; 61
 c18:	69 83       	std	Y+1, r22	; 0x01
 c1a:	7a 83       	std	Y+2, r23	; 0x02
 c1c:	8b 83       	std	Y+3, r24	; 0x03
 c1e:	9c 83       	std	Y+4, r25	; 0x04
 c20:	2d 83       	std	Y+5, r18	; 0x05
 c22:	3e 83       	std	Y+6, r19	; 0x06
 c24:	4f 83       	std	Y+7, r20	; 0x07
 c26:	58 87       	std	Y+8, r21	; 0x08
 c28:	e9 86       	std	Y+9, r14	; 0x09
 c2a:	fa 86       	std	Y+10, r15	; 0x0a
 c2c:	0b 87       	std	Y+11, r16	; 0x0b
 c2e:	1c 87       	std	Y+12, r17	; 0x0c
 c30:	ad 86       	std	Y+13, r10	; 0x0d
 c32:	be 86       	std	Y+14, r11	; 0x0e
 c34:	cf 86       	std	Y+15, r12	; 0x0f
 c36:	d8 8a       	std	Y+16, r13	; 0x10
	return((s32Data-s32InMin)*(s32OutMax-s32OutMin)/(s32InMax-s32InMin)+s32OutMin);
 c38:	29 81       	ldd	r18, Y+1	; 0x01
 c3a:	3a 81       	ldd	r19, Y+2	; 0x02
 c3c:	4b 81       	ldd	r20, Y+3	; 0x03
 c3e:	5c 81       	ldd	r21, Y+4	; 0x04
 c40:	8d 81       	ldd	r24, Y+5	; 0x05
 c42:	9e 81       	ldd	r25, Y+6	; 0x06
 c44:	af 81       	ldd	r26, Y+7	; 0x07
 c46:	b8 85       	ldd	r27, Y+8	; 0x08
 c48:	79 01       	movw	r14, r18
 c4a:	8a 01       	movw	r16, r20
 c4c:	e8 1a       	sub	r14, r24
 c4e:	f9 0a       	sbc	r15, r25
 c50:	0a 0b       	sbc	r16, r26
 c52:	1b 0b       	sbc	r17, r27
 c54:	2d 8d       	ldd	r18, Y+29	; 0x1d
 c56:	3e 8d       	ldd	r19, Y+30	; 0x1e
 c58:	4f 8d       	ldd	r20, Y+31	; 0x1f
 c5a:	58 a1       	ldd	r21, Y+32	; 0x20
 c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
 c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
 c60:	af 85       	ldd	r26, Y+15	; 0x0f
 c62:	b8 89       	ldd	r27, Y+16	; 0x10
 c64:	59 01       	movw	r10, r18
 c66:	6a 01       	movw	r12, r20
 c68:	a8 1a       	sub	r10, r24
 c6a:	b9 0a       	sbc	r11, r25
 c6c:	ca 0a       	sbc	r12, r26
 c6e:	db 0a       	sbc	r13, r27
 c70:	d6 01       	movw	r26, r12
 c72:	c5 01       	movw	r24, r10
 c74:	a8 01       	movw	r20, r16
 c76:	97 01       	movw	r18, r14
 c78:	bc 01       	movw	r22, r24
 c7a:	cd 01       	movw	r24, r26
 c7c:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__mulsi3>
 c80:	7b 01       	movw	r14, r22
 c82:	8c 01       	movw	r16, r24
 c84:	29 85       	ldd	r18, Y+9	; 0x09
 c86:	3a 85       	ldd	r19, Y+10	; 0x0a
 c88:	4b 85       	ldd	r20, Y+11	; 0x0b
 c8a:	5c 85       	ldd	r21, Y+12	; 0x0c
 c8c:	8d 81       	ldd	r24, Y+5	; 0x05
 c8e:	9e 81       	ldd	r25, Y+6	; 0x06
 c90:	af 81       	ldd	r26, Y+7	; 0x07
 c92:	b8 85       	ldd	r27, Y+8	; 0x08
 c94:	28 1b       	sub	r18, r24
 c96:	39 0b       	sbc	r19, r25
 c98:	4a 0b       	sbc	r20, r26
 c9a:	5b 0b       	sbc	r21, r27
 c9c:	c8 01       	movw	r24, r16
 c9e:	b7 01       	movw	r22, r14
 ca0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__divmodsi4>
 ca4:	da 01       	movw	r26, r20
 ca6:	c9 01       	movw	r24, r18
 ca8:	9c 01       	movw	r18, r24
 caa:	ad 01       	movw	r20, r26
 cac:	8d 85       	ldd	r24, Y+13	; 0x0d
 cae:	9e 85       	ldd	r25, Y+14	; 0x0e
 cb0:	af 85       	ldd	r26, Y+15	; 0x0f
 cb2:	b8 89       	ldd	r27, Y+16	; 0x10
 cb4:	82 0f       	add	r24, r18
 cb6:	93 1f       	adc	r25, r19
 cb8:	a4 1f       	adc	r26, r20
 cba:	b5 1f       	adc	r27, r21
}
 cbc:	bc 01       	movw	r22, r24
 cbe:	cd 01       	movw	r24, r26
 cc0:	60 96       	adiw	r28, 0x10	; 16
 cc2:	0f b6       	in	r0, 0x3f	; 63
 cc4:	f8 94       	cli
 cc6:	de bf       	out	0x3e, r29	; 62
 cc8:	0f be       	out	0x3f, r0	; 63
 cca:	cd bf       	out	0x3d, r28	; 61
 ccc:	df 91       	pop	r29
 cce:	cf 91       	pop	r28
 cd0:	1f 91       	pop	r17
 cd2:	0f 91       	pop	r16
 cd4:	ff 90       	pop	r15
 cd6:	ef 90       	pop	r14
 cd8:	df 90       	pop	r13
 cda:	cf 90       	pop	r12
 cdc:	bf 90       	pop	r11
 cde:	af 90       	pop	r10
 ce0:	08 95       	ret

00000ce2 <CRC8>:

uint8_t CRC8(uint8_t* au8Data, uint8_t u8Length)
{
 ce2:	cf 93       	push	r28
 ce4:	df 93       	push	r29
 ce6:	cd b7       	in	r28, 0x3d	; 61
 ce8:	de b7       	in	r29, 0x3e	; 62
 cea:	28 97       	sbiw	r28, 0x08	; 8
 cec:	0f b6       	in	r0, 0x3f	; 63
 cee:	f8 94       	cli
 cf0:	de bf       	out	0x3e, r29	; 62
 cf2:	0f be       	out	0x3f, r0	; 63
 cf4:	cd bf       	out	0x3d, r28	; 61
 cf6:	9f 83       	std	Y+7, r25	; 0x07
 cf8:	8e 83       	std	Y+6, r24	; 0x06
 cfa:	68 87       	std	Y+8, r22	; 0x08
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;
 cfc:	19 82       	std	Y+1, r1	; 0x01

	for(i=0;i<u8Length;i++)
 cfe:	1a 82       	std	Y+2, r1	; 0x02
 d00:	27 c0       	rjmp	.+78     	; 0xd50 <CRC8+0x6e>
	{
		u8InByte = au8Data[i];
 d02:	8a 81       	ldd	r24, Y+2	; 0x02
 d04:	88 2f       	mov	r24, r24
 d06:	90 e0       	ldi	r25, 0x00	; 0
 d08:	2e 81       	ldd	r18, Y+6	; 0x06
 d0a:	3f 81       	ldd	r19, Y+7	; 0x07
 d0c:	82 0f       	add	r24, r18
 d0e:	93 1f       	adc	r25, r19
 d10:	fc 01       	movw	r30, r24
 d12:	80 81       	ld	r24, Z
 d14:	8c 83       	std	Y+4, r24	; 0x04
		for(j=0;j<8;j++)
 d16:	1b 82       	std	Y+3, r1	; 0x03
 d18:	15 c0       	rjmp	.+42     	; 0xd44 <CRC8+0x62>
		{
			u8Temp = (u8CRC^u8InByte)&0x80;
 d1a:	99 81       	ldd	r25, Y+1	; 0x01
 d1c:	8c 81       	ldd	r24, Y+4	; 0x04
 d1e:	89 27       	eor	r24, r25
 d20:	80 78       	andi	r24, 0x80	; 128
 d22:	8d 83       	std	Y+5, r24	; 0x05
			u8CRC <<= 1;
 d24:	89 81       	ldd	r24, Y+1	; 0x01
 d26:	88 0f       	add	r24, r24
 d28:	89 83       	std	Y+1, r24	; 0x01
			if(u8Temp!=0)
 d2a:	8d 81       	ldd	r24, Y+5	; 0x05
 d2c:	88 23       	and	r24, r24
 d2e:	21 f0       	breq	.+8      	; 0xd38 <CRC8+0x56>
			{
				u8CRC ^= 0x07;
 d30:	99 81       	ldd	r25, Y+1	; 0x01
 d32:	87 e0       	ldi	r24, 0x07	; 7
 d34:	89 27       	eor	r24, r25
 d36:	89 83       	std	Y+1, r24	; 0x01
			}
			u8InByte<<=1;
 d38:	8c 81       	ldd	r24, Y+4	; 0x04
 d3a:	88 0f       	add	r24, r24
 d3c:	8c 83       	std	Y+4, r24	; 0x04
	u8CRC = 0;

	for(i=0;i<u8Length;i++)
	{
		u8InByte = au8Data[i];
		for(j=0;j<8;j++)
 d3e:	8b 81       	ldd	r24, Y+3	; 0x03
 d40:	8f 5f       	subi	r24, 0xFF	; 255
 d42:	8b 83       	std	Y+3, r24	; 0x03
 d44:	8b 81       	ldd	r24, Y+3	; 0x03
 d46:	88 30       	cpi	r24, 0x08	; 8
 d48:	40 f3       	brcs	.-48     	; 0xd1a <CRC8+0x38>
{
	uint8_t u8CRC,i,j,u8Temp,u8InByte;

	u8CRC = 0;

	for(i=0;i<u8Length;i++)
 d4a:	8a 81       	ldd	r24, Y+2	; 0x02
 d4c:	8f 5f       	subi	r24, 0xFF	; 255
 d4e:	8a 83       	std	Y+2, r24	; 0x02
 d50:	9a 81       	ldd	r25, Y+2	; 0x02
 d52:	88 85       	ldd	r24, Y+8	; 0x08
 d54:	98 17       	cp	r25, r24
 d56:	a8 f2       	brcs	.-86     	; 0xd02 <CRC8+0x20>
			}
			u8InByte<<=1;
		}
	}

	return u8CRC;
 d58:	89 81       	ldd	r24, Y+1	; 0x01
}
 d5a:	28 96       	adiw	r28, 0x08	; 8
 d5c:	0f b6       	in	r0, 0x3f	; 63
 d5e:	f8 94       	cli
 d60:	de bf       	out	0x3e, r29	; 62
 d62:	0f be       	out	0x3f, r0	; 63
 d64:	cd bf       	out	0x3d, r28	; 61
 d66:	df 91       	pop	r29
 d68:	cf 91       	pop	r28
 d6a:	08 95       	ret

00000d6c <__mulsi3>:
 d6c:	db 01       	movw	r26, r22
 d6e:	8f 93       	push	r24
 d70:	9f 93       	push	r25
 d72:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__muluhisi3>
 d76:	bf 91       	pop	r27
 d78:	af 91       	pop	r26
 d7a:	a2 9f       	mul	r26, r18
 d7c:	80 0d       	add	r24, r0
 d7e:	91 1d       	adc	r25, r1
 d80:	a3 9f       	mul	r26, r19
 d82:	90 0d       	add	r25, r0
 d84:	b2 9f       	mul	r27, r18
 d86:	90 0d       	add	r25, r0
 d88:	11 24       	eor	r1, r1
 d8a:	08 95       	ret

00000d8c <__divmodsi4>:
 d8c:	05 2e       	mov	r0, r21
 d8e:	97 fb       	bst	r25, 7
 d90:	1e f4       	brtc	.+6      	; 0xd98 <__divmodsi4+0xc>
 d92:	00 94       	com	r0
 d94:	0e 94 dd 06 	call	0xdba	; 0xdba <__negsi2>
 d98:	57 fd       	sbrc	r21, 7
 d9a:	07 d0       	rcall	.+14     	; 0xdaa <__divmodsi4_neg2>
 d9c:	0e 94 f6 06 	call	0xdec	; 0xdec <__udivmodsi4>
 da0:	07 fc       	sbrc	r0, 7
 da2:	03 d0       	rcall	.+6      	; 0xdaa <__divmodsi4_neg2>
 da4:	4e f4       	brtc	.+18     	; 0xdb8 <__divmodsi4_exit>
 da6:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__negsi2>

00000daa <__divmodsi4_neg2>:
 daa:	50 95       	com	r21
 dac:	40 95       	com	r20
 dae:	30 95       	com	r19
 db0:	21 95       	neg	r18
 db2:	3f 4f       	sbci	r19, 0xFF	; 255
 db4:	4f 4f       	sbci	r20, 0xFF	; 255
 db6:	5f 4f       	sbci	r21, 0xFF	; 255

00000db8 <__divmodsi4_exit>:
 db8:	08 95       	ret

00000dba <__negsi2>:
 dba:	90 95       	com	r25
 dbc:	80 95       	com	r24
 dbe:	70 95       	com	r23
 dc0:	61 95       	neg	r22
 dc2:	7f 4f       	sbci	r23, 0xFF	; 255
 dc4:	8f 4f       	sbci	r24, 0xFF	; 255
 dc6:	9f 4f       	sbci	r25, 0xFF	; 255
 dc8:	08 95       	ret

00000dca <__tablejump2__>:
 dca:	ee 0f       	add	r30, r30
 dcc:	ff 1f       	adc	r31, r31
 dce:	05 90       	lpm	r0, Z+
 dd0:	f4 91       	lpm	r31, Z
 dd2:	e0 2d       	mov	r30, r0
 dd4:	09 94       	ijmp

00000dd6 <__muluhisi3>:
 dd6:	0e 94 18 07 	call	0xe30	; 0xe30 <__umulhisi3>
 dda:	a5 9f       	mul	r26, r21
 ddc:	90 0d       	add	r25, r0
 dde:	b4 9f       	mul	r27, r20
 de0:	90 0d       	add	r25, r0
 de2:	a4 9f       	mul	r26, r20
 de4:	80 0d       	add	r24, r0
 de6:	91 1d       	adc	r25, r1
 de8:	11 24       	eor	r1, r1
 dea:	08 95       	ret

00000dec <__udivmodsi4>:
 dec:	a1 e2       	ldi	r26, 0x21	; 33
 dee:	1a 2e       	mov	r1, r26
 df0:	aa 1b       	sub	r26, r26
 df2:	bb 1b       	sub	r27, r27
 df4:	fd 01       	movw	r30, r26
 df6:	0d c0       	rjmp	.+26     	; 0xe12 <__udivmodsi4_ep>

00000df8 <__udivmodsi4_loop>:
 df8:	aa 1f       	adc	r26, r26
 dfa:	bb 1f       	adc	r27, r27
 dfc:	ee 1f       	adc	r30, r30
 dfe:	ff 1f       	adc	r31, r31
 e00:	a2 17       	cp	r26, r18
 e02:	b3 07       	cpc	r27, r19
 e04:	e4 07       	cpc	r30, r20
 e06:	f5 07       	cpc	r31, r21
 e08:	20 f0       	brcs	.+8      	; 0xe12 <__udivmodsi4_ep>
 e0a:	a2 1b       	sub	r26, r18
 e0c:	b3 0b       	sbc	r27, r19
 e0e:	e4 0b       	sbc	r30, r20
 e10:	f5 0b       	sbc	r31, r21

00000e12 <__udivmodsi4_ep>:
 e12:	66 1f       	adc	r22, r22
 e14:	77 1f       	adc	r23, r23
 e16:	88 1f       	adc	r24, r24
 e18:	99 1f       	adc	r25, r25
 e1a:	1a 94       	dec	r1
 e1c:	69 f7       	brne	.-38     	; 0xdf8 <__udivmodsi4_loop>
 e1e:	60 95       	com	r22
 e20:	70 95       	com	r23
 e22:	80 95       	com	r24
 e24:	90 95       	com	r25
 e26:	9b 01       	movw	r18, r22
 e28:	ac 01       	movw	r20, r24
 e2a:	bd 01       	movw	r22, r26
 e2c:	cf 01       	movw	r24, r30
 e2e:	08 95       	ret

00000e30 <__umulhisi3>:
 e30:	a2 9f       	mul	r26, r18
 e32:	b0 01       	movw	r22, r0
 e34:	b3 9f       	mul	r27, r19
 e36:	c0 01       	movw	r24, r0
 e38:	a3 9f       	mul	r26, r19
 e3a:	70 0d       	add	r23, r0
 e3c:	81 1d       	adc	r24, r1
 e3e:	11 24       	eor	r1, r1
 e40:	91 1d       	adc	r25, r1
 e42:	b2 9f       	mul	r27, r18
 e44:	70 0d       	add	r23, r0
 e46:	81 1d       	adc	r24, r1
 e48:	11 24       	eor	r1, r1
 e4a:	91 1d       	adc	r25, r1
 e4c:	08 95       	ret

00000e4e <_exit>:
 e4e:	f8 94       	cli

00000e50 <__stop_program>:
 e50:	ff cf       	rjmp	.-2      	; 0xe50 <__stop_program>
