
clusterwink_mk_ii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000999  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000079a  00000000  00000000  00000fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c8  00000000  00000000  00001783  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000298  00000000  00000000  00001c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046b  00000000  00000000  00001ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000514  00000000  00000000  0000234f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002863  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8c:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <main>:
#include <avr/io.h>
#include "utils.h"


int main(void)
{
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
    portInit();
  9c:	0e 94 62 00 	call	0xc4	; 0xc4 <portInit>
	initPWM(40);
  a0:	88 e2       	ldi	r24, 0x28	; 40
  a2:	0e 94 c2 00 	call	0x184	; 0x184 <initPWM>
	startPWM();
  a6:	0e 94 21 01 	call	0x242	; 0x242 <startPWM>
	
    while (1) 
    {
		enablePLED();
  aa:	0e 94 a0 00 	call	0x140	; 0x140 <enablePLED>
		wait_1ms(100);
  ae:	84 e6       	ldi	r24, 0x64	; 100
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 32 01 	call	0x264	; 0x264 <wait_1ms>
		disablePLED();
  b6:	0e 94 b1 00 	call	0x162	; 0x162 <disablePLED>
		wait_1ms(100);
  ba:	84 e6       	ldi	r24, 0x64	; 100
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 32 01 	call	0x264	; 0x264 <wait_1ms>
    }
  c2:	f3 cf       	rjmp	.-26     	; 0xaa <main+0x16>

000000c4 <portInit>:
 * @return 8bit analog value
 *****************************************************************************/
uint8_t adcGetValue(void)
{
	return(ADCH);
}
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	8a e2       	ldi	r24, 0x2A	; 42
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	2a e2       	ldi	r18, 0x2A	; 42
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	f9 01       	movw	r30, r18
  d6:	20 81       	ld	r18, Z
  d8:	20 63       	ori	r18, 0x30	; 48
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
  de:	8b e2       	ldi	r24, 0x2B	; 43
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	2b e2       	ldi	r18, 0x2B	; 43
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	f9 01       	movw	r30, r18
  e8:	20 81       	ld	r18, Z
  ea:	20 62       	ori	r18, 0x20	; 32
  ec:	fc 01       	movw	r30, r24
  ee:	20 83       	st	Z, r18
  f0:	8b e2       	ldi	r24, 0x2B	; 43
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	2b e2       	ldi	r18, 0x2B	; 43
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	f9 01       	movw	r30, r18
  fa:	20 81       	ld	r18, Z
  fc:	2f 7e       	andi	r18, 0xEF	; 239
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
 102:	8a e2       	ldi	r24, 0x2A	; 42
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	2a e2       	ldi	r18, 0x2A	; 42
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	f9 01       	movw	r30, r18
 10c:	20 81       	ld	r18, Z
 10e:	20 68       	ori	r18, 0x80	; 128
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
 114:	8b e2       	ldi	r24, 0x2B	; 43
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	2b e2       	ldi	r18, 0x2B	; 43
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	20 68       	ori	r18, 0x80	; 128
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
 126:	8a e2       	ldi	r24, 0x2A	; 42
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	2a e2       	ldi	r18, 0x2A	; 42
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	f9 01       	movw	r30, r18
 130:	20 81       	ld	r18, Z
 132:	2f 7b       	andi	r18, 0xBF	; 191
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18
 138:	00 00       	nop
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <enablePLED>:
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	8b e2       	ldi	r24, 0x2B	; 43
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	2b e2       	ldi	r18, 0x2B	; 43
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	f9 01       	movw	r30, r18
 152:	20 81       	ld	r18, Z
 154:	2f 7d       	andi	r18, 0xDF	; 223
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18
 15a:	00 00       	nop
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <disablePLED>:
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	8b e2       	ldi	r24, 0x2B	; 43
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	2b e2       	ldi	r18, 0x2B	; 43
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	f9 01       	movw	r30, r18
 174:	20 81       	ld	r18, Z
 176:	20 62       	ori	r18, 0x20	; 32
 178:	fc 01       	movw	r30, r24
 17a:	20 83       	st	Z, r18
 17c:	00 00       	nop
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <initPWM>:
 184:	8f 92       	push	r8
 186:	9f 92       	push	r9
 188:	af 92       	push	r10
 18a:	bf 92       	push	r11
 18c:	cf 92       	push	r12
 18e:	df 92       	push	r13
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	1f 92       	push	r1
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
 1a2:	89 83       	std	Y+1, r24	; 0x01
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	85 36       	cpi	r24, 0x65	; 101
 1a8:	10 f0       	brcs	.+4      	; 0x1ae <initPWM+0x2a>
 1aa:	84 e6       	ldi	r24, 0x64	; 100
 1ac:	89 83       	std	Y+1, r24	; 0x01
 1ae:	80 e8       	ldi	r24, 0x80	; 128
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	22 e2       	ldi	r18, 0x22	; 34
 1b4:	fc 01       	movw	r30, r24
 1b6:	20 83       	st	Z, r18
 1b8:	81 e8       	ldi	r24, 0x81	; 129
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	28 e0       	ldi	r18, 0x08	; 8
 1be:	fc 01       	movw	r30, r24
 1c0:	20 83       	st	Z, r18
 1c2:	84 e8       	ldi	r24, 0x84	; 132
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	fc 01       	movw	r30, r24
 1c8:	11 82       	std	Z+1, r1	; 0x01
 1ca:	10 82       	st	Z, r1
 1cc:	0f 2e       	mov	r0, r31
 1ce:	fa e8       	ldi	r31, 0x8A	; 138
 1d0:	8f 2e       	mov	r8, r31
 1d2:	91 2c       	mov	r9, r1
 1d4:	f0 2d       	mov	r31, r0
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	88 2f       	mov	r24, r24
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	a0 e0       	ldi	r26, 0x00	; 0
 1de:	b0 e0       	ldi	r27, 0x00	; 0
 1e0:	1f 92       	push	r1
 1e2:	1f 92       	push	r1
 1e4:	21 e0       	ldi	r18, 0x01	; 1
 1e6:	2f 93       	push	r18
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
 1ea:	2f 93       	push	r18
 1ec:	a1 2c       	mov	r10, r1
 1ee:	b1 2c       	mov	r11, r1
 1f0:	65 01       	movw	r12, r10
 1f2:	14 e6       	ldi	r17, 0x64	; 100
 1f4:	e1 2e       	mov	r14, r17
 1f6:	f1 2c       	mov	r15, r1
 1f8:	00 e0       	ldi	r16, 0x00	; 0
 1fa:	10 e0       	ldi	r17, 0x00	; 0
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	a9 01       	movw	r20, r18
 202:	bc 01       	movw	r22, r24
 204:	cd 01       	movw	r24, r26
 206:	0e 94 8e 01 	call	0x31c	; 0x31c <Map>
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	dc 01       	movw	r26, r24
 214:	cb 01       	movw	r24, r22
 216:	f4 01       	movw	r30, r8
 218:	91 83       	std	Z+1, r25	; 0x01
 21a:	80 83       	st	Z, r24
 21c:	8f e6       	ldi	r24, 0x6F	; 111
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	fc 01       	movw	r30, r24
 222:	10 82       	st	Z, r1
 224:	00 00       	nop
 226:	0f 90       	pop	r0
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	ff 90       	pop	r15
 232:	ef 90       	pop	r14
 234:	df 90       	pop	r13
 236:	cf 90       	pop	r12
 238:	bf 90       	pop	r11
 23a:	af 90       	pop	r10
 23c:	9f 90       	pop	r9
 23e:	8f 90       	pop	r8
 240:	08 95       	ret

00000242 <startPWM>:
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
 24a:	81 e8       	ldi	r24, 0x81	; 129
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	21 e8       	ldi	r18, 0x81	; 129
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	f9 01       	movw	r30, r18
 254:	20 81       	ld	r18, Z
 256:	21 60       	ori	r18, 0x01	; 1
 258:	fc 01       	movw	r30, r24
 25a:	20 83       	st	Z, r18
 25c:	00 00       	nop
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <wait_1ms>:
 *
 * @param [in] uiFactor: 1ms multiplier
 * @return no return value
 *****************************************************************************/
void wait_1ms(uint16_t uiFactor)
{
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	00 d0       	rcall	.+0      	; 0x26a <wait_1ms+0x6>
 26a:	00 d0       	rcall	.+0      	; 0x26c <wait_1ms+0x8>
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
 270:	9c 83       	std	Y+4, r25	; 0x04
 272:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t i;
	TCCR0A = (1<<WGM01);	// mode: CTC
 274:	84 e4       	ldi	r24, 0x44	; 68
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	22 e0       	ldi	r18, 0x02	; 2
 27a:	fc 01       	movw	r30, r24
 27c:	20 83       	st	Z, r18
	TCCR0B = 0;				// mode: CTC
 27e:	85 e4       	ldi	r24, 0x45	; 69
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	fc 01       	movw	r30, r24
 284:	10 82       	st	Z, r1
	TIFR0 =  (1<<OCF0A);	// only OCFA flag needs to be cleared
 286:	85 e3       	ldi	r24, 0x35	; 53
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	22 e0       	ldi	r18, 0x02	; 2
 28c:	fc 01       	movw	r30, r24
 28e:	20 83       	st	Z, r18
	TIMSK0 = 0;				// no interrupts
 290:	8e e6       	ldi	r24, 0x6E	; 110
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	fc 01       	movw	r30, r24
 296:	10 82       	st	Z, r1
	TCNT0 = 0;
 298:	86 e4       	ldi	r24, 0x46	; 70
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	fc 01       	movw	r30, r24
 29e:	10 82       	st	Z, r1
	OCR0A = 125;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
 2a0:	87 e4       	ldi	r24, 0x47	; 71
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	2d e7       	ldi	r18, 0x7D	; 125
 2a6:	fc 01       	movw	r30, r24
 2a8:	20 83       	st	Z, r18
	
	TCCR0B |= 0x03;			// set prescaler to 256 //0x04
 2aa:	85 e4       	ldi	r24, 0x45	; 69
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	25 e4       	ldi	r18, 0x45	; 69
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	f9 01       	movw	r30, r18
 2b4:	20 81       	ld	r18, Z
 2b6:	23 60       	ori	r18, 0x03	; 3
 2b8:	fc 01       	movw	r30, r24
 2ba:	20 83       	st	Z, r18
	
	for(i=0;i<uiFactor;i++)
 2bc:	1a 82       	std	Y+2, r1	; 0x02
 2be:	19 82       	std	Y+1, r1	; 0x01
 2c0:	15 c0       	rjmp	.+42     	; 0x2ec <wait_1ms+0x88>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
 2c2:	00 00       	nop
 2c4:	85 e3       	ldi	r24, 0x35	; 53
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	fc 01       	movw	r30, r24
 2ca:	80 81       	ld	r24, Z
 2cc:	88 2f       	mov	r24, r24
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	82 70       	andi	r24, 0x02	; 2
 2d2:	99 27       	eor	r25, r25
 2d4:	89 2b       	or	r24, r25
 2d6:	b1 f3       	breq	.-20     	; 0x2c4 <wait_1ms+0x60>
		TIFR0 =  (1<<OCF0A);		// clear flag
 2d8:	85 e3       	ldi	r24, 0x35	; 53
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	22 e0       	ldi	r18, 0x02	; 2
 2de:	fc 01       	movw	r30, r24
 2e0:	20 83       	st	Z, r18
	TCNT0 = 0;
	OCR0A = 125;			// used formula on page 99 in datasheet to calculate this value and prescaler for 1ms //77
	
	TCCR0B |= 0x03;			// set prescaler to 256 //0x04
	
	for(i=0;i<uiFactor;i++)
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	9a 81       	ldd	r25, Y+2	; 0x02
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	9a 83       	std	Y+2, r25	; 0x02
 2ea:	89 83       	std	Y+1, r24	; 0x01
 2ec:	29 81       	ldd	r18, Y+1	; 0x01
 2ee:	3a 81       	ldd	r19, Y+2	; 0x02
 2f0:	8b 81       	ldd	r24, Y+3	; 0x03
 2f2:	9c 81       	ldd	r25, Y+4	; 0x04
 2f4:	28 17       	cp	r18, r24
 2f6:	39 07       	cpc	r19, r25
 2f8:	20 f3       	brcs	.-56     	; 0x2c2 <wait_1ms+0x5e>
	{
		while(!(TIFR0&(1<<OCF0A)));	// poll flag
		TIFR0 =  (1<<OCF0A);		// clear flag
	}
	TCCR0B &= ~(0x07);	// set prescaler to 0 (stop timer)
 2fa:	85 e4       	ldi	r24, 0x45	; 69
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	25 e4       	ldi	r18, 0x45	; 69
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	f9 01       	movw	r30, r18
 304:	20 81       	ld	r18, Z
 306:	28 7f       	andi	r18, 0xF8	; 248
 308:	fc 01       	movw	r30, r24
 30a:	20 83       	st	Z, r18
}
 30c:	00 00       	nop
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <Map>:
 * @param [in] OutMin: minimal value of output range
 * @param [in] OutMax: maximal value of output range
 * @return data in new number range
 *****************************************************************************/
int32_t Map(int32_t lData, int32_t InMin, int32_t InMax, int32_t OutMin, int32_t OutMax)
{
 31c:	af 92       	push	r10
 31e:	bf 92       	push	r11
 320:	cf 92       	push	r12
 322:	df 92       	push	r13
 324:	ef 92       	push	r14
 326:	ff 92       	push	r15
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	60 97       	sbiw	r28, 0x10	; 16
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	cd bf       	out	0x3d, r28	; 61
 340:	69 83       	std	Y+1, r22	; 0x01
 342:	7a 83       	std	Y+2, r23	; 0x02
 344:	8b 83       	std	Y+3, r24	; 0x03
 346:	9c 83       	std	Y+4, r25	; 0x04
 348:	2d 83       	std	Y+5, r18	; 0x05
 34a:	3e 83       	std	Y+6, r19	; 0x06
 34c:	4f 83       	std	Y+7, r20	; 0x07
 34e:	58 87       	std	Y+8, r21	; 0x08
 350:	e9 86       	std	Y+9, r14	; 0x09
 352:	fa 86       	std	Y+10, r15	; 0x0a
 354:	0b 87       	std	Y+11, r16	; 0x0b
 356:	1c 87       	std	Y+12, r17	; 0x0c
 358:	ad 86       	std	Y+13, r10	; 0x0d
 35a:	be 86       	std	Y+14, r11	; 0x0e
 35c:	cf 86       	std	Y+15, r12	; 0x0f
 35e:	d8 8a       	std	Y+16, r13	; 0x10
	return((lData-InMin)*(OutMax-OutMin)/(InMax-InMin)+OutMin);
 360:	29 81       	ldd	r18, Y+1	; 0x01
 362:	3a 81       	ldd	r19, Y+2	; 0x02
 364:	4b 81       	ldd	r20, Y+3	; 0x03
 366:	5c 81       	ldd	r21, Y+4	; 0x04
 368:	8d 81       	ldd	r24, Y+5	; 0x05
 36a:	9e 81       	ldd	r25, Y+6	; 0x06
 36c:	af 81       	ldd	r26, Y+7	; 0x07
 36e:	b8 85       	ldd	r27, Y+8	; 0x08
 370:	79 01       	movw	r14, r18
 372:	8a 01       	movw	r16, r20
 374:	e8 1a       	sub	r14, r24
 376:	f9 0a       	sbc	r15, r25
 378:	0a 0b       	sbc	r16, r26
 37a:	1b 0b       	sbc	r17, r27
 37c:	2d 8d       	ldd	r18, Y+29	; 0x1d
 37e:	3e 8d       	ldd	r19, Y+30	; 0x1e
 380:	4f 8d       	ldd	r20, Y+31	; 0x1f
 382:	58 a1       	ldd	r21, Y+32	; 0x20
 384:	8d 85       	ldd	r24, Y+13	; 0x0d
 386:	9e 85       	ldd	r25, Y+14	; 0x0e
 388:	af 85       	ldd	r26, Y+15	; 0x0f
 38a:	b8 89       	ldd	r27, Y+16	; 0x10
 38c:	59 01       	movw	r10, r18
 38e:	6a 01       	movw	r12, r20
 390:	a8 1a       	sub	r10, r24
 392:	b9 0a       	sbc	r11, r25
 394:	ca 0a       	sbc	r12, r26
 396:	db 0a       	sbc	r13, r27
 398:	d6 01       	movw	r26, r12
 39a:	c5 01       	movw	r24, r10
 39c:	a8 01       	movw	r20, r16
 39e:	97 01       	movw	r18, r14
 3a0:	bc 01       	movw	r22, r24
 3a2:	cd 01       	movw	r24, r26
 3a4:	0e 94 05 02 	call	0x40a	; 0x40a <__mulsi3>
 3a8:	7b 01       	movw	r14, r22
 3aa:	8c 01       	movw	r16, r24
 3ac:	29 85       	ldd	r18, Y+9	; 0x09
 3ae:	3a 85       	ldd	r19, Y+10	; 0x0a
 3b0:	4b 85       	ldd	r20, Y+11	; 0x0b
 3b2:	5c 85       	ldd	r21, Y+12	; 0x0c
 3b4:	8d 81       	ldd	r24, Y+5	; 0x05
 3b6:	9e 81       	ldd	r25, Y+6	; 0x06
 3b8:	af 81       	ldd	r26, Y+7	; 0x07
 3ba:	b8 85       	ldd	r27, Y+8	; 0x08
 3bc:	28 1b       	sub	r18, r24
 3be:	39 0b       	sbc	r19, r25
 3c0:	4a 0b       	sbc	r20, r26
 3c2:	5b 0b       	sbc	r21, r27
 3c4:	c8 01       	movw	r24, r16
 3c6:	b7 01       	movw	r22, r14
 3c8:	0e 94 15 02 	call	0x42a	; 0x42a <__divmodsi4>
 3cc:	da 01       	movw	r26, r20
 3ce:	c9 01       	movw	r24, r18
 3d0:	9c 01       	movw	r18, r24
 3d2:	ad 01       	movw	r20, r26
 3d4:	8d 85       	ldd	r24, Y+13	; 0x0d
 3d6:	9e 85       	ldd	r25, Y+14	; 0x0e
 3d8:	af 85       	ldd	r26, Y+15	; 0x0f
 3da:	b8 89       	ldd	r27, Y+16	; 0x10
 3dc:	82 0f       	add	r24, r18
 3de:	93 1f       	adc	r25, r19
 3e0:	a4 1f       	adc	r26, r20
 3e2:	b5 1f       	adc	r27, r21
}
 3e4:	bc 01       	movw	r22, r24
 3e6:	cd 01       	movw	r24, r26
 3e8:	60 96       	adiw	r28, 0x10	; 16
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	f8 94       	cli
 3ee:	de bf       	out	0x3e, r29	; 62
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	cd bf       	out	0x3d, r28	; 61
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	1f 91       	pop	r17
 3fa:	0f 91       	pop	r16
 3fc:	ff 90       	pop	r15
 3fe:	ef 90       	pop	r14
 400:	df 90       	pop	r13
 402:	cf 90       	pop	r12
 404:	bf 90       	pop	r11
 406:	af 90       	pop	r10
 408:	08 95       	ret

0000040a <__mulsi3>:
 40a:	db 01       	movw	r26, r22
 40c:	8f 93       	push	r24
 40e:	9f 93       	push	r25
 410:	0e 94 34 02 	call	0x468	; 0x468 <__muluhisi3>
 414:	bf 91       	pop	r27
 416:	af 91       	pop	r26
 418:	a2 9f       	mul	r26, r18
 41a:	80 0d       	add	r24, r0
 41c:	91 1d       	adc	r25, r1
 41e:	a3 9f       	mul	r26, r19
 420:	90 0d       	add	r25, r0
 422:	b2 9f       	mul	r27, r18
 424:	90 0d       	add	r25, r0
 426:	11 24       	eor	r1, r1
 428:	08 95       	ret

0000042a <__divmodsi4>:
 42a:	05 2e       	mov	r0, r21
 42c:	97 fb       	bst	r25, 7
 42e:	1e f4       	brtc	.+6      	; 0x436 <__divmodsi4+0xc>
 430:	00 94       	com	r0
 432:	0e 94 2c 02 	call	0x458	; 0x458 <__negsi2>
 436:	57 fd       	sbrc	r21, 7
 438:	07 d0       	rcall	.+14     	; 0x448 <__divmodsi4_neg2>
 43a:	0e 94 3f 02 	call	0x47e	; 0x47e <__udivmodsi4>
 43e:	07 fc       	sbrc	r0, 7
 440:	03 d0       	rcall	.+6      	; 0x448 <__divmodsi4_neg2>
 442:	4e f4       	brtc	.+18     	; 0x456 <__divmodsi4_exit>
 444:	0c 94 2c 02 	jmp	0x458	; 0x458 <__negsi2>

00000448 <__divmodsi4_neg2>:
 448:	50 95       	com	r21
 44a:	40 95       	com	r20
 44c:	30 95       	com	r19
 44e:	21 95       	neg	r18
 450:	3f 4f       	sbci	r19, 0xFF	; 255
 452:	4f 4f       	sbci	r20, 0xFF	; 255
 454:	5f 4f       	sbci	r21, 0xFF	; 255

00000456 <__divmodsi4_exit>:
 456:	08 95       	ret

00000458 <__negsi2>:
 458:	90 95       	com	r25
 45a:	80 95       	com	r24
 45c:	70 95       	com	r23
 45e:	61 95       	neg	r22
 460:	7f 4f       	sbci	r23, 0xFF	; 255
 462:	8f 4f       	sbci	r24, 0xFF	; 255
 464:	9f 4f       	sbci	r25, 0xFF	; 255
 466:	08 95       	ret

00000468 <__muluhisi3>:
 468:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__umulhisi3>
 46c:	a5 9f       	mul	r26, r21
 46e:	90 0d       	add	r25, r0
 470:	b4 9f       	mul	r27, r20
 472:	90 0d       	add	r25, r0
 474:	a4 9f       	mul	r26, r20
 476:	80 0d       	add	r24, r0
 478:	91 1d       	adc	r25, r1
 47a:	11 24       	eor	r1, r1
 47c:	08 95       	ret

0000047e <__udivmodsi4>:
 47e:	a1 e2       	ldi	r26, 0x21	; 33
 480:	1a 2e       	mov	r1, r26
 482:	aa 1b       	sub	r26, r26
 484:	bb 1b       	sub	r27, r27
 486:	fd 01       	movw	r30, r26
 488:	0d c0       	rjmp	.+26     	; 0x4a4 <__udivmodsi4_ep>

0000048a <__udivmodsi4_loop>:
 48a:	aa 1f       	adc	r26, r26
 48c:	bb 1f       	adc	r27, r27
 48e:	ee 1f       	adc	r30, r30
 490:	ff 1f       	adc	r31, r31
 492:	a2 17       	cp	r26, r18
 494:	b3 07       	cpc	r27, r19
 496:	e4 07       	cpc	r30, r20
 498:	f5 07       	cpc	r31, r21
 49a:	20 f0       	brcs	.+8      	; 0x4a4 <__udivmodsi4_ep>
 49c:	a2 1b       	sub	r26, r18
 49e:	b3 0b       	sbc	r27, r19
 4a0:	e4 0b       	sbc	r30, r20
 4a2:	f5 0b       	sbc	r31, r21

000004a4 <__udivmodsi4_ep>:
 4a4:	66 1f       	adc	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	88 1f       	adc	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	1a 94       	dec	r1
 4ae:	69 f7       	brne	.-38     	; 0x48a <__udivmodsi4_loop>
 4b0:	60 95       	com	r22
 4b2:	70 95       	com	r23
 4b4:	80 95       	com	r24
 4b6:	90 95       	com	r25
 4b8:	9b 01       	movw	r18, r22
 4ba:	ac 01       	movw	r20, r24
 4bc:	bd 01       	movw	r22, r26
 4be:	cf 01       	movw	r24, r30
 4c0:	08 95       	ret

000004c2 <__umulhisi3>:
 4c2:	a2 9f       	mul	r26, r18
 4c4:	b0 01       	movw	r22, r0
 4c6:	b3 9f       	mul	r27, r19
 4c8:	c0 01       	movw	r24, r0
 4ca:	a3 9f       	mul	r26, r19
 4cc:	70 0d       	add	r23, r0
 4ce:	81 1d       	adc	r24, r1
 4d0:	11 24       	eor	r1, r1
 4d2:	91 1d       	adc	r25, r1
 4d4:	b2 9f       	mul	r27, r18
 4d6:	70 0d       	add	r23, r0
 4d8:	81 1d       	adc	r24, r1
 4da:	11 24       	eor	r1, r1
 4dc:	91 1d       	adc	r25, r1
 4de:	08 95       	ret

000004e0 <_exit>:
 4e0:	f8 94       	cli

000004e2 <__stop_program>:
 4e2:	ff cf       	rjmp	.-2      	; 0x4e2 <__stop_program>
